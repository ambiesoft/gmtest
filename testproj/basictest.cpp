#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp"

#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"






















































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"







#pragma once



















#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"









#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"





























#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"


#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






































#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"




#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"











































































































































































































































































#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"



#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"
















































#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"











































#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"


}
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"

#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\concurrencysal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sal.h"

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"




	typedef unsigned __int64  uintptr_t;


#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"






	typedef char* va_list;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"





#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"


#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"





#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"











#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"

	void __cdecl __va_start(va_list*, ...);








#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"


}
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"


extern "C++"
{
	template <typename _Ty>
	struct __vcrt_va_list_is_reference
	{
		enum : bool { __the_value = false };
	};

	template <typename _Ty>
	struct __vcrt_va_list_is_reference<_Ty&>
	{
		enum : bool { __the_value = true };
	};

	template <typename _Ty>
	struct __vcrt_va_list_is_reference<_Ty&&>
	{
		enum : bool { __the_value = true };
	};

	template <typename _Ty>
	struct __vcrt_assert_va_start_is_not_reference
	{
		static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
			"va_start argument must not have reference type and must not be parenthesized");
	};
}







#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vadefs.h"

#pragma pack(pop)
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
































#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {








#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


















#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"





#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"





#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"











#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"





#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"







#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"






	typedef unsigned __int64 size_t;
	typedef __int64          ptrdiff_t;
	typedef __int64          intptr_t;




#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


	typedef bool  __vcrt_bool;






#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"












#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"





#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


	extern "C++"
	{
		template <typename _CountofType, size_t _SizeOfArray>
		char(*__countof_helper(__unaligned _CountofType(&_Array)[_SizeOfArray]))[_SizeOfArray];


	}


#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"






#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"




#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"






#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"










#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"



#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"







#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"


	void __cdecl __security_init_cookie(void);





	void __cdecl __security_check_cookie(uintptr_t _StackCookie);
	__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie);
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

	extern uintptr_t __security_cookie;





#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime.h"
#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {











#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"




#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"










#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

















#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"









	extern "C++"
	{
		template<bool _Enable, typename _Ty>
		struct _CrtEnableIf;

		template<typename _Ty>
		struct _CrtEnableIf<true, _Ty>
		{
			typedef _Ty _Type;
		};
	}
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"


	typedef bool  __crt_bool;






#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"











#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





















#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"




















#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
















	__declspec(dllimport) void __cdecl _invalid_parameter(
		wchar_t const*,
		wchar_t const*,
		wchar_t const*,
		unsigned int,
		uintptr_t
	);
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

	__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
	__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

	__declspec(noreturn)
		__declspec(dllimport) void __cdecl _invoke_watson(
			wchar_t const* _Expression,
			wchar_t const* _FunctionName,
			wchar_t const* _FileName,
			unsigned int _LineNo,
			uintptr_t _Reserved);



















#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"















#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"








#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"

















#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"













#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"















#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"




#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"









#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"









#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"








#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"









#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"






#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"




#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"







#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"







#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"








	typedef int                           errno_t;
	typedef unsigned short                wint_t;
	typedef unsigned short                wctype_t;
	typedef long                          __time32_t;
	typedef __int64                       __time64_t;

	typedef struct __crt_locale_data_public
	{
		unsigned short const* _locale_pctype;
		int _locale_mb_cur_max;
		unsigned int _locale_lc_codepage;
	} __crt_locale_data_public;

	typedef struct __crt_locale_pointers
	{
		struct __crt_locale_data* locinfo;
		struct __crt_multibyte_data* mbcinfo;
	} __crt_locale_pointers;

	typedef __crt_locale_pointers* _locale_t;

	typedef struct _Mbstatet
	{
		unsigned long _Wchar;
		unsigned short _Byte, _State;
	} _Mbstatet;

	typedef _Mbstatet mbstate_t;



#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





	typedef __time64_t time_t;
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"




#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"


	typedef size_t rsize_t;
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"















































































































































































#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"





























































































































































































#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 2007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"

__pragma(pack(push, 8)) extern "C" {




	namespace std
	{
		typedef decltype(__nullptr) nullptr_t;
	}

	using ::std::nullptr_t;
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"





	__declspec(dllimport) int* __cdecl _errno(void);


	__declspec(dllimport) errno_t __cdecl _set_errno(int _Value);
	__declspec(dllimport) errno_t __cdecl _get_errno(int* _Value);

#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"









#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"

#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"

	__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

	__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stddef.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#pragma once






































































































































































































































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"






















#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"

#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"





#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"

#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"








#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"





#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"




#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"




#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"




#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"

#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"

#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\crtdefs.h"
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"

#pragma once





















#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"






#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"






#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"






#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"







#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"





#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"



#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"

#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xkeycheck.h"




#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"



#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"



#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"






#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"



#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


















#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"















#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"






#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"












#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"



#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"



#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"













#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"






#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"











#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"




#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"










#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"










#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"








#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"









#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"












#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"









#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"










#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"









#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"











#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"









#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"








#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"








#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"









#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"













#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"








#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"














#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"














#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"













#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"










#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"























#line 751 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


















#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


















































#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"


















#line 850 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

























#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"







#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"

#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals_core.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Ty, _Ty _Val>
	struct integral_constant {
		static constexpr _Ty value = _Val;

		using value_type = _Ty;
		using type       = integral_constant;

		constexpr operator value_type() const noexcept {
			return value;
		}

		constexpr value_type operator()() const noexcept {
			return value;
		}
	};


	template <bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	using true_type  = bool_constant<true>;
	using false_type = bool_constant<false>;


	template <bool _Test, class _Ty = void>
	struct enable_if {};

	template <class _Ty>
	struct enable_if<true, _Ty> {
		using type = _Ty;
	};

	template <bool _Test, class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;


	template <bool _Test, class _Ty1, class _Ty2>
	struct conditional {
		using type = _Ty1;
	};

	template <class _Ty1, class _Ty2>
	struct conditional<false, _Ty1, _Ty2> {
		using type = _Ty2;
	};

	template <bool _Test, class _Ty1, class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;











	template <class, class>
	constexpr bool is_same_v = false;
	template <class _Ty>
	constexpr bool is_same_v<_Ty, _Ty> = true;

	template <class _Ty1, class _Ty2>
	struct is_same : bool_constant<is_same_v<_Ty1, _Ty2>> {};
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"


	template <class _Ty>
	struct remove_const {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_const<const _Ty> {
		using type = _Ty;
	};

	template <class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;


	template <class _Ty>
	struct remove_volatile {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_volatile<volatile _Ty> {
		using type = _Ty;
	};

	template <class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;


	template <class _Ty>
	struct remove_cv {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_cv<const _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = const _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_cv<volatile _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = volatile _Fn<_Ty>;
	};

	template <class _Ty>
	struct remove_cv<const volatile _Ty> {
		using type = _Ty;

		template <template <class> class _Fn>
		using _Apply = const volatile _Fn<_Ty>;
	};

	template <class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;




































#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"
	template <class>
	constexpr bool _Is_integral = false;

	template <>
	constexpr bool _Is_integral<bool> = true;

	template <>
	constexpr bool _Is_integral<char> = true;

	template <>
	constexpr bool _Is_integral<signed char> = true;

	template <>
	constexpr bool _Is_integral<unsigned char> = true;


	template <>
	constexpr bool _Is_integral<wchar_t> = true;
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"




#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"

	template <>
	constexpr bool _Is_integral<char16_t> = true;

	template <>
	constexpr bool _Is_integral<char32_t> = true;

	template <>
	constexpr bool _Is_integral<short> = true;

	template <>
	constexpr bool _Is_integral<unsigned short> = true;

	template <>
	constexpr bool _Is_integral<int> = true;

	template <>
	constexpr bool _Is_integral<unsigned int> = true;

	template <>
	constexpr bool _Is_integral<long> = true;

	template <>
	constexpr bool _Is_integral<unsigned long> = true;

	template <>
	constexpr bool _Is_integral<long long> = true;

	template <>
	constexpr bool _Is_integral<unsigned long long> = true;
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"


	template <class _Ty>
	constexpr bool is_integral_v = _Is_integral<remove_cv_t<_Ty>>;

	template <class _Ty>
	struct is_integral : bool_constant<is_integral_v<_Ty>> {};






#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"
	template <class>
	constexpr bool _Is_floating_point =
		false;

	template <>
	constexpr bool _Is_floating_point<float> = true;

	template <>
	constexpr bool _Is_floating_point<double> = true;

	template <>
	constexpr bool _Is_floating_point<long double> = true;
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"


	template <class _Ty>
	constexpr bool is_floating_point_v =
		_Is_floating_point<remove_cv_t<_Ty>>;

	template <class _Ty>
	struct is_floating_point : bool_constant<is_floating_point_v<_Ty>> {};


	template <class _Ty>
	constexpr bool is_arithmetic_v =
		is_integral_v<_Ty> || is_floating_point_v<_Ty>;

	template <class _Ty>
	struct is_arithmetic : bool_constant<is_arithmetic_v<_Ty>> {};


	template <class _Ty>
	struct remove_reference {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_reference<_Ty&> {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_reference<_Ty&&> {
		using type = _Ty;
	};

	template <class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

	template <class _Ty>
	using _Remove_cvref_t = remove_cv_t<remove_reference_t<_Ty>>;









#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"

}


#pragma warning(pop)
#pragma pack(pop)
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtr1common"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
	using ::ptrdiff_t;
	using ::size_t;
	using max_align_t = double;

































































#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"

}

using ::std::max_align_t;



#pragma warning(pop)
#pragma pack(pop)

#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstddef"





#line 56 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"








#pragma once





__pragma(pack(push, 8)) extern "C" {











#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"



























#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"
























































































































































#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"



#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"











	__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) unsigned int __cdecl _controlfp(
			unsigned int _NewValue,
			unsigned int _Mask
		);

#pragma warning(pop)


	__declspec(dllimport) void __cdecl _set_controlfp(
		unsigned int _NewValue,
		unsigned int _Mask
	);


	__declspec(dllimport) errno_t __cdecl _controlfp_s(
		unsigned int* _CurrentState,
		unsigned int  _NewValue,
		unsigned int  _Mask
	);


	__declspec(dllimport) unsigned int __cdecl _statusfp(void);


	__declspec(dllimport) void __cdecl _fpreset(void);















	__declspec(dllimport) unsigned int __cdecl _control87(
		unsigned int _NewValue,
		unsigned int _Mask
	);













	__declspec(dllimport) int* __cdecl __fpecode(void);




	__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












	__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign);
	__declspec(dllimport) double __cdecl _chgsign(double _X);
	__declspec(dllimport) double __cdecl _scalb(double _X, long _Y);
	__declspec(dllimport) double __cdecl _logb(double _X);
	__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y);
	__declspec(dllimport) int    __cdecl _finite(double _X);
	__declspec(dllimport) int    __cdecl _isnan(double _X);
	__declspec(dllimport) int    __cdecl _fpclass(double _X);


	__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y);
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"















	__declspec(dllimport) void __cdecl fpreset(void);






























































#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"



} __pragma(pack(pop))
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\float.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cfloat"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cfloat"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\climits"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {














#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"






#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"




#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits.h"



} __pragma(pack(pop))
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\climits"

#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\climits"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\climits"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cwchar"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdio"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"







#pragma once



__pragma(pack(push, 8)) extern "C" {



#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"




#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"

#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"




#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"



#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"























#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"




#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"





#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"






#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"






	__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
	{
		static unsigned __int64 _OptionsStorage;
		return &_OptionsStorage;
	}





	__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
	{
		static unsigned __int64 _OptionsStorage;
		return &_OptionsStorage;
	}
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"



#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_stdio_config.h"



















} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {









	typedef struct _iobuf
	{
		void* _Placeholder;
	} FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(dllimport) FILE * __cdecl __acrt_iob_func(unsigned _Ix);
















	__declspec(dllimport) wint_t __cdecl fgetwc(
		FILE* _Stream
	);


	__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


	__declspec(dllimport) wint_t __cdecl fputwc(
		wchar_t _Character,
		FILE* _Stream);


	__declspec(dllimport) wint_t __cdecl _fputwchar(
		wchar_t _Character
	);


	__declspec(dllimport) wint_t __cdecl getwc(
		FILE* _Stream
	);


	__declspec(dllimport) wint_t __cdecl getwchar(void);




	__declspec(dllimport) wchar_t* __cdecl fgetws(
		wchar_t* _Buffer,
		int      _BufferCount,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl fputws(
		wchar_t const* _Buffer,
		FILE* _Stream
	);



	__declspec(dllimport) wchar_t* __cdecl _getws_s(
		wchar_t* _Buffer,
		size_t   _BufferCount
	);

	extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(wchar_t(&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(dllimport) wint_t __cdecl putwc(
		wchar_t _Character,
		FILE * _Stream
	);


	__declspec(dllimport) wint_t __cdecl putwchar(
		wchar_t _Character
	);


	__declspec(dllimport) int __cdecl _putws(
		wchar_t const* _Buffer
	);


	__declspec(dllimport) wint_t __cdecl ungetwc(
		wint_t _Character,
		FILE* _Stream
	);


	__declspec(dllimport) FILE* __cdecl _wfdopen(
		int            _FileHandle,
		wchar_t const* _Mode
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) FILE* __cdecl _wfopen(
			wchar_t const* _FileName,
			wchar_t const* _Mode
		);


	__declspec(dllimport) errno_t __cdecl _wfopen_s(
		FILE** _Stream,
		wchar_t const* _FileName,
		wchar_t const* _Mode
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) FILE* __cdecl _wfreopen(
			wchar_t const* _FileName,
			wchar_t const* _Mode,
			FILE* _OldStream
		);


	__declspec(dllimport) errno_t __cdecl _wfreopen_s(
		FILE** _Stream,
		wchar_t const* _FileName,
		wchar_t const* _Mode,
		FILE* _OldStream
	);


	__declspec(dllimport) FILE* __cdecl _wfsopen(
		wchar_t const* _FileName,
		wchar_t const* _Mode,
		int            _ShFlag
	);

	__declspec(dllimport) void __cdecl _wperror(
		wchar_t const* _ErrorMessage
	);




	__declspec(dllimport) FILE* __cdecl _wpopen(
		wchar_t const* _Command,
		wchar_t const* _Mode
	);

#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(dllimport) int __cdecl _wremove(
		wchar_t const* _FileName
	);





	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
		wchar_t const* _Directory,
		wchar_t const* _FilePrefix
	);





	__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
		wchar_t* _Buffer,
		size_t   _BufferCount
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wtmpnam_s(wchar_t(&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(wchar_t* _Buffer);
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"









	__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
		FILE * _Stream
	);


	__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
		wchar_t _Character,
		FILE* _Stream
	);


	__declspec(dllimport) wint_t __cdecl _getwc_nolock(
		FILE* _Stream
	);


	__declspec(dllimport) wint_t __cdecl _putwc_nolock(
		wchar_t _Character,
		FILE* _Stream
	);


	__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
		wint_t _Character,
		FILE* _Stream
	);





#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
















	__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
		unsigned __int64 _Options,
		FILE * _Stream,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
		unsigned __int64 _Options,
		FILE* _Stream,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
		unsigned __int64 _Options,
		FILE* _Stream,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__inline int __cdecl _vfwprintf_l(
		FILE* const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl vfwprintf(
		FILE * const _Stream,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
	}
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vfwprintf_s_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl vfwprintf_s(
		FILE * const _Stream,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
	}
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vfwprintf_p_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vfwprintf_p(
		FILE * const _Stream,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
	}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vwprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl vwprintf(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vwprintf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl vwprintf_s(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vwprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vwprintf_p(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _fwprintf_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl fwprintf(
		FILE * const _Stream,
		wchar_t const* const _Format,
		...)


#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _fwprintf_s_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl fwprintf_s(
		FILE * const _Stream,
		wchar_t const* const _Format,
		...)


#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _fwprintf_p_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _fwprintf_p(
		FILE * const _Stream,
		wchar_t const* const _Format,
		...)


#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _wprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl wprintf(
		wchar_t const* const _Format,
		...)


#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _wprintf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl wprintf_s(
		wchar_t const* const _Format,
		...)


#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _wprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _wprintf_p(
		wchar_t const* const _Format,
		...)


#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"








	__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
		unsigned __int64 _Options,
		FILE * _Stream,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__inline int __cdecl _vfwscanf_l(
		FILE* const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vfwscanf(
			(*__local_stdio_scanf_options()),
			_Stream, _Format, _Locale, _ArgList);
	}
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl vfwscanf(
		FILE * const _Stream,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
	}
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vfwscanf_s_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vfwscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Stream, _Format, _Locale, _ArgList);
	}
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl vfwscanf_s(
		FILE * const _Stream,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
	}
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__inline int __cdecl _vwscanf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
	}
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl vwscanf(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
	}
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _vwscanf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
	}
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl vwscanf_s(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
	}
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _fwscanf_l(
			FILE * const _Stream,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...)


#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl fwscanf(
			FILE * const _Stream,
			wchar_t const* const _Format,
			...)


#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _fwscanf_s_l(
		FILE * const _Stream,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl fwscanf_s(
		FILE * const _Stream,
		wchar_t const* const _Format,
		...)


#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _wscanf_l(
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...)


#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl wscanf(
			wchar_t const* const _Format,
			...)


#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _wscanf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl wscanf_s(
		wchar_t const* const _Format,
		...)


#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"















#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
		unsigned __int64 _Options,
		wchar_t* _Buffer,
		size_t           _BufferCount,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);



	__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
		unsigned __int64 _Options,
		wchar_t* _Buffer,
		size_t           _BufferCount,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);



	__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
		unsigned __int64 _Options,
		wchar_t* _Buffer,
		size_t           _BufferCount,
		size_t           _MaxCount,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);



	__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
		unsigned __int64 _Options,
		wchar_t* _Buffer,
		size_t           _BufferCount,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vsnwprintf_l(
			wchar_t* const _Buffer,
			size_t         const _BufferCount,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			va_list              _ArgList
		)


#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf(
			(*__local_stdio_printf_options()) | (1ULL << 0),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4793)



	__inline int __cdecl _vsnwprintf_s_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		size_t         const _MaxCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vsnwprintf_s(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vsnwprintf_s(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		size_t         const _MaxCount,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
	}
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(wchar_t* _Buffer, size_t _BufferCount, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(wchar_t* _Buffer, size_t _BufferCount, wchar_t const* _Format, va_list _Args);
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vsnwprintf(
			wchar_t* _Buffer,
			size_t         _BufferCount,
			wchar_t const* _Format,
			va_list        _ArgList
		)


#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
	}
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(wchar_t(&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_c_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_c(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)
	}
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl __vswprintf_l(
		wchar_t* const _Buffer,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf(
		wchar_t* const _Buffer,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
	}
#line 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl vswprintf(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_s_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf_s(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl vswprintf_s(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(wchar_t(&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_p_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf_p(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswprintf_p(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vscwprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf(
			(*__local_stdio_printf_options()) | (1ULL << 1),
			0, 0, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vscwprintf(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vscwprintf_l(_Format, 0, _ArgList);
	}
#line 1369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vscwprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int const _Result = __stdio_common_vswprintf_p(
			(*__local_stdio_printf_options()) | (1ULL << 1),
			0, 0, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vscwprintf_p(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vscwprintf_p_l(_Format, 0, _ArgList);
	}
#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl __swprintf_l(
		wchar_t* const _Buffer,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf(
		wchar_t* const _Buffer,
		wchar_t const* const _Format,
		...)


#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl swprintf(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		...)


#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)


#pragma warning(disable:4793 4996)

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(wchar_t* _Buffer, wchar_t const* _Format, _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(wchar_t* _Buffer, wchar_t const* _Format, _locale_t _Locale, va_list _Args);
#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(wchar_t* _Buffer, wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(wchar_t* _Buffer, wchar_t const* _Format, va_list _Args);
#line 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)



	__inline int __cdecl _swprintf_s_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




	__inline int __cdecl swprintf_s(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		...)


#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 1549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(wchar_t(&_Buffer)[_Size], wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf_p_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf_p(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		...)


#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf_c_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swprintf_c(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		...)


#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snwprintf_l(
			wchar_t* const _Buffer,
			size_t         const _BufferCount,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...)


#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _snwprintf(
		wchar_t* _Buffer,
		size_t         _BufferCount,
		wchar_t const* _Format,
		...)


#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _snwprintf_s_l(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		size_t         const _MaxCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _snwprintf_s(
		wchar_t* const _Buffer,
		size_t         const _BufferCount,
		size_t         const _MaxCount,
		wchar_t const* const _Format,
		...)


#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(wchar_t(&_Buffer)[_Size], size_t _BufferCount, wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__inline int __cdecl _scwprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vscwprintf_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _scwprintf(
		wchar_t const* const _Format,
		...)


#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vscwprintf_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _scwprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _scwprintf_p(
		wchar_t const* const _Format,
		...)


#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vscwprintf_p_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)



	extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int swprintf(
			wchar_t* const _Buffer,
			wchar_t const* const _Format,
			...) throw()
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress: 28719)
		_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}

	extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl vswprintf(
			wchar_t* const _Buffer,
			wchar_t const* const _Format,
			va_list              _ArgList
		) throw()
	{
#pragma warning(suppress: 28719)
		return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
	}

	extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int _swprintf_l(
			wchar_t* const _Buffer,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...) throw()
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}

	extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl _vswprintf_l(
			wchar_t* const _Buffer,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			va_list              _ArgList
		) throw()
	{
		return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}

#line 1874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)
#line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"






#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"








	__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
		unsigned __int64 _Options,
		wchar_t const* _Buffer,
		size_t           _BufferCount,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);



	__inline int __cdecl _vswscanf_l(
		wchar_t const* const _Buffer,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vswscanf(
			(*__local_stdio_scanf_options()),
			_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl vswscanf(
		wchar_t const* _Buffer,
		wchar_t const* _Format,
		va_list        _ArgList
	)


#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
	}
#line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vswscanf_s_l(
		wchar_t const* const _Buffer,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 1945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vswscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}
#line 1951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"





	__inline int __cdecl vswscanf_s(
		wchar_t const* const _Buffer,
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
	}
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(wchar_t(&_Buffer)[_Size], wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vsnwscanf_l(
			wchar_t const* const _Buffer,
			size_t         const _BufferCount,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			va_list              _ArgList
		)


#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vswscanf(
			(*__local_stdio_scanf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);
	}
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _vsnwscanf_s_l(
		wchar_t const* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		return __stdio_common_vswscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);
	}
#line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _swscanf_l(
			wchar_t const* const _Buffer,
			wchar_t const* const _Format,
			_locale_t            _Locale,
			...)


#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl swscanf(
			wchar_t const* const _Buffer,
			wchar_t const* const _Format,
			...)


#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _swscanf_s_l(
		wchar_t const* const _Buffer,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"





	__inline int __cdecl swscanf_s(
		wchar_t const* const _Buffer,
		wchar_t const* const _Format,
		...)


#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"

#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snwscanf_l(
			wchar_t const* const _Buffer,
			size_t         const _BufferCount,
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...)


#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snwscanf(
			wchar_t const* const _Buffer,
			size_t         const _BufferCount,
			wchar_t const* const _Format,
			...)


#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _snwscanf_s_l(
		wchar_t const* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



	__inline int __cdecl _snwscanf_s(
		wchar_t const* const _Buffer,
		size_t         const _BufferCount,
		wchar_t const* const _Format,
		...)


#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"




#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdio.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {
































#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

















#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	typedef __int64 fpos_t;






	__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
		FILE* _Stream,
		char*** _Base,
		char*** _Pointer,
		int** _Count
	);










	__declspec(dllimport) errno_t __cdecl clearerr_s(
		FILE* _Stream
	);


	__declspec(dllimport) errno_t __cdecl fopen_s(
		FILE** _Stream,
		char const* _FileName,
		char const* _Mode
	);



	__declspec(dllimport) size_t __cdecl fread_s(
		void* _Buffer,
		size_t _BufferSize,
		size_t _ElementSize,
		size_t _ElementCount,
		FILE* _Stream
	);


	__declspec(dllimport) errno_t __cdecl freopen_s(
		FILE** _Stream,
		char const* _FileName,
		char const* _Mode,
		FILE* _OldStream
	);


	__declspec(dllimport) char* __cdecl gets_s(
		char* _Buffer,
		rsize_t _Size
	);


	__declspec(dllimport) errno_t __cdecl tmpfile_s(
		FILE** _Stream
	);



	__declspec(dllimport) errno_t __cdecl tmpnam_s(
		char* _Buffer,
		rsize_t _Size
	);

#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(dllimport) void __cdecl clearerr(
		FILE * _Stream
	);



	__declspec(dllimport) int __cdecl fclose(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _fcloseall(void);


	__declspec(dllimport) FILE* __cdecl _fdopen(
		int         _FileHandle,
		char const* _Mode
	);


	__declspec(dllimport) int __cdecl feof(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl ferror(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl fflush(
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl fgetc(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _fgetchar(void);



	__declspec(dllimport) int __cdecl fgetpos(
		FILE* _Stream,
		fpos_t* _Position
	);



	__declspec(dllimport) char* __cdecl fgets(
		char* _Buffer,
		int   _MaxCount,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _fileno(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _flushall(void);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) FILE* __cdecl fopen(
			char const* _FileName,
			char const* _Mode
		);




	__declspec(dllimport) int __cdecl fputc(
		int   _Character,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _fputchar(
		int _Character
	);



	__declspec(dllimport) int __cdecl fputs(
		char const* _Buffer,
		FILE* _Stream
	);


	__declspec(dllimport) size_t __cdecl fread(
		void* _Buffer,
		size_t _ElementSize,
		size_t _ElementCount,
		FILE* _Stream
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) FILE* __cdecl freopen(
			char const* _FileName,
			char const* _Mode,
			FILE* _Stream
		);


	__declspec(dllimport) FILE* __cdecl _fsopen(
		char const* _FileName,
		char const* _Mode,
		int         _ShFlag
	);



	__declspec(dllimport) int __cdecl fsetpos(
		FILE* _Stream,
		fpos_t const* _Position
	);



	__declspec(dllimport) int __cdecl fseek(
		FILE* _Stream,
		long  _Offset,
		int   _Origin
	);



	__declspec(dllimport) int __cdecl _fseeki64(
		FILE* _Stream,
		__int64 _Offset,
		int     _Origin
	);



	__declspec(dllimport) long __cdecl ftell(
		FILE* _Stream
	);



	__declspec(dllimport) __int64 __cdecl _ftelli64(
		FILE* _Stream
	);


	__declspec(dllimport) size_t __cdecl fwrite(
		void const* _Buffer,
		size_t      _ElementSize,
		size_t      _ElementCount,
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl getc(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl getchar(void);


	__declspec(dllimport) int __cdecl _getmaxstdio(void);

	extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char(&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(dllimport) int __cdecl _getw(
		FILE * _Stream
	);

	__declspec(dllimport) void __cdecl perror(
		char const* _ErrorMessage
	);





	__declspec(dllimport) int __cdecl _pclose(
		FILE* _Stream
	);


	__declspec(dllimport) FILE* __cdecl _popen(
		char const* _Command,
		char const* _Mode
	);

#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__declspec(dllimport) int __cdecl putc(
		int   _Character,
		FILE * _Stream
	);


	__declspec(dllimport) int __cdecl putchar(
		int _Character
	);


	__declspec(dllimport) int __cdecl puts(
		char const* _Buffer
	);



	__declspec(dllimport) int __cdecl _putw(
		int   _Word,
		FILE* _Stream
	);

	__declspec(dllimport) int __cdecl remove(
		char const* _FileName
	);


	__declspec(dllimport) int __cdecl rename(
		char const* _OldFileName,
		char const* _NewFileName
	);

	__declspec(dllimport) int __cdecl _unlink(
		char const* _FileName
	);



	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
		__declspec(dllimport) int __cdecl unlink(
			char const* _FileName
		);

#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(dllimport) void __cdecl rewind(
		FILE * _Stream
	);


	__declspec(dllimport) int __cdecl _rmtmp(void);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) void __cdecl setbuf(
			FILE* _Stream,
			char* _Buffer
		);


	__declspec(dllimport) int __cdecl _setmaxstdio(
		int _Maximum
	);



	__declspec(dllimport) int __cdecl setvbuf(
		FILE* _Stream,
		char* _Buffer,
		int    _Mode,
		size_t _Size
	);




#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
		char const* _DirectoryName,
		char const* _FilePrefix
	);



#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) FILE * __cdecl tmpfile(void);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl tmpnam_s(char(&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl tmpnam(char* _Buffer);
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
#pragma warning(pop)



	__declspec(dllimport) int __cdecl ungetc(
		int   _Character,
		FILE * _Stream
	);








	__declspec(dllimport) void __cdecl _lock_file(
		FILE* _Stream
	);

	__declspec(dllimport) void __cdecl _unlock_file(
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl _fclose_nolock(
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl _fflush_nolock(
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl _fgetc_nolock(
		FILE* _Stream
	);



	__declspec(dllimport) int __cdecl _fputc_nolock(
		int   _Character,
		FILE* _Stream
	);


	__declspec(dllimport) size_t __cdecl _fread_nolock(
		void* _Buffer,
		size_t _ElementSize,
		size_t _ElementCount,
		FILE* _Stream
	);



	__declspec(dllimport) size_t __cdecl _fread_nolock_s(
		void* _Buffer,
		size_t _BufferSize,
		size_t _ElementSize,
		size_t _ElementCount,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _fseek_nolock(
		FILE* _Stream,
		long  _Offset,
		int   _Origin
	);


	__declspec(dllimport) int __cdecl _fseeki64_nolock(
		FILE* _Stream,
		__int64 _Offset,
		int     _Origin
	);


	__declspec(dllimport) long __cdecl _ftell_nolock(
		FILE* _Stream
	);


	__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
		FILE* _Stream
	);


	__declspec(dllimport) size_t __cdecl _fwrite_nolock(
		void const* _Buffer,
		size_t      _ElementSize,
		size_t      _ElementCount,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _getc_nolock(
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _putc_nolock(
		int   _Character,
		FILE* _Stream
	);


	__declspec(dllimport) int __cdecl _ungetc_nolock(
		int   _Character,
		FILE* _Stream
	);























#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__declspec(dllimport) int* __cdecl __p__commode(void);





#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"






#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"






	__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
		unsigned __int64 _Options,
		FILE * _Stream,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);

	__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
		unsigned __int64 _Options,
		FILE* _Stream,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
		unsigned __int64 _Options,
		FILE* _Stream,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__inline int __cdecl _vfprintf_l(
		FILE* const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl vfprintf(
		FILE * const _Stream,
		char const* const _Format,
		va_list           _ArgList
	)


#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_l(_Stream, _Format, 0, _ArgList);
	}
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vfprintf_s_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl vfprintf_s(
		FILE * const _Stream,
		char const* const _Format,
		va_list           _ArgList
	)


#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
	}
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vfprintf_p_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
	}
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vfprintf_p(
		FILE * const _Stream,
		char const* const _Format,
		va_list           _ArgList
	)


#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
	}
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vprintf_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl vprintf(
		char const* const _Format,
		va_list           _ArgList
	)


#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vprintf_s_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl vprintf_s(
		char const* const _Format,
		va_list           _ArgList
	)


#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vprintf_p_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
	}
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vprintf_p(
		char const* const _Format,
		va_list           _ArgList
	)


#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
	}
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _fprintf_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl fprintf(
		FILE * const _Stream,
		char const* const _Format,
		...)


#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(dllimport) int __cdecl _set_printf_count_output(
		int _Value
	);

	__declspec(dllimport) int __cdecl _get_printf_count_output(void);


	__inline int __cdecl _fprintf_s_l(
		FILE* const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl fprintf_s(
		FILE * const _Stream,
		char const* const _Format,
		...)


#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _fprintf_p_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _fprintf_p(
		FILE * const _Stream,
		char const* const _Format,
		...)


#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _printf_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl printf(
		char const* const _Format,
		...)


#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _printf_s_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl printf_s(
		char const* const _Format,
		...)


#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _printf_p_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _printf_p(
		char const* const _Format,
		...)


#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"







	__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
		unsigned __int64 _Options,
		FILE * _Stream,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _Arglist
	);


	__inline int __cdecl _vfscanf_l(
		FILE* const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vfscanf(
			(*__local_stdio_scanf_options()),
			_Stream, _Format, _Locale, _ArgList);
	}
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl vfscanf(
		FILE * const _Stream,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_l(_Stream, _Format, 0, _ArgList);
	}
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vfscanf_s_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vfscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Stream, _Format, _Locale, _ArgList);
	}
#line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"





	__inline int __cdecl vfscanf_s(
		FILE * const _Stream,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
	}
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscanf_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
	}
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl vscanf(
		char const* const _Format,
		va_list           _ArgList
	)


#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
	}
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscanf_s_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
	}
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl vscanf_s(
		char const* const _Format,
		va_list           _ArgList
	)


#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
	}
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _fscanf_l(
			FILE * const _Stream,
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl fscanf(
			FILE * const _Stream,
			char const* const _Format,
			...)


#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _fscanf_s_l(
		FILE * const _Stream,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl fscanf_s(
		FILE * const _Stream,
		char const* const _Format,
		...)


#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _scanf_l(
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl scanf(
			char const* const _Format,
			...)


#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _scanf_s_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl scanf_s(
		char const* const _Format,
		...)


#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"









	__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
		unsigned __int64 _Options,
		char* _Buffer,
		size_t           _BufferCount,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
		unsigned __int64 _Options,
		char* _Buffer,
		size_t           _BufferCount,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
		unsigned __int64 _Options,
		char* _Buffer,
		size_t           _BufferCount,
		size_t           _MaxCount,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
		unsigned __int64 _Options,
		char* _Buffer,
		size_t           _BufferCount,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vsnprintf_l(
			char* const _Buffer,
			size_t      const _BufferCount,
			char const* const _Format,
			_locale_t   const _Locale,
			va_list           _ArgList
		)


#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf(
			(*__local_stdio_printf_options()) | (1ULL << 0),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsnprintf(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
#pragma warning(pop)
	}
#line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"










#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl vsnprintf(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf(
			(*__local_stdio_printf_options()) | (1ULL << 1),
			_Buffer, _BufferCount, _Format, 0, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vsprintf_l(
			char* const _Buffer,
			char const* const _Format,
			_locale_t   const _Locale,
			va_list           _ArgList
		)


#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#pragma warning(pop)
	}
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl vsprintf(
			char* const _Buffer,
			char const* const _Format,
			va_list           _ArgList
		)


#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
#pragma warning(pop)
	}
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsprintf_s_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf_s(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"





	__inline int __cdecl vsprintf_s(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(char(&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsprintf_p_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf_p(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsprintf_p(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsnprintf_s_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		size_t      const _MaxCount,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list          _ArgList
	)


#line 1584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsnprintf_s(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsnprintf_s(
		char* const _Buffer,
		size_t      const _BufferCount,
		size_t      const _MaxCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
	}
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(char(&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"





	__inline int __cdecl vsnprintf_s(
		char* const _Buffer,
		size_t      const _BufferCount,
		size_t      const _MaxCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
	}
#line 1637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(char(&_Buffer)[_Size], size_t _BufferCount, char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscprintf_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf(
			(*__local_stdio_printf_options()) | (1ULL << 1),
			0, 0, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscprintf(
		char const* const _Format,
		va_list           _ArgList
	)


#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vscprintf_l(_Format, 0, _ArgList);
	}
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscprintf_p_l(
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf_p(
			(*__local_stdio_printf_options()) | (1ULL << 1),
			0, 0, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vscprintf_p(
		char const* const _Format,
		va_list           _ArgList
	)


#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vscprintf_p_l(_Format, 0, _ArgList);
	}
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vsnprintf_c_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int const _Result = __stdio_common_vsprintf(
			(*__local_stdio_printf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		return _Result < 0 ? -1 : _Result;
	}
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _vsnprintf_c(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		va_list           _ArgList
	)


#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
	}
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _sprintf_l(
			char* const _Buffer,
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl sprintf(
		char* const _Buffer,
		char const* const _Format,
		...)


#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4996)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(char* _Buffer, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(char* _Buffer, char const* _Format, va_list _Args);
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
#pragma warning(pop)



	__inline int __cdecl _sprintf_s_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"





	__inline int __cdecl sprintf_s(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl sprintf_s(char(&_Buffer)[_Size], char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _sprintf_p_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _sprintf_p(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snprintf_l(
			char* const _Buffer,
			size_t      const _BufferCount,
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"










#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl snprintf(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
		_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snprintf(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
		_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(char* _Buffer, size_t _BufferCount, char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(char* _Buffer, size_t _BufferCount, char const* _Format, va_list _Args);
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snprintf_c_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snprintf_c(
		char* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snprintf_s_l(
		char* const _Buffer,
		size_t      const _BufferCount,
		size_t      const _MaxCount,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snprintf_s(
		char* const _Buffer,
		size_t      const _BufferCount,
		size_t      const _MaxCount,
		char const* const _Format,
		...)


#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(char(&_Buffer)[_Size], size_t _BufferCount, char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _scprintf_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vscprintf_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _scprintf(
		char const* const _Format,
		...)


#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vscprintf_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _scprintf_p_l(
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _scprintf_p(
		char const* const _Format,
		...)


#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vscprintf_p(_Format, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"






	__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
		unsigned __int64 _Options,
		char const* _Buffer,
		size_t           _BufferCount,
		char const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__inline int __cdecl _vsscanf_l(
		char const* const _Buffer,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()),
			_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl vsscanf(
		char const* const _Buffer,
		char const* const _Format,
		va_list           _ArgList
	)


#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
	}
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _vsscanf_s_l(
		char const* const _Buffer,
		char const* const _Format,
		_locale_t   const _Locale,
		va_list           _ArgList
	)


#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
	}
#line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



#pragma warning(push)
#pragma warning(disable:6530)


	__inline int __cdecl vsscanf_s(
		char const* const _Buffer,
		char const* const _Format,
		va_list           _ArgList
	)


#line 2227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
	}
#line 2231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(char const (&_Buffer)[_Size], char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#pragma warning(pop)

#line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _sscanf_l(
			char const* const _Buffer,
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl sscanf(
			char const* const _Buffer,
			char const* const _Format,
			...)


#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _sscanf_s_l(
		char const* const _Buffer,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"




	__inline int __cdecl sscanf_s(
		char const* const _Buffer,
		char const* const _Format,
		...)


#line 2309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = vsscanf_s(_Buffer, _Format, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable:6530)

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snscanf_l(
			char const* const _Buffer,
			size_t      const _BufferCount,
			char const* const _Format,
			_locale_t   const _Locale,
			...)


#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

		_Result = __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _snscanf(
			char const* const _Buffer,
			size_t      const _BufferCount,
			char const* const _Format,
			...)


#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

		_Result = __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()),
			_Buffer, _BufferCount, _Format, 0, _ArgList);

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



	__inline int __cdecl _snscanf_s_l(
		char const* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		_locale_t   const _Locale,
		...)


#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

		_Result = __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Buffer, _BufferCount, _Format, _Locale, _ArgList);

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"


	__inline int __cdecl _snscanf_s(
		char const* const _Buffer,
		size_t      const _BufferCount,
		char const* const _Format,
		...)


#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

		_Result = __stdio_common_vsscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Buffer, _BufferCount, _Format, 0, _ArgList);

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 2423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

#pragma warning(pop)



#line 2429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"















#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
		__declspec(dllimport) char* __cdecl tempnam(
			char const* _Directory,
			char const* _FilePrefix
		);



#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int   __cdecl fcloseall(void);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))    __declspec(dllimport) FILE* __cdecl fdopen(int _FileHandle, char const* _Format);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fgetchar(void);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))    __declspec(dllimport) int   __cdecl fileno(FILE* _Stream);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))  __declspec(dllimport) int   __cdecl flushall(void);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fputchar(int _Ch);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))      __declspec(dllimport) int   __cdecl getw(FILE* _Stream);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))      __declspec(dllimport) int   __cdecl putw(int _Ch, FILE* _Stream);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))     __declspec(dllimport) int   __cdecl rmtmp(void);

#line 2467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
#line 2468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"



} __pragma(pack(pop))
#line 2473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdio.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdio"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )
















namespace std {
#pragma warning(push)
#pragma warning(disable : 4995) 

	using ::FILE;
	using ::_Mbstatet;

	using ::size_t;
	using ::fpos_t;
	using ::FILE;
	using ::clearerr;
	using ::fclose;
	using ::feof;
	using ::ferror;
	using ::fflush;
	using ::fgetc;
	using ::fgetpos;
	using ::fgets;
	using ::fopen;
	using ::fprintf;
	using ::fputc;
	using ::fputs;
	using ::fread;
	using ::freopen;
	using ::fscanf;
	using ::fseek;
	using ::fsetpos;
	using ::ftell;
	using ::fwrite;
	using ::getc;
	using ::getchar;
	using ::perror;
	using ::putc;
	using ::putchar;
	using ::printf;
	using ::puts;
	using ::remove;
	using ::rename;
	using ::rewind;
	using ::scanf;
	using ::setbuf;
	using ::setvbuf;
	using ::sprintf;
	using ::sscanf;
	using ::tmpfile;
	using ::tmpnam;
	using ::ungetc;
	using ::vfprintf;
	using ::vprintf;
	using ::vsprintf;

	using ::snprintf;
	using ::vsnprintf;
	using ::vfscanf;
	using ::vscanf;
	using ::vsscanf;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdio"
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdio"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cwchar"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"









#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




	__declspec(dllimport) int* __cdecl _errno(void);


	__declspec(dllimport) errno_t __cdecl _set_errno(int _Value);
	__declspec(dllimport) errno_t __cdecl _get_errno(int* _Value);

	__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


	__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value);
	__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long* _Value);
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h"















































#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h"















































#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\errno.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_string.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




	void const* __cdecl memchr(
		void const* _Buf,
		int         _Val,
		size_t      _MaxCount
	);


	int __cdecl memcmp(
		void const* _Buf1,
		void const* _Buf2,
		size_t      _Size
	);




#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_string.h"
	void* __cdecl memcpy(
		void* _Dst,
		void const* _Src,
		size_t      _Size
	);


	void* __cdecl memmove(
		void* _Dst,
		void const* _Src,
		size_t      _Size
	);



#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_string.h"
	void* __cdecl memset(
		void* _Dst,
		int    _Val,
		size_t _Size
	);


	char const* __cdecl strchr(
		char const* _Str,
		int         _Val
	);


	char const* __cdecl strrchr(
		char const* _Str,
		int         _Ch
	);


	char const* __cdecl strstr(
		char const* _Str,
		char const* _SubStr
	);



	wchar_t const* __cdecl wcschr(
		wchar_t const* _Str,
		wchar_t        _Ch
	);


	wchar_t const* __cdecl wcsrchr(
		wchar_t const* _Str,
		wchar_t        _Ch
	);



	wchar_t const* __cdecl wcsstr(
		wchar_t const* _Str,
		wchar_t const* _SubStr
	);



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {



#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h"
















	static __inline errno_t __cdecl memcpy_s(
		void* const _Destination,
		rsize_t     const _DestinationSize,
		void const* const _Source,
		rsize_t     const _SourceSize
	)
	{
		if (_SourceSize == 0)
		{
			return 0;
		}

		{ int _Expr_val = !!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
		if (_Source == 0 || _DestinationSize < _SourceSize)
		{
			memset(_Destination, 0, _DestinationSize);

			{ int _Expr_val = !!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
			{ int _Expr_val = !!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };


			return 22;
		}
#pragma warning(suppress:4996) 
		memcpy(_Destination, _Source, _SourceSize);
		return 0;
	}


	static __inline errno_t __cdecl memmove_s(
		void* const _Destination,
		rsize_t     const _DestinationSize,
		void const* const _Source,
		rsize_t     const _SourceSize
	)
	{
		if (_SourceSize == 0)
		{
			return 0;
		}

		{ int _Expr_val = !!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
		{ int _Expr_val = !!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
		{ int _Expr_val = !!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

#pragma warning(suppress:4996) 
		memmove(_Destination, _Source, _SourceSize);
		return 0;
	}

#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {











	__declspec(dllimport) errno_t __cdecl _cgetws_s(
		wchar_t* _Buffer,
		size_t   _BufferCount,
		size_t* _SizeRead
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(wchar_t(&_Buffer)[_Size], size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__declspec(dllimport) int __cdecl _cputws(
		wchar_t const* _Buffer
	);

	__declspec(dllimport) wint_t __cdecl _getwch(void);
	__declspec(dllimport) wint_t __cdecl _getwche(void);
	__declspec(dllimport) wint_t __cdecl _putwch(wchar_t _Character);
	__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t  _Character);

	__declspec(dllimport) wint_t __cdecl _getwch_nolock(void);
	__declspec(dllimport) wint_t __cdecl _getwche_nolock(void);
	__declspec(dllimport) wint_t __cdecl _putwch_nolock(wchar_t _Character);
	__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t  _Character);









	__declspec(dllimport) int __cdecl __conio_common_vcwprintf(
		unsigned __int64 _Options,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
		unsigned __int64 _Options,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
		unsigned __int64 _Options,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);


	__inline int __cdecl _vcwprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
	}
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwprintf(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return _vcwprintf_l(_Format, 0, _ArgList);
	}
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwprintf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
	}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwprintf_s(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return _vcwprintf_s_l(_Format, 0, _ArgList);
	}
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
	}
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwprintf_p(
		const wchar_t* const _Format,
		va_list              _ArgList
	)


#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return _vcwprintf_p_l(_Format, 0, _ArgList);
	}
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vcwprintf_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf(
		wchar_t const* const _Format,
		...)


#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vcwprintf_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf_s(
		wchar_t const* const _Format,
		...)


#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vcwprintf_s_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf_p_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwprintf_p(
		wchar_t const* const _Format,
		...)


#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vcwprintf_p_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"









	__declspec(dllimport) int __cdecl __conio_common_vcwscanf(
		unsigned __int64 _Options,
		wchar_t const* _Format,
		_locale_t        _Locale,
		va_list          _ArgList
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vcwscanf_l(
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			va_list              _ArgList
		)


#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return __conio_common_vcwscanf(
			(*__local_stdio_scanf_options()),
			_Format, _Locale, _ArgList);
	}
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _vcwscanf(
			wchar_t const* const _Format,
			va_list              _ArgList
		)


#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
#pragma warning(push)
#pragma warning(disable: 4996) 
		return _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)
	}
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwscanf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		va_list              _ArgList
	)


#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return __conio_common_vcwscanf(
			(*__local_stdio_scanf_options()) | (1ULL << 0),
			_Format, _Locale, _ArgList);
	}
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _vcwscanf_s(
		wchar_t const* const _Format,
		va_list              _ArgList
	)


#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		return _vcwscanf_s_l(_Format, 0, _ArgList);
	}
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _cwscanf_l(
			wchar_t const* const _Format,
			_locale_t      const _Locale,
			...)


#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vcwscanf_l(_Format, _Locale, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__inline int __cdecl _cwscanf(
			wchar_t const* const _Format,
			...)


#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

#pragma warning(push)
#pragma warning(disable: 4996) 
		_Result = _vcwscanf_l(_Format, 0, _ArgList);
#pragma warning(pop)

		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwscanf_s_l(
		wchar_t const* const _Format,
		_locale_t      const _Locale,
		...)


#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
		_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"


	__inline int __cdecl _cwscanf_s(
		wchar_t const* const _Format,
		...)


#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"
	{
		int _Result;
		va_list _ArgList;
		((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
		_Result = _vcwscanf_s_l(_Format, 0, _ArgList);
		((void)(_ArgList = (va_list)0));
		return _Result;
	}
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wconio.h"



} __pragma(pack(pop))
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {













#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"

#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"

	__declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
	__declspec(dllimport) const wctype_t* __cdecl __pwctype_func(void);







#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"





















	__declspec(dllimport) int __cdecl iswalnum(wint_t _C);
	__declspec(dllimport) int __cdecl iswalpha(wint_t _C);
	__declspec(dllimport) int __cdecl iswascii(wint_t _C);
	__declspec(dllimport) int __cdecl iswblank(wint_t _C);
	__declspec(dllimport) int __cdecl iswcntrl(wint_t _C);


	__declspec(dllimport) int __cdecl iswdigit(wint_t _C);

	__declspec(dllimport) int __cdecl iswgraph(wint_t _C);
	__declspec(dllimport) int __cdecl iswlower(wint_t _C);
	__declspec(dllimport) int __cdecl iswprint(wint_t _C);
	__declspec(dllimport) int __cdecl iswpunct(wint_t _C);
	__declspec(dllimport) int __cdecl iswspace(wint_t _C);
	__declspec(dllimport) int __cdecl iswupper(wint_t _C);
	__declspec(dllimport) int __cdecl iswxdigit(wint_t _C);
	__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C);
	__declspec(dllimport) int __cdecl __iswcsym(wint_t _C);

	__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale);


	__declspec(dllimport) wint_t __cdecl towupper(wint_t _C);
	__declspec(dllimport) wint_t __cdecl towlower(wint_t _C);
	__declspec(dllimport) int    __cdecl iswctype(wint_t _C, wctype_t _Type);

	__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale);
	__declspec(dllimport) int    __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale);



	__declspec(dllimport) int __cdecl isleadbyte(int _C);
	__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale);

	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"


















































































#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wctype.h"



} __pragma(pack(pop))
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wdirect.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
		wchar_t* _DstBuf,
		int      _SizeInWords
	);



	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
		int      _Drive,
		wchar_t* _DstBuf,
		int      _SizeInWords
	);







	__declspec(dllimport) int __cdecl _wchdir(
		wchar_t const* _Path
	);


	__declspec(dllimport) int __cdecl _wmkdir(
		wchar_t const* _Path
	);


	__declspec(dllimport) int __cdecl _wrmdir(
		wchar_t const* _Path
	);



} __pragma(pack(pop))
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"








#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_share.h"








#pragma once
















#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_share.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable:4820) 













#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"

	typedef unsigned long _fsize_t;

	struct _wfinddata32_t
	{
		unsigned   attrib;
		__time32_t time_create;
		__time32_t time_access;
		__time32_t time_write;
		_fsize_t   size;
		wchar_t    name[260];
	};

	struct _wfinddata32i64_t
	{
		unsigned   attrib;
		__time32_t time_create;
		__time32_t time_access;
		__time32_t time_write;
		__int64    size;
		wchar_t    name[260];
	};

	struct _wfinddata64i32_t
	{
		unsigned   attrib;
		__time64_t time_create;
		__time64_t time_access;
		__time64_t time_write;
		_fsize_t   size;
		wchar_t    name[260];
	};

	struct _wfinddata64_t
	{
		unsigned   attrib;
		__time64_t time_create;
		__time64_t time_access;
		__time64_t time_write;
		__int64    size;
		wchar_t    name[260];
	};


















#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"


	__declspec(dllimport) int __cdecl _waccess(
		wchar_t const* _FileName,
		int            _AccessMode
	);


	__declspec(dllimport) errno_t __cdecl _waccess_s(
		wchar_t const* _FileName,
		int            _AccessMode
	);


	__declspec(dllimport) int __cdecl _wchmod(
		wchar_t const* _FileName,
		int            _Mode
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl _wcreat(
			wchar_t const* _FileName,
			int            _PermissionMode
		);



	__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
		wchar_t const* _FileName,
		struct _wfinddata32_t* _FindData
	);



	__declspec(dllimport) int __cdecl _wfindnext32(
		intptr_t               _FindHandle,
		struct _wfinddata32_t* _FindData
	);

	__declspec(dllimport) int __cdecl _wunlink(
		wchar_t const* _FileName
	);


	__declspec(dllimport) int __cdecl _wrename(
		wchar_t const* _OldFileName,
		wchar_t const* _NewFileName
	);

	__declspec(dllimport) errno_t __cdecl _wmktemp_s(
		wchar_t* _TemplateName,
		size_t   _SizeInWords
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t(&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp(wchar_t* _TemplateName);
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"



	__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
		wchar_t const* _FileName,
		struct _wfinddata32i64_t* _FindData
	);



	__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
		wchar_t const* _FileName,
		struct _wfinddata64i32_t* _FindData
	);



	__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
		wchar_t const* _FileName,
		struct _wfinddata64_t* _FindData
	);



	__declspec(dllimport) int __cdecl _wfindnext32i64(
		intptr_t                  _FindHandle,
		struct _wfinddata32i64_t* _FindData
	);



	__declspec(dllimport) int __cdecl _wfindnext64i32(
		intptr_t                  _FindHandle,
		struct _wfinddata64i32_t* _FindData
	);



	__declspec(dllimport) int __cdecl _wfindnext64(
		intptr_t               _FindHandle,
		struct _wfinddata64_t* _FindData
	);


	__declspec(dllimport) errno_t __cdecl _wsopen_s(
		int* _FileHandle,
		wchar_t const* _FileName,
		int            _OpenFlag,
		int            _ShareFlag,
		int            _PermissionFlag
	);

	__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
		wchar_t const* _FileName,
		int            _OFlag,
		int            _ShFlag,
		int            _PMode,
		int* _PFileHandle,
		int            _BSecure
	);






	extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl _wopen(
			wchar_t const* _FileName,
			int            _OFlag,
			int            _PMode = 0
		)
	{
		int _FileHandle;

		errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
		return _Result ? -1 : _FileHandle;
	}

	extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl _wsopen(
			wchar_t const* _FileName,
			int            _OFlag,
			int            _ShFlag,
			int            _PMode = 0
		)
	{
		int _FileHandle;

		errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
		return _Result ? -1 : _FileHandle;
	}

















#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wio.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wprocess.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {






	__declspec(dllimport) intptr_t __cdecl _wexecl(
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wexecle(
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wexeclp(
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wexeclpe(
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wexecv(
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList
	);

	__declspec(dllimport) intptr_t __cdecl _wexecve(
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList,
		wchar_t const* const* _Env
	);

	__declspec(dllimport) intptr_t __cdecl _wexecvp(
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList
	);

	__declspec(dllimport) intptr_t __cdecl _wexecvpe(
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList,
		wchar_t const* const* _Env
	);

	__declspec(dllimport) intptr_t __cdecl _wspawnl(
		int            _Mode,
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wspawnle(
		int            _Mode,
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wspawnlp(
		int            _Mode,
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wspawnlpe(
		int            _Mode,
		wchar_t const* _FileName,
		wchar_t const* _ArgList,
		...);

	__declspec(dllimport) intptr_t __cdecl _wspawnv(
		int                   _Mode,
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList
	);

	__declspec(dllimport) intptr_t __cdecl _wspawnve(
		int                   _Mode,
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList,
		wchar_t const* const* _Env
	);

	__declspec(dllimport) intptr_t __cdecl _wspawnvp(
		int                   _Mode,
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList
	);

	__declspec(dllimport) intptr_t __cdecl _wspawnvpe(
		int                   _Mode,
		wchar_t const* _FileName,
		wchar_t const* const* _ArgList,
		wchar_t const* const* _Env
	);

	__declspec(dllimport) int __cdecl _wsystem(
		wchar_t const* _Command
	);

#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wprocess.h"
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wprocess.h"



} __pragma(pack(pop))
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {




































	__declspec(dllimport) errno_t __cdecl _itow_s(
		int      _Value,
		wchar_t* _Buffer,
		size_t   _BufferCount,
		int      _Radix
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t(&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow(int _Value, wchar_t* _Buffer, int _Radix);
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"



	__declspec(dllimport) errno_t __cdecl _ltow_s(
		long     _Value,
		wchar_t* _Buffer,
		size_t   _BufferCount,
		int      _Radix
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t(&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value, wchar_t* _Buffer, int _Radix);
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"


	__declspec(dllimport) errno_t __cdecl _ultow_s(
		unsigned long _Value,
		wchar_t* _Buffer,
		size_t        _BufferCount,
		int           _Radix
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t(&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value, wchar_t* _Buffer, int _Radix);
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"


	__declspec(dllimport) double __cdecl wcstod(
		wchar_t const* _String,
		wchar_t** _EndPtr
	);


	__declspec(dllimport) double __cdecl _wcstod_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		_locale_t      _Locale
	);


	__declspec(dllimport) long __cdecl wcstol(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) long __cdecl _wcstol_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);


	__declspec(dllimport) long long __cdecl wcstoll(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) long long __cdecl _wcstoll_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);


	__declspec(dllimport) unsigned long __cdecl wcstoul(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);


	__declspec(dllimport) unsigned long long __cdecl wcstoull(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);


	__declspec(dllimport) long double __cdecl wcstold(
		wchar_t const* _String,
		wchar_t** _EndPtr
	);


	__declspec(dllimport) long double __cdecl _wcstold_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		_locale_t      _Locale
	);


	__declspec(dllimport) float __cdecl wcstof(
		wchar_t const* _String,
		wchar_t** _EndPtr
	);


	__declspec(dllimport) float __cdecl _wcstof_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		_locale_t      _Locale
	);


	__declspec(dllimport) double __cdecl _wtof(
		wchar_t const* _String
	);


	__declspec(dllimport) double __cdecl _wtof_l(
		wchar_t const* _String,
		_locale_t      _Locale
	);


	__declspec(dllimport) int __cdecl _wtoi(
		wchar_t const* _String
	);


	__declspec(dllimport) int __cdecl _wtoi_l(
		wchar_t const* _String,
		_locale_t      _Locale
	);


	__declspec(dllimport) long __cdecl _wtol(
		wchar_t const* _String
	);


	__declspec(dllimport) long __cdecl _wtol_l(
		wchar_t const* _String,
		_locale_t      _Locale
	);


	__declspec(dllimport) long long __cdecl _wtoll(
		wchar_t const* _String
	);


	__declspec(dllimport) long long __cdecl _wtoll_l(
		wchar_t const* _String,
		_locale_t      _Locale
	);


	__declspec(dllimport) errno_t __cdecl _i64tow_s(
		__int64  _Value,
		wchar_t* _Buffer,
		size_t   _BufferCount,
		int      _Radix
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _i64tow(
			__int64  _Value,
			wchar_t* _Buffer,
			int      _Radix
		);


	__declspec(dllimport) errno_t __cdecl _ui64tow_s(
		unsigned __int64 _Value,
		wchar_t* _Buffer,
		size_t           _BufferCount,
		int              _Radix
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _ui64tow(
			unsigned __int64 _Value,
			wchar_t* _Buffer,
			int              _Radix
		);


	__declspec(dllimport) __int64 __cdecl _wtoi64(
		wchar_t const* _String
	);


	__declspec(dllimport) __int64 __cdecl _wtoi64_l(
		wchar_t const* _String,
		_locale_t      _Locale
	);


	__declspec(dllimport) __int64 __cdecl _wcstoi64(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);


	__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix
	);


	__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
		wchar_t const* _String,
		wchar_t** _EndPtr,
		int            _Radix,
		_locale_t      _Locale
	);






	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
		wchar_t* _Buffer,
		wchar_t const* _Path,
		size_t         _BufferCount
	);




	__declspec(dllimport) errno_t __cdecl _wmakepath_s(
		wchar_t* _Buffer,
		size_t         _BufferCount,
		wchar_t const* _Drive,
		wchar_t const* _Dir,
		wchar_t const* _Filename,
		wchar_t const* _Ext
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t(&_Buffer)[_Size], wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(wchar_t* _Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)

	__declspec(dllimport) void __cdecl _wperror(
		wchar_t const* _ErrorMessage
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) void __cdecl _wsplitpath(
			wchar_t const* _FullPath,
			wchar_t* _Drive,
			wchar_t* _Dir,
			wchar_t* _Filename,
			wchar_t* _Ext
		);

	__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
		wchar_t const* _FullPath,
		wchar_t* _Drive,
		size_t         _DriveCount,
		wchar_t* _Dir,
		size_t         _DirCount,
		wchar_t* _Filename,
		size_t         _FilenameCount,
		wchar_t* _Ext,
		size_t         _ExtCount
	);

	extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(wchar_t const* _Path, wchar_t(&_Drive)[_DriveSize], wchar_t(&_Dir)[_DirSize], wchar_t(&_Name)[_NameSize], wchar_t(&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"





	__declspec(dllimport) errno_t __cdecl _wdupenv_s(
		wchar_t** _Buffer,
		size_t * _BufferCount,
		wchar_t const* _VarName
	);



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _wgetenv(
			wchar_t const* _VarName
		);



	__declspec(dllimport) errno_t __cdecl _wgetenv_s(
		size_t* _RequiredCount,
		wchar_t* _Buffer,
		size_t         _BufferCount,
		wchar_t const* _VarName
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(size_t* _RequiredCount, wchar_t(&_Buffer)[_Size], wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"


	__declspec(dllimport) int __cdecl _wputenv(
		wchar_t const* _EnvString
	);


	__declspec(dllimport) errno_t __cdecl _wputenv_s(
		wchar_t const* _Name,
		wchar_t const* _Value
	);

	__declspec(dllimport) errno_t __cdecl _wsearchenv_s(
		wchar_t const* _Filename,
		wchar_t const* _VarName,
		wchar_t* _Buffer,
		size_t         _BufferCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t(&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName, wchar_t* _ResultPath);
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"

	__declspec(dllimport) int __cdecl _wsystem(
		wchar_t const* _Command
	);

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {











	__declspec(dllimport) errno_t __cdecl wcscat_s(
		wchar_t* _Destination,
		rsize_t _SizeInWords,
		wchar_t const* _Source
	);


	__declspec(dllimport) errno_t __cdecl wcscpy_s(
		wchar_t* _Destination,
		rsize_t _SizeInWords,
		wchar_t const* _Source
	);


	__declspec(dllimport) errno_t __cdecl wcsncat_s(
		wchar_t* _Destination,
		rsize_t        _SizeInWords,
		wchar_t const* _Source,
		rsize_t        _MaxCount
	);


	__declspec(dllimport) errno_t __cdecl wcsncpy_s(
		wchar_t* _Destination,
		rsize_t        _SizeInWords,
		wchar_t const* _Source,
		rsize_t        _MaxCount
	);


	__declspec(dllimport) wchar_t* __cdecl wcstok_s(
		wchar_t* _String,
		wchar_t const* _Delimiter,
		wchar_t** _Context
	);

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
		wchar_t const* _String
	);



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"



	extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t(&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat(wchar_t* _Destination, wchar_t const* _Source);
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) int __cdecl wcscmp(
		wchar_t const* _String1,
		wchar_t const* _String2
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t(&_Destination)[_Size], wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy(wchar_t* _Destination, wchar_t const* _Source);
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)


	__declspec(dllimport) size_t __cdecl wcscspn(
		wchar_t const* _String,
		wchar_t const* _Control
	);


	__declspec(dllimport) size_t __cdecl wcslen(
		wchar_t const* _String
	);



#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"
	__declspec(dllimport) size_t __cdecl wcsnlen(
		wchar_t const* _Source,
		size_t         _MaxCount
	);





#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"
	static __inline size_t __cdecl wcsnlen_s(
		wchar_t const* _Source,
		size_t         _MaxCount
	)
	{
		return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
	}

#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t(&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat(wchar_t* _Destination, wchar_t const* _Source, size_t _Count);
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) int __cdecl wcsncmp(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t(&_Destination)[_Size], wchar_t const* _Source, size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy(wchar_t* _Destination, wchar_t const* _Source, size_t _Count);
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
		wchar_t const* _String,
		wchar_t const* _Control
	);


	__declspec(dllimport) size_t __cdecl wcsspn(
		wchar_t const* _String,
		wchar_t const* _Control
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl wcstok(
			wchar_t* _String,
			wchar_t const* _Delimiter,
			wchar_t** _Context
		);





#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"




#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

#pragma warning(push)
#pragma warning(disable: 4141 4996) 
#pragma warning(disable: 28719 28726 28727) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		static __inline wchar_t* __cdecl _wcstok(
			wchar_t* const _String,
			wchar_t const* const _Delimiter
		)
	{
		return wcstok(_String, _Delimiter, 0);
	}



#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
		inline wchar_t* __cdecl wcstok(
			wchar_t* _String,
			wchar_t const* _Delimiter
		) throw()
	{
		return wcstok(_String, _Delimiter, 0);
	}
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

#pragma warning(pop)

#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _wcserror(
			int _ErrorNumber
		);


	__declspec(dllimport) errno_t __cdecl _wcserror_s(
		wchar_t* _Buffer,
		size_t   _SizeInWords,
		int      _ErrorNumber
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t(&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl __wcserror(
			wchar_t const* _String
		);

	__declspec(dllimport) errno_t __cdecl __wcserror_s(
		wchar_t* _Buffer,
		size_t         _SizeInWords,
		wchar_t const* _ErrorMessage
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t(&_Buffer)[_Size], wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(dllimport) int __cdecl _wcsicmp(
		wchar_t const* _String1,
		wchar_t const* _String2
	);

	__declspec(dllimport) int __cdecl _wcsicmp_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		_locale_t      _Locale
	);

	__declspec(dllimport) int __cdecl _wcsnicmp(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount
	);

	__declspec(dllimport) int __cdecl _wcsnicmp_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount,
		_locale_t      _Locale
	);

	__declspec(dllimport) errno_t __cdecl _wcsnset_s(
		wchar_t* _Destination,
		size_t   _SizeInWords,
		wchar_t  _Value,
		size_t   _MaxCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t(&_Destination)[_Size], wchar_t _Value, size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset(wchar_t* _String, wchar_t _Value, size_t _MaxCount);
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(dllimport) wchar_t* __cdecl _wcsrev(
		wchar_t* _String
	);

	__declspec(dllimport) errno_t __cdecl _wcsset_s(
		wchar_t* _Destination,
		size_t   _SizeInWords,
		wchar_t  _Value
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t(&_String)[_Size], wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset(wchar_t* _String, wchar_t _Value);
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(dllimport) errno_t __cdecl _wcslwr_s(
		wchar_t* _String,
		size_t   _SizeInWords
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t(&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr(wchar_t* _String);
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
		wchar_t* _String,
		size_t    _SizeInWords,
		_locale_t _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t(&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(wchar_t* _String, _locale_t _Locale);
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) errno_t __cdecl _wcsupr_s(
		wchar_t* _String,
		size_t   _Size
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t(&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr(wchar_t* _String);
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"


	__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
		wchar_t* _String,
		size_t    _Size,
		_locale_t _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t(&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(wchar_t* _String, _locale_t _Locale);
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"



	__declspec(dllimport) size_t __cdecl wcsxfrm(
		wchar_t* _Destination,
		wchar_t const* _Source,
		size_t         _MaxCount
	);



	__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
		wchar_t* _Destination,
		wchar_t const* _Source,
		size_t         _MaxCount,
		_locale_t      _Locale
	);


	__declspec(dllimport) int __cdecl wcscoll(
		wchar_t const* _String1,
		wchar_t const* _String2
	);


	__declspec(dllimport) int __cdecl _wcscoll_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		_locale_t      _Locale
	);


	__declspec(dllimport) int __cdecl _wcsicoll(
		wchar_t const* _String1,
		wchar_t const* _String2
	);


	__declspec(dllimport) int __cdecl _wcsicoll_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		_locale_t      _Locale
	);


	__declspec(dllimport) int __cdecl _wcsncoll(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount
	);


	__declspec(dllimport) int __cdecl _wcsncoll_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount,
		_locale_t      _Locale
	);


	__declspec(dllimport) int __cdecl _wcsnicoll(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount
	);


	__declspec(dllimport) int __cdecl _wcsnicoll_l(
		wchar_t const* _String1,
		wchar_t const* _String2,
		size_t         _MaxCount,
		_locale_t      _Locale
	);









	extern "C++" {



		inline wchar_t* __cdecl wcschr(wchar_t* _String, wchar_t _C)
		{
			return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
		}


		inline wchar_t* __cdecl wcspbrk(wchar_t* _String, wchar_t const* _Control)
		{
			return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
		}


		inline wchar_t* __cdecl wcsrchr(wchar_t* _String, wchar_t _C)
		{
			return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
		}



		inline wchar_t* __cdecl wcsstr(wchar_t* _String, wchar_t const* _SubStr)
		{
			return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
		}

	}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"












#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl wcsdup(
			wchar_t const* _String
		);



#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"




	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
		__declspec(dllimport) int __cdecl wcsicmp(
			wchar_t const* _String1,
			wchar_t const* _String2
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
		__declspec(dllimport) int __cdecl wcsnicmp(
			wchar_t const* _String1,
			wchar_t const* _String2,
			size_t         _MaxCount
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))

		__declspec(dllimport) wchar_t* __cdecl wcsnset(
			wchar_t* _String,
			wchar_t  _Value,
			size_t   _MaxCount
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))

		__declspec(dllimport) wchar_t* __cdecl wcsrev(
			wchar_t* _String
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))

		__declspec(dllimport) wchar_t* __cdecl wcsset(
			wchar_t* _String,
			wchar_t  _Value
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))

		__declspec(dllimport) wchar_t* __cdecl wcslwr(
			wchar_t* _String
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))

		__declspec(dllimport) wchar_t* __cdecl wcsupr(
			wchar_t* _String
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
		__declspec(dllimport) int __cdecl wcsicoll(
			wchar_t const* _String1,
			wchar_t const* _String2
		);

#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wstring.h"
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








	struct tm
	{
		int tm_sec;
		int tm_min;
		int tm_hour;
		int tm_mday;
		int tm_mon;
		int tm_year;
		int tm_wday;
		int tm_yday;
		int tm_isdst;
	};







	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))


		__declspec(dllimport) wchar_t* __cdecl _wasctime(
			struct tm const* _Tm
		);



	__declspec(dllimport) errno_t __cdecl _wasctime_s(
		wchar_t* _Buffer,
		size_t           _SizeInWords,
		struct tm const* _Tm
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(wchar_t(&_Buffer)[_Size], struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"



	__declspec(dllimport) size_t __cdecl wcsftime(
		wchar_t* _Buffer,
		size_t           _SizeInWords,
		wchar_t const* _Format,
		struct tm const* _Tm
	);



	__declspec(dllimport) size_t __cdecl _wcsftime_l(
		wchar_t* _Buffer,
		size_t           _SizeInWords,
		wchar_t const* _Format,
		struct tm const* _Tm,
		_locale_t        _Locale
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _wctime32(
			__time32_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _wctime32_s(
		wchar_t* _Buffer,
		size_t            _SizeInWords,
		__time32_t const* _Time
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t(&_Buffer)[_Size], __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) wchar_t* __cdecl _wctime64(
			__time64_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _wctime64_s(
		wchar_t* _Buffer,
		size_t            _SizeInWords,
		__time64_t const* _Time);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t(&_Buffer)[_Size], __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"


	__declspec(dllimport) errno_t __cdecl _wstrdate_s(
		wchar_t* _Buffer,
		size_t   _SizeInWords
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t(&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrdate(wchar_t* _Buffer);
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"


	__declspec(dllimport) errno_t __cdecl _wstrtime_s(
		wchar_t* _Buffer,
		size_t   _SizeInWords
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t(&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrtime(wchar_t* _Buffer);
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"









#pragma warning(push)
#pragma warning(disable: 4996)























	static __inline wchar_t* __cdecl _wctime(
		time_t const* const _Time)
	{
		return _wctime64(_Time);
	}


	static __inline errno_t __cdecl _wctime_s(
		wchar_t* const _Buffer,
		size_t        const _SizeInWords,
		time_t const* const _Time
	)
	{
		return _wctime64_s(_Buffer, _SizeInWords, _Time);
	}

#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"

#pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"







#pragma once






typedef unsigned short _ino_t;


typedef _ino_t ino_t;
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"






typedef unsigned int _dev_t;


typedef _dev_t dev_t;
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"






typedef long _off_t;


typedef _off_t off_t;
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\types.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820) 







	struct _stat32
	{
		_dev_t         st_dev;
		_ino_t         st_ino;
		unsigned short st_mode;
		short          st_nlink;
		short          st_uid;
		short          st_gid;
		_dev_t         st_rdev;
		_off_t         st_size;
		__time32_t     st_atime;
		__time32_t     st_mtime;
		__time32_t     st_ctime;
	};

	struct _stat32i64
	{
		_dev_t         st_dev;
		_ino_t         st_ino;
		unsigned short st_mode;
		short          st_nlink;
		short          st_uid;
		short          st_gid;
		_dev_t         st_rdev;
		__int64        st_size;
		__time32_t     st_atime;
		__time32_t     st_mtime;
		__time32_t     st_ctime;
	};

	struct _stat64i32
	{
		_dev_t         st_dev;
		_ino_t         st_ino;
		unsigned short st_mode;
		short          st_nlink;
		short          st_uid;
		short          st_gid;
		_dev_t         st_rdev;
		_off_t         st_size;
		__time64_t     st_atime;
		__time64_t     st_mtime;
		__time64_t     st_ctime;
	};

	struct _stat64
	{
		_dev_t         st_dev;
		_ino_t         st_ino;
		unsigned short st_mode;
		short          st_nlink;
		short          st_uid;
		short          st_gid;
		_dev_t         st_rdev;
		__int64        st_size;
		__time64_t     st_atime;
		__time64_t     st_mtime;
		__time64_t     st_ctime;
	};




	struct stat
	{
		_dev_t         st_dev;
		_ino_t         st_ino;
		unsigned short st_mode;
		short          st_nlink;
		short          st_uid;
		short          st_gid;
		_dev_t         st_rdev;
		_off_t         st_size;
		time_t         st_atime;
		time_t         st_mtime;
		time_t         st_ctime;
	};
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"

























#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"






















#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"



	__declspec(dllimport) int __cdecl _fstat32(
		int             _FileHandle,
		struct _stat32* _Stat
	);

	__declspec(dllimport) int __cdecl _fstat32i64(
		int                _FileHandle,
		struct _stat32i64* _Stat
	);

	__declspec(dllimport) int __cdecl _fstat64i32(
		int                _FileHandle,
		struct _stat64i32* _Stat
	);

	__declspec(dllimport) int __cdecl _fstat64(
		int             _FileHandle,
		struct _stat64* _Stat
	);

	__declspec(dllimport) int __cdecl _stat32(
		char const* _FileName,
		struct _stat32* _Stat
	);

	__declspec(dllimport) int __cdecl _stat32i64(
		char const* _FileName,
		struct _stat32i64* _Stat
	);

	__declspec(dllimport) int __cdecl _stat64i32(
		char const* _FileName,
		struct _stat64i32* _Stat
	);

	__declspec(dllimport) int __cdecl _stat64(
		char const* _FileName,
		struct _stat64* _Stat
	);

	__declspec(dllimport) int __cdecl _wstat32(
		wchar_t const* _FileName,
		struct _stat32* _Stat
	);

	__declspec(dllimport) int __cdecl _wstat32i64(
		wchar_t const* _FileName,
		struct _stat32i64* _Stat
	);

	__declspec(dllimport) int __cdecl _wstat64i32(
		wchar_t const* _FileName,
		struct _stat64i32* _Stat
	);

	__declspec(dllimport) int __cdecl _wstat64(
		wchar_t const* _FileName,
		struct _stat64* _Stat
	);




















	static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
	{
		typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
		return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
	}
	static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
	{
		typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
		return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
	}

#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\sys\\stat.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"



__pragma(pack(push, 8)) extern "C" {








	typedef wchar_t _Wint_t;






	__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
		int            _Category,
		wchar_t const* _Locale
	);


	__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
		int            _Category,
		wchar_t const* _Locale
	);



	__declspec(dllimport) wint_t __cdecl btowc(
		int _Ch
	);

	__declspec(dllimport) size_t __cdecl mbrlen(
		char const* _Ch,
		size_t      _SizeInBytes,
		mbstate_t* _State
	);

	__declspec(dllimport) size_t __cdecl mbrtowc(
		wchar_t* _DstCh,
		char const* _SrcCh,
		size_t      _SizeInBytes,
		mbstate_t* _State
	);


	__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
		size_t* _Retval,
		wchar_t* _Dst,
		size_t       _Size,
		char const** _PSrc,
		size_t       _N,
		mbstate_t* _State
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(size_t* _Retval, wchar_t(&_Dest)[_Size], char const** _PSource, size_t _Count, mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  __declspec(dllimport) size_t __cdecl mbsrtowcs(wchar_t* _Dest, char const** _PSrc, size_t _Count, mbstate_t * _State);
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"


	__declspec(dllimport) errno_t __cdecl wcrtomb_s(
		size_t * _Retval,
		char* _Dst,
		size_t     _SizeInBytes,
		wchar_t    _Ch,
		mbstate_t * _State
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(size_t* _Retval, char(&_Dest)[_Size], wchar_t _Source, mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(char* _Dest, wchar_t _Source, mbstate_t * _State);
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"


	__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
		size_t * _Retval,
		char* _Dst,
		size_t          _SizeInBytes,
		wchar_t const** _Src,
		size_t          _Size,
		mbstate_t * _State
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(size_t* _Retval, char(&_Dest)[_Size], wchar_t const** _PSrc, size_t _Count, mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(char* _Dest, wchar_t const** _PSource, size_t _Count, mbstate_t * _State);
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

	__declspec(dllimport) int __cdecl wctob(
		wint_t _WCh
	);




	errno_t __cdecl wmemcpy_s(
		wchar_t* _S1,
		rsize_t        _N1,
		wchar_t const* _S2,
		rsize_t        _N
	);


	errno_t __cdecl wmemmove_s(
		wchar_t* _S1,
		rsize_t        _N1,
		wchar_t const* _S2,
		rsize_t        _N
	);

#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

	__inline int __cdecl fwide(
		FILE * _F,
		int   _M
	)
	{
		(void)_F;
		return (_M);
	}

	__inline int __cdecl mbsinit(
		mbstate_t const* _P
	)
	{
		return _P == 0 || _P->_Wchar == 0;
	}

	__inline wchar_t const* __cdecl wmemchr(
		wchar_t const* _S,
		wchar_t        _C,
		size_t         _N
	)
	{
		for (; 0 < _N; ++_S, --_N)
			if (*_S == _C)
				return (wchar_t const*)_S;

		return 0;
	}

	__inline int __cdecl wmemcmp(
		wchar_t const* _S1,
		wchar_t const* _S2,
		size_t         _N
	)
	{
		for (; 0 < _N; ++_S1, ++_S2, --_N)
			if (*_S1 != *_S2)
				return *_S1 < *_S2 ? -1 : 1;

		return 0;
	}



	__inline
		wchar_t* __cdecl wmemcpy(
			wchar_t* _S1,
			wchar_t const* _S2,
			size_t         _N
		)
	{
#pragma warning(push)
#pragma warning(disable : 4995 4996 6386)
		return (wchar_t*)memcpy(_S1, _S2, _N * sizeof(wchar_t));
#pragma warning(pop)
	}

	__inline
		wchar_t* __cdecl wmemmove(
			wchar_t* _S1,
			wchar_t const* _S2,
			size_t         _N
		)
	{
#pragma warning(push)
#pragma warning(disable : 4996 6386)
		return (wchar_t*)memmove(_S1, _S2, _N * sizeof(wchar_t));
#pragma warning(pop)
	}



	__inline wchar_t* __cdecl wmemset(
		wchar_t* _S,
		wchar_t  _C,
		size_t   _N
	)
	{
		wchar_t* _Su = _S;
		for (; 0 < _N; ++_Su, --_N)
		{
			*_Su = _C;
		}
		return _S;
	}



	extern "C++" inline wchar_t* __cdecl wmemchr(
		wchar_t* _S,
		wchar_t  _C,
		size_t   _N
	)
	{
		wchar_t const* const _SC = _S;
		return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
	}

#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"

#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"



} __pragma(pack(pop))
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\wchar.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cwchar"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




using _Mbstatet = mbstate_t;

namespace std {
#pragma warning(push)
#pragma warning(disable : 4995) 

	using ::_Mbstatet;

	using ::mbstate_t;
	using ::size_t;
	using ::tm;
	using ::wint_t;

	using ::btowc;
	using ::fgetwc;
	using ::fgetws;
	using ::fputwc;
	using ::fputws;
	using ::fwide;
	using ::fwprintf;
	using ::fwscanf;
	using ::getwc;
	using ::getwchar;
	using ::mbrlen;
	using ::mbrtowc;
	using ::mbsrtowcs;
	using ::mbsinit;
	using ::putwc;
	using ::putwchar;
	using ::swprintf;
	using ::swscanf;
	using ::ungetwc;
	using ::vfwprintf;
	using ::vswprintf;
	using ::vwprintf;
	using ::wcrtomb;
	using ::wprintf;
	using ::wscanf;
	using ::wcsrtombs;
	using ::wcstol;
	using ::wcscat;
	using ::wcschr;
	using ::wcscmp;
	using ::wcscoll;
	using ::wcscpy;
	using ::wcscspn;
	using ::wcslen;
	using ::wcsncat;
	using ::wcsncmp;
	using ::wcsncpy;
	using ::wcspbrk;
	using ::wcsrchr;
	using ::wcsspn;
	using ::wcstod;
	using ::wcstoul;
	using ::wcsstr;
	using ::wcstok;
	using ::wcsxfrm;
	using ::wctob;
	using ::wmemchr;
	using ::wmemcmp;
	using ::wmemcpy;
	using ::wmemmove;
	using ::wmemset;
	using ::wcsftime;

	using ::vfwscanf;
	using ::vswscanf;
	using ::vwscanf;
	using ::wcstof;
	using ::wcstold;
	using ::wcstoll;
	using ::wcstoull;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cwchar"
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cwchar"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {

#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 






	struct _exception
	{
		int    type;
		char* name;
		double arg1;
		double arg2;
		double retval;
	};






	struct _complex
	{
		double x, y;
	};




#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"










#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
	typedef float  float_t;
	typedef double double_t;
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
















	extern double const _HUGE;


#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"



#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"


















































































	void __cdecl _fperrraise(int _Except);

	__declspec(dllimport) short __cdecl _dclass(double _X);
	__declspec(dllimport) short __cdecl _ldclass(long double _X);
	__declspec(dllimport) short __cdecl _fdclass(float _X);

	__declspec(dllimport) int __cdecl _dsign(double _X);
	__declspec(dllimport) int __cdecl _ldsign(long double _X);
	__declspec(dllimport) int __cdecl _fdsign(float _X);

	__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y);
	__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y);
	__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y);

	__declspec(dllimport) short __cdecl _dtest(double* _Px);
	__declspec(dllimport) short __cdecl _ldtest(long double* _Px);
	__declspec(dllimport) short __cdecl _fdtest(float* _Px);

	__declspec(dllimport) short __cdecl _d_int(double* _Px, short _Xexp);
	__declspec(dllimport) short __cdecl _ld_int(long double* _Px, short _Xexp);
	__declspec(dllimport) short __cdecl _fd_int(float* _Px, short _Xexp);

	__declspec(dllimport) short __cdecl _dscale(double* _Px, long _Lexp);
	__declspec(dllimport) short __cdecl _ldscale(long double* _Px, long _Lexp);
	__declspec(dllimport) short __cdecl _fdscale(float* _Px, long _Lexp);

	__declspec(dllimport) short __cdecl _dunscale(short* _Pex, double* _Px);
	__declspec(dllimport) short __cdecl _ldunscale(short* _Pex, long double* _Px);
	__declspec(dllimport) short __cdecl _fdunscale(short* _Pex, float* _Px);

	__declspec(dllimport) short __cdecl _dexp(double* _Px, double _Y, long _Eoff);
	__declspec(dllimport) short __cdecl _ldexp(long double* _Px, long double _Y, long _Eoff);
	__declspec(dllimport) short __cdecl _fdexp(float* _Px, float _Y, long _Eoff);

	__declspec(dllimport) short __cdecl _dnorm(unsigned short* _Ps);
	__declspec(dllimport) short __cdecl _fdnorm(unsigned short* _Ps);

	__declspec(dllimport) double __cdecl _dpoly(double _X, double const* _Tab, int _N);
	__declspec(dllimport) long double __cdecl _ldpoly(long double _X, long double const* _Tab, int _N);
	__declspec(dllimport) float __cdecl _fdpoly(float _X, float const* _Tab, int _N);

	__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag);
	__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag);
	__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag);

	__declspec(dllimport) double __cdecl _dsin(double _X, unsigned int _Qoff);
	__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned int _Qoff);
	__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned int _Qoff);


	typedef union
	{
		unsigned short _Sh[4];
		double _Val;
	} _double_val;


	typedef union
	{
		unsigned short _Sh[2];
		float _Val;
	} _float_val;


	typedef union
	{
		unsigned short _Sh[4];
		long double _Val;
	} _ldouble_val;

	typedef union
	{
		unsigned short _Word[4];
		float _Float;
		double _Double;
		long double _Long_double;
	} _float_const;

	extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
	extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
	extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

	extern const _float_const _Eps_C, _Rteps_C;
	extern const _float_const _FEps_C, _FRteps_C;
	extern const _float_const _LEps_C, _LRteps_C;

	extern const double      _Zero_C, _Xbig_C;
	extern const float       _FZero_C, _FXbig_C;
	extern const long double _LZero_C, _LXbig_C;




























	extern "C++"
	{
		inline int fpclassify(float _X) throw()
		{
			return _fdtest(&_X);
		}

		inline int fpclassify(double _X) throw()
		{
			return _dtest(&_X);
		}

		inline int fpclassify(long double _X) throw()
		{
			return _ldtest(&_X);
		}

		inline bool signbit(float _X) throw()
		{
			return _fdsign(_X) != 0;
		}

		inline bool signbit(double _X) throw()
		{
			return _dsign(_X) != 0;
		}

		inline bool signbit(long double _X) throw()
		{
			return _ldsign(_X) != 0;
		}

		inline int _fpcomp(float _X, float _Y) throw()
		{
			return _fdpcomp(_X, _Y);
		}

		inline int _fpcomp(double _X, double _Y) throw()
		{
			return _dpcomp(_X, _Y);
		}

		inline int _fpcomp(long double _X, long double _Y) throw()
		{
			return _ldpcomp(_X, _Y);
		}

		template <class _Trc, class _Tre> struct _Combined_type
		{
			typedef float _Type;
		};

		template <> struct _Combined_type<float, double>
		{
			typedef double _Type;
		};

		template <> struct _Combined_type<float, long double>
		{
			typedef long double _Type;
		};

		template <class _Ty, class _T2> struct _Real_widened
		{
			typedef long double _Type;
		};

		template <> struct _Real_widened<float, float>
		{
			typedef float _Type;
		};

		template <> struct _Real_widened<float, double>
		{
			typedef double _Type;
		};

		template <> struct _Real_widened<double, float>
		{
			typedef double _Type;
		};

		template <> struct _Real_widened<double, double>
		{
			typedef double _Type;
		};

		template <class _Ty> struct _Real_type
		{
			typedef double _Type;
		};

		template <> struct _Real_type<float>
		{
			typedef float _Type;
		};

		template <> struct _Real_type<long double>
		{
			typedef long double _Type;
		};

		template <class _T1, class _T2>
		inline int _fpcomp(_T1 _X, _T2 _Y) throw()
		{
			typedef typename _Combined_type<float,
				typename _Real_widened<
				typename _Real_type<_T1>::_Type,
				typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
			return _fpcomp((_Tw)_X, (_Tw)_Y);
		}

		template <class _Ty>
		inline bool isfinite(_Ty _X) throw()
		{
			return fpclassify(_X) <= 0;
		}

		template <class _Ty>
		inline bool isinf(_Ty _X) throw()
		{
			return fpclassify(_X) == 1;
		}

		template <class _Ty>
		inline bool isnan(_Ty _X) throw()
		{
			return fpclassify(_X) == 2;
		}

		template <class _Ty>
		inline bool isnormal(_Ty _X) throw()
		{
			return fpclassify(_X) == (-1);
		}

		template <class _Ty1, class _Ty2>
		inline bool isgreater(_Ty1 _X, _Ty2 _Y) throw()
		{
			return (_fpcomp(_X, _Y) & 4) != 0;
		}

		template <class _Ty1, class _Ty2>
		inline bool isgreaterequal(_Ty1 _X, _Ty2 _Y) throw()
		{
			return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
		}

		template <class _Ty1, class _Ty2>
		inline bool isless(_Ty1 _X, _Ty2 _Y) throw()
		{
			return (_fpcomp(_X, _Y) & 1) != 0;
		}

		template <class _Ty1, class _Ty2>
		inline bool islessequal(_Ty1 _X, _Ty2 _Y) throw()
		{
			return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
		}

		template <class _Ty1, class _Ty2>
		inline bool islessgreater(_Ty1 _X, _Ty2 _Y) throw()
		{
			return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
		}

		template <class _Ty1, class _Ty2>
		inline bool isunordered(_Ty1 _X, _Ty2 _Y) throw()
		{
			return _fpcomp(_X, _Y) == 0;
		}
	}
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"





	int       __cdecl abs(int _X);
	long      __cdecl labs(long _X);
	long long __cdecl llabs(long long _X);

	double __cdecl acos(double _X);
	double __cdecl asin(double _X);
	double __cdecl atan(double _X);
	double __cdecl atan2(double _Y, double _X);

	double __cdecl cos(double _X);
	double __cdecl cosh(double _X);
	double __cdecl exp(double _X);
	double __cdecl fabs(double _X);
	double __cdecl fmod(double _X, double _Y);
	double __cdecl log(double _X);
	double __cdecl log10(double _X);
	double __cdecl pow(double _X, double _Y);
	double __cdecl sin(double _X);
	double __cdecl sinh(double _X);
	double __cdecl sqrt(double _X);
	double __cdecl tan(double _X);
	double __cdecl tanh(double _X);

	__declspec(dllimport) double    __cdecl acosh(double _X);
	__declspec(dllimport) double    __cdecl asinh(double _X);
	__declspec(dllimport) double    __cdecl atanh(double _X);
	__declspec(dllimport)  double    __cdecl atof(char const* _String);
	__declspec(dllimport)  double    __cdecl _atof_l(char const* _String, _locale_t _Locale);
	__declspec(dllimport) double    __cdecl _cabs(struct _complex _Complex_value);
	__declspec(dllimport) double    __cdecl cbrt(double _X);
	__declspec(dllimport) double    __cdecl ceil(double _X);
	__declspec(dllimport) double    __cdecl _chgsign(double _X);
	__declspec(dllimport) double    __cdecl copysign(double _Number, double _Sign);
	__declspec(dllimport) double    __cdecl _copysign(double _Number, double _Sign);
	__declspec(dllimport) double    __cdecl erf(double _X);
	__declspec(dllimport) double    __cdecl erfc(double _X);
	__declspec(dllimport) double    __cdecl exp2(double _X);
	__declspec(dllimport) double    __cdecl expm1(double _X);
	__declspec(dllimport) double    __cdecl fdim(double _X, double _Y);
	__declspec(dllimport) double    __cdecl floor(double _X);
	__declspec(dllimport) double    __cdecl fma(double _X, double _Y, double _Z);
	__declspec(dllimport) double    __cdecl fmax(double _X, double _Y);
	__declspec(dllimport) double    __cdecl fmin(double _X, double _Y);
	__declspec(dllimport) double    __cdecl frexp(double _X, int* _Y);
	__declspec(dllimport) double    __cdecl hypot(double _X, double _Y);
	__declspec(dllimport) double    __cdecl _hypot(double _X, double _Y);
	__declspec(dllimport) int       __cdecl ilogb(double _X);
	__declspec(dllimport) double    __cdecl ldexp(double _X, int _Y);
	__declspec(dllimport) double    __cdecl lgamma(double _X);
	__declspec(dllimport) long long __cdecl llrint(double _X);
	__declspec(dllimport) long long __cdecl llround(double _X);
	__declspec(dllimport) double    __cdecl log1p(double _X);
	__declspec(dllimport) double    __cdecl log2(double _X);
	__declspec(dllimport) double    __cdecl logb(double _X);
	__declspec(dllimport) long      __cdecl lrint(double _X);
	__declspec(dllimport) long      __cdecl lround(double _X);

	int __cdecl _matherr(struct _exception* _Except);

	__declspec(dllimport) double __cdecl modf(double _X, double* _Y);
	__declspec(dllimport) double __cdecl nan(char const* _X);
	__declspec(dllimport) double __cdecl nearbyint(double _X);
	__declspec(dllimport) double __cdecl nextafter(double _X, double _Y);
	__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y);
	__declspec(dllimport) double __cdecl remainder(double _X, double _Y);
	__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int* _Z);
	__declspec(dllimport) double __cdecl rint(double _X);
	__declspec(dllimport) double __cdecl round(double _X);
	__declspec(dllimport) double __cdecl scalbln(double _X, long _Y);
	__declspec(dllimport) double __cdecl scalbn(double _X, int _Y);
	__declspec(dllimport) double __cdecl tgamma(double _X);
	__declspec(dllimport) double __cdecl trunc(double _X);
	__declspec(dllimport) double __cdecl _j0(double _X);
	__declspec(dllimport) double __cdecl _j1(double _X);
	__declspec(dllimport) double __cdecl _jn(int _X, double _Y);
	__declspec(dllimport) double __cdecl _y0(double _X);
	__declspec(dllimport) double __cdecl _y1(double _X);
	__declspec(dllimport) double __cdecl _yn(int _X, double _Y);

	__declspec(dllimport) float     __cdecl acoshf(float _X);
	__declspec(dllimport) float     __cdecl asinhf(float _X);
	__declspec(dllimport) float     __cdecl atanhf(float _X);
	__declspec(dllimport) float     __cdecl cbrtf(float _X);
	__declspec(dllimport) float     __cdecl _chgsignf(float _X);
	__declspec(dllimport) float     __cdecl copysignf(float _Number, float _Sign);
	__declspec(dllimport) float     __cdecl _copysignf(float _Number, float _Sign);
	__declspec(dllimport) float     __cdecl erff(float _X);
	__declspec(dllimport) float     __cdecl erfcf(float _X);
	__declspec(dllimport) float     __cdecl expm1f(float _X);
	__declspec(dllimport) float     __cdecl exp2f(float _X);
	__declspec(dllimport) float     __cdecl fdimf(float _X, float _Y);
	__declspec(dllimport) float     __cdecl fmaf(float _X, float _Y, float _Z);
	__declspec(dllimport) float     __cdecl fmaxf(float _X, float _Y);
	__declspec(dllimport) float     __cdecl fminf(float _X, float _Y);
	__declspec(dllimport) float     __cdecl _hypotf(float _X, float _Y);
	__declspec(dllimport) int       __cdecl ilogbf(float _X);
	__declspec(dllimport) float     __cdecl lgammaf(float _X);
	__declspec(dllimport) long long __cdecl llrintf(float _X);
	__declspec(dllimport) long long __cdecl llroundf(float _X);
	__declspec(dllimport) float     __cdecl log1pf(float _X);
	__declspec(dllimport) float     __cdecl log2f(float _X);
	__declspec(dllimport) float     __cdecl logbf(float _X);
	__declspec(dllimport) long      __cdecl lrintf(float _X);
	__declspec(dllimport) long      __cdecl lroundf(float _X);
	__declspec(dllimport) float     __cdecl nanf(char const* _X);
	__declspec(dllimport) float     __cdecl nearbyintf(float _X);
	__declspec(dllimport) float     __cdecl nextafterf(float _X, float _Y);
	__declspec(dllimport) float     __cdecl nexttowardf(float _X, long double _Y);
	__declspec(dllimport) float     __cdecl remainderf(float _X, float _Y);
	__declspec(dllimport) float     __cdecl remquof(float _X, float _Y, int* _Z);
	__declspec(dllimport) float     __cdecl rintf(float _X);
	__declspec(dllimport) float     __cdecl roundf(float _X);
	__declspec(dllimport) float     __cdecl scalblnf(float _X, long _Y);
	__declspec(dllimport) float     __cdecl scalbnf(float _X, int _Y);
	__declspec(dllimport) float     __cdecl tgammaf(float _X);
	__declspec(dllimport) float     __cdecl truncf(float _X);





#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"



	__declspec(dllimport) float __cdecl _logbf(float _X);
	__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y);
	__declspec(dllimport) int   __cdecl _finitef(float _X);
	__declspec(dllimport) int   __cdecl _isnanf(float _X);
	__declspec(dllimport) int   __cdecl _fpclassf(float _X);

	__declspec(dllimport) int   __cdecl _set_FMA3_enable(int _Flag);
	__declspec(dllimport) int   __cdecl _get_FMA3_enable(void);






#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"





	__declspec(dllimport) float __cdecl acosf(float _X);
	__declspec(dllimport) float __cdecl asinf(float _X);
	__declspec(dllimport) float __cdecl atan2f(float _Y, float _X);
	__declspec(dllimport) float __cdecl atanf(float _X);
	__declspec(dllimport) float __cdecl ceilf(float _X);
	__declspec(dllimport) float __cdecl cosf(float _X);
	__declspec(dllimport) float __cdecl coshf(float _X);
	__declspec(dllimport) float __cdecl expf(float _X);











































#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"





#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"

	__inline float __cdecl fabsf(float _X)
	{
		return (float)fabs(_X);
	}

#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"



	__declspec(dllimport) float __cdecl floorf(float _X);
	__declspec(dllimport) float __cdecl fmodf(float _X, float _Y);













#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"

	__inline float __cdecl frexpf(float _X, int* _Y)
	{
		return (float)frexp(_X, _Y);
	}

	__inline float __cdecl hypotf(float _X, float _Y)
	{
		return _hypotf(_X, _Y);
	}

	__inline float __cdecl ldexpf(float _X, int _Y)
	{
		return (float)ldexp(_X, _Y);
	}



	__declspec(dllimport) float  __cdecl log10f(float _X);
	__declspec(dllimport) float  __cdecl logf(float _X);
	__declspec(dllimport) float  __cdecl modff(float _X, float* _Y);
	__declspec(dllimport) float  __cdecl powf(float _X, float _Y);
	__declspec(dllimport) float  __cdecl sinf(float _X);
	__declspec(dllimport) float  __cdecl sinhf(float _X);
	__declspec(dllimport) float  __cdecl sqrtf(float _X);
	__declspec(dllimport) float  __cdecl tanf(float _X);
	__declspec(dllimport) float  __cdecl tanhf(float _X);



















































#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"

	__declspec(dllimport) long double __cdecl acoshl(long double _X);

	__inline long double __cdecl acosl(long double _X)
	{
		return acos((double)_X);
	}

	__declspec(dllimport) long double __cdecl asinhl(long double _X);

	__inline long double __cdecl asinl(long double _X)
	{
		return asin((double)_X);
	}

	__inline long double __cdecl atan2l(long double _Y, long double _X)
	{
		return atan2((double)_Y, (double)_X);
	}

	__declspec(dllimport) long double __cdecl atanhl(long double _X);

	__inline long double __cdecl atanl(long double _X)
	{
		return atan((double)_X);
	}

	__declspec(dllimport) long double __cdecl cbrtl(long double _X);

	__inline long double __cdecl ceill(long double _X)
	{
		return ceil((double)_X);
	}

	__inline long double __cdecl _chgsignl(long double _X)
	{
		return _chgsign((double)_X);
	}

	__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign);

	__inline long double __cdecl _copysignl(long double _Number, long double _Sign)
	{
		return _copysign((double)_Number, (double)_Sign);
	}

	__inline long double __cdecl coshl(long double _X)
	{
		return cosh((double)_X);
	}

	__inline long double __cdecl cosl(long double _X)
	{
		return cos((double)_X);
	}

	__declspec(dllimport) long double __cdecl erfl(long double _X);
	__declspec(dllimport) long double __cdecl erfcl(long double _X);

	__inline long double __cdecl expl(long double _X)
	{
		return exp((double)_X);
	}

	__declspec(dllimport) long double __cdecl exp2l(long double _X);
	__declspec(dllimport) long double __cdecl expm1l(long double _X);

	__inline long double __cdecl fabsl(long double _X)
	{
		return fabs((double)_X);
	}

	__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y);

	__inline long double __cdecl floorl(long double _X)
	{
		return floor((double)_X);
	}

	__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z);
	__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y);
	__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y);

	__inline long double __cdecl fmodl(long double _X, long double _Y)
	{
		return fmod((double)_X, (double)_Y);
	}

	__inline long double __cdecl frexpl(long double _X, int* _Y)
	{
		return frexp((double)_X, _Y);
	}

	__declspec(dllimport) int __cdecl ilogbl(long double _X);

	__inline long double __cdecl _hypotl(long double _X, long double _Y)
	{
		return _hypot((double)_X, (double)_Y);
	}

	__inline long double __cdecl hypotl(long double _X, long double _Y)
	{
		return _hypot((double)_X, (double)_Y);
	}

	__inline long double __cdecl ldexpl(long double _X, int _Y)
	{
		return ldexp((double)_X, _Y);
	}

	__declspec(dllimport) long double __cdecl lgammal(long double _X);
	__declspec(dllimport) long long __cdecl llrintl(long double _X);
	__declspec(dllimport) long long __cdecl llroundl(long double _X);

	__inline long double __cdecl logl(long double _X)
	{
		return log((double)_X);
	}

	__inline long double __cdecl log10l(long double _X)
	{
		return log10((double)_X);
	}

	__declspec(dllimport) long double __cdecl log1pl(long double _X);
	__declspec(dllimport) long double __cdecl log2l(long double _X);
	__declspec(dllimport) long double __cdecl logbl(long double _X);
	__declspec(dllimport) long __cdecl lrintl(long double _X);
	__declspec(dllimport) long __cdecl lroundl(long double _X);

	__inline long double __cdecl modfl(long double _X, long double* _Y)
	{
		double _F, _I;
		_F = modf((double)_X, &_I);
		*_Y = _I;
		return _F;
	}

	__declspec(dllimport) long double __cdecl nanl(char const* _X);
	__declspec(dllimport) long double __cdecl nearbyintl(long double _X);
	__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y);
	__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y);

	__inline long double __cdecl powl(long double _X, long double _Y)
	{
		return pow((double)_X, (double)_Y);
	}

	__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y);
	__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int* _Z);
	__declspec(dllimport) long double __cdecl rintl(long double _X);
	__declspec(dllimport) long double __cdecl roundl(long double _X);
	__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y);
	__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y);

	__inline long double __cdecl sinhl(long double _X)
	{
		return sinh((double)_X);
	}

	__inline long double __cdecl sinl(long double _X)
	{
		return sin((double)_X);
	}

	__inline long double __cdecl sqrtl(long double _X)
	{
		return sqrt((double)_X);
	}

	__inline long double __cdecl tanhl(long double _X)
	{
		return tanh((double)_X);
	}

	__inline long double __cdecl tanl(long double _X)
	{
		return tan((double)_X);
	}

	__declspec(dllimport) long double __cdecl tgammal(long double _X);
	__declspec(dllimport) long double __cdecl truncl(long double _X);





#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"














	extern double HUGE;


#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details."))   __declspec(dllimport) double __cdecl j0(double _X);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details."))   __declspec(dllimport) double __cdecl j1(double _X);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details."))   __declspec(dllimport) double __cdecl jn(int _X, double _Y);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details."))   __declspec(dllimport) double __cdecl y0(double _X);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details."))   __declspec(dllimport) double __cdecl y1(double _X);
	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details."))   __declspec(dllimport) double __cdecl yn(int _X, double _Y);
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"

#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"


#pragma warning(pop)

} __pragma(pack(pop))
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_math.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\math.h"




#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h"


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _calloc_base(
			size_t _Count,
			size_t _Size
		);


	__declspec(dllimport)  __declspec(allocator) __declspec(restrict)
		void* __cdecl calloc(
			__declspec(guard(overflow)) size_t _Count,
			__declspec(guard(overflow)) size_t _Size
		);


	__declspec(dllimport) int __cdecl _callnewh(
		size_t _Size
	);


	__declspec(dllimport) __declspec(allocator)
		void* __cdecl _expand(
			void* _Block,
			__declspec(guard(overflow)) size_t _Size
		);

	__declspec(dllimport)
		void __cdecl _free_base(
			void* _Block
		);

	__declspec(dllimport)
		void __cdecl free(
			void* _Block
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _malloc_base(
			size_t _Size
		);


	__declspec(dllimport) __declspec(allocator)  __declspec(restrict)
		void* __cdecl malloc(
			__declspec(guard(overflow)) size_t _Size
		);


	__declspec(dllimport)
		size_t __cdecl _msize_base(
			void* _Block
		);


	__declspec(dllimport)
		size_t __cdecl _msize(
			void* _Block
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _realloc_base(
			void* _Block,
			size_t _Size
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl realloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Size
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _recalloc_base(
			void* _Block,
			size_t _Count,
			size_t _Size
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _recalloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Count,
			__declspec(guard(overflow))        size_t _Size
		);

	__declspec(dllimport)
		void __cdecl _aligned_free(
			void* _Block
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_malloc(
			__declspec(guard(overflow)) size_t _Size,
			size_t _Alignment
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_offset_malloc(
			__declspec(guard(overflow)) size_t _Size,
			size_t _Alignment,
			size_t _Offset
		);


	__declspec(dllimport)
		size_t __cdecl _aligned_msize(
			void* _Block,
			size_t _Alignment,
			size_t _Offset
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_offset_realloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Size,
			size_t _Alignment,
			size_t _Offset
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_offset_recalloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Count,
			__declspec(guard(overflow))        size_t _Size,
			size_t _Alignment,
			size_t _Offset
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_realloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Size,
			size_t _Alignment
		);


	__declspec(dllimport) __declspec(allocator) __declspec(restrict)
		void* __cdecl _aligned_recalloc(
			void* _Block,
			__declspec(guard(overflow))        size_t _Count,
			__declspec(guard(overflow))        size_t _Size,
			size_t _Alignment
		);


















#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {


	typedef int(__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
	typedef int(__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);





	__declspec(dllimport) void* __cdecl bsearch_s(
		void const* _Key,
		void const* _Base,
		rsize_t     _NumOfElements,
		rsize_t     _SizeOfElements,
		_CoreCrtSecureSearchSortCompareFunction _CompareFunction,
		void* _Context
	);

	__declspec(dllimport) void __cdecl qsort_s(
		void* _Base,
		rsize_t _NumOfElements,
		rsize_t _SizeOfElements,
		_CoreCrtSecureSearchSortCompareFunction _CompareFunction,
		void* _Context
	);

#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h"




	__declspec(dllimport) void* __cdecl bsearch(
		void const* _Key,
		void const* _Base,
		size_t      _NumOfElements,
		size_t      _SizeOfElements,
		_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
	);

	__declspec(dllimport) void __cdecl qsort(
		void* _Base,
		size_t _NumOfElements,
		size_t _SizeOfElements,
		_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
	);


	__declspec(dllimport) void* __cdecl _lfind_s(
		void const* _Key,
		void const* _Base,
		unsigned int* _NumOfElements,
		size_t        _SizeOfElements,
		_CoreCrtSecureSearchSortCompareFunction _CompareFunction,
		void* _Context
	);


	__declspec(dllimport) void* __cdecl _lfind(
		void const* _Key,
		void const* _Base,
		unsigned int* _NumOfElements,
		unsigned int  _SizeOfElements,
		_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
	);


	__declspec(dllimport) void* __cdecl _lsearch_s(
		void const* _Key,
		void* _Base,
		unsigned int* _NumOfElements,
		size_t        _SizeOfElements,
		_CoreCrtSecureSearchSortCompareFunction _CompareFunction,
		void* _Context
	);


	__declspec(dllimport) void* __cdecl _lsearch(
		void const* _Key,
		void* _Base,
		unsigned int* _NumOfElements,
		unsigned int  _SizeOfElements,
		_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
	);




















































































#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h"





	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
		__declspec(dllimport) void* __cdecl lfind(
			void const* _Key,
			void const* _Base,
			unsigned int* _NumOfElements,
			unsigned int  _SizeOfElements,
			_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
		__declspec(dllimport) void* __cdecl lsearch(
			void const* _Key,
			void* _Base,
			unsigned int* _NumOfElements,
			unsigned int  _SizeOfElements,
			_CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
		);

#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"



__pragma(pack(push, 8)) extern "C" {





#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"









	__declspec(dllimport) void __cdecl _swab(
		char* _Buf1,
		char* _Buf2,
		int   _SizeInBytes
	);













	__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code);
	__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code);
	__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code);
	__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code);
	__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"





	__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
		unsigned int _Flags,
		unsigned int _Mask
	);






	typedef int(__cdecl* _onexit_t)(void);



#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

























































	int       __cdecl atexit(void(__cdecl*)(void));
	_onexit_t __cdecl _onexit(_onexit_t _Func);
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	int __cdecl at_quick_exit(void(__cdecl*)(void));










	typedef void(__cdecl* _purecall_handler)(void);


	typedef void(__cdecl* _invalid_parameter_handler)(
		wchar_t const*,
		wchar_t const*,
		wchar_t const*,
		unsigned int,
		uintptr_t
		);


	_purecall_handler __cdecl _set_purecall_handler(
		_purecall_handler _Handler
	);

	_purecall_handler __cdecl _get_purecall_handler(void);


	__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
		_invalid_parameter_handler _Handler
	);

	__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

	__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
		_invalid_parameter_handler _Handler
	);

	__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"












#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"









	__declspec(dllimport) int __cdecl _set_error_mode(int _Mode);




	__declspec(dllimport) int* __cdecl _errno(void);


	__declspec(dllimport) errno_t __cdecl _set_errno(int _Value);
	__declspec(dllimport) errno_t __cdecl _get_errno(int* _Value);

	__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


	__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value);
	__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long* _Value);


	__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


	__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int* __cdecl __sys_nerr(void);


	__declspec(dllimport) void __cdecl perror(char const* _ErrMsg);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char** __cdecl __p__pgmptr(void);
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int* __cdecl __p__fmode(void);











#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) errno_t __cdecl _get_pgmptr(char** _Value);


	__declspec(dllimport) errno_t __cdecl _get_wpgmptr(wchar_t** _Value);

	__declspec(dllimport) errno_t __cdecl _set_fmode(int       _Mode);

	__declspec(dllimport) errno_t __cdecl _get_fmode(int* _PMode);








	typedef struct _div_t
	{
		int quot;
		int rem;
	} div_t;

	typedef struct _ldiv_t
	{
		long quot;
		long rem;
	} ldiv_t;

	typedef struct _lldiv_t
	{
		long long quot;
		long long rem;
	} lldiv_t;

	int       __cdecl abs(int       _Number);
	long      __cdecl labs(long      _Number);
	long long __cdecl llabs(long long _Number);
	__int64   __cdecl _abs64(__int64   _Number);

	unsigned short   __cdecl _byteswap_ushort(unsigned short   _Number);
	unsigned long    __cdecl _byteswap_ulong(unsigned long    _Number);
	unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number);

	__declspec(dllimport) div_t   __cdecl div(int       _Numerator, int       _Denominator);
	__declspec(dllimport) ldiv_t  __cdecl ldiv(long      _Numerator, long      _Denominator);
	__declspec(dllimport) lldiv_t __cdecl lldiv(long long _Numerator, long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540)

	unsigned int __cdecl _rotl(
		unsigned int _Value,
		int          _Shift
	);


	unsigned long __cdecl _lrotl(
		unsigned long _Value,
		int           _Shift
	);

	unsigned __int64 __cdecl _rotl64(
		unsigned __int64 _Value,
		int              _Shift
	);

	unsigned int __cdecl _rotr(
		unsigned int _Value,
		int          _Shift
	);


	unsigned long __cdecl _lrotr(
		unsigned long _Value,
		int           _Shift
	);

	unsigned __int64 __cdecl _rotr64(
		unsigned __int64 _Value,
		int              _Shift
	);

#pragma warning (pop)






	__declspec(dllimport) void __cdecl srand(unsigned int _Seed);

	__declspec(dllimport) int __cdecl rand(void);



#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




	extern "C++"
	{
		inline long abs(long const _X) throw()
		{
			return labs(_X);
		}

		inline long long abs(long long const _X) throw()
		{
			return llabs(_X);
		}

		inline ldiv_t div(long const _A1, long const _A2) throw()
		{
			return ldiv(_A1, _A2);
		}

		inline lldiv_t div(long long const _A1, long long const _A2) throw()
		{
			return lldiv(_A1, _A2);
		}
	}
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"










#pragma pack(push, 4)
	typedef struct
	{
		unsigned char ld[10];
	} _LDOUBLE;
#pragma pack(pop)













#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	typedef struct
	{
		double x;
	} _CRT_DOUBLE;

	typedef struct
	{
		float f;
	} _CRT_FLOAT;





	typedef struct
	{
		long double x;
	} _LONGDOUBLE;



#pragma pack(push, 4)
	typedef struct
	{
		unsigned char ld12[12];
	} _LDBL12;
#pragma pack(pop)








	__declspec(dllimport) double    __cdecl atof(char const* _String);
	__declspec(dllimport) int       __cdecl atoi(char const* _String);
	__declspec(dllimport) long      __cdecl atol(char const* _String);
	__declspec(dllimport) long long __cdecl atoll(char const* _String);
	__declspec(dllimport) __int64   __cdecl _atoi64(char const* _String);

	__declspec(dllimport) double    __cdecl _atof_l(char const* _String, _locale_t _Locale);
	__declspec(dllimport) int       __cdecl _atoi_l(char const* _String, _locale_t _Locale);
	__declspec(dllimport) long      __cdecl _atol_l(char const* _String, _locale_t _Locale);
	__declspec(dllimport) long long __cdecl _atoll_l(char const* _String, _locale_t _Locale);
	__declspec(dllimport) __int64   __cdecl _atoi64_l(char const* _String, _locale_t _Locale);

	__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT* _Result, char const* _String);
	__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE* _Result, char* _String);
	__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE* _Result, char* _String);


	__declspec(dllimport) int __cdecl _atoflt_l(
		_CRT_FLOAT* _Result,
		char const* _String,
		_locale_t   _Locale
	);


	__declspec(dllimport) int __cdecl _atodbl_l(
		_CRT_DOUBLE* _Result,
		char* _String,
		_locale_t    _Locale
	);



	__declspec(dllimport) int __cdecl _atoldbl_l(
		_LDOUBLE* _Result,
		char* _String,
		_locale_t _Locale
	);


	__declspec(dllimport) float __cdecl strtof(
		char const* _String,
		char** _EndPtr
	);


	__declspec(dllimport) float __cdecl _strtof_l(
		char const* _String,
		char** _EndPtr,
		_locale_t   _Locale
	);


	__declspec(dllimport) double __cdecl strtod(
		char const* _String,
		char** _EndPtr
	);


	__declspec(dllimport) double __cdecl _strtod_l(
		char const* _String,
		char** _EndPtr,
		_locale_t   _Locale
	);


	__declspec(dllimport) long double __cdecl strtold(
		char const* _String,
		char** _EndPtr
	);


	__declspec(dllimport) long double __cdecl _strtold_l(
		char const* _String,
		char** _EndPtr,
		_locale_t   _Locale
	);


	__declspec(dllimport) long __cdecl strtol(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) long __cdecl _strtol_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);


	__declspec(dllimport) long long __cdecl strtoll(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) long long __cdecl _strtoll_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);


	__declspec(dllimport) unsigned long __cdecl strtoul(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) unsigned long __cdecl _strtoul_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);


	__declspec(dllimport) unsigned long long __cdecl strtoull(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);


	__declspec(dllimport) __int64 __cdecl _strtoi64(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) __int64 __cdecl _strtoi64_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);


	__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
		char const* _String,
		char** _EndPtr,
		int         _Radix
	);


	__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
		char const* _String,
		char** _EndPtr,
		int         _Radix,
		_locale_t   _Locale
	);










	__declspec(dllimport) errno_t __cdecl _itoa_s(
		int    _Value,
		char* _Buffer,
		size_t _BufferCount,
		int    _Radix
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(int _Value, char(&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa(int _Value, char* _Buffer, int _Radix);
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"
#pragma warning(pop)



	__declspec(dllimport) errno_t __cdecl _ltoa_s(
		long   _Value,
		char* _Buffer,
		size_t _BufferCount,
		int    _Radix
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char(&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa(long _Value, char* _Buffer, int _Radix);
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"



	__declspec(dllimport) errno_t __cdecl _ultoa_s(
		unsigned long _Value,
		char* _Buffer,
		size_t        _BufferCount,
		int           _Radix
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char(&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value, char* _Buffer, int _Radix);
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"
#pragma warning(pop)



	__declspec(dllimport) errno_t __cdecl _i64toa_s(
		__int64 _Value,
		char* _Buffer,
		size_t  _BufferCount,
		int     _Radix
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _i64toa(
			__int64 _Value,
			char* _Buffer,
			int     _Radix
		);



	__declspec(dllimport) errno_t __cdecl _ui64toa_s(
		unsigned __int64 _Value,
		char* _Buffer,
		size_t           _BufferCount,
		int              _Radix
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _ui64toa(
			unsigned __int64 _Value,
			char* _Buffer,
			int              _Radix
		);















	__declspec(dllimport) errno_t __cdecl _ecvt_s(
		char* _Buffer,
		size_t                       _BufferCount,
		double                       _Value,
		int                          _DigitCount,
		int* _PtDec,
		int* _PtSign
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char(&_Buffer)[_Size], double _Value, int _DigitCount, int* _PtDec, int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _ecvt(
			double _Value,
			int    _DigitCount,
			int* _PtDec,
			int* _PtSign
		);



	__declspec(dllimport) errno_t __cdecl _fcvt_s(
		char* _Buffer,
		size_t _BufferCount,
		double _Value,
		int    _FractionalDigitCount,
		int* _PtDec,
		int* _PtSign
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char(&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _fcvt(
			double _Value,
			int    _FractionalDigitCount,
			int* _PtDec,
			int* _PtSign
		);


	__declspec(dllimport) errno_t __cdecl _gcvt_s(
		char* _Buffer,
		size_t _BufferCount,
		double _Value,
		int    _DigitCount
	);

	extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char(&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _gcvt(
			double _Value,
			int    _DigitCount,
			char* _Buffer
		);













#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"





#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) int __cdecl ___mb_cur_max_func(void);


	__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




	__declspec(dllimport) int __cdecl mblen(
		char const* _Ch,
		size_t      _MaxCount
	);


	__declspec(dllimport) int __cdecl _mblen_l(
		char const* _Ch,
		size_t      _MaxCount,
		_locale_t   _Locale
	);



	__declspec(dllimport) size_t __cdecl _mbstrlen(
		char const* _String
	);



	__declspec(dllimport) size_t __cdecl _mbstrlen_l(
		char const* _String,
		_locale_t   _Locale
	);



	__declspec(dllimport) size_t __cdecl _mbstrnlen(
		char const* _String,
		size_t      _MaxCount
	);



	__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
		char const* _String,
		size_t      _MaxCount,
		_locale_t   _Locale
	);


	__declspec(dllimport) int __cdecl mbtowc(
		wchar_t* _DstCh,
		char const* _SrcCh,
		size_t      _SrcSizeInBytes
	);


	__declspec(dllimport) int __cdecl _mbtowc_l(
		wchar_t* _DstCh,
		char const* _SrcCh,
		size_t      _SrcSizeInBytes,
		_locale_t   _Locale
	);


	__declspec(dllimport) errno_t __cdecl mbstowcs_s(
		size_t* _PtNumOfCharConverted,
		wchar_t* _DstBuf,
		size_t      _SizeInWords,
		char const* _SrcBuf,
		size_t      _MaxCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t* _PtNumOfCharConverted, wchar_t(&_Dest)[_Size], char const* _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs(wchar_t* _Dest, char const* _Source, size_t _MaxCount);
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
		size_t * _PtNumOfCharConverted,
		wchar_t* _DstBuf,
		size_t      _SizeInWords,
		char const* _SrcBuf,
		size_t      _MaxCount,
		_locale_t   _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t* _PtNumOfCharConverted, wchar_t(&_Dest)[_Size], char const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(wchar_t* _Dest, char const* _Source, size_t _MaxCount, _locale_t _Locale);
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl wctomb(
			char* _MbCh,
			wchar_t _WCh
		);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl _wctomb_l(
			char* _MbCh,
			wchar_t   _WCh,
			_locale_t _Locale
		);




	__declspec(dllimport) errno_t __cdecl wctomb_s(
		int* _SizeConverted,
		char* _MbCh,
		rsize_t _SizeInBytes,
		wchar_t _WCh
	);

#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
		int* _SizeConverted,
		char* _MbCh,
		size_t    _SizeInBytes,
		wchar_t   _WCh,
		_locale_t _Locale);


	__declspec(dllimport) errno_t __cdecl wcstombs_s(
		size_t* _PtNumOfCharConverted,
		char* _Dst,
		size_t         _DstSizeInBytes,
		wchar_t const* _Src,
		size_t         _MaxCountInBytes
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t* _PtNumOfCharConverted, char(&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs(char* _Dest, wchar_t const* _Source, size_t _MaxCount);
#line 1022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
		size_t * _PtNumOfCharConverted,
		char* _Dst,
		size_t         _DstSizeInBytes,
		wchar_t const* _Src,
		size_t         _MaxCountInBytes,
		_locale_t      _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t* _PtNumOfCharConverted, char(&_Dest)[_Size], wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(char* _Dest, wchar_t const* _Source, size_t _MaxCount, _locale_t _Locale);
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"






















	__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
		char* _Buffer,
		char const* _Path,
		size_t      _BufferCount
	);




	__declspec(dllimport) errno_t __cdecl _makepath_s(
		char* _Buffer,
		size_t      _BufferCount,
		char const* _Drive,
		char const* _Dir,
		char const* _Filename,
		char const* _Ext
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char(&_Buffer)[_Size], char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath(char* _Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"
#pragma warning(pop)

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) void __cdecl _splitpath(
			char const* _FullPath,
			char* _Drive,
			char* _Dir,
			char* _Filename,
			char* _Ext
		);


	__declspec(dllimport) errno_t __cdecl _splitpath_s(
		char const* _FullPath,
		char* _Drive,
		size_t      _DriveCount,
		char* _Dir,
		size_t      _DirCount,
		char* _Filename,
		size_t      _FilenameCount,
		char* _Ext,
		size_t      _ExtCount
	);

	extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(char const* _Dest, char(&_Drive)[_DriveSize], char(&_Dir)[_DirSize], char(&_Name)[_NameSize], char(&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }





	__declspec(dllimport) errno_t __cdecl getenv_s(
		size_t* _RequiredCount,
		char* _Buffer,
		rsize_t     _BufferCount,
		char const* _VarName
	);

#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




	__declspec(dllimport) int* __cdecl __p___argc(void);
	__declspec(dllimport) char*** __cdecl __p___argv(void);
	__declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);









#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(dllimport) char*** __cdecl __p__environ(void);
	__declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);



#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"









#line 1181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"









	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl getenv(
			char const* _VarName
		);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t* _RequiredCount, char(&_Buffer)[_Size], char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"




#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(dllimport) errno_t __cdecl _dupenv_s(
		char** _Buffer,
		size_t * _BufferCount,
		char const* _VarName
	);



#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(dllimport) int __cdecl system(
		char const* _Command
	);



#pragma warning (push)
#pragma warning (disable:6540)


	__declspec(dllimport) int __cdecl _putenv(
		char const* _EnvString
	);


	__declspec(dllimport) errno_t __cdecl _putenv_s(
		char const* _Name,
		char const* _Value
	);

#pragma warning (pop)

	__declspec(dllimport) errno_t __cdecl _searchenv_s(
		char const* _Filename,
		char const* _VarName,
		char* _Buffer,
		size_t      _BufferCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(char const* _Filename, char const* _VarName, char(&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName, char* _Buffer);
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"


	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
		__declspec(dllimport) void __cdecl _seterrormode(
			int _Mode
		);

	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
		__declspec(dllimport) void __cdecl _beep(
			unsigned _Frequency,
			unsigned _Duration
		);

	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
		__declspec(dllimport) void __cdecl _sleep(
			unsigned long _Duration
		);

#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"

















#pragma warning(push)
#pragma warning(disable: 4141) 

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl ecvt(
			double _Value,
			int    _DigitCount,
			int* _PtDec,
			int* _PtSign
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl fcvt(
			double _Value,
			int    _FractionalDigitCount,
			int* _PtDec,
			int* _PtSign
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl gcvt(
			double _Value,
			int    _DigitCount,
			char* _DstBuf
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl itoa(
			int   _Value,
			char* _Buffer,
			int   _Radix
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl ltoa(
			long  _Value,
			char* _Buffer,
			int   _Radix
		);


	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
		__declspec(dllimport) void __cdecl swab(
			char* _Buf1,
			char* _Buf2,
			int   _SizeInBytes
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl ultoa(
			unsigned long _Value,
			char* _Buffer,
			int           _Radix
		);



	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
		__declspec(dllimport) int __cdecl putenv(
			char const* _EnvString
		);

#pragma warning(pop)

	_onexit_t __cdecl onexit(_onexit_t _Func);

#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))
#line 1368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\stdlib.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )





inline double abs(double _Xx) noexcept {
	return ::fabs(_Xx);
}

inline float abs(float _Xx) noexcept {
	return ::fabsf(_Xx);
}

inline long double abs(long double _Xx) noexcept {
	return ::fabsl(_Xx);
}

namespace std {
	using ::size_t;
	using ::div_t;
	using ::ldiv_t;
	using ::abort;
	using ::abs;
	using ::atexit;
	using ::atof;
	using ::atoi;
	using ::atol;
	using ::bsearch;
	using ::calloc;
	using ::div;
	using ::exit;
	using ::free;
	using ::labs;
	using ::ldiv;
	using ::malloc;
	using ::mblen;
	using ::mbstowcs;
	using ::mbtowc;
	using ::qsort;
	using ::rand;
	using ::realloc;
	using ::srand;
	using ::strtod;
	using ::strtol;
	using ::strtoul;
	using ::wcstombs;
	using ::wctomb;

	using ::lldiv_t;


	using ::getenv;
	using ::system;
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"

	using ::atoll;
	using ::llabs;
	using ::lldiv;
	using ::strtof;
	using ::strtold;
	using ::strtoll;
	using ::strtoull;

	using ::_Exit;
	using ::at_quick_exit;
	using ::quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\initializer_list"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem>
	class initializer_list {
	public:
		using value_type      = _Elem;
		using reference       = const _Elem &;
		using const_reference = const _Elem &;
		using size_type       = size_t;

		using iterator       = const _Elem*;
		using const_iterator = const _Elem*;

		constexpr initializer_list() noexcept : _First(nullptr), _Last(nullptr) {}

		constexpr initializer_list(const _Elem* _First_arg, const _Elem* _Last_arg) noexcept
			: _First(_First_arg), _Last(_Last_arg) {}

		constexpr const _Elem* begin() const noexcept {
			return _First;
		}

		constexpr const _Elem* end() const noexcept {
			return _Last;
		}

		constexpr size_t size() const noexcept {
			return static_cast<size_t>(_Last - _First);
		}

	private:
		const _Elem* _First;
		const _Elem* _Last;
	};


	template <class _Elem>
	constexpr const _Elem* begin(initializer_list<_Elem> _Ilist) noexcept {
		return _Ilist.begin();
	}


	template <class _Elem>
	constexpr const _Elem* end(initializer_list<_Elem> _Ilist) noexcept {
		return _Ilist.end();
	}
}


#pragma warning(pop)
#pragma pack(pop)
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\initializer_list"
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\initializer_list"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class>

	constexpr bool _Always_false = false;




	template <class _Arg,
		class _Result>
		struct unary_function {
		using argument_type = _Arg;
		using result_type   = _Result;
	};


	template <class _Arg1, class _Arg2,
		class _Result>
		struct binary_function {
		using first_argument_type  = _Arg1;
		using second_argument_type = _Arg2;
		using result_type          = _Result;
	};
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"


	template <class _Ty = void>
	struct plus {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left + _Right;
		}
	};


	template <class _Ty = void>
	struct minus {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left - _Right;
		}
	};


	template <class _Ty = void>
	struct multiplies {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left * _Right;
		}
	};


	template <class _Ty = void>
	struct equal_to {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left == _Right;
		}
	};


	template <class _Ty = void>
	struct not_equal_to {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left != _Right;
		}
	};


	template <class _Ty = void>
	struct greater {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left > _Right;
		}
	};


	template <class _Ty = void>
	struct less {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left < _Right;
		}
	};


	template <class _Ty = void>
	struct greater_equal {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left >= _Right;
		}
	};


	template <class _Ty = void>
	struct less_equal {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left <= _Right;
		}
	};


	template <>
	struct plus<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct minus<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct multiplies<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left)* static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left)* static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct equal_to<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct not_equal_to<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct greater<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct less<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct greater_equal<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right);
		}
	};


	template <>
	struct less_equal<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
			noexcept(noexcept(static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right)))
			-> decltype(
				static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right)) {
			return static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right);
		}
	};


	template <class _Ty>
	constexpr _Ty* addressof(_Ty& _Val) noexcept {
		return __builtin_addressof(_Val);
	}

	template <class _Ty>
	const _Ty* addressof(const _Ty&&) = delete;


	template <class _Ptrty>
	inline auto _Unfancy(_Ptrty _Ptr) {
		return ::std::addressof(*_Ptr);
	}

	template <class _Ty>
	inline _Ty* _Unfancy(_Ty* _Ptr) {
		return _Ptr;
	}
}








#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"




#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"

#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"








#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"






#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"

























#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"


























#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"













































#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"



#pragma warning(pop)
#pragma pack(pop)
#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstddef"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	enum float_denorm_style {
		denorm_indeterminate = -1,
		denorm_absent = 0,
		denorm_present = 1
	};


	enum float_round_style {
		round_indeterminate = -1,
		round_toward_zero = 0,
		round_to_nearest = 1,
		round_toward_infinity = 2,
		round_toward_neg_infinity = 3
	};


	struct _Num_base {
		static constexpr float_denorm_style has_denorm = denorm_absent;
		static constexpr bool has_denorm_loss = false;
		static constexpr bool has_infinity = false;
		static constexpr bool has_quiet_NaN = false;
		static constexpr bool has_signaling_NaN = false;
		static constexpr bool is_bounded = false;
		static constexpr bool is_exact = false;
		static constexpr bool is_iec559 = false;
		static constexpr bool is_integer = false;
		static constexpr bool is_modulo = false;
		static constexpr bool is_signed = false;
		static constexpr bool is_specialized = false;
		static constexpr bool tinyness_before = false;
		static constexpr bool traps = false;
		static constexpr float_round_style round_style = round_toward_zero;
		static constexpr int digits = 0;
		static constexpr int digits10 = 0;
		static constexpr int max_digits10 = 0;
		static constexpr int max_exponent = 0;
		static constexpr int max_exponent10 = 0;
		static constexpr int min_exponent = 0;
		static constexpr int min_exponent10 = 0;
		static constexpr int radix = 0;
	};


	template <class _Ty>
	class numeric_limits : public _Num_base {
	public:
		static constexpr _Ty(min)() noexcept {
			return _Ty();
		}

		static constexpr _Ty(max)() noexcept {
			return _Ty();
		}

		static constexpr _Ty lowest() noexcept {
			return _Ty();
		}

		static constexpr _Ty epsilon() noexcept {
			return _Ty();
		}

		static constexpr _Ty round_error() noexcept {
			return _Ty();
		}

		static constexpr _Ty denorm_min() noexcept {
			return _Ty();
		}

		static constexpr _Ty infinity() noexcept {
			return _Ty();
		}

		static constexpr _Ty quiet_NaN() noexcept {
			return _Ty();
		}

		static constexpr _Ty signaling_NaN() noexcept {
			return _Ty();
		}
	};

	template <class _Ty>
	class numeric_limits<const _Ty> : public numeric_limits<_Ty> {
	};

	template <class _Ty>
	class numeric_limits<volatile _Ty> : public numeric_limits<_Ty> {
	};

	template <class _Ty>
	class numeric_limits<const volatile _Ty> : public numeric_limits<_Ty> {
	};


	struct _Num_int_base : _Num_base {
		static constexpr bool is_bounded = true;
		static constexpr bool is_exact = true;
		static constexpr bool is_integer = true;
		static constexpr bool is_specialized = true;
		static constexpr int radix = 2;
	};


	struct _Num_float_base : _Num_base {
		static constexpr float_denorm_style has_denorm = denorm_present;
		static constexpr bool has_infinity = true;
		static constexpr bool has_quiet_NaN = true;
		static constexpr bool has_signaling_NaN = true;
		static constexpr bool is_bounded = true;
		static constexpr bool is_iec559 = true;
		static constexpr bool is_signed = true;
		static constexpr bool is_specialized = true;
		static constexpr float_round_style round_style = round_to_nearest;
		static constexpr int radix = 2;
	};


	template <>
	class numeric_limits<bool> : public _Num_int_base {
	public:
		static constexpr bool(min)() noexcept {
			return false;
		}

		static constexpr bool(max)() noexcept {
			return true;
		}

		static constexpr bool lowest() noexcept {
			return (min)();
		}

		static constexpr bool epsilon() noexcept {
			return 0;
		}

		static constexpr bool round_error() noexcept {
			return 0;
		}

		static constexpr bool denorm_min() noexcept {
			return 0;
		}

		static constexpr bool infinity() noexcept {
			return 0;
		}

		static constexpr bool quiet_NaN() noexcept {
			return 0;
		}

		static constexpr bool signaling_NaN() noexcept {
			return 0;
		}

		static constexpr int digits = 1;
	};


	template <>
	class numeric_limits<char> : public _Num_int_base {
	public:
		static constexpr char(min)() noexcept {
			return (-128);
		}

		static constexpr char(max)() noexcept {
			return 127;
		}

		static constexpr char lowest() noexcept {
			return (min)();
		}

		static constexpr char epsilon() noexcept {
			return 0;
		}

		static constexpr char round_error() noexcept {
			return 0;
		}

		static constexpr char denorm_min() noexcept {
			return 0;
		}

		static constexpr char infinity() noexcept {
			return 0;
		}

		static constexpr char quiet_NaN() noexcept {
			return 0;
		}

		static constexpr char signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_signed = (-128) != 0;
		static constexpr bool is_modulo = (-128) == 0;
		static constexpr int digits = 8 - ((-128) != 0);
		static constexpr int digits10 = 2;
	};


	template <>
	class numeric_limits<signed char> : public _Num_int_base {
	public:
		static constexpr signed char(min)() noexcept {
			return (-128);
		}

		static constexpr signed char(max)() noexcept {
			return 127;
		}

		static constexpr signed char lowest() noexcept {
			return (min)();
		}

		static constexpr signed char epsilon() noexcept {
			return 0;
		}

		static constexpr signed char round_error() noexcept {
			return 0;
		}

		static constexpr signed char denorm_min() noexcept {
			return 0;
		}

		static constexpr signed char infinity() noexcept {
			return 0;
		}

		static constexpr signed char quiet_NaN() noexcept {
			return 0;
		}

		static constexpr signed char signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_signed = true;
		static constexpr int digits = 7;
		static constexpr int digits10 = 2;
	};


	template <>
	class numeric_limits<unsigned char> : public _Num_int_base {
	public:
		static constexpr unsigned char(min)() noexcept {
			return 0;
		}

		static constexpr unsigned char(max)() noexcept {
			return 0xff;
		}

		static constexpr unsigned char lowest() noexcept {
			return (min)();
		}

		static constexpr unsigned char epsilon() noexcept {
			return 0;
		}

		static constexpr unsigned char round_error() noexcept {
			return 0;
		}

		static constexpr unsigned char denorm_min() noexcept {
			return 0;
		}

		static constexpr unsigned char infinity() noexcept {
			return 0;
		}

		static constexpr unsigned char quiet_NaN() noexcept {
			return 0;
		}

		static constexpr unsigned char signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 8;
		static constexpr int digits10 = 2;
	};














































#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"


	template <>
	class numeric_limits<char16_t> : public _Num_int_base {
	public:
		static constexpr char16_t(min)() noexcept {
			return 0;
		}

		static constexpr char16_t(max)() noexcept {
			return 0xffff;
		}

		static constexpr char16_t lowest() noexcept {
			return (min)();
		}

		static constexpr char16_t epsilon() noexcept {
			return 0;
		}

		static constexpr char16_t round_error() noexcept {
			return 0;
		}

		static constexpr char16_t denorm_min() noexcept {
			return 0;
		}

		static constexpr char16_t infinity() noexcept {
			return 0;
		}

		static constexpr char16_t quiet_NaN() noexcept {
			return 0;
		}

		static constexpr char16_t signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 16;
		static constexpr int digits10 = 4;
	};


	template <>
	class numeric_limits<char32_t> : public _Num_int_base {
	public:
		static constexpr char32_t(min)() noexcept {
			return 0;
		}

		static constexpr char32_t(max)() noexcept {
			return 0xffffffff;
		}

		static constexpr char32_t lowest() noexcept {
			return (min)();
		}

		static constexpr char32_t epsilon() noexcept {
			return 0;
		}

		static constexpr char32_t round_error() noexcept {
			return 0;
		}

		static constexpr char32_t denorm_min() noexcept {
			return 0;
		}

		static constexpr char32_t infinity() noexcept {
			return 0;
		}

		static constexpr char32_t quiet_NaN() noexcept {
			return 0;
		}

		static constexpr char32_t signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 32;
		static constexpr int digits10 = 9;
	};


	template <>
	class numeric_limits<wchar_t> : public _Num_int_base {
	public:
		static constexpr wchar_t(min)() noexcept {
			return 0x0000;
		}

		static constexpr wchar_t(max)() noexcept {
			return 0xffff;
		}

		static constexpr wchar_t lowest() noexcept {
			return (min)();
		}

		static constexpr wchar_t epsilon() noexcept {
			return 0;
		}

		static constexpr wchar_t round_error() noexcept {
			return 0;
		}

		static constexpr wchar_t denorm_min() noexcept {
			return 0;
		}

		static constexpr wchar_t infinity() noexcept {
			return 0;
		}

		static constexpr wchar_t quiet_NaN() noexcept {
			return 0;
		}

		static constexpr wchar_t signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 16;
		static constexpr int digits10 = 4;
	};


	template <>
	class numeric_limits<short> : public _Num_int_base {
	public:
		static constexpr short(min)() noexcept {
			return (-32768);
		}

		static constexpr short(max)() noexcept {
			return 32767;
		}

		static constexpr short lowest() noexcept {
			return (min)();
		}

		static constexpr short epsilon() noexcept {
			return 0;
		}

		static constexpr short round_error() noexcept {
			return 0;
		}

		static constexpr short denorm_min() noexcept {
			return 0;
		}

		static constexpr short infinity() noexcept {
			return 0;
		}

		static constexpr short quiet_NaN() noexcept {
			return 0;
		}

		static constexpr short signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_signed = true;
		static constexpr int digits = 15;
		static constexpr int digits10 = 4;
	};


	template <>
	class numeric_limits<int> : public _Num_int_base {
	public:
		static constexpr int(min)() noexcept {
			return (-2147483647 - 1);
		}

		static constexpr int(max)() noexcept {
			return 2147483647;
		}

		static constexpr int lowest() noexcept {
			return (min)();
		}

		static constexpr int epsilon() noexcept {
			return 0;
		}

		static constexpr int round_error() noexcept {
			return 0;
		}

		static constexpr int denorm_min() noexcept {
			return 0;
		}

		static constexpr int infinity() noexcept {
			return 0;
		}

		static constexpr int quiet_NaN() noexcept {
			return 0;
		}

		static constexpr int signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_signed = true;
		static constexpr int digits = 31;
		static constexpr int digits10 = 9;
	};


	template <>
	class numeric_limits<long> : public _Num_int_base {
	public:
		static constexpr long(min)() noexcept {
			return (-2147483647L - 1);
		}

		static constexpr long(max)() noexcept {
			return 2147483647L;
		}

		static constexpr long lowest() noexcept {
			return (min)();
		}

		static constexpr long epsilon() noexcept {
			return 0;
		}

		static constexpr long round_error() noexcept {
			return 0;
		}

		static constexpr long denorm_min() noexcept {
			return 0;
		}

		static constexpr long infinity() noexcept {
			return 0;
		}

		static constexpr long quiet_NaN() noexcept {
			return 0;
		}

		static constexpr long signaling_NaN() noexcept {
			return 0;
		}

		static_assert(sizeof(int) == sizeof(long), "LLP64 assumption");
		static constexpr bool is_signed = true;
		static constexpr int digits = 31;
		static constexpr int digits10 = 9;
	};


	template <>
	class numeric_limits<long long> : public _Num_int_base {
	public:
		static constexpr long long(min)() noexcept {
			return (-9223372036854775807i64 - 1);
		}

		static constexpr long long(max)() noexcept {
			return 9223372036854775807i64;
		}

		static constexpr long long lowest() noexcept {
			return (min)();
		}

		static constexpr long long epsilon() noexcept {
			return 0;
		}

		static constexpr long long round_error() noexcept {
			return 0;
		}

		static constexpr long long denorm_min() noexcept {
			return 0;
		}

		static constexpr long long infinity() noexcept {
			return 0;
		}

		static constexpr long long quiet_NaN() noexcept {
			return 0;
		}

		static constexpr long long signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_signed = true;
		static constexpr int digits = 63;
		static constexpr int digits10 = 18;
	};



	template <>
	class numeric_limits<unsigned short> : public _Num_int_base {
	public:
		static constexpr unsigned short(min)() noexcept {
			return 0;
		}

		static constexpr unsigned short(max)() noexcept {
			return 0xffff;
		}

		static constexpr unsigned short lowest() noexcept {
			return (min)();
		}

		static constexpr unsigned short epsilon() noexcept {
			return 0;
		}

		static constexpr unsigned short round_error() noexcept {
			return 0;
		}

		static constexpr unsigned short denorm_min() noexcept {
			return 0;
		}

		static constexpr unsigned short infinity() noexcept {
			return 0;
		}

		static constexpr unsigned short quiet_NaN() noexcept {
			return 0;
		}

		static constexpr unsigned short signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 16;
		static constexpr int digits10 = 4;
	};
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"


	template <>
	class numeric_limits<unsigned int> : public _Num_int_base {
	public:
		static constexpr unsigned int(min)() noexcept {
			return 0;
		}

		static constexpr unsigned int(max)() noexcept {
			return 0xffffffff;
		}

		static constexpr unsigned int lowest() noexcept {
			return (min)();
		}

		static constexpr unsigned int epsilon() noexcept {
			return 0;
		}

		static constexpr unsigned int round_error() noexcept {
			return 0;
		}

		static constexpr unsigned int denorm_min() noexcept {
			return 0;
		}

		static constexpr unsigned int infinity() noexcept {
			return 0;
		}

		static constexpr unsigned int quiet_NaN() noexcept {
			return 0;
		}

		static constexpr unsigned int signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 32;
		static constexpr int digits10 = 9;
	};


	template <>
	class numeric_limits<unsigned long> : public _Num_int_base {
	public:
		static constexpr unsigned long(min)() noexcept {
			return 0;
		}

		static constexpr unsigned long(max)() noexcept {
			return 0xffffffffUL;
		}

		static constexpr unsigned long lowest() noexcept {
			return (min)();
		}

		static constexpr unsigned long epsilon() noexcept {
			return 0;
		}

		static constexpr unsigned long round_error() noexcept {
			return 0;
		}

		static constexpr unsigned long denorm_min() noexcept {
			return 0;
		}

		static constexpr unsigned long infinity() noexcept {
			return 0;
		}

		static constexpr unsigned long quiet_NaN() noexcept {
			return 0;
		}

		static constexpr unsigned long signaling_NaN() noexcept {
			return 0;
		}

		static_assert(sizeof(unsigned int) == sizeof(unsigned long), "LLP64 assumption");
		static constexpr bool is_modulo = true;
		static constexpr int digits = 32;
		static constexpr int digits10 = 9;
	};


	template <>
	class numeric_limits<unsigned long long> : public _Num_int_base {
	public:
		static constexpr unsigned long long(min)() noexcept {
			return 0;
		}

		static constexpr unsigned long long(max)() noexcept {
			return 0xffffffffffffffffui64;
		}

		static constexpr unsigned long long lowest() noexcept {
			return (min)();
		}

		static constexpr unsigned long long epsilon() noexcept {
			return 0;
		}

		static constexpr unsigned long long round_error() noexcept {
			return 0;
		}

		static constexpr unsigned long long denorm_min() noexcept {
			return 0;
		}

		static constexpr unsigned long long infinity() noexcept {
			return 0;
		}

		static constexpr unsigned long long quiet_NaN() noexcept {
			return 0;
		}

		static constexpr unsigned long long signaling_NaN() noexcept {
			return 0;
		}

		static constexpr bool is_modulo = true;
		static constexpr int digits = 64;
		static constexpr int digits10 = 19;
	};


	template <>
	class numeric_limits<float> : public _Num_float_base {
	public:
		static constexpr float(min)() noexcept {
			return 1.175494351e-38F;
		}

		static constexpr float(max)() noexcept {
			return 3.402823466e+38F;
		}

		static constexpr float lowest() noexcept {
			return -(max)();
		}

		static constexpr float epsilon() noexcept {
			return 1.192092896e-07F;
		}

		static constexpr float round_error() noexcept {
			return 0.5F;
		}

		static constexpr float denorm_min() noexcept {
			return 1.401298464e-45F;
		}

		static constexpr float infinity() noexcept {
			return __builtin_huge_valf();
		}

		static constexpr float quiet_NaN() noexcept {
			return __builtin_nanf("0");
		}

		static constexpr float signaling_NaN() noexcept {
			return __builtin_nansf("1");
		}

		static constexpr int digits = 24;
		static constexpr int digits10 = 6;
		static constexpr int max_digits10 = 9;
		static constexpr int max_exponent = 128;
		static constexpr int max_exponent10 = 38;
		static constexpr int min_exponent = (-125);
		static constexpr int min_exponent10 = (-37);
	};


	template <>
	class numeric_limits<double> : public _Num_float_base {
	public:
		static constexpr double(min)() noexcept {
			return 2.2250738585072014e-308;
		}

		static constexpr double(max)() noexcept {
			return 1.7976931348623158e+308;
		}

		static constexpr double lowest() noexcept {
			return -(max)();
		}

		static constexpr double epsilon() noexcept {
			return 2.2204460492503131e-016;
		}

		static constexpr double round_error() noexcept {
			return 0.5;
		}

		static constexpr double denorm_min() noexcept {
			return 4.9406564584124654e-324;
		}

		static constexpr double infinity() noexcept {
			return __builtin_huge_val();
		}

		static constexpr double quiet_NaN() noexcept {
			return __builtin_nan("0");
		}

		static constexpr double signaling_NaN() noexcept {
			return __builtin_nans("1");
		}

		static constexpr int digits = 53;
		static constexpr int digits10 = 15;
		static constexpr int max_digits10 = 17;
		static constexpr int max_exponent = 1024;
		static constexpr int max_exponent10 = 308;
		static constexpr int min_exponent = (-1021);
		static constexpr int min_exponent10 = (-307);
	};


	template <>
	class numeric_limits<long double> : public _Num_float_base {
	public:
		static constexpr long double(min)() noexcept {
			return 2.2250738585072014e-308;
		}

		static constexpr long double(max)() noexcept {
			return 1.7976931348623158e+308;
		}

		static constexpr long double lowest() noexcept {
			return -(max)();
		}

		static constexpr long double epsilon() noexcept {
			return 2.2204460492503131e-016;
		}

		static constexpr long double round_error() noexcept {
			return 0.5L;
		}

		static constexpr long double denorm_min() noexcept {
			return 4.9406564584124654e-324;
		}

		static constexpr long double infinity() noexcept {
			return __builtin_huge_val();
		}

		static constexpr long double quiet_NaN() noexcept {
			return __builtin_nan("0");
		}

		static constexpr long double signaling_NaN() noexcept {
			return __builtin_nans("1");
		}

		static constexpr int digits = 53;
		static constexpr int digits10 = 15;
		static constexpr int max_digits10 = 17;
		static constexpr int max_exponent = 1024;
		static constexpr int max_exponent10 = 308;
		static constexpr int min_exponent = (-1021);
		static constexpr int min_exponent10 = (-307);
	};
}


#pragma warning(pop)
#pragma pack(pop)
#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"
#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\limits"





#line 57 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"







#pragma once




extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 













	namespace std
	{
		struct nothrow_t {

			explicit nothrow_t() = default;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"
		};




		extern nothrow_t const nothrow;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"
	}
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"


	__declspec(allocator) void* __cdecl operator new(
		size_t _Size
		);


	__declspec(allocator) void* __cdecl operator new(
		size_t _Size,
		std::nothrow_t const&
		) noexcept;


	__declspec(allocator) void* __cdecl operator new[](
		size_t _Size
		);


	__declspec(allocator) void* __cdecl operator new[](
		size_t _Size,
		std::nothrow_t const&
		) noexcept;

	void __cdecl operator delete(
		void* _Block
		) noexcept;

	void __cdecl operator delete(
		void* _Block,
		std::nothrow_t const&
		) noexcept;

	void __cdecl operator delete[](
		void* _Block
		) noexcept;

	void __cdecl operator delete[](
		void* _Block,
		std::nothrow_t const&
		) noexcept;

	void __cdecl operator delete(
		void* _Block,
		size_t _Size
		) noexcept;

	void __cdecl operator delete[](
		void* _Block,
		size_t _Size
		) noexcept;
































































#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 



	inline void* __cdecl operator new(size_t _Size, void* _Where) noexcept
	{
		(void)_Size;
		return _Where;
	}

	inline void __cdecl operator delete(void*, void*) noexcept
	{
		return;
	}
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"




	inline void* __cdecl operator new[](size_t _Size,
		void* _Where) noexcept
	{
		(void)_Size;
		return _Where;
	}

		inline void __cdecl operator delete[](void*, void*) noexcept
	{
	}
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma warning(pop)
#pragma pack(pop)

}
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new_debug.h"


extern "C++" {

#pragma pack(push, 8)







	__declspec(allocator) void* __cdecl operator new(
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
		);


	__declspec(allocator) void* __cdecl operator new[](
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
		);

	void __cdecl operator delete(
		void* _Block,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
		) noexcept;

	void __cdecl operator delete[](
		void* _Block,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
		) noexcept;

#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_new_debug.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



	typedef void* _HFILE;

























	typedef int(__cdecl* _CRT_REPORT_HOOK)(int, char*, int*);
	typedef int(__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





	typedef int(__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































	typedef void(__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





	struct _CrtMemBlockHeader;

	typedef struct _CrtMemState
	{
		struct _CrtMemBlockHeader* pBlockHeader;
		size_t lCounts[5];
		size_t lSizes[5];
		size_t lHighWaterCount;
		size_t lTotalCount;
	} _CrtMemState;




























	__declspec(dllimport) int* __cdecl __p__crtDbgFlag(void);
	__declspec(dllimport) long* __cdecl __p__crtBreakAlloc(void);




	__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(void);

	__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
		_CRT_ALLOC_HOOK _PfnNewHook
	);

	__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(void);

	__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
		_CRT_DUMP_CLIENT _PFnNewDump
	);

#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"

	__declspec(dllimport) int __cdecl _CrtCheckMemory(void);

	typedef void(__cdecl* _CrtDoForAllClientObjectsCallback)(void*, void*);

	__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
		_CrtDoForAllClientObjectsCallback _Callback,
		void* _Context
	);

	__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(void);

	__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
		void const* _Block,
		unsigned int _Size,
		long* _RequestNumber,
		char** _FileName,
		int* _LineNumber
	);


	__declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
		void const* _Pointer
	);


	__declspec(dllimport) int __cdecl _CrtIsValidPointer(
		void const* _Pointer,
		unsigned int _Size,
		int          _ReadWrite
	);

	__declspec(dllimport) void __cdecl _CrtMemCheckpoint(
		_CrtMemState* _State
	);

	__declspec(dllimport) int __cdecl _CrtMemDifference(
		_CrtMemState* _State,
		_CrtMemState const* _OldState,
		_CrtMemState const* _NewState
	);

	__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
		_CrtMemState const* _State
	);

	__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
		_CrtMemState const* _State
	);


	__declspec(dllimport) int __cdecl _CrtReportBlockType(
		void const* _Block
	);

	__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
		long _NewValue
	);

	__declspec(dllimport) int __cdecl _CrtSetDbgFlag(
		int _NewFlag
	);

#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"





























































































	__declspec(dllimport) void __cdecl _aligned_free_dbg(
		void* _Block
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_malloc_dbg(
		size_t      _Size,
		size_t      _Alignment,
		char const* _FileName,
		int         _LineNumber
	);

	__declspec(dllimport) size_t __cdecl _aligned_msize_dbg(
		void* _Block,
		size_t _Alignment,
		size_t _Offset
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_malloc_dbg(
		size_t      _Size,
		size_t      _Alignment,
		size_t      _Offset,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_realloc_dbg(
		void* _Block,
		size_t      _Size,
		size_t      _Alignment,
		size_t      _Offset,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_offset_recalloc_dbg(
		void* _Block,
		size_t      _Count,
		size_t      _Size,
		size_t      _Alignment,
		size_t      _Offset,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_realloc_dbg(
		void* _Block,
		size_t      _Size,
		size_t      _Alignment,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _aligned_recalloc_dbg(
		void* _Block,
		size_t      _Count,
		size_t      _Size,
		size_t      _Alignment,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _calloc_dbg(
		size_t      _Count,
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _expand_dbg(
		void* _Block,
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);

	__declspec(dllimport) void __cdecl _free_dbg(
		void* _Block,
		int   _BlockUse
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _malloc_dbg(
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);

	__declspec(dllimport) size_t __cdecl _msize_dbg(
		void* _Block,
		int   _BlockUse
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _realloc_dbg(
		void* _Block,
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) void* __cdecl _recalloc_dbg(
		void* _Block,
		size_t      _Count,
		size_t      _Size,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);



	__declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
		char** _PBuffer,
		size_t* _PBufferSizeInBytes,
		char const* _VarName,
		int          _BlockType,
		char const* _FileName,
		int          _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath_dbg(
		char* _FullPath,
		char const* _Path,
		size_t      _SizeInBytes,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd_dbg(
		char* _DstBuf,
		int         _SizeInBytes,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);




	__declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd_dbg(
		int         _Drive,
		char* _DstBuf,
		int         _SizeInBytes,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup_dbg(
		char const* _String,
		int         _BlockUse,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam_dbg(
		char const* _DirName,
		char const* _FilePrefix,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup_dbg(
		wchar_t const* _String,
		int            _BlockUse,
		char const* _FileName,
		int            _LineNumber
	);



	__declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
		wchar_t** _PBuffer,
		size_t* _PBufferSizeInWords,
		wchar_t const* _VarName,
		int             _BlockType,
		char const* _FileName,
		int             _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath_dbg(
		wchar_t* _FullPath,
		wchar_t const* _Path,
		size_t         _SizeInWords,
		int            _BlockType,
		char const* _FileName,
		int            _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd_dbg(
		wchar_t* _DstBuf,
		int         _SizeInWords,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);



	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd_dbg(
		int         _Drive,
		wchar_t* _DstBuf,
		int         _SizeInWords,
		int         _BlockType,
		char const* _FileName,
		int         _LineNumber
	);


	__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam_dbg(
		wchar_t const* _DirName,
		wchar_t const* _FilePrefix,
		int            _BlockType,
		char const* _FileName,
		int            _LineNumber
	);












#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"

#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"





















	__declspec(dllimport) int __cdecl _CrtDbgReport(
		int         _ReportType,
		char const* _FileName,
		int         _Linenumber,
		char const* _ModuleName,
		char const* _Format,
		...);

	__declspec(dllimport) int __cdecl _CrtDbgReportW(
		int            _ReportType,
		wchar_t const* _FileName,
		int            _LineNumber,
		wchar_t const* _ModuleName,
		wchar_t const* _Format,
		...);


	__declspec(dllimport) int __cdecl _VCrtDbgReportA(
		int         _ReportType,
		void* _ReturnAddress,
		char const* _FileName,
		int         _LineNumber,
		char const* _ModuleName,
		char const* _Format,
		va_list     _ArgList
	);

	__declspec(dllimport) int __cdecl _VCrtDbgReportW(
		int            _ReportType,
		void* _ReturnAddress,
		wchar_t const* _FileName,
		int            _LineNumber,
		wchar_t const* _ModuleName,
		wchar_t const* _Format,
		va_list        _ArgList
	);

	__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
		size_t _NewDebugFillThreshold
	);

	__declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(void);

	__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
		int    _ReportType,
		_HFILE _ReportFile
	);

	__declspec(dllimport) int __cdecl _CrtSetReportMode(
		int _ReportType,
		int _ReportMode
	);



	extern long _crtAssertBusy;

	__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(void);




	__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
		_CRT_REPORT_HOOK _PFnNewHook
	);

	__declspec(dllimport) int __cdecl _CrtSetReportHook2(
		int              _Mode,
		_CRT_REPORT_HOOK _PFnNewHook
	);

	__declspec(dllimport) int __cdecl _CrtSetReportHookW2(
		int               _Mode,
		_CRT_REPORT_HOOKW _PFnNewHook
	);

#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"

#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"


















































#line 737 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"



#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"



#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"





















#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"














#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\crtdbg.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )












#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
















#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"






















































#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"











#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"








#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"



#pragma detect_mismatch("_MSC_VER", "1900")
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"


#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"










#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"



#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"





















#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"





#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"
















#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"









#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"




#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "d" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\use_ansi.h"
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"



















#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"









#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"



#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"












#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"



#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"






#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"




#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"






#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
















namespace std {
	enum _Uninitialized {
		_Noinit
	};


	class __declspec(dllimport) _Lockit {
	public:













#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
		__thiscall _Lockit();
		explicit __thiscall _Lockit(int);
		__thiscall ~_Lockit() noexcept;
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

		static  void __cdecl _Lockit_ctor(int);
		static  void __cdecl _Lockit_dtor(int);

	private:
		static  void __cdecl _Lockit_ctor(_Lockit*);
		static  void __cdecl _Lockit_ctor(_Lockit*, int);
		static  void __cdecl _Lockit_dtor(_Lockit*);

	public:
		_Lockit(const _Lockit&) = delete;
		_Lockit& operator=(const _Lockit&) = delete;

	private:
		int _Locktype;
	};








































































#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

	class __declspec(dllimport) _Init_locks {
	public:









#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
		__thiscall _Init_locks();
		__thiscall ~_Init_locks() noexcept;
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

	private:
		static  void __cdecl _Init_locks_ctor(_Init_locks*);
		static  void __cdecl _Init_locks_dtor(_Init_locks*);
	};





















#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"

#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"























#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
}
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"







#pragma warning(pop)
#pragma pack(pop)
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\yvals.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




#pragma warning(disable : 4180) 

namespace std {

	template <class _Ty, _Ty... _Vals>
	struct integer_sequence {
		static_assert(is_integral_v<_Ty>, "integer_sequence<T, I...> requires T to be an integral type.");

		using value_type = _Ty;

		static constexpr size_t size() noexcept {
			return sizeof...(_Vals);
		}
	};


	template <class _Ty, _Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

	template <size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

	template <size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

	template <class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	template <bool _First_value, class _First, class... _Rest>
	struct _Conjunction {
		using type = _First;
	};

	template <class _True, class _Next, class... _Rest>
	struct _Conjunction<true, _True, _Next, _Rest...> {
		using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
	};

	template <class... _Traits>
	struct conjunction : true_type {};

	template <class _First, class... _Rest>
	struct conjunction<_First, _Rest...> : _Conjunction<_First::value, _First, _Rest...>::type {

	};

	template <class... _Traits>
	constexpr bool conjunction_v = conjunction<_Traits...>::value;



	template <bool _First_value, class _First, class... _Rest>
	struct _Disjunction {
		using type = _First;
	};

	template <class _False, class _Next, class... _Rest>
	struct _Disjunction<false, _False, _Next, _Rest...> {
		using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
	};

	template <class... _Traits>
	struct disjunction : false_type {};

	template <class _First, class... _Rest>
	struct disjunction<_First, _Rest...> : _Disjunction<_First::value, _First, _Rest...>::type {

	};

	template <class... _Traits>
	constexpr bool disjunction_v = disjunction<_Traits...>::value;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Trait>
	struct negation : bool_constant<!static_cast<bool>(_Trait::value)> {};

	template <class _Trait>
	constexpr bool negation_v = negation<_Trait>::value;



	template <class _Ty, class... _Types>
	constexpr bool _Is_any_of_v = disjunction_v<is_same<_Ty, _Types>...>;
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"




#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class... _Types>
	struct _Arg_types {};

	template <class _Ty1>
	struct _Arg_types<_Ty1> {
		typedef _Ty1 argument_type;
	};

	template <class _Ty1, class _Ty2>
	struct _Arg_types<_Ty1, _Ty2> {
		typedef _Ty1 first_argument_type;
		typedef _Ty2 second_argument_type;
	};


	template <class _Ty>
	struct _Is_function {
		using _Bool_type = false_type;
	};








	template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...)& > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...)& > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret __cdecl(_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };    template <class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall(_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type;  typedef _Ret result_type; };









	template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...)&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; }; template <class _Ret, class... _Types> struct _Is_function<_Ret(_Types..., ...) const volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; };


	template <class _Ty>
	struct is_function : bool_constant<_Is_function<_Ty>::_Bool_type::value> {};

	template <class _Ty>
	constexpr bool is_function_v = _Is_function<_Ty>::_Bool_type::value;


	template <class _Ty>
	struct _Is_memfunptr {
		using _Bool_type = false_type;
	};











	template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...)& > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...)& > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) && > : _Arg_types< _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__cdecl _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; };     template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(__vectorcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0*, _Types...> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int&&, int&&>, _Ret(_Types...)>; };












	template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const volatile> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...)&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const volatile &> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template <class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret(_Arg0::*)(_Types..., ...) const volatile &&> { using _Bool_type = true_type;  typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; };





















#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
	template <class>
	constexpr bool is_void_v = false;

	template <>
	constexpr bool is_void_v<void> = true;

	template <>
	constexpr bool is_void_v<const void> = true;

	template <>
	constexpr bool is_void_v<volatile void> = true;

	template <>
	constexpr bool is_void_v<const volatile void> = true;

	template <class _Ty>
	struct is_void : bool_constant<is_void_v<_Ty>> {};
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class... _Types>
	using void_t = void;



	template <class _Ty>
	struct add_const {
		using type = const _Ty;
	};

	template <class _Ty>
	using add_const_t = typename add_const<_Ty>::type;


	template <class _Ty>
	struct add_volatile {
		using type = volatile _Ty;
	};

	template <class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;


	template <class _Ty>
	struct add_cv {
		using type = const volatile _Ty;
	};

	template <class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;


	template <class _Ty, class = void>
	struct _Add_reference {
		using _Lvalue = _Ty;
		using _Rvalue = _Ty;
	};

	template <class _Ty>
	struct _Add_reference<_Ty, void_t<_Ty&>> {
		using _Lvalue = _Ty &;
		using _Rvalue = _Ty &&;
	};


	template <class _Ty>
	struct add_lvalue_reference {
		using type = typename _Add_reference<_Ty>::_Lvalue;
	};

	template <class _Ty>
	using add_lvalue_reference_t = typename _Add_reference<_Ty>::_Lvalue;


	template <class _Ty>
	struct add_rvalue_reference {
		using type = typename _Add_reference<_Ty>::_Rvalue;
	};

	template <class _Ty>
	using add_rvalue_reference_t = typename _Add_reference<_Ty>::_Rvalue;


	template <class _Ty>
	add_rvalue_reference_t<_Ty> declval() noexcept;


	template <class _Ty>
	struct remove_extent {
		using type = _Ty;
	};

	template <class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]> {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_extent<_Ty[]> {
		using type = _Ty;
	};

	template <class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;


	template <class _Ty>
	struct remove_all_extents {
		using type = _Ty;
	};

	template <class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]> {
		using type = typename remove_all_extents<_Ty>::type;
	};

	template <class _Ty>
	struct remove_all_extents<_Ty[]> {
		using type = typename remove_all_extents<_Ty>::type;
	};

	template <class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;


	template <class _Ty>
	struct remove_pointer {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_pointer<_Ty*> {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_pointer<_Ty* const> {
		using type = _Ty;
	};

	template <class _Ty>
	struct remove_pointer<_Ty* volatile> {
		using type = _Ty;
	};


	template <class _Ty>
	struct remove_pointer<_Ty* const volatile> {
		using type = _Ty;
	};

	template <class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;


	template <class _Ty, class = void>
	struct _Add_pointer {
		using type = _Ty;
	};

	template <class _Ty>
	struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty>*>> {
		using type = remove_reference_t<_Ty>*;
	};

	template <class _Ty>
	struct add_pointer {
		using type = typename _Add_pointer<_Ty>::type;
	};

	template <class _Ty>
	using add_pointer_t = typename _Add_pointer<_Ty>::type;



	template <class>
	constexpr bool is_array_v = false;

	template <class _Ty, size_t _Nx>
	constexpr bool is_array_v<_Ty[_Nx]> = true;

	template <class _Ty>
	constexpr bool is_array_v<_Ty[]> = true;

	template <class _Ty>
	struct is_array : bool_constant<is_array_v<_Ty>> {};


	template <class>
	constexpr bool is_lvalue_reference_v = false;

	template <class _Ty>
	constexpr bool is_lvalue_reference_v<_Ty&> = true;

	template <class _Ty>
	struct is_lvalue_reference : bool_constant<is_lvalue_reference_v<_Ty>> {};


	template <class>
	constexpr bool is_rvalue_reference_v = false;

	template <class _Ty>
	constexpr bool is_rvalue_reference_v<_Ty&&> = true;

	template <class _Ty>
	struct is_rvalue_reference : bool_constant<is_rvalue_reference_v<_Ty>> {};


	template <class>
	constexpr bool is_reference_v = false;

	template <class _Ty>
	constexpr bool is_reference_v<_Ty&> = true;

	template <class _Ty>
	constexpr bool is_reference_v<_Ty&&> = true;

	template <class _Ty>
	struct is_reference : bool_constant<is_reference_v<_Ty>> {};


	template <class _Ty, bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer {
		static constexpr bool value = false;
	};

	template <class _Ty1, class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false> {
		static constexpr bool value = true;
		using _Class_type           = _Ty2;
	};

	template <class _Ty>
	constexpr bool is_member_object_pointer_v =
		_Is_member_object_pointer<remove_cv_t<_Ty>>::value;

	template <class _Ty>
	struct is_member_object_pointer : bool_constant<is_member_object_pointer_v<_Ty>> {};


	template <class _Ty>
	constexpr bool is_member_function_pointer_v =
		_Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type::value;

	template <class _Ty>
	struct is_member_function_pointer : bool_constant<is_member_function_pointer_v<_Ty>> {};


	template <class>
	constexpr bool is_pointer_v = false;

	template <class _Ty>
	constexpr bool is_pointer_v<_Ty*> = true;

	template <class _Ty>
	constexpr bool is_pointer_v<_Ty* const> = true;

	template <class _Ty>
	constexpr bool is_pointer_v<_Ty* volatile> = true;

	template <class _Ty>
	constexpr bool is_pointer_v<_Ty* const volatile> = true;

	template <class _Ty>
	struct is_pointer : bool_constant<is_pointer_v<_Ty>> {};


	template <class _Ty>
	constexpr bool is_null_pointer_v =
		is_same_v<remove_cv_t<_Ty>, nullptr_t>;

	template <class _Ty>
	struct is_null_pointer : bool_constant<is_null_pointer_v<_Ty>> {};


	template <class _Ty>
	struct is_union : bool_constant<__is_union(_Ty)> {};

	template <class _Ty>
	constexpr bool is_union_v = __is_union(_Ty);


	template <class _Ty>
	struct is_class : bool_constant<__is_class(_Ty)> {};

	template <class _Ty>
	constexpr bool is_class_v = __is_class(_Ty);


	template <class _Ty>
	constexpr bool is_fundamental_v = is_arithmetic_v<_Ty> || is_void_v<_Ty> || is_null_pointer_v<_Ty>;

	template <class _Ty>
	struct is_fundamental : bool_constant<is_fundamental_v<_Ty>> {};


	template <class _Ty>
	constexpr bool is_object_v = !is_function_v<_Ty> && !is_reference_v<_Ty> && !is_void_v<_Ty>;

	template <class _Ty>
	struct is_object : bool_constant<is_object_v<_Ty>> {};


	template <class _From, class _To>
	struct is_convertible : bool_constant<__is_convertible_to(_From, _To)> {

	};

	template <class _From, class _To>
	constexpr bool is_convertible_v = __is_convertible_to(_From, _To);


	template <class _Ty>
	struct is_enum : bool_constant<__is_enum(_Ty)> {};

	template <class _Ty>
	constexpr bool is_enum_v = __is_enum(_Ty);


	template <class _Ty>
	struct is_compound : bool_constant<!is_fundamental_v<_Ty>> {};

	template <class _Ty>
	constexpr bool is_compound_v = !is_fundamental_v<_Ty>;


	template <class _Ty>
	constexpr bool is_member_pointer_v = is_member_object_pointer_v<_Ty> || is_member_function_pointer_v<_Ty>;

	template <class _Ty>
	struct is_member_pointer : bool_constant<is_member_pointer_v<_Ty>> {};


	template <class _Ty>
	constexpr bool is_scalar_v =
		is_arithmetic_v<_Ty> || is_enum_v<_Ty> || is_pointer_v<_Ty> || is_member_pointer_v<_Ty> || is_null_pointer_v<_Ty>;

	template <class _Ty>
	struct is_scalar : bool_constant<is_scalar_v<_Ty>> {};


	template <class>
	constexpr bool is_const_v = false;

	template <class _Ty>
	constexpr bool is_const_v<const _Ty> = true;

	template <class _Ty>
	struct is_const : bool_constant<is_const_v<_Ty>> {};


	template <class>
	constexpr bool is_volatile_v = false;

	template <class _Ty>
	constexpr bool is_volatile_v<volatile _Ty> = true;

	template <class _Ty>
	struct is_volatile : bool_constant<is_volatile_v<_Ty>> {};


	template <class _Ty>
	struct is_pod : bool_constant<__is_pod(_Ty)> {};

	template <class _Ty>
	constexpr bool is_pod_v = __is_pod(_Ty);


	template <class _Ty>
	struct is_empty : bool_constant<__is_empty(_Ty)> {};

	template <class _Ty>
	constexpr bool is_empty_v = __is_empty(_Ty);


	template <class _Ty>
	struct is_polymorphic : bool_constant<__is_polymorphic(_Ty)> {};

	template <class _Ty>
	constexpr bool is_polymorphic_v = __is_polymorphic(_Ty);


	template <class _Ty>
	struct is_abstract : bool_constant<__is_abstract(_Ty)> {};

	template <class _Ty>
	constexpr bool is_abstract_v = __is_abstract(_Ty);


	template <class _Ty>
	struct is_final : bool_constant<__is_final(_Ty)> {};

	template <class _Ty>
	constexpr bool is_final_v = __is_final(_Ty);


	template <class _Ty>
	struct is_standard_layout : bool_constant<__is_standard_layout(_Ty)> {};

	template <class _Ty>
	constexpr bool is_standard_layout_v = __is_standard_layout(_Ty);


	template <class _Ty>
	struct  is_literal_type : bool_constant<__is_literal_type(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_literal_type_v = __is_literal_type(_Ty);


	template <class _Ty>
	struct is_trivial : bool_constant<__is_trivial(_Ty)> {};

	template <class _Ty>
	constexpr bool is_trivial_v = __is_trivial(_Ty);


	template <class _Ty>
	struct is_trivially_copyable : bool_constant<__is_trivially_copyable(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Ty);


	template <class _Ty>
	struct has_virtual_destructor : bool_constant<__has_virtual_destructor(_Ty)> {

	};

	template <class _Ty>
	constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Ty);

















#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"



	template <class _Ty, class... _Args>
	struct is_constructible : bool_constant<__is_constructible(_Ty, _Args...)> {

	};

	template <class _Ty, class... _Args>
	constexpr bool is_constructible_v = __is_constructible(_Ty, _Args...);


	template <class _Ty>
	struct is_copy_constructible : bool_constant<__is_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {

	};

	template <class _Ty>
	constexpr bool is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct is_default_constructible : bool_constant<__is_constructible(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_default_constructible_v = __is_constructible(_Ty);


	template <class _Ty, class = void>
	struct _Is_implicitly_default_constructible : false_type {

	};

	template <class _Ty>
	void _Implicitly_default_construct(const _Ty&);

	template <class _Ty>
	struct _Is_implicitly_default_constructible < _Ty, void_t<decltype(_Implicitly_default_construct<_Ty>({})) >> : true_type {
	};


	template <class _Ty>
	struct is_move_constructible : bool_constant<__is_constructible(_Ty, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_move_constructible_v = __is_constructible(_Ty, _Ty);


	template <class _To, class _From>
	struct is_assignable : bool_constant<__is_assignable(_To, _From)> {};

	template <class _To, class _From>
	constexpr bool is_assignable_v = __is_assignable(_To, _From);


	template <class _Ty>
	struct is_copy_assignable
		: bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {

	};

	template <class _Ty>
	constexpr bool is_copy_assignable_v = __is_assignable(
		add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct _Is_copy_assignable_no_precondition_check
		: bool_constant<__is_assignable_no_precondition_check(
			add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {};

	template <class _Ty>
	constexpr bool _Is_copy_assignable_unchecked_v = __is_assignable_no_precondition_check(
		add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);






#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Ty>
	struct is_move_assignable : bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_move_assignable_v = __is_assignable(add_lvalue_reference_t<_Ty>, _Ty);


	template <class _Ty>
	struct _Is_move_assignable_no_precondition_check
		: bool_constant<__is_assignable_no_precondition_check(add_lvalue_reference_t<_Ty>, _Ty)> {};

	template <class _Ty>
	constexpr bool _Is_move_assignable_unchecked_v = __is_assignable_no_precondition_check(
		add_lvalue_reference_t<_Ty>, _Ty);






#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Ty>
	struct is_destructible : bool_constant<__is_destructible(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_destructible_v = __is_destructible(_Ty);



	template <class _Ty, class... _Args>
	struct is_trivially_constructible : bool_constant<__is_trivially_constructible(_Ty, _Args...)> {

	};

	template <class _Ty, class... _Args>
	constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...);


	template <class _Ty>
	struct is_trivially_copy_constructible
		: bool_constant<__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_copy_constructible_v = __is_trivially_constructible(
		_Ty, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct is_trivially_default_constructible : bool_constant<__is_trivially_constructible(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Ty);


	template <class _Ty>
	struct is_trivially_move_constructible : bool_constant<__is_trivially_constructible(_Ty, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty);


	template <class _To, class _From>
	struct is_trivially_assignable : bool_constant<__is_trivially_assignable(_To, _From)> {

	};

	template <class _To, class _From>
	constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_To, _From);


	template <class _Ty>
	struct is_trivially_copy_assignable
		: bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_copy_assignable_v = __is_trivially_assignable(
		add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct is_trivially_move_assignable : bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty);


	template <class _Ty>
	struct is_trivially_destructible : bool_constant<__is_trivially_destructible(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_trivially_destructible_v = __is_trivially_destructible(_Ty);



	template <class _Ty, class... _Args>
	struct is_nothrow_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Args...)> {

	};

	template <class _Ty, class... _Args>
	constexpr bool is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...);


	template <class _Ty>
	struct is_nothrow_copy_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {


	};

	template <class _Ty>
	constexpr bool is_nothrow_copy_constructible_v = __is_nothrow_constructible(
		_Ty, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct is_nothrow_default_constructible : bool_constant<__is_nothrow_constructible(_Ty)> {

	};

	template <class _Ty>
	constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty);


	template <class _Ty>
	struct is_nothrow_move_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty);


	template <class _To, class _From>
	struct is_nothrow_assignable : bool_constant<__is_nothrow_assignable(_To, _From)> {

	};

	template <class _To, class _From>
	constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From);


	template <class _Ty>
	struct is_nothrow_copy_assignable
		: bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {

	};

	template <class _Ty>
	constexpr bool is_nothrow_copy_assignable_v = __is_nothrow_assignable(
		add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);


	template <class _Ty>
	struct is_nothrow_move_assignable : bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {

	};

	template <class _Ty>
	constexpr bool is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty);


	template <class _Ty>
	struct is_nothrow_destructible : bool_constant<__is_nothrow_destructible(_Ty)> {


	};

	template <class _Ty>
	constexpr bool is_nothrow_destructible_v = __is_nothrow_destructible(_Ty);


	template <class _Ty, bool = is_integral_v<_Ty>>
	struct _Sign_base {
		using _Uty = remove_cv_t<_Ty>;

		static constexpr bool _Signed = _Uty(-1) < _Uty(0);
		static constexpr bool _Unsigned = !_Signed;
	};

	template <class _Ty>
	struct _Sign_base<_Ty, false> {

		static constexpr bool _Signed = is_floating_point_v<_Ty>;
		static constexpr bool _Unsigned = false;
	};

	template <class _Ty>
	struct is_signed : bool_constant<_Sign_base<_Ty>::_Signed> {};

	template <class _Ty>
	constexpr bool is_signed_v = _Sign_base<_Ty>::_Signed;


	template <class _Ty>
	struct is_unsigned : bool_constant<_Sign_base<_Ty>::_Unsigned> {};

	template <class _Ty>
	constexpr bool is_unsigned_v = _Sign_base<_Ty>::_Unsigned;


	template <class _Ty>
	constexpr bool _Is_nonbool_integral = is_integral_v<_Ty> && !is_same_v<remove_cv_t<_Ty>, bool>;


	template <bool>
	struct _Select {
		template <class _Ty1, class>
		using _Apply = _Ty1;
	};

	template <>
	struct _Select<false> {
		template <class, class _Ty2>
		using _Apply = _Ty2;
	};

	template <size_t>
	struct _Make_signed2;

	template <>
	struct _Make_signed2<1> {
		template <class>
		using _Apply = signed char;
	};

	template <>
	struct _Make_signed2<2> {
		template <class>
		using _Apply = short;
	};

	template <>
	struct _Make_signed2<4> {
		template <class _Ty>
		using _Apply =
			typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<long, int>;
	};

	template <>
	struct _Make_signed2<8> {
		template <class>
		using _Apply = long long;
	};

	template <class _Ty>
	using _Make_signed1 =
		typename _Make_signed2<sizeof(_Ty)>::template _Apply<_Ty>;

	template <class _Ty>
	struct make_signed {
		static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
			"make_signed<T> requires that T shall be a (possibly cv-qualified) "
			"integral type or enumeration but not a bool type.");

		using type = typename remove_cv<_Ty>::template _Apply<_Make_signed1>;
	};

	template <class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;


	template <size_t>
	struct _Make_unsigned2;

	template <>
	struct _Make_unsigned2<1> {
		template <class>
		using _Apply = unsigned char;
	};

	template <>
	struct _Make_unsigned2<2> {
		template <class>
		using _Apply = unsigned short;
	};

	template <>
	struct _Make_unsigned2<4> {
		template <class _Ty>
		using _Apply =
			typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<unsigned long,
			unsigned int>;
	};

	template <>
	struct _Make_unsigned2<8> {
		template <class>
		using _Apply = unsigned long long;
	};

	template <class _Ty>
	using _Make_unsigned1 =
		typename _Make_unsigned2<sizeof(_Ty)>::template _Apply<_Ty>;

	template <class _Ty>
	struct make_unsigned {
		static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
			"make_unsigned<T> requires that T shall be a (possibly cv-qualified) "
			"integral type or enumeration but not a bool type.");

		using type = typename remove_cv<_Ty>::template _Apply<_Make_unsigned1>;
	};

	template <class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;


	template <class _Rep>
	constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val) {
		return static_cast<make_unsigned_t<_Rep>>(_Val);
	}


	template <class _Ty>
	struct alignment_of : integral_constant<size_t, alignof(_Ty)> {};

	template <class _Ty>
	constexpr size_t alignment_of_v = alignof(_Ty);





	template <class _Ty, size_t _Len>
	union _Align_type {
		_Ty _Val;
		char _Pad[_Len];
	};

	template <size_t _Len, size_t _Align, class _Ty, bool _Ok>
	struct _Aligned;

	template <size_t _Len, size_t _Align, class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true> {
		using type = _Align_type<_Ty, _Len>;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, double, false> {






		static_assert(_Always_false<_Aligned>,
			"You've instantiated std::aligned_storage<Len, Align> with an extended alignment (in other "
			"words, Align > alignof(max_align_t)). Before VS 2017 15.8, the member \"type\" would "
			"non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to "
			"handle this correctly, but the fix inherently changes layout and breaks binary compatibility "
			"(*only* for uses of aligned_storage with extended alignments). "
			"Please define either "
			"(1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand this message and "
			"that you actually want a type with an extended alignment, or "
			"(2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence this message and get the old non-conformant "
			"behavior.");
#line 1122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
		using type = _Align_type<max_align_t, _Len>;
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, int, false> {
		using type = typename _Aligned<_Len, _Align, double, _Align <= alignof(double)>::type;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, short, false> {
		using type = typename _Aligned<_Len, _Align, int, _Align <= alignof(int)>::type;
	};

	template <size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, char, false> {
		using type = typename _Aligned<_Len, _Align, short, _Align <= alignof(short)>::type;
	};

	template <size_t _Len, size_t _Align = alignof(max_align_t)>
	struct aligned_storage {
		using type = typename _Aligned<_Len, _Align, char, _Align <= alignof(char)>::type;
	};




	template <size_t _Len, size_t _Align = alignof(max_align_t)>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;


	template <size_t... _Vals>
	struct _Maximum;

	template <>
	struct _Maximum<> : integral_constant<size_t, 0> {};

	template <size_t _Val>
	struct _Maximum<_Val> : integral_constant<size_t, _Val> {};

	template <size_t _First, size_t _Second, size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...> : _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type{

	};

	template <size_t _Len, class... _Types>
	struct aligned_union {
		static constexpr size_t _Max_len = _Maximum<_Len, sizeof(_Types)...>::value;
		static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;

		using type = aligned_storage_t<_Max_len, alignment_value>;
	};

	template <size_t _Len, class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


	template <class _Ty>
	struct underlying_type {
		using type = __underlying_type(_Ty);
	};

	template <class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;


	template <class _Ty>
	constexpr size_t rank_v = 0;

	template <class _Ty, size_t _Nx>
	constexpr size_t rank_v<_Ty[_Nx]> = rank_v<_Ty> +1;

	template <class _Ty>
	constexpr size_t rank_v<_Ty[]> = rank_v<_Ty> +1;

	template <class _Ty>
	struct rank : integral_constant<size_t, rank_v<_Ty>> {};


	template <class _Ty, unsigned int _Ix = 0>
	constexpr size_t extent_v = 0;

	template <class _Ty, size_t _Nx>
	constexpr size_t extent_v<_Ty[_Nx], 0> = _Nx;

	template <class _Ty, unsigned int _Ix, size_t _Nx>
	constexpr size_t extent_v<_Ty[_Nx], _Ix> = extent_v<_Ty, _Ix - 1>;

	template <class _Ty, unsigned int _Ix>
	constexpr size_t extent_v<_Ty[], _Ix> = extent_v<_Ty, _Ix - 1>;

	template <class _Ty, unsigned int _Ix = 0>
	struct extent : integral_constant<size_t, extent_v<_Ty, _Ix>> {};


	template <class _Base, class _Derived>
	struct is_base_of : bool_constant<__is_base_of(_Base, _Derived)> {

	};

	template <class _Base, class _Derived>
	constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);


	template <class _Ty>
	struct decay {
		using _Ty1 = remove_reference_t<_Ty>;
		using _Ty2 = typename _Select<is_function_v<_Ty1>>::template _Apply<add_pointer<_Ty1>, remove_cv<_Ty1>>;
		using type = typename _Select<is_array_v<_Ty1>>::template _Apply<add_pointer<remove_extent_t<_Ty1>>, _Ty2>::type;
	};

	template <class _Ty>
	using decay_t = typename decay<_Ty>::type;


	template <class _Ty1, class _Ty2, class = void>
	struct _Decayed_cond_oper {};

	template <class _Ty1, class _Ty2>
	struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<decltype(false ? ::std::declval<_Ty1>() : ::std::declval<_Ty2>())>> {
		using type = decay_t<decltype(false ? ::std::declval<_Ty1>() : ::std::declval<_Ty2>())>;
	};

	template <class... _Ty>
	struct common_type;

	template <class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

	template <>
	struct common_type<> {};

	template <class _Ty1>
	struct common_type<_Ty1> : common_type<_Ty1, _Ty1> {};

	template <class _Ty1, class _Ty2, class _Decayed1 = decay_t<_Ty1>, class _Decayed2 = decay_t<_Ty2>>
	struct _Common_type2 : common_type<_Decayed1, _Decayed2> {};

	template <class _Ty1, class _Ty2>
	struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2> : _Decayed_cond_oper<_Ty1, _Ty2> {};

	template <class _Ty1, class _Ty2>
	struct common_type<_Ty1, _Ty2> : _Common_type2<_Ty1, _Ty2> {};

	template <class _Void, class _Ty1, class _Ty2, class... _Rest>
	struct _Common_type3 {};

	template <class _Ty1, class _Ty2, class... _Rest>
	struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
		: common_type<common_type_t<_Ty1, _Ty2>, _Rest...> {};

	template <class _Ty1, class _Ty2, class... _Rest>
	struct common_type<_Ty1, _Ty2, _Rest...> : _Common_type3<void, _Ty1, _Ty2, _Rest...> {};


	template <class _Ty>
	struct _Identity {
		using type = _Ty;
	};
	template <class _Ty>
	using _Identity_t = typename _Identity<_Ty>::type;









#line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Type, template <class...> class _Template>
	constexpr bool _Is_specialization_v = false;
	template <template <class...> class _Template, class... _Types>
	constexpr bool _Is_specialization_v<_Template<_Types...>, _Template> = true;

	template <class _Type, template <class...> class _Template>
	struct _Is_specialization : bool_constant<_Is_specialization_v<_Type, _Template>> {};


	template <class _Ty>
	constexpr _Ty&& forward(
		remove_reference_t<_Ty>& _Arg) noexcept {
		return static_cast<_Ty&&>(_Arg);
	}

	template <class _Ty>
	constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept {
		static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
		return static_cast<_Ty&&>(_Arg);
	}


	template <class _Ty>
	constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {
		return static_cast<remove_reference_t<_Ty>&&>(_Arg);
	}


	template <class _Ty>
	constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty>&& is_copy_constructible_v<_Ty>, const _Ty&,
		_Ty&&>
		move_if_noexcept(_Ty& _Arg) noexcept {
		return ::std::move(_Arg);
	}

	template <class _Ty>
	class reference_wrapper;





























































































































	struct _Invoker_pmf_object { template <class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&& ... _Args2) noexcept(noexcept((::std::forward<_Ty1>(_Arg1).*_Pmf)(::std::forward<_Types2>(_Args2)...))) -> decltype((::std::forward<_Ty1>(_Arg1).*_Pmf)(::std::forward<_Types2>(_Args2)...)) { return (::std::forward<_Ty1>(_Arg1).*_Pmf)(::std::forward<_Types2>(_Args2)...); } }; struct _Invoker_pmf_refwrap { template <class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&& ... _Args2) noexcept(noexcept((::std::forward<_Ty1>(_Arg1).get().*_Pmf)(::std::forward<_Types2>(_Args2)...))) -> decltype((::std::forward<_Ty1>(_Arg1).get().*_Pmf)(::std::forward<_Types2>(_Args2)...)) { return (::std::forward<_Ty1>(_Arg1).get().*_Pmf)(::std::forward<_Types2>(_Args2)...); } }; struct _Invoker_pmf_pointer { template <class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&& ... _Args2) noexcept(noexcept(((*::std::forward<_Ty1>(_Arg1)).*_Pmf)(::std::forward<_Types2>(_Args2)...))) -> decltype(((*::std::forward<_Ty1>(_Arg1)).*_Pmf)(::std::forward<_Types2>(_Args2)...)) { return ((*::std::forward<_Ty1>(_Arg1)).*_Pmf)(::std::forward<_Types2>(_Args2)...); } }; struct _Invoker_pmd_object { template <class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std::forward<_Ty1>(_Arg1).*_Pmd)) -> decltype(::std::forward<_Ty1>(_Arg1).*_Pmd) { return ::std::forward<_Ty1>(_Arg1).*_Pmd; } }; struct _Invoker_pmd_refwrap { template <class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std::forward<_Ty1>(_Arg1).get().*_Pmd)) -> decltype(::std::forward<_Ty1>(_Arg1).get().*_Pmd) { return ::std::forward<_Ty1>(_Arg1).get().*_Pmd; } }; struct _Invoker_pmd_pointer { template <class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*::std::forward<_Ty1>(_Arg1)).*_Pmd)) -> decltype((*::std::forward<_Ty1>(_Arg1)).*_Pmd) { return (*::std::forward<_Ty1>(_Arg1)).*_Pmd; } }; struct _Invoker_functor { template <class _Callable, class... _Types> static inline auto _Call(_Callable&& _Obj, _Types&& ... _Args) noexcept(noexcept(::std::forward<_Callable>(_Obj)(::std::forward<_Types>(_Args)...))) -> decltype(::std::forward<_Callable>(_Obj)(::std::forward<_Types>(_Args)...)) { return ::std::forward<_Callable>(_Obj)(::std::forward<_Types>(_Args)...); } }; template <class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t<_Callable>, bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>, bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>> struct _Invoker1; template <class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, true, false> : conditional_t<is_base_of_v<typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmf_object, conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmf_refwrap, _Invoker_pmf_pointer>> { }; template <class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, true> : conditional_t< is_base_of_v<typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmd_object, conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmd_refwrap, _Invoker_pmd_pointer>> { }; template <class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _Invoker_functor { }; template <class _Callable, class... _Types> struct _Invoker; template <class _Callable> struct _Invoker<_Callable> : _Invoker_functor { }; template <class _Callable, class _Ty1, class... _Types2> struct _Invoker<_Callable, _Ty1, _Types2...> : _Invoker1<_Callable, _Ty1> { }; template <class _Callable, class... _Types> inline auto invoke(_Callable&& _Obj, _Types&& ... _Args) noexcept(noexcept(_Invoker < _Callable, _Types... > ::_Call(::std::forward<_Callable>(_Obj), ::std::forward<_Types>(_Args)...))) ->decltype(_Invoker < _Callable, _Types... > ::_Call(::std::forward<_Callable>(_Obj), ::std::forward<_Types>(_Args)...)) { return _Invoker<_Callable, _Types...>::_Call(::std::forward<_Callable>(_Obj), ::std::forward<_Types>(_Args)...); }




#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"



	template <class _Rx, bool = is_void_v<_Rx>>
	struct _Invoker_ret {};

	struct _Unforced {};

	template <class _Cv_void>
	struct _Invoker_ret<_Cv_void, true> {
		template <class... _Valtys>
		static void _Call(_Valtys&& ... _Vals) {
			::std::invoke(::std::forward<_Valtys>(_Vals)...);
		}
	};

	template <class _Rx>
	struct _Invoker_ret<_Rx, false> {
		template <class... _Valtys>
		static _Rx _Call(_Valtys&& ... _Vals) {
			return ::std::invoke(::std::forward<_Valtys>(_Vals)...);
		}
	};

	template <>
	struct _Invoker_ret<_Unforced, false> {
		template <class... _Valtys>
		static auto _Call(_Valtys&& ... _Vals)
			-> decltype(::std::invoke(::std::forward<_Valtys>(_Vals)...)) {
			return ::std::invoke(::std::forward<_Valtys>(_Vals)...);
		}
	};


	template <class _To>
	void _Implicitly_convert_to(_To) noexcept;

	template <class _From, class _To, bool = is_convertible_v<_From, _To>>
	struct _Is_nothrow_convertible : bool_constant<noexcept(_Implicitly_convert_to<_To>(::std::declval<_From>()))> {

	};

	template <class _From, class _To>
	struct _Is_nothrow_convertible<_From, _To, false> : false_type {

	};

	template <class _Void, class... _Types>
	struct _Invoke_traits {
		using _Is_invocable         = false_type;
		using _Is_nothrow_invocable = false_type;
		template <class _Rx>
		using _Is_invocable_r = false_type;
		template <class _Rx>
		using _Is_nothrow_invocable_r = false_type;
	};

	template <class... _Types>
	struct _Invoke_traits<void_t<decltype(::std::invoke(::std::declval<_Types>()...))>,
		_Types...> {
		using type                  = decltype(::std::invoke(::std::declval<_Types>()...));
		using _Is_invocable         = true_type;
		using _Is_nothrow_invocable = bool_constant<noexcept(::std::invoke(::std::declval<_Types>()...))>;
		template <class _Rx>
		using _Is_invocable_r = bool_constant<disjunction_v<is_void<_Rx>, is_convertible<type, _Rx>>>;
		template <class _Rx>
		using _Is_nothrow_invocable_r = bool_constant<
			conjunction_v<_Is_nothrow_invocable, disjunction<is_void<_Rx>, _Is_nothrow_convertible<type, _Rx>>>>;
	};


	template <class _Fty>
	struct  result_of {
		static_assert(_Always_false<_Fty>, "result_of<CallableType> is invalid; use "
			"result_of<CallableType(zero or more argument types)> instead.");
	};







	template <class _Callable, class... _Args> struct  result_of<_Callable __cdecl(_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };    template <class _Callable, class... _Args> struct  result_of<_Callable __vectorcall(_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };


#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	using result_of_t  = typename result_of<_Ty>::type;
#pragma warning(pop)

	template <class _Callable, class... _Args>
	using _Invoke_result_t = typename _Invoke_traits<void, _Callable, _Args...>::type;

	template <class _Rx, class _Callable, class... _Args>
	using _Is_invocable_r_ = typename _Invoke_traits<void, _Callable, _Args...>::template _Is_invocable_r<_Rx>;

	template <class _Rx, class _Callable, class... _Args>
	struct _Is_invocable_r : _Is_invocable_r_<_Rx, _Callable, _Args...> {

	};















































#line 1613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"



	template <class _Ty, class = void>
	struct _Weak_result_type {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	struct _Weak_result_type<_Ty, void_t<typename _Ty::result_type>> {
		typedef typename _Ty::result_type result_type;
	};
#pragma warning(pop)

	template <class _Ty, class = void>
	struct _Weak_argument_type : _Weak_result_type<_Ty> {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	struct _Weak_argument_type<_Ty, void_t<typename _Ty::argument_type>>
		: _Weak_result_type<_Ty> {
		typedef typename _Ty::argument_type argument_type;
	};
#pragma warning(pop)

	template <class _Ty, class = void>
	struct _Weak_binary_args : _Weak_argument_type<_Ty> {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	struct _Weak_binary_args<_Ty, void_t<typename _Ty::first_argument_type,
		typename _Ty::second_argument_type>>
		: _Weak_argument_type<_Ty> {
		typedef typename _Ty::first_argument_type first_argument_type;
		typedef typename _Ty::second_argument_type second_argument_type;
	};
#pragma warning(pop)

	template <class _Ty>
	struct _Weak_types {
		using _Is_f_or_pf = _Is_function<remove_pointer_t<_Ty>>;
		using _Is_pmf     = _Is_memfunptr<remove_cv_t<_Ty>>;
		using type        = conditional_t<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
			conditional_t<_Is_pmf::_Bool_type::value, _Is_pmf, _Weak_binary_args<_Ty>>>;
	};


	template <class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&>) noexcept;
	template <class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&&>) = delete;

	template <class _Ty, class _Uty, class = void>
	struct _Refwrap_has_ctor_from : false_type {};

	template <class _Ty, class _Uty>
	struct _Refwrap_has_ctor_from<_Ty, _Uty, void_t<decltype(_Refwrap_ctor_fun<_Ty>(::std::declval<_Uty>()))>> : true_type {};

	template <class _Ty>
	class reference_wrapper : public _Weak_types<_Ty>::type {
	public:
		static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
			"reference_wrapper<T> requires T to be an object type or a function type.");

		using type = _Ty;

		template <class _Uty, enable_if_t<conjunction_v<negation<is_same<_Remove_cvref_t<_Uty>, reference_wrapper>>,
			_Refwrap_has_ctor_from<_Ty, _Uty>>,
			int> = 0>
			reference_wrapper(_Uty && _Val) noexcept(noexcept(_Refwrap_ctor_fun<_Ty>(::std::declval<_Uty>()))) {
			_Ty& _Ref = ::std::forward<_Uty>(_Val);
			_Ptr = ::std::addressof(_Ref);
		}

		operator _Ty& () const noexcept {
			return *_Ptr;
		}

		_Ty& get() const noexcept {
			return *_Ptr;
		}

		template <class... _Types>
		auto operator()(_Types&& ... _Args) const -> decltype(::std::invoke(get(), ::std::forward<_Types>(_Args)...)) {
			return ::std::invoke(get(), ::std::forward<_Types>(_Args)...);
		}

	private:
		_Ty* _Ptr;
	};




#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Ty>
	inline reference_wrapper<_Ty> ref(_Ty & _Val) noexcept {
		return reference_wrapper<_Ty>(_Val);
	}

	template <class _Ty>
	void ref(const _Ty&&) = delete;

	template <class _Ty>
	inline reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val) noexcept {
		return ::std::ref(_Val.get());
	}

	template <class _Ty>
	inline reference_wrapper<const _Ty> cref(const _Ty& _Val) noexcept {
		return reference_wrapper<const _Ty>(_Val);
	}

	template <class _Ty>
	void cref(const _Ty&&) = delete;

	template <class _Ty>
	inline reference_wrapper<const _Ty> cref(reference_wrapper<_Ty> _Val) noexcept {
		return ::std::cref(_Val.get());
	}





















#line 1759 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	template <class _Ty>
	struct _Is_swappable;


	template <class _Ty>
	struct _Is_nothrow_swappable;





#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
	template <class _Ty, class = void>
	inline
#line 1776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
		void
		swap(_Ty&, _Ty&) noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>);

	template <class _Ty, size_t _Size, class = enable_if_t<_Is_swappable<_Ty>::value>>
	inline void swap(_Ty(&)[_Size], _Ty(&)[_Size]) noexcept(_Is_nothrow_swappable<_Ty>::value);


	template <class _Ty1, class _Ty2, class = void>
	struct _Swappable_with_helper : false_type {};

	template <class _Ty1, class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<decltype(swap(::std::declval<_Ty1>(), ::std::declval<_Ty2>()))>>
		: true_type {};


	template <class _Ty1, class _Ty2>
	struct _Is_swappable_with
		: bool_constant<conjunction_v<_Swappable_with_helper<_Ty1, _Ty2>, _Swappable_with_helper<_Ty2, _Ty1>>> {

	};


	template <class _Ty>
	struct _Is_swappable : _Is_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {

	};


	template <class _Ty1, class _Ty2>
	struct _Swap_cannot_throw : bool_constant<noexcept(swap(::std::declval<_Ty1>(), ::std::declval<_Ty2>()))
		&& noexcept(swap(::std::declval<_Ty2>(), ::std::declval<_Ty1>()))> {


	};


	template <class _Ty1, class _Ty2>
	struct _Is_nothrow_swappable_with
		: bool_constant<conjunction_v<_Is_swappable_with<_Ty1, _Ty2>, _Swap_cannot_throw<_Ty1, _Ty2>>> {


	};


	template <class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {

	};






































#line 1864 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"


	namespace _Has_ADL_swap_detail {
		void swap();

		template <class, class = void>
		struct _Has_ADL_swap : false_type {};
		template <class _Ty>
		struct _Has_ADL_swap<_Ty, void_t<decltype(swap(::std::declval<_Ty&>(), ::std::declval<_Ty&>()))>> : true_type {};
	}
	using _Has_ADL_swap_detail::_Has_ADL_swap;

	template <class _Ty>
	constexpr bool _Is_trivially_swappable_v = conjunction_v<is_trivially_destructible<_Ty>,
		is_trivially_move_constructible<_Ty>, is_trivially_move_assignable<_Ty>, negation<_Has_ADL_swap<_Ty>>>;

	template <class _Ty>
	struct _Is_trivially_swappable : bool_constant<_Is_trivially_swappable_v<_Ty>> {

	};

















































	constexpr size_t _FNV_offset_basis = 14695981039346656037ULL;
	constexpr size_t _FNV_prime = 1099511628211ULL;



#line 1939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"

	inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char* const _First,
		const size_t _Count) noexcept {
		for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
			_Val ^= static_cast<size_t>(_First[_Idx]);
			_Val *= _FNV_prime;
		}

		return _Val;
	}

	template <class _Ty>
	inline size_t _Fnv1a_append_range(const size_t _Val, const _Ty* const _First,
		const _Ty* const _Last) noexcept {
		static_assert(is_trivial_v<_Ty>, "Only trivial types can be directly hashed.");
		const auto _Firstb = reinterpret_cast<const unsigned char*>(_First);
		const auto _Lastb = reinterpret_cast<const unsigned char*>(_Last);
		return _Fnv1a_append_bytes(_Val, _Firstb, static_cast<size_t>(_Lastb - _Firstb));
	}

	template <class _Kty>
	inline size_t _Fnv1a_append_value(
		const size_t _Val, const _Kty& _Keyval) noexcept {
		static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
		return _Fnv1a_append_bytes(_Val, &reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty));
	}


	template <class _Kty>
	inline size_t _Hash_representation(
		const _Kty& _Keyval) noexcept {
		return _Fnv1a_append_value(_FNV_offset_basis, _Keyval);
	}


	template <class _Kty>
	inline size_t _Hash_array_representation(
		const _Kty* const _First, const size_t _Count) noexcept {
		static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
		return _Fnv1a_append_bytes(
			_FNV_offset_basis, reinterpret_cast<const unsigned char*>(_First), _Count * sizeof(_Kty));
	}


	template <class _Kty>
	struct hash;

	template <class _Kty, bool _Enabled>
	struct _Conditionally_enabled_hash {
		typedef _Kty argument_type;
		typedef size_t result_type;

		size_t operator()(const _Kty& _Keyval) const noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval))) {
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
			return hash<_Kty>::_Do_hash(_Keyval);
		}
	};

	template <class _Kty>
	struct _Conditionally_enabled_hash<_Kty, false> {
		_Conditionally_enabled_hash() = delete;
		_Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
		_Conditionally_enabled_hash(_Conditionally_enabled_hash&&) = delete;
		_Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
		_Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
	};


	template <class _Kty>
	struct hash
		: _Conditionally_enabled_hash<_Kty,
		!is_const_v<_Kty> && !is_volatile_v<_Kty> && (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)> {

		static size_t _Do_hash(
			const _Kty& _Keyval) noexcept {
			return _Hash_representation(_Keyval);
		}
	};

	template <>
	struct hash<float> {
		typedef float argument_type;
		typedef size_t result_type;
		size_t operator()(const float _Keyval) const
			noexcept {
			return _Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval);
		}
	};

	template <>
	struct hash<double> {
		typedef double argument_type;
		typedef size_t result_type;
		size_t operator()(const double _Keyval) const
			noexcept {
			return _Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval);
		}
	};

	template <>
	struct hash<long double> {
		typedef long double argument_type;
		typedef size_t result_type;
		size_t operator()(const long double _Keyval) const
			noexcept {
			return _Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval);
		}
	};

	template <>
	struct hash<nullptr_t> {
		typedef nullptr_t argument_type;
		typedef size_t result_type;
		size_t operator()(nullptr_t) const
			noexcept {
			void* _Null{};
			return _Hash_representation(_Null);
		}
	};


	template <class _Kty, class = void>
	struct _Is_nothrow_hashable : false_type {};

	template <class _Kty>
	struct _Is_nothrow_hashable < _Kty, void_t<decltype(hash<_Kty>{}(::std::declval<const _Kty&>())) >>
		: bool_constant < noexcept(hash<_Kty>{}(::std::declval<const _Kty&>())) > {};


#pragma warning(push)
#pragma warning(disable : 4996) 
	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::add_const;
		using ::std::add_cv;
		using ::std::add_pointer;
		using ::std::add_volatile;
		using ::std::aligned_storage;
		using ::std::alignment_of;
		using ::std::conditional;
		using ::std::decay;
		using ::std::enable_if;
		using ::std::extent;
		using ::std::false_type;
		using ::std::has_virtual_destructor;
		using ::std::integral_constant;
		using ::std::is_abstract;
		using ::std::is_arithmetic;
		using ::std::is_array;
		using ::std::is_base_of;
		using ::std::is_class;
		using ::std::is_compound;
		using ::std::is_const;
		using ::std::is_convertible;
		using ::std::is_empty;
		using ::std::is_enum;
		using ::std::is_floating_point;
		using ::std::is_function;
		using ::std::is_fundamental;
		using ::std::is_integral;
		using ::std::is_member_function_pointer;
		using ::std::is_member_object_pointer;
		using ::std::is_member_pointer;
		using ::std::is_object;
		using ::std::is_pod;
		using ::std::is_pointer;
		using ::std::is_polymorphic;
		using ::std::is_reference;
		using ::std::is_same;
		using ::std::is_scalar;
		using ::std::is_signed;
		using ::std::is_union;
		using ::std::is_unsigned;
		using ::std::is_void;
		using ::std::is_volatile;
		using ::std::make_signed;
		using ::std::make_unsigned;
		using ::std::rank;
		using ::std::remove_all_extents;
		using ::std::remove_const;
		using ::std::remove_cv;
		using ::std::remove_extent;
		using ::std::remove_pointer;
		using ::std::remove_reference;
		using ::std::remove_volatile;
		using ::std::true_type;
		using ::std::cref;
		using ::std::ref;
		using ::std::reference_wrapper;
		using ::std::result_of;
		using ::std::hash;
	}
#pragma warning(pop)
#line 2132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"

}



#pragma warning(pop)
#pragma pack(pop)
#line 2140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"
#line 2141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\type_traits"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	bool __cdecl uncaught_exception() noexcept;
	int __cdecl uncaught_exceptions() noexcept;

}



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {








#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"















	typedef struct _heapinfo
	{
		int* _pentry;
		size_t _size;
		int _useflag;
	} _HEAPINFO;









	void* __cdecl _alloca(size_t _Size);





	__declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);


	__declspec(dllimport) int __cdecl _heapmin(void);


	__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO* _EntryInfo);
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"


	__declspec(dllimport) int __cdecl _heapchk(void);
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"

	__declspec(dllimport) int __cdecl _resetstkoflw(void);









#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"

	typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


#pragma warning(push)
#pragma warning(disable:6540)

	__inline void* _MarkAllocaS(void* _Ptr, unsigned int _Marker)
	{
		if (_Ptr)
		{
			*((unsigned int*)_Ptr) = _Marker;
			_Ptr = (char*)_Ptr + 16;
		}
		return _Ptr;
	}

	__inline size_t _MallocaComputeSize(size_t _Size)
	{
		size_t _MarkedSize = _Size + 16;
		return _MarkedSize > _Size ? _MarkedSize : 0;
	}

#pragma warning(pop)

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"












#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"












#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"




#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"



#pragma warning(push)
#pragma warning(disable: 6014)
	__inline void __cdecl _freea(void* _Memory)
	{
		unsigned int _Marker;
		if (_Memory)
		{
			_Memory = (char*)_Memory - 16;
			_Marker = *(unsigned int*)_Memory;
			if (_Marker == 0xDDDD)
			{
				free(_Memory);
			}

			else if (_Marker != 0xCCCC)
			{
				(void)((!!((("Corrupted pointer passed to _freea" && 0)))) || (1 != _CrtDbgReportW(2, L"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h", 162, 0, L"%ls", L"(\"Corrupted pointer passed to _freea\" && 0)")) || (__debugbreak(), 0));
			}
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"
		}
	}
#pragma warning(pop)

#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"





#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\malloc.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



	typedef void(__cdecl* terminate_handler)();
	typedef void(__cdecl* terminate_function)();








	__declspec(dllimport) __declspec(noreturn) void __cdecl abort();
	__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();



	__declspec(dllimport) terminate_handler __cdecl set_terminate(
		terminate_handler _NewTerminateHandler
	) throw();

	__declspec(dllimport) terminate_handler __cdecl _get_terminate();

#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



	typedef void(__cdecl* unexpected_handler)();
	typedef void(__cdecl* unexpected_function)();






	struct _EXCEPTION_POINTERS;



	__declspec(noreturn) void __cdecl unexpected() noexcept(false);



	unexpected_handler __cdecl set_unexpected(
		unexpected_handler _NewUnexpectedHandler
	) noexcept;

	unexpected_handler __cdecl _get_unexpected() noexcept;

	typedef void(__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

	_se_translator_function __cdecl _set_se_translator(
		_se_translator_function _NewSETranslator
	);

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\eh.h"

	class type_info;

	int __cdecl _is_exception_typeof(
		type_info const& _Type,
		_EXCEPTION_POINTERS* _ExceptionPtr
	);

	bool __cdecl __uncaught_exception();
	int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

	struct __std_exception_data
	{
		char const* _What;
		bool        _DoFree;
	};

	void __cdecl __std_exception_copy(
		__std_exception_data const* _From,
		__std_exception_data* _To
	);

	void __cdecl __std_exception_destroy(
		__std_exception_data* _Data
	);

} __pragma(pack(pop))



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
	class exception
	{
	public:

		exception() noexcept
			: _Data()
		{
		}

		explicit exception(char const* const _Message) noexcept
			: _Data()
		{
			__std_exception_data _InitData = { _Message, true };
			__std_exception_copy(&_InitData, &_Data);
		}

		exception(char const* const _Message, int) noexcept
			: _Data()
		{
			_Data._What = _Message;
		}

		exception(exception const& _Other) noexcept
			: _Data()
		{
			__std_exception_copy(&_Other._Data, &_Data);
		}

		exception& operator=(exception const& _Other) noexcept
		{
			if (this == &_Other)
			{
				return *this;
			}

			__std_exception_destroy(&_Data);
			__std_exception_copy(&_Other._Data, &_Data);
			return *this;
		}

		virtual ~exception() noexcept
		{
			__std_exception_destroy(&_Data);
		}

		virtual char const* what() const
		{
			return _Data._What ? _Data._What : "Unknown exception";
		}

	private:

		__std_exception_data _Data;
	};

	class bad_exception
		: public exception
	{
	public:

		bad_exception() noexcept
			: exception("bad exception", 1)
		{
		}
	};

	class bad_alloc
		: public exception
	{
	public:

		bad_alloc() noexcept
			: exception("bad allocation", 1)
		{
		}

	private:

		friend class bad_array_new_length;

		bad_alloc(char const* const _Message) noexcept
			: exception(_Message, 1)
		{
		}
	};

	class bad_array_new_length
		: public bad_alloc
	{
	public:

		bad_array_new_length() noexcept
			: bad_alloc("bad array new length")
		{
		}
	};

#pragma warning(pop)

}

#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

namespace std {

	using ::terminate;


	using ::set_terminate;
	using ::terminate_handler;

	inline terminate_handler __cdecl get_terminate() noexcept {
		return _get_terminate();
	}
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"


	using ::unexpected;


	using ::set_unexpected;
	using ::unexpected_handler;

	inline unexpected_handler __cdecl get_unexpected() noexcept {
		return _get_unexpected();
	}
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

}











































































































































#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

void __cdecl __ExceptionPtrCreate(void*);
void __cdecl __ExceptionPtrDestroy(void*);
void __cdecl __ExceptionPtrCopy(void*, const void*);
void __cdecl __ExceptionPtrAssign(void*, const void*);
bool __cdecl __ExceptionPtrCompare(const void*, const void*);
bool __cdecl __ExceptionPtrToBool(const void*);
void __cdecl __ExceptionPtrSwap(void*, void*);
void __cdecl __ExceptionPtrCurrentException(void*);
[[noreturn]] void __cdecl __ExceptionPtrRethrow(const void*);
void __cdecl __ExceptionPtrCopyException(
	void*, const void*, const void*);

namespace std {

	class exception_ptr {
	public:
		exception_ptr() noexcept {
			__ExceptionPtrCreate(this);
		}

		exception_ptr(nullptr_t) noexcept {
			__ExceptionPtrCreate(this);
		}

		~exception_ptr() noexcept {
			__ExceptionPtrDestroy(this);
		}

		exception_ptr(const exception_ptr& _Rhs) noexcept {
			__ExceptionPtrCopy(this, &_Rhs);
		}

		exception_ptr& operator=(const exception_ptr& _Rhs) noexcept {
			__ExceptionPtrAssign(this, &_Rhs);
			return *this;
		}

		exception_ptr& operator=(nullptr_t) noexcept {
			exception_ptr _Ptr;
			__ExceptionPtrAssign(this, &_Ptr);
			return *this;
		}

		explicit operator bool() const noexcept {
			return __ExceptionPtrToBool(this);
		}

		[[noreturn]] void _RethrowException() const {
			__ExceptionPtrRethrow(this);
		}

		static exception_ptr _Current_exception() noexcept {
			exception_ptr _Retval;
			__ExceptionPtrCurrentException(&_Retval);
			return _Retval;
		}

		static exception_ptr _Copy_exception(void* _Except, const void* _Ptr) {
			exception_ptr _Retval;
			if (!_Ptr) {

				return _Retval;
			}
			__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
			return _Retval;
		}

	private:




		void* _Data1;
		void* _Data2;



	};

	inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) noexcept {
		__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

	inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept {
		return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

	inline bool operator==(nullptr_t, const exception_ptr& _Rhs) noexcept {
		return !_Rhs;
	}

	inline bool operator==(const exception_ptr& _Lhs, nullptr_t) noexcept {
		return !_Lhs;
	}

	inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept {
		return !(_Lhs == _Rhs);
	}

	inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) noexcept {
		return !(_Lhs == _Rhs);
	}

	inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) noexcept {
		return !(_Lhs == _Rhs);
	}

	inline exception_ptr current_exception() noexcept {
		return exception_ptr::_Current_exception();
	}

	[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) {
		_Ptr._RethrowException();
	}

	template <class _Ex>
	void* __GetExceptionInfo(_Ex);

	template <class _Ex>
	exception_ptr make_exception_ptr(_Ex _Except) noexcept {
		return exception_ptr::_Copy_exception(::std::addressof(_Except), __GetExceptionInfo(_Except));
	}


	class nested_exception {
	public:
		nested_exception() noexcept : _Exc(::std::current_exception()) {}

		nested_exception(const nested_exception&) noexcept = default;
		nested_exception& operator=(const nested_exception&) noexcept = default;
		virtual ~nested_exception() noexcept {}

		[[noreturn]] void rethrow_nested() const {
			if (_Exc) {
				::std::rethrow_exception(_Exc);
			}
			else {
				::std::terminate();
			}
		}

		exception_ptr nested_ptr() const noexcept {
			return _Exc;
		}

	private:
		exception_ptr _Exc;
	};


	template <class _Ty, class _Uty>
	struct _With_nested : _Uty, nested_exception {
		explicit _With_nested(_Ty&& _Arg)
			: _Uty(::std::forward<_Ty>(_Arg)), nested_exception() {
		}
	};

	template <class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type) {
		using _Uty   = decay_t<_Ty>;
		using _Glued = _With_nested<_Ty, _Uty>;

		throw _Glued(::std::forward<_Ty>(_Arg));
	}

	template <class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type) {
		throw ::std::forward<_Ty>(_Arg);
	}

	template <class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg) {
		using _Uty = decay_t<_Ty>;

		bool_constant<is_class_v<_Uty> && !is_base_of_v<nested_exception, _Uty> && !is_final_v<_Uty>> _Tag;

		_Throw_with_nested(::std::forward<_Ty>(_Arg), _Tag);
	}



	template <class _Ty>
	inline void _Rethrow_if_nested(const _Ty* _Ptr, true_type) {
		const auto _Nested = dynamic_cast<const nested_exception*>(_Ptr);

		if (_Nested) {
			_Nested->rethrow_nested();
		}
	}

	template <class _Ty>
	inline void _Rethrow_if_nested(const _Ty*, false_type) {
	}

	template <class _Ty>
	inline void rethrow_if_nested(const _Ty& _Arg) {
		bool_constant<
			is_polymorphic_v<_Ty> && (!is_base_of_v<nested_exception, _Ty> || is_convertible_v<_Ty*, nested_exception*>)>
			_Tag;

		_Rethrow_if_nested(::std::addressof(_Arg), _Tag);
	}



#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"

}



#pragma warning(pop)
#pragma pack(pop)

#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"

#pragma once






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstring"

#pragma once






#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"










#pragma once







__pragma(pack(push, 8)) extern "C" {




	__declspec(dllimport) int __cdecl _memicmp(
		void const* _Buf1,
		void const* _Buf2,
		size_t      _Size
	);


	__declspec(dllimport) int __cdecl _memicmp_l(
		void const* _Buf1,
		void const* _Buf2,
		size_t      _Size,
		_locale_t   _Locale
	);


















#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"














#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"





	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
		__declspec(dllimport) void* __cdecl memccpy(
			void* _Dst,
			void const* _Src,
			int         _Val,
			size_t      _Size
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
		__declspec(dllimport) int __cdecl memicmp(
			void const* _Buf1,
			void const* _Buf2,
			size_t      _Size
		);

#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"





	extern "C++"
		inline void* __cdecl memchr(
			void* _Pv,
			int    _C,
			size_t _N
		)
	{
		void const* const _Pvc = _Pv;
		return const_cast<void*>(memchr(_Pvc, _C, _N));
	}

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_memory.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"





__pragma(pack(push, 8)) extern "C" {








	__declspec(dllimport) errno_t __cdecl strcpy_s(
		char* _Destination,
		rsize_t     _SizeInBytes,
		char const* _Source
	);


	__declspec(dllimport) errno_t __cdecl strcat_s(
		char* _Destination,
		rsize_t     _SizeInBytes,
		char const* _Source
	);


	__declspec(dllimport) errno_t __cdecl strerror_s(
		char* _Buffer,
		size_t _SizeInBytes,
		int    _ErrorNumber);


	__declspec(dllimport) errno_t __cdecl strncat_s(
		char* _Destination,
		rsize_t     _SizeInBytes,
		char const* _Source,
		rsize_t     _MaxCount
	);


	__declspec(dllimport) errno_t __cdecl strncpy_s(
		char* _Destination,
		rsize_t     _SizeInBytes,
		char const* _Source,
		rsize_t     _MaxCount
	);


	__declspec(dllimport) char* __cdecl strtok_s(
		char* _String,
		char const* _Delimiter,
		char** _Context
	);

#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(dllimport) void* __cdecl _memccpy(
		void* _Dst,
		void const* _Src,
		int         _Val,
		size_t      _MaxCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char(&_Destination)[_Size], char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcat(char* _Destination, char const* _Source);
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
#pragma warning(pop)

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	int __cdecl strcmp(
		char const* _Str1,
		char const* _Str2
	);


	__declspec(dllimport) int __cdecl _strcmpi(
		char const* _String1,
		char const* _String2
	);


	__declspec(dllimport) int __cdecl strcoll(
		char const* _String1,
		char const* _String2
	);


	__declspec(dllimport) int __cdecl _strcoll_l(
		char const* _String1,
		char const* _String2,
		_locale_t   _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char(&_Destination)[_Size], char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcpy(char* _Destination, char const* _Source);
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
#pragma warning(pop)


	__declspec(dllimport) size_t __cdecl strcspn(
		char const* _Str,
		char const* _Control
	);




#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
		char const* _Source
	);



#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _strerror(
			char const* _ErrorMessage
		);


	__declspec(dllimport) errno_t __cdecl _strerror_s(
		char* _Buffer,
		size_t      _SizeInBytes,
		char const* _ErrorMessage
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char(&_Buffer)[_Size], char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl strerror(
			int _ErrorMessage
		);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char(&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) int __cdecl _stricmp(
		char const* _String1,
		char const* _String2
	);


	__declspec(dllimport) int __cdecl _stricoll(
		char const* _String1,
		char const* _String2
	);


	__declspec(dllimport) int __cdecl _stricoll_l(
		char const* _String1,
		char const* _String2,
		_locale_t   _Locale
	);


	__declspec(dllimport) int __cdecl _stricmp_l(
		char const* _String1,
		char const* _String2,
		_locale_t   _Locale
	);


	size_t __cdecl strlen(
		char const* _Str
	);


	__declspec(dllimport) errno_t __cdecl _strlwr_s(
		char* _String,
		size_t _Size
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char(&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr(char* _String);
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
		char* _String,
		size_t    _Size,
		_locale_t _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char(&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l(char* _String, _locale_t _Locale);
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char(&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat(char* _Destination, char const* _Source, size_t _Count);
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) int __cdecl strncmp(
		char const* _Str1,
		char const* _Str2,
		size_t      _MaxCount
	);


	__declspec(dllimport) int __cdecl _strnicmp(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount
	);


	__declspec(dllimport) int __cdecl _strnicmp_l(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount,
		_locale_t   _Locale
	);


	__declspec(dllimport) int __cdecl _strnicoll(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount
	);


	__declspec(dllimport) int __cdecl _strnicoll_l(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount,
		_locale_t   _Locale
	);


	__declspec(dllimport) int __cdecl _strncoll(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount
	);


	__declspec(dllimport) int __cdecl _strncoll_l(
		char const* _String1,
		char const* _String2,
		size_t      _MaxCount,
		_locale_t   _Locale
	);

	__declspec(dllimport) size_t __cdecl __strncnt(
		char const* _String,
		size_t      _Count
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char(&_Destination)[_Size], char const* _Source, size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy(char* _Destination, char const* _Source, size_t _Count);
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"



#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
	__declspec(dllimport) size_t __cdecl strnlen(
		char const* _String,
		size_t      _MaxCount
	);





#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
	static __inline size_t __cdecl strnlen_s(
		char const* _String,
		size_t      _MaxCount
	)
	{
		return _String == 0 ? 0 : strnlen(_String, _MaxCount);
	}

#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) errno_t __cdecl _strnset_s(
		char* _String,
		size_t _SizeInBytes,
		int    _Value,
		size_t _MaxCount
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char(&_Destination)[_Size], int _Value, size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset(char* _Destination, int _Value, size_t _Count);
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) char const* __cdecl strpbrk(
		char const* _Str,
		char const* _Control
	);

	__declspec(dllimport) char* __cdecl _strrev(
		char* _Str
	);


	__declspec(dllimport) errno_t __cdecl _strset_s(
		char* _Destination,
		size_t _DestinationSize,
		int    _Value
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char(&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strset(char* _Destination, int _Value);
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) size_t __cdecl strspn(
		char const* _Str,
		char const* _Control
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl strtok(
			char* _String,
			char const* _Delimiter
		);


	__declspec(dllimport) errno_t __cdecl _strupr_s(
		char* _String,
		size_t _Size
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char(&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr(char* _String);
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"


	__declspec(dllimport) errno_t __cdecl _strupr_s_l(
		char* _String,
		size_t    _Size,
		_locale_t _Locale
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char(&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l(char* _String, _locale_t _Locale);
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"



	__declspec(dllimport) size_t __cdecl strxfrm(
		char* _Destination,
		char const* _Source,
		size_t      _MaxCount
	);



	__declspec(dllimport) size_t __cdecl _strxfrm_l(
		char* _Destination,
		char const* _Source,
		size_t      _MaxCount,
		_locale_t   _Locale
	);




	extern "C++"
	{

		inline char* __cdecl strchr(char* const _String, int const _Ch)
		{
			return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
		}


		inline char* __cdecl strpbrk(char* const _String, char const* const _Control)
		{
			return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
		}


		inline char* __cdecl strrchr(char* const _String, int const _Ch)
		{
			return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
		}


		inline char* __cdecl strstr(char* const _String, char const* const _SubString)
		{
			return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
		}
	}
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"







	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
		__declspec(dllimport) char* __cdecl strdup(
			char const* _String
		);



	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
		__declspec(dllimport) int __cdecl strcmpi(
			char const* _String1,
			char const* _String2
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
		__declspec(dllimport) int __cdecl stricmp(
			char const* _String1,
			char const* _String2
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
		__declspec(dllimport) char* __cdecl strlwr(
			char* _String
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
		__declspec(dllimport) int __cdecl strnicmp(
			char const* _String1,
			char const* _String2,
			size_t      _MaxCount
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
		__declspec(dllimport) char* __cdecl strnset(
			char* _String,
			int    _Value,
			size_t _MaxCount
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
		__declspec(dllimport) char* __cdecl strrev(
			char* _String
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
		char* __cdecl strset(
			char* _String,
			int   _Value);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
		__declspec(dllimport) char* __cdecl strupr(
			char* _String
		);

#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\string.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstring"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
#pragma warning(push)
#pragma warning(disable : 4995) 

	using ::size_t;
	using ::memchr;
	using ::memcmp;
	using ::memcpy;
	using ::memmove;
	using ::memset;
	using ::strcat;
	using ::strchr;
	using ::strcmp;
	using ::strcoll;
	using ::strcpy;
	using ::strcspn;
	using ::strerror;
	using ::strlen;
	using ::strncat;
	using ::strncmp;
	using ::strncpy;
	using ::strpbrk;
	using ::strrchr;
	using ::strspn;
	using ::strstr;
	using ::strtok;
	using ::strxfrm;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstring"
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstring"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"



#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {




















#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"


	using streamoff  = long long;
	using streamsize = long long;


	template <class _Statetype>
	class fpos {
	public:
		fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {
		}

		fpos(_Statetype _State, fpos_t _Fileposition)
			: _Myoff(_Fileposition), _Fpos(0), _Mystate(_State) {
		}

		_Statetype state() const {
			return _Mystate;
		}

		void state(_Statetype _State) {
			_Mystate = _State;
		}

		operator streamoff() const {


			return _Myoff + _Fpos;
		}


		[[deprecated("warning STL4019: " "The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with " "workarounds for old versions of Visual C++. It will be removed in a future release, and in this " "release always returns 0. Please use standards-conforming mechanisms to manipulate fpos, such as " "conversions to and from streamoff, or an integral type, instead. If you are receiving this message " "while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use " "standards-conforming mechanisms, as it does for other compilers. You can define " "_SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to acknowledge that you have received this warning, " "or define _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely.")]] fpos_t seekpos() const noexcept {
			return {};
		}
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"

		streamoff operator-(const fpos & _Right) const {
			return static_cast<streamoff>(*this) - static_cast<streamoff>(_Right);
		}

		fpos& operator+=(streamoff _Off) {
			_Myoff += _Off;
			return *this;
		}

		fpos& operator-=(streamoff _Off) {
			_Myoff -= _Off;
			return *this;
		}

		fpos operator+(streamoff _Off) const {
			fpos _Tmp = *this;
			_Tmp += _Off;
			return _Tmp;
		}

		fpos operator-(streamoff _Off) const {
			fpos _Tmp = *this;
			_Tmp -= _Off;
			return _Tmp;
		}

		bool operator==(const fpos& _Right) const {
			return static_cast<streamoff>(*this) == static_cast<streamoff>(_Right);
		}

		template <class _Int, enable_if_t<is_integral_v<_Int>, int> = 0>
		friend bool operator==(const fpos & _Left, const _Int _Right) {
			return static_cast<streamoff>(_Left) == _Right;
		}

		template <class _Int, enable_if_t<is_integral_v<_Int>, int> = 0>
		friend bool operator==(const _Int _Left, const fpos & _Right) {
			return _Left == static_cast<streamoff>(_Right);
		}

		bool operator!=(const fpos& _Right) const {
			return static_cast<streamoff>(*this) != static_cast<streamoff>(_Right);
		}

		template <class _Int, enable_if_t<is_integral_v<_Int>, int> = 0>
		friend bool operator!=(const fpos & _Left, const _Int _Right) {
			return static_cast<streamoff>(_Left) != _Right;
		}

		template <class _Int, enable_if_t<is_integral_v<_Int>, int> = 0>
		friend bool operator!=(const _Int _Left, const fpos & _Right) {
			return _Left != static_cast<streamoff>(_Right);
		}

	private:
		streamoff _Myoff;
		fpos_t _Fpos;
		_Statetype _Mystate;
	};

	using streampos  = fpos<_Mbstatet>;
	using wstreampos = streampos;


	class locale;
	template <class _Facet>
	const _Facet& __cdecl use_facet(const locale&);

	template <class _Elem>
	struct char_traits;
	template <>
	struct char_traits<char>;



#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"
	template <>
	struct char_traits<char16_t>;
	template <>
	struct char_traits<char32_t>;
	template <>
	struct char_traits<wchar_t>;

	template <>
	struct char_traits<unsigned short>;
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"

	template <class _Ty>
	class allocator;
	class ios_base;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_ios;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class istreambuf_iterator;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class ostreambuf_iterator;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_streambuf;

#pragma vtordisp(push, 2) 
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_istream;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_ostream;
#pragma vtordisp(pop) 

	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_iostream;
	template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
	class basic_stringbuf;
	template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
	class basic_istringstream;
	template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
	class basic_ostringstream;
	template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
	class basic_stringstream;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_filebuf;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_ifstream;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_ofstream;
	template <class _Elem, class _Traits = char_traits<_Elem>>
	class basic_fstream;


	template <class _Elem, class _InIt>
	class num_get;
	template <class _Elem, class _OutIt>
	class num_put;
	template <class _Elem>
	class collate;
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"


	using ios           = basic_ios<char, char_traits<char>>;
	using streambuf     = basic_streambuf<char, char_traits<char>>;
	using istream       = basic_istream<char, char_traits<char>>;
	using ostream       = basic_ostream<char, char_traits<char>>;
	using iostream      = basic_iostream<char, char_traits<char>>;
	using stringbuf     = basic_stringbuf<char, char_traits<char>, allocator<char>>;
	using istringstream = basic_istringstream<char, char_traits<char>, allocator<char>>;
	using ostringstream = basic_ostringstream<char, char_traits<char>, allocator<char>>;
	using stringstream  = basic_stringstream<char, char_traits<char>, allocator<char>>;
	using filebuf       = basic_filebuf<char, char_traits<char>>;
	using ifstream      = basic_ifstream<char, char_traits<char>>;
	using ofstream      = basic_ofstream<char, char_traits<char>>;
	using fstream       = basic_fstream<char, char_traits<char>>;


	using wios           = basic_ios<wchar_t, char_traits<wchar_t>>;
	using wstreambuf     = basic_streambuf<wchar_t, char_traits<wchar_t>>;
	using wistream       = basic_istream<wchar_t, char_traits<wchar_t>>;
	using wostream       = basic_ostream<wchar_t, char_traits<wchar_t>>;
	using wiostream      = basic_iostream<wchar_t, char_traits<wchar_t>>;
	using wstringbuf     = basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
	using wistringstream = basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
	using wostringstream = basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
	using wstringstream  = basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
	using wfilebuf       = basic_filebuf<wchar_t, char_traits<wchar_t>>;
	using wifstream      = basic_ifstream<wchar_t, char_traits<wchar_t>>;
	using wofstream      = basic_ofstream<wchar_t, char_traits<wchar_t>>;
	using wfstream       = basic_fstream<wchar_t, char_traits<wchar_t>>;






#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"
}



#pragma warning(pop)
#pragma pack(pop)
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\typeinfo"
















#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




#pragma warning(disable : 4275) 

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"







#pragma once




#pragma pack(push, 8)






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"
struct __type_info_node;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"




extern __type_info_node __type_info_root_node;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"



__pragma(pack(push, 8)) extern "C" {

	struct __std_type_info_data
	{
		const char* _UndecoratedName;
		const char   _DecoratedName[1];
		__std_type_info_data() = delete;
		__std_type_info_data(const __std_type_info_data&) = delete;
		__std_type_info_data(__std_type_info_data&&) = delete;

		__std_type_info_data& operator=(const __std_type_info_data&) = delete;
		__std_type_info_data& operator=(__std_type_info_data&&) = delete;
	};

	int __cdecl __std_type_info_compare(
		const __std_type_info_data* _Lhs,
		const __std_type_info_data* _Rhs
	);

	size_t __cdecl __std_type_info_hash(
		const __std_type_info_data* _Data
	);

	const char* __cdecl __std_type_info_name(
		__std_type_info_data* _Data,
		__type_info_node* _RootNode
	);

} __pragma(pack(pop))


#pragma warning(push)
#pragma warning(disable: 4577) 
class type_info
{
public:

	type_info(const type_info&) = delete;
	type_info& operator=(const type_info&) = delete;

	size_t hash_code() const noexcept
	{
		return __std_type_info_hash(&_Data);
	}

	bool operator==(const type_info& _Other) const noexcept
	{
		return __std_type_info_compare(&_Data, &_Other._Data) == 0;
	}

	bool operator!=(const type_info& _Other) const noexcept
	{
		return __std_type_info_compare(&_Data, &_Other._Data) != 0;
	}

	bool before(const type_info& _Other) const noexcept
	{
		return __std_type_info_compare(&_Data, &_Other._Data) < 0;
	}

	const char* name() const noexcept
	{



		return __std_type_info_name(&_Data, &__type_info_root_node);
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"
	}

	const char* raw_name() const noexcept
	{
		return _Data._DecoratedName;
	}

	virtual ~type_info() noexcept;

private:

	mutable __std_type_info_data _Data;
};
#pragma warning(pop)

namespace std {
	using ::type_info;
}



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
	class bad_cast
		: public exception
	{
	public:

		bad_cast() noexcept
			: exception("bad cast", 1)
		{
		}

		static bad_cast __construct_from_string_literal(const char* const _Message) noexcept
		{
			return bad_cast(_Message, 1);
		}

	private:

		bad_cast(const char* const _Message, int) noexcept
			: exception(_Message, 1)
		{
		}
	};

	class bad_typeid
		: public exception
	{
	public:

		bad_typeid() noexcept
			: exception("bad typeid", 1)
		{
		}

		static bad_typeid __construct_from_string_literal(const char* const _Message) noexcept
		{
			return bad_typeid(_Message, 1);
		}

	private:

		friend class __non_rtti_object;

		bad_typeid(const char* const _Message, int) noexcept
			: exception(_Message, 1)
		{
		}
	};

	class __non_rtti_object
		: public bad_typeid
	{
	public:

		static __non_rtti_object __construct_from_string_literal(const char* const _Message) noexcept
		{
			return __non_rtti_object(_Message, 1);
		}

	private:

		__non_rtti_object(const char* const _Message, int) noexcept
			: bad_typeid(_Message, 1)
		{
		}
	};

#pragma warning(pop)
}

#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vcruntime_typeinfo.h"
#pragma pack(pop)
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\typeinfo"

namespace std {


	constexpr int _Small_object_num_ptrs = 6 + 16 / sizeof(void*);




































#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\typeinfo"

}



#pragma pack(pop)
#pragma warning(pop)
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\typeinfo"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\typeinfo"







#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdint"

#pragma once






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdint.h"







#pragma once








typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;

















































#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdint.h"




































#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdint.h"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdint"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
	using ::int8_t;
	using ::int16_t;
	using ::int32_t;
	using ::int64_t;
	using ::uint8_t;
	using ::uint16_t;
	using ::uint32_t;
	using ::uint64_t;

	using ::int_least8_t;
	using ::int_least16_t;
	using ::int_least32_t;
	using ::int_least64_t;
	using ::uint_least8_t;
	using ::uint_least16_t;
	using ::uint_least32_t;
	using ::uint_least64_t;

	using ::int_fast8_t;
	using ::int_fast16_t;
	using ::int_fast32_t;
	using ::int_fast64_t;
	using ::uint_fast8_t;
	using ::uint_fast16_t;
	using ::uint_fast32_t;
	using ::uint_fast64_t;

	using ::intmax_t;
	using ::intptr_t;
	using ::uintmax_t;
	using ::uintptr_t;


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::int8_t;
		using ::int16_t;
		using ::int32_t;
		using ::int64_t;
		using ::uint8_t;
		using ::uint16_t;
		using ::uint32_t;
		using ::uint64_t;

		using ::int_least8_t;
		using ::int_least16_t;
		using ::int_least32_t;
		using ::int_least64_t;
		using ::uint_least8_t;
		using ::uint_least16_t;
		using ::uint_least32_t;
		using ::uint_least64_t;

		using ::int_fast8_t;
		using ::int_fast16_t;
		using ::int_fast32_t;
		using ::int_fast64_t;
		using ::uint_fast8_t;
		using ::uint_fast16_t;
		using ::uint_fast32_t;
		using ::uint_fast64_t;

		using ::intmax_t;
		using ::intptr_t;
		using ::uintmax_t;
		using ::uintptr_t;
	}
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdint"
}



#pragma warning(pop)
#pragma pack(pop)

#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdint"
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cstdint"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\new"

#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
















#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\new"




	using new_handler = void(__cdecl*)();
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\new"


	new_handler __cdecl set_new_handler(new_handler) noexcept;
	new_handler __cdecl get_new_handler() noexcept;
}



#pragma warning(pop)
#pragma pack(pop)

#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\new"
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\new"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"












#pragma once





extern "C" {
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"






























#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"


#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"






#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"






#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"




#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"









	unsigned char _BitScanForward(unsigned long* _Index, unsigned long _Mask);
	unsigned char _BitScanForward64(unsigned long* _Index, unsigned __int64 _Mask);

	unsigned char _BitScanReverse(unsigned long* _Index, unsigned long _Mask);
	unsigned char _BitScanReverse64(unsigned long* _Index, unsigned __int64 _Mask);

	unsigned char _bittest(long const*, long);
	long _InterlockedAnd(long volatile* _Value, long _Mask);
	short _InterlockedAnd16(short volatile* _Value, short _Mask);



	__int64 _InterlockedAnd64(__int64 volatile* _Value, __int64 _Mask);



	char _InterlockedAnd8(char volatile* _Value, char _Mask);






	long  _InterlockedCompareExchange(long volatile* _Destination, long _Exchange, long _Comparand);

	short _InterlockedCompareExchange16(short volatile* _Destination, short _Exchange, short _Comparand);



	__int64 _InterlockedCompareExchange64(__int64 volatile* _Destination, __int64 _Exchange, __int64 _Comparand);



	char _InterlockedCompareExchange8(char volatile* _Destination, char _Exchange, char _Comparand);






	long  _InterlockedDecrement(long volatile* _Addend);

	short _InterlockedDecrement16(short volatile* _Addend);
	__int64 _InterlockedDecrement64(__int64 volatile* _Addend);
	long  _InterlockedExchange(long volatile* _Target, long _Value);

	short _InterlockedExchange16(short volatile* _Target, short _Value);



	__int64 _InterlockedExchange64(__int64 volatile* _Target, __int64 _Value);



	char _InterlockedExchange8(char volatile* _Target, char _Value);



	long  _InterlockedExchangeAdd(long volatile* _Addend, long _Value);
	short _InterlockedExchangeAdd16(short volatile* _Addend, short _Value);



	__int64 _InterlockedExchangeAdd64(__int64 volatile* _Addend, __int64 _Value);



	char _InterlockedExchangeAdd8(char volatile* _Addend, char _Value);









	long  _InterlockedIncrement(long volatile* _Addend);

	short _InterlockedIncrement16(short volatile* _Addend);
	__int64 _InterlockedIncrement64(__int64 volatile* _Addend);

	long _InterlockedOr(long volatile* _Value, long _Mask);
	short _InterlockedOr16(short volatile* _Value, short _Mask);



	__int64 _InterlockedOr64(__int64 volatile* _Value, __int64 _Mask);



	char _InterlockedOr8(char volatile* _Value, char _Mask);






	long _InterlockedXor(long volatile* _Value, long _Mask);
	short _InterlockedXor16(short volatile* _Value, short _Mask);



	__int64 _InterlockedXor64(__int64 volatile* _Value, __int64 _Mask);



	char _InterlockedXor8(char volatile* _Value, char _Mask);






	void _ReadWriteBarrier(void);










	unsigned char _interlockedbittestandset(long volatile*, long);



	unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
	unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64* _HighProduct);








}
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\intrin0.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )























#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"












#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"

namespace std {


	enum memory_order {
		memory_order_relaxed,
		memory_order_consume,
		memory_order_acquire,
		memory_order_release,
		memory_order_acq_rel,
		memory_order_seq_cst
	};

	using _Atomic_counter_t = unsigned long;


	template <class _Integral, class _Ty>
	inline volatile _Integral* _Atomic_address_as(_Ty& _Source) noexcept {

		static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
		return &reinterpret_cast<volatile _Integral&>(_Source);
	}

}



#pragma warning(pop)
#pragma pack(pop)
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xatomic.h"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

#pragma once








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Ty>
	constexpr const _Ty& _Min_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Right < _Left)) {
		return _Right < _Left ? _Right : _Left;
	}


	template <class _Ty>
	constexpr const _Ty& _Max_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Left < _Right)) {
		return _Left < _Right ? _Right : _Left;
	}


	template <class _FwdIt1, class _FwdIt2>
	inline void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) {
		swap(*_Left, *_Right);
	}


	template <class _Ty, size_t _Size, class>
	inline void swap(_Ty(&_Left)[_Size], _Ty(&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value) {
		if (&_Left != &_Right) {
			_Ty* _First1 = _Left;
			_Ty* _Last1 = _First1 + _Size;
			_Ty* _First2 = _Right;
			for (; _First1 != _Last1; ++_First1, ++_First2) {
				::std::iter_swap(_First1, _First2);
			}
		}
	}

	template <class _Ty, class>
	inline void swap(_Ty& _Left, _Ty& _Right) noexcept(is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
		_Ty _Tmp = ::std::move(_Left);
		_Left = ::std::move(_Right);
		_Right = ::std::move(_Tmp);
	}


	template <class _Ty>
	inline void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value) {
		swap(_Left, _Right);
	}


	struct piecewise_construct_t {
		explicit piecewise_construct_t() = default;
	};

	constexpr piecewise_construct_t piecewise_construct{};


	template <class...>
	class tuple;

	template <class _Ty1,
		class _Ty2>
		struct pair {
		using first_type  = _Ty1;
		using second_type = _Ty2;

		template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
			enable_if_t<conjunction_v<is_default_constructible<_Uty1>, is_default_constructible<_Uty2>,
			_Is_implicitly_default_constructible<_Uty1>, _Is_implicitly_default_constructible<_Uty2>>,
			int> = 0>
			constexpr pair() noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(), second() {}

		template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
			enable_if_t<conjunction_v<is_default_constructible<_Uty1>, is_default_constructible<_Uty2>,
			negation<conjunction<_Is_implicitly_default_constructible<_Uty1>,
			_Is_implicitly_default_constructible<_Uty2>>>>,
			int> = 0>
			constexpr explicit pair() noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(), second() {}

		template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
			enable_if_t<conjunction_v<is_copy_constructible<_Uty1>, is_copy_constructible<_Uty2>,
			is_convertible<const _Uty1&, _Uty1>, is_convertible<const _Uty2&, _Uty2>>,
			int> = 0>
			constexpr pair(const _Ty1 & _Val1, const _Ty2 & _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)
			: first(_Val1), second(_Val2) {}

		template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
			enable_if_t<
			conjunction_v<is_copy_constructible<_Uty1>, is_copy_constructible<_Uty2>,
			negation<conjunction<is_convertible<const _Uty1&, _Uty1>, is_convertible<const _Uty2&, _Uty2>>>>,
			int> = 0>
			constexpr explicit pair(const _Ty1 & _Val1, const _Ty2 & _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)
			: first(_Val1), second(_Val2) {}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>,
			int> = 0>
			constexpr pair(_Other1 && _Val1, _Other2 && _Val2) noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(::std::forward<_Other1>(_Val1)), second(::std::forward<_Other2>(_Val2)) {}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>,
			negation<conjunction<is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>>>,
			int> = 0>
			constexpr explicit pair(_Other1 && _Val1, _Other2 && _Val2) noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(::std::forward<_Other1>(_Val1)), second(::std::forward<_Other2>(_Val2)) {}

		pair(const pair&) = default;
		pair(pair&&) = default;

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<is_constructible<_Ty1, const _Other1&>, is_constructible<_Ty2, const _Other2&>,
			is_convertible<const _Other1&, _Ty1>, is_convertible<const _Other2&, _Ty2>>,
			int> = 0>
			constexpr pair(const pair<_Other1, _Other2> & _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(_Right.first), second(_Right.second) {}

		template <class _Other1, class _Other2,
			enable_if_t<
			conjunction_v<is_constructible<_Ty1, const _Other1&>, is_constructible<_Ty2, const _Other2&>,
			negation<conjunction<is_convertible<const _Other1&, _Ty1>, is_convertible<const _Other2&, _Ty2>>>>,
			int> = 0>
			constexpr explicit pair(const pair<_Other1, _Other2> & _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(_Right.first), second(_Right.second) {}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>,
			int> = 0>
			constexpr pair(pair<_Other1, _Other2> && _Right) noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(::std::forward<_Other1>(_Right.first)), second(::std::forward<_Other2>(_Right.second)) {}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>,
			negation<conjunction<is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>>>,
			int> = 0>
			constexpr explicit pair(pair<_Other1, _Other2> && _Right) noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
			: first(::std::forward<_Other1>(_Right.first)), second(::std::forward<_Other2>(_Right.second)) {}

		template <class _Tuple1, class _Tuple2, size_t... _Indexes1, size_t... _Indexes2>
		inline pair(_Tuple1& _Val1, _Tuple2& _Val2, index_sequence<_Indexes1...>, index_sequence<_Indexes2...>);

		template <class... _Types1, class... _Types2>
		inline pair(piecewise_construct_t, tuple<_Types1...> _Val1, tuple<_Types2...> _Val2);

		pair& operator=(const volatile pair&) = delete;

		template <class _Myself = pair,
			enable_if_t<conjunction_v<_Is_copy_assignable_no_precondition_check<typename _Myself::first_type>,
			_Is_copy_assignable_no_precondition_check<typename _Myself::second_type>>,
			int> = 0>
			pair & operator=(_Identity_t<const _Myself&> _Right) noexcept(conjunction_v<is_nothrow_copy_assignable<_Ty1>, is_nothrow_copy_assignable<_Ty2>>) {
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

			first = _Right.first;
			second = _Right.second;
			return *this;
		}

		template <class _Myself = pair,
			enable_if_t<conjunction_v<_Is_move_assignable_no_precondition_check<typename _Myself::first_type>,
			_Is_move_assignable_no_precondition_check<typename _Myself::second_type>>,
			int> = 0>
			pair & operator=(_Identity_t<_Myself&&> _Right) noexcept(conjunction_v<is_nothrow_move_assignable<_Ty1>, is_nothrow_move_assignable<_Ty2>>) {
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

			first = ::std::forward<_Ty1>(_Right.first);
			second = ::std::forward<_Ty2>(_Right.second);
			return *this;
		}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<negation<is_same<pair, pair<_Other1, _Other2>>>, is_assignable<_Ty1&, const _Other1&>,
			is_assignable<_Ty2&, const _Other2& >>,
			int> = 0>
			pair & operator=(const pair<_Other1, _Other2> & _Right)
			noexcept(is_nothrow_assignable_v<_Ty1&, const _Other1&> && is_nothrow_assignable_v<_Ty2&, const _Other2&>) {
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

			first = _Right.first;
			second = _Right.second;
			return *this;
		}

		template <class _Other1, class _Other2,
			enable_if_t<conjunction_v<negation<is_same<pair, pair<_Other1, _Other2>>>, is_assignable<_Ty1&, _Other1>,
			is_assignable<_Ty2&, _Other2>>,
			int> = 0>
			pair & operator=(pair<_Other1, _Other2> && _Right) noexcept(is_nothrow_assignable_v<_Ty1&, _Other1> && is_nothrow_assignable_v<_Ty2&, _Other2>) {
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

			first = ::std::forward<_Other1>(_Right.first);
			second = ::std::forward<_Other2>(_Right.second);
			return *this;
		}

		void swap(pair& _Right) noexcept(_Is_nothrow_swappable<_Ty1>::value&& _Is_nothrow_swappable<_Ty2>::value) {
			if (this != ::std::addressof(_Right)) {
				_Swap_adl(first, _Right.first);
				_Swap_adl(second, _Right.second);
			}
		}

		_Ty1 first;
		_Ty2 second;
	};




#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

	template <class _Ty1, class _Ty2, class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>>
	inline void swap(pair<_Ty1, _Ty2> & _Left, pair<_Ty1, _Ty2> & _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		_Left.swap(_Right);
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator==(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return _Left.first == _Right.first && _Left.second == _Right.second;
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator!=(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return !(_Left == _Right);
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator<(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator>(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return _Right < _Left;
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator<=(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return !(_Right < _Left);
	}

	template <class _Ty1, class _Ty2>
	constexpr bool operator>=(
		const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
		return !(_Left < _Right);
	}


	template <class _Ty>
	struct _Unrefwrap_helper {
		using type = _Ty;
	};

	template <class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty>> {
		using type = _Ty &;
	};


	template <class _Ty>
	using _Unrefwrap_t = typename _Unrefwrap_helper<decay_t<_Ty>>::type;


	template <class _Ty1, class _Ty2>
	constexpr pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>> make_pair(
		_Ty1&& _Val1, _Ty2&& _Val2) {
		using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
		return _Mypair(::std::forward<_Ty1>(_Val1), ::std::forward<_Ty2>(_Val2));
	}

	namespace rel_ops {
		template <class _Ty>
		inline bool operator!=(
			const _Ty& _Left, const _Ty& _Right) {
			return !(_Left == _Right);
		}

		template <class _Ty>
		inline bool operator>(
			const _Ty& _Left, const _Ty& _Right) {
			return _Right < _Left;
		}

		template <class _Ty>
		inline bool operator<=(
			const _Ty& _Left, const _Ty& _Right) {
			return !(_Right < _Left);
		}

		template <class _Ty>
		inline bool operator>=(
			const _Ty& _Left, const _Ty& _Right) {
			return !(_Left < _Right);
		}
	}
}

namespace std {

	template <class _Tuple>
	struct tuple_size;

	template <class _Tuple,
		class = void>
		struct _Tuple_size_sfinae {
	};

	template <class _Tuple>
	struct _Tuple_size_sfinae<_Tuple, void_t<decltype(tuple_size<_Tuple>::value)>>
		: integral_constant<size_t, tuple_size<_Tuple>::value> {
	};

	template <class _Tuple>
	struct tuple_size<const _Tuple> : _Tuple_size_sfinae<_Tuple> {
	};

	template <class _Tuple>
	struct tuple_size<volatile _Tuple> : _Tuple_size_sfinae<_Tuple> {
	};

	template <class _Tuple>
	struct tuple_size<const volatile _Tuple> : _Tuple_size_sfinae<_Tuple> {
	};

	template <class _Ty>
	constexpr size_t tuple_size_v = tuple_size<_Ty>::value;

	template <size_t _Index, class _Tuple>
	struct tuple_element;

	template <size_t _Index, class _Tuple>
	struct tuple_element<_Index, const _Tuple> : public tuple_element<_Index, _Tuple> {
		using _Mybase = tuple_element<_Index, _Tuple>;
		using type    = add_const_t<typename _Mybase::type>;
	};

	template <size_t _Index, class _Tuple>
	struct tuple_element<_Index, volatile _Tuple> : public tuple_element<_Index, _Tuple> {
		using _Mybase = tuple_element<_Index, _Tuple>;
		using type    = add_volatile_t<typename _Mybase::type>;
	};

	template <size_t _Index, class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple> {
		using _Mybase = tuple_element<_Index, _Tuple>;
		using type    = add_cv_t<typename _Mybase::type>;
	};

	template <size_t _Index, class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;


	template <class _Ty, size_t _Size>
	class array;

	template <class _Ty, size_t _Size>
	struct tuple_size<array<_Ty, _Size>>
		: integral_constant<size_t, _Size> {
	};

	template <size_t _Idx, class _Ty, size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size>> {
		static_assert(_Idx < _Size, "array index out of bounds");

		using type = _Ty;
	};



	template <class... _Types>
	struct tuple_size<tuple<_Types...>> : integral_constant<size_t, sizeof...(_Types)> {
	};

	template <size_t _Index>
	struct tuple_element<_Index, tuple<>> {
		static_assert(_Always_false<integral_constant<size_t, _Index>>, "tuple index out of bounds");
	};

	template <class _This, class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...>> {
		using type   = _This;
		using _Ttype = tuple<_This, _Rest...>;
	};

	template <size_t _Index, class _This, class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...>>
		: public tuple_element<_Index - 1, tuple<_Rest...>> {
	};


	template <class _Ty1, class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2>> : integral_constant<size_t, 2> {
	};

	template <size_t _Idx, class _Ty1, class _Ty2>
	struct tuple_element<_Idx, pair<_Ty1, _Ty2>> {
		static_assert(_Idx < 2, "pair index out of bounds");

		using type = conditional_t<_Idx == 0, _Ty1, _Ty2>;
	};

	template <class _Ret, class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr, integral_constant<size_t, 0>) noexcept {
		return _Pr.first;
	}

	template <class _Ret, class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr, integral_constant<size_t, 1>) noexcept {
		return _Pr.second;
	}

	template <size_t _Idx, class _Ty1, class _Ty2>
	constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>& get(
		pair<_Ty1, _Ty2>& _Pr) noexcept {
		using _Rtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>> &;
		return _Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>());
	}

	template <class _Ty1, class _Ty2>
	constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept {
		return ::std::get<0>(_Pr);
	}

	template <class _Ty2, class _Ty1>
	constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept {
		return ::std::get<1>(_Pr);
	}

	template <size_t _Idx, class _Ty1, class _Ty2>
	constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>& get(
		const pair<_Ty1, _Ty2>& _Pr) noexcept {
		using _Ctype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>> &;
		return _Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>());
	}

	template <class _Ty1, class _Ty2>
	constexpr const _Ty1& get(
		const pair<_Ty1, _Ty2>& _Pr) noexcept {
		return ::std::get<0>(_Pr);
	}

	template <class _Ty2, class _Ty1>
	constexpr const _Ty2& get(
		const pair<_Ty1, _Ty2>& _Pr) noexcept {
		return ::std::get<1>(_Pr);
	}

	template <size_t _Idx, class _Ty1, class _Ty2>
	constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&& get(
		pair<_Ty1, _Ty2>&& _Pr) noexcept {
		using _RRtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>> &&;
		return ::std::forward<_RRtype>(::std::get<_Idx>(_Pr));
	}

	template <class _Ty1, class _Ty2>
	constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept {
		return ::std::get<0>(::std::move(_Pr));
	}

	template <class _Ty2, class _Ty1>
	constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept {
		return ::std::get<1>(::std::move(_Pr));
	}

	template <size_t _Idx, class _Ty1, class _Ty2>
	constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&& get(
		const pair<_Ty1, _Ty2>&& _Pr) noexcept {
		using _RRtype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>> &&;
		return ::std::forward<_RRtype>(::std::get<_Idx>(_Pr));
	}

	template <class _Ty1, class _Ty2>
	constexpr const _Ty1&& get(
		const pair<_Ty1, _Ty2>&& _Pr) noexcept {
		return ::std::get<0>(::std::move(_Pr));
	}

	template <class _Ty2, class _Ty1>
	constexpr const _Ty2&& get(
		const pair<_Ty1, _Ty2>&& _Pr) noexcept {
		return ::std::get<1>(::std::move(_Pr));
	}


	template <class _Ty, class _Other = _Ty>
	inline _Ty exchange(_Ty & _Val, _Other && _New_val) {
		_Ty _Old_val = static_cast<_Ty&&>(_Val);
		_Val = static_cast<_Other&&>(_New_val);
		return _Old_val;
	}


	template <class _Ty>
	constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept {
		return _Val;
	}

	template <class _Ty>
	void as_const(const _Ty&&) = delete;





















#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::get;
		using ::std::tuple_element;
		using ::std::tuple_size;
	}
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"

}



#pragma warning(pop)
#pragma pack(pop)
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\utility"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )





extern "C" {







	__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void* _First, void* _Last) noexcept;
	__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void* _First, void* _Last) noexcept;
	__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void* _First, void* _Last) noexcept;
	__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void* _First, void* _Last) noexcept;
}
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

namespace std {


	template <class _Fx>
	struct _Ref_fn {
		template <class... _Args>
		constexpr decltype(auto) operator()(_Args&& ... _Vals) {
			return _Fn(::std::forward<_Args>(_Vals)...);
		}

		_Fx& _Fn;
	};

	template <class _Fn>
	constexpr bool
		_Pass_functor_by_value_v = sizeof(_Fn) <= sizeof(void*)
		&& conjunction_v<is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;

	template <class _Fn, enable_if_t<_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Fn _Pass_fn(_Fn _Val) {
		return _Val;
	}

	template <class _Fn, enable_if_t<!_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Ref_fn<_Fn> _Pass_fn(_Fn & _Val) {
		return { _Val };
	}



	struct input_iterator_tag {
	};

	struct output_iterator_tag {
	};

	struct forward_iterator_tag : input_iterator_tag {
	};

	struct bidirectional_iterator_tag : forward_iterator_tag {
	};

	struct random_access_iterator_tag : bidirectional_iterator_tag {
	};


	struct _Unused_parameter {
		constexpr _Unused_parameter() noexcept = default;
		template <class _Ty>
		constexpr _Unused_parameter(_Ty&&) noexcept {}
	};


	using _Any_tag = _Unused_parameter;


	template <class _Ty>
	using _Algorithm_int_t = conditional_t<is_integral_v<_Ty>, _Ty, ptrdiff_t>;


	template <class,
		class = void>
		struct _Iterator_traits_base {
	};

	template <class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<typename _Iter::iterator_category, typename _Iter::value_type,
		typename _Iter::difference_type, typename _Iter::pointer,
		typename _Iter::reference>> {
		using iterator_category = typename _Iter::iterator_category;
		using value_type        = typename _Iter::value_type;
		using difference_type   = typename _Iter::difference_type;

		using pointer   = typename _Iter::pointer;
		using reference = typename _Iter::reference;
	};

	template <class _Ty,
		bool = is_object_v<_Ty>>
		struct _Iterator_traits_pointer_base {
		using iterator_category = random_access_iterator_tag;
		using value_type        = remove_cv_t<_Ty>;
		using difference_type   = ptrdiff_t;

		using pointer   = _Ty *;
		using reference = _Ty &;
	};

	template <class _Ty>
	struct _Iterator_traits_pointer_base<_Ty, false> {

	};

	template <class _Iter>
	struct iterator_traits : _Iterator_traits_base<_Iter> {
	};

	template <class _Ty>
	struct iterator_traits<_Ty*> : _Iterator_traits_pointer_base<_Ty> {
	};


	template <class _Iter>
	using _Iter_ref_t = typename iterator_traits<_Iter>::reference;


	template <class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;


	template <class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;


	template <class... _Iters>
	using _Common_diff_t = common_type_t<_Iter_diff_t<_Iters>...>;


	template <class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;


	template <class _Ty, class = void>
	constexpr bool _Is_iterator_v = false;

	template <class _Ty>
	constexpr bool _Is_iterator_v<_Ty, void_t<_Iter_cat_t<_Ty>>> = true;


	template <class _Ty>
	struct _Is_iterator : bool_constant<_Is_iterator_v<_Ty>> {};


	template <class _Iter>
	constexpr bool _Is_input_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, input_iterator_tag>;


	template <class _Iter>
	constexpr bool _Is_fwd_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, forward_iterator_tag>;


	template <class _Iter>
	constexpr bool _Is_bidi_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, bidirectional_iterator_tag>;


	template <class _Iter>
	constexpr bool _Is_random_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, random_access_iterator_tag>;


	template <class,
		class = void>
		struct _Is_checked_helper {
	};



	template <class _Ty>
	constexpr void _Verify_range(
		const _Ty* const _First, const _Ty* const _Last) noexcept {
		do { if (_First <= _Last) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 195, 0, "%s", "transposed pointer range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"transposed pointer range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 195, 0); } while (false); }; } while (false);
	}
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Iter, class = void>
	struct _Allow_inheriting_unwrap : true_type {};

	template <class _Iter>
	struct _Allow_inheriting_unwrap<_Iter, enable_if_t<!is_same_v<_Iter, typename _Iter::_Prevent_inheriting_unwrap>>>
		: false_type {};

	template <class _Iter, class _Sentinel = _Iter, class = void>
	struct _Range_verifiable : false_type {};

	template <class _Iter, class _Sentinel>
	struct _Range_verifiable<_Iter, _Sentinel,
		void_t<decltype(_Verify_range(::std::declval<const _Iter&>(), ::std::declval<const _Sentinel&>()))>>
		: _Allow_inheriting_unwrap<_Iter>::type {};

	template <class _Iter, class _Sentinel = _Iter>
	constexpr bool _Range_verifiable_v = _Range_verifiable<_Iter, _Sentinel>::value;


	template <class _Iter, class _Sentinel>
	constexpr void _Adl_verify_range(
		const _Iter& _First, const _Sentinel& _Last) {
		if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
			_Verify_range(_First, _Last);
		}
		else {
			(void)_First;
			(void)_Last;
		}
	}

















#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _Iter, class = void>
	struct _Unwrappable : false_type {};

	template <class _Iter>
	struct _Unwrappable<_Iter, void_t<decltype(::std::declval<_Iter&>()._Seek_to(::std::declval<const _Iter&>()._Unwrapped()))>>
		: _Allow_inheriting_unwrap<_Iter>::type {};

	template <class _Iter>
	constexpr bool _Unwrappable_v = _Unwrappable<_Iter>::value;

	template <class _Iter, enable_if_t<_Unwrappable_v<_Iter>, int> = 0>
	constexpr auto _Get_unwrapped(const _Iter & _It) {

		return _It._Unwrapped();
	}

	template <class _Iter, enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	constexpr const _Iter & _Get_unwrapped(const _Iter & _It) {

		return _It;
	}

	template <class _Iter, enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	constexpr const _Iter && _Get_unwrapped(const _Iter && _It) {

		return static_cast<const _Iter&&>(_It);
	}

	template <class _Ty>
	constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) {
		return _Ptr;
	}

	template <class _Iter>
	using _Unwrapped_t = _Remove_cvref_t<decltype(_Get_unwrapped(::std::declval<const _Iter&>()))>;


	template <class _Iter, class = bool>
	struct _Do_unwrap_when_unverified : false_type {};

	template <class _Iter>
	struct _Do_unwrap_when_unverified<_Iter, decltype(static_cast<bool>(_Iter::_Unwrap_when_unverified))>
		: bool_constant<static_cast<bool>(_Iter::_Unwrap_when_unverified)> {};

	template <class _Iter>
	constexpr bool _Do_unwrap_when_unverified_v = _Do_unwrap_when_unverified<_Iter>::value;

	template <class _Iter>
	constexpr bool _Unwrappable_for_unverified_v = _Unwrappable_v<_Iter> && _Do_unwrap_when_unverified_v<_Iter>;

	template <class _Iter, enable_if_t<_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	constexpr auto _Get_unwrapped_unverified(const _Iter & _It) {

		return _It._Unwrapped();
	}

	template <class _Iter, enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	constexpr const _Iter & _Get_unwrapped_unverified(const _Iter & _It) {

		return _It;
	}

	template <class _Iter, enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	constexpr const _Iter && _Get_unwrapped_unverified(const _Iter && _It) {

		return static_cast<const _Iter&&>(_It);
	}

	template <class _Ty>
	constexpr _Ty* _Get_unwrapped_unverified(_Ty* const _Ptr) {
		return _Ptr;
	}

	template <class _Iter>
	using _Unwrapped_unverified_t = _Remove_cvref_t<decltype(_Get_unwrapped_unverified(::std::declval<const _Iter&>()))>;


	struct _Distance_unknown {
		constexpr _Distance_unknown operator-() const noexcept {
			return {};
		}
	};

	template <class _Diff>
	constexpr _Diff _Max_possible_v = static_cast<_Diff>(static_cast<make_unsigned_t<_Diff>>(-1) >> 1);

	template <class _Diff>
	constexpr _Diff _Min_possible_v = -_Max_possible_v<_Diff> -1;

	template <class _Iter, class = void>
	struct _Offset_verifiable : false_type {};

	template <class _Iter>
	struct _Offset_verifiable < _Iter, void_t<decltype(::std::declval<const _Iter&>()._Verify_offset(_Iter_diff_t<_Iter>{})) >>
		: true_type {};

	template <class _Iter>
	constexpr bool _Offset_verifiable_v = _Offset_verifiable<_Iter>::value;

	template <class _Iter>
	constexpr bool _Unwrappable_for_offset_v = _Unwrappable_v<_Iter> && _Offset_verifiable_v<_Iter>;

	template <class _Iter, class _Diff, enable_if_t<_Unwrappable_for_offset_v<_Iter>&& is_integral_v<_Diff>, int> = 0>
	constexpr auto _Get_unwrapped_n(const _Iter & _It, const _Diff _Off) {

		using _IDiff     = _Iter_diff_t<_Iter>;
		using _CDiff     = common_type_t<_Diff, _IDiff>;
		const auto _COff = static_cast<_CDiff>(_Off);

		do { if (_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>) && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 360, 0, "%s", "integer overflow")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"integer overflow\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 360, 0); } while (false); }; } while (false);
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
		(void)_COff;

		_It._Verify_offset(static_cast<_IDiff>(_Off));
		return _It._Unwrapped();
	}

	template <class _Iter, class _Diff,
		enable_if_t<
		_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter>&& is_integral_v<_Diff>) || is_same_v<_Diff, _Distance_unknown>),
		int> = 0>
		constexpr auto _Get_unwrapped_n(const _Iter & _It, _Diff) {

		return _It._Unwrapped();
	}

	template <class _Iter, class _Diff,
		enable_if_t<
		!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter>&& is_integral_v<_Diff>) || is_same_v<_Diff, _Distance_unknown>),
		int> = 0>
		constexpr const _Iter & _Get_unwrapped_n(const _Iter & _It, _Diff) {

		return _It;
	}

	template <class _Iter, class _Diff,
		enable_if_t<
		!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter>&& is_integral_v<_Diff>) || is_same_v<_Diff, _Distance_unknown>),
		int> = 0>
		constexpr const _Iter && _Get_unwrapped_n(const _Iter && _It, _Diff) {

		return static_cast<const _Iter&&>(_It);
	}

	template <class _Ty, class _Diff, enable_if_t<is_same_v<_Diff, _Distance_unknown> || is_integral_v<_Diff>, int> = 0>
	constexpr _Ty * _Get_unwrapped_n(_Ty * const _Src, _Diff) {
		return _Src;
	}

	template <class _Iter>
	using _Unwrapped_n_t = _Remove_cvref_t<decltype(_Get_unwrapped_n(::std::declval<const _Iter&>(), _Iter_diff_t<_Iter>{})) > ;


	template <class _Iter, class _UIter, class = void>
	struct _Wrapped_seekable : false_type {};

	template <class _Iter, class _UIter>
	struct _Wrapped_seekable<_Iter, _UIter,
		void_t<decltype(::std::declval<_Iter&>()._Seek_to(::std::declval<const _UIter&>()))>> : true_type {};

	template <class _Iter, class _UIter>
	constexpr bool _Wrapped_seekable_v = _Wrapped_seekable<_Iter, _UIter>::value;


	template <class _Iter, class _UIter>
	constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt) {
		if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
			_It._Seek_to(_UIt);
		}
		else {
			_It = _UIt;
		}
	}










#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Ty>
	constexpr void _Seek_wrapped(_Ty * &_It, _Ty * const _UIt) {
		_It = _UIt;
	}








































#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _Checked, class _Iter>
	inline auto _Idl_distance(const _Iter& _First, const _Iter& _Last) {

		if constexpr (_Is_random_iter_v<_Iter>) {
			return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);
		}
		else {
			(void)_First;
			(void)_Last;
			return _Distance_unknown{};
		}
	}


















#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _Elem, bool _Is_enum = is_enum_v<_Elem>>
	struct _Unwrap_enum {
		using type = underlying_type_t<_Elem>;
	};

	template <class _Elem>
	struct _Unwrap_enum<_Elem, false> {
		using type = _Elem;
	};

	template <class _Elem>
	using _Unwrap_enum_t = typename _Unwrap_enum<_Elem>::type;


	template <class>
	class move_iterator;

	template <class _Source, class _Dest>
	struct _Ptr_cat_helper {
		using _USource                        = _Unwrap_enum_t<_Source>;
		using _UDest                          = _Unwrap_enum_t<_Dest>;
		static constexpr bool _Really_trivial = conjunction_v<
			bool_constant<sizeof(_USource) == sizeof(_UDest) && is_same_v<bool, _USource> == is_same_v<bool, _UDest>>,
			is_integral<_USource>, is_integral<_UDest>>;
		static constexpr bool _Trivially_copyable = _Really_trivial;
	};

	template <class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem> {
		static constexpr bool _Really_trivial = conjunction_v<is_trivial<_Elem>, is_trivially_copyable<_Elem>>;
		static constexpr bool _Trivially_copyable = is_trivially_copyable_v<_Elem>;
	};

	template <class _Anything>
	struct _Ptr_cat_helper<_Anything*, const _Anything*> {

		static constexpr bool _Really_trivial = true;
		static constexpr bool _Trivially_copyable = true;
	};

	template <class _Anything>
	struct _Ptr_cat_helper<_Anything*, volatile _Anything*> {

		static constexpr bool _Really_trivial = true;
		static constexpr bool _Trivially_copyable = true;
	};

	template <class _Anything>
	struct _Ptr_cat_helper<_Anything*, const volatile _Anything*> {

		static constexpr bool _Really_trivial = true;
		static constexpr bool _Trivially_copyable = true;
	};

	struct _False_copy_cat {
		static constexpr bool _Really_trivial = false;
		static constexpr bool _Trivially_copyable = false;
	};

	template <class _Source, class _Dest>
	struct _Ptr_copy_cat : _False_copy_cat {};

	template <class _Source, class _Dest>
	struct _Ptr_copy_cat<_Source*, _Dest*>
		: conditional_t<is_trivially_assignable_v<_Dest&, _Source&>,
		_Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>, _False_copy_cat> {
	};

	template <class _Source, class _Dest>
	struct _Ptr_copy_cat<move_iterator<_Source*>, _Dest*> : _Ptr_copy_cat<_Source*, _Dest*> {
	};

	template <class _Source, class _Dest>
	struct _Ptr_move_cat : _False_copy_cat {};

	template <class _Source, class _Dest>
	struct _Ptr_move_cat<_Source*, _Dest*>
		: conditional_t<is_trivially_assignable_v<_Dest&, _Source>,
		_Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>, _False_copy_cat> {
	};

	template <class _Source, class _Dest>
	struct _Ptr_move_cat<move_iterator<_Source*>, _Dest*> : _Ptr_move_cat<_Source*, _Dest*> {
	};








#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"






	template <class _Pr, class _Ty1, class _Ty2,
		enable_if_t<is_same_v<_Remove_cvref_t<_Ty1>, _Remove_cvref_t<_Ty2>>, int> = 0>
		constexpr bool _Debug_lt_pred(_Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right)
		noexcept(noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

		const auto _Result = static_cast<bool>(_Pred(_Left, _Right));
		if (_Result) {
			do { if (!_Pred(_Right, _Left)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 624, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 624, 0); } while (false); }; } while (false);
		}

		return _Result;
	}

	template <class _Pr, class _Ty1, class _Ty2,
		enable_if_t<!is_same_v<_Remove_cvref_t<_Ty1>, _Remove_cvref_t<_Ty2>>, int> = 0>
		constexpr bool _Debug_lt_pred(_Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right) noexcept(noexcept(_Pred(_Left, _Right))) {

		return static_cast<bool>(_Pred(_Left, _Right));
	}



	template <class _InIt, class _Sentinel, class _Pr>
	inline void _Debug_order_unchecked(_InIt _First, _Sentinel _Last, _Pr&& _Pred) {

		if constexpr (_Is_fwd_iter_v<_InIt>) {
			if (_First != _Last) {
				for (auto _Next = _First; ++_Next != _Last; _First = _Next) {
					do { if (!static_cast<bool>(_Pred(*_Next, *_First))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 645, 0, "%s", "sequence not ordered")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"sequence not ordered\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 645, 0); } while (false); }; } while (false);
				}
			}
		}
		else {
			(void)_First;
			(void)_Last;
			(void)_Pred;
		}
	}





















#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _OtherIt, class _InIt, class _Pr>
	inline void _Debug_order_set_unchecked(_InIt _First, _InIt _Last, _Pr&& _Pred) {

		if constexpr (is_same_v<_Iter_value_t<_OtherIt>, _Iter_value_t<_InIt>> && _Is_fwd_iter_v<_InIt>) {
			_Debug_order_unchecked(_First, _Last, _Pred);
		}
		else {
			(void)_First;
			(void)_Last;
			(void)_Pred;
		}
	}



























#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"




	template <class _InIt, class _Diff>
	inline void advance(_InIt & _Where, _Diff _Off) {
		if constexpr (_Is_random_iter_v<_InIt>) {
			_Where += _Off;
		}
		else {
			if constexpr (is_signed_v<_Diff>) {
				if constexpr (_Is_bidi_iter_v<_InIt>) {
					for (; _Off < 0; ++_Off) {
						--_Where;
					}
				}
				else {
					do { if (_Off >= 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 734, 0, "%s", "negative advance of non-bidirectional iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"negative advance of non-bidirectional iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 734, 0); } while (false); }; } while (false);
				}
			}

			for (; 0 < _Off; --_Off) {
				++_Where;
			}
		}
	}





































#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _InIt>
	inline _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {
		if constexpr (_Is_random_iter_v<_InIt>) {
			return _Last - _First;
		}
		else {
			_Adl_verify_range(_First, _Last);
			auto _UFirst = _Get_unwrapped(_First);
			const auto _ULast = _Get_unwrapped(_Last);
			_Iter_diff_t<_InIt> _Off = 0;
			for (; _UFirst != _ULast; ++_UFirst) {
				++_Off;
			}

			return _Off;
		}
	}

























#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _InIt>
	constexpr _InIt _Next_iter(_InIt _First) {
		return ++_First;
	}


	template <class _InIt>
	inline _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1) {
		static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");

		::std::advance(_First, _Off);
		return _First;
	}


	template <class _BidIt>
	constexpr _BidIt _Prev_iter(_BidIt _First) {
		return --_First;
	}


	template <class _BidIt>
	inline _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1) {
		static_assert(_Is_bidi_iter_v<_BidIt>, "prev requires bidirectional iterator");

		::std::advance(_First, -_Off);
		return _First;
	}


	template <class _Ty>
	struct pointer_traits;

	template <class _Iterator>
	constexpr _Iterator _Operator_arrow(_Iterator _Target, true_type) {
		return _Target;
	}

	template <class _Iterator>
	constexpr decltype(auto) _Operator_arrow(_Iterator&& _Target, false_type) {

		return ::std::forward<_Iterator>(_Target).operator->();
	}

	template <class _BidIt>
	class reverse_iterator {
	public:
		using iterator_category = typename iterator_traits<_BidIt>::iterator_category;
		using value_type        = typename iterator_traits<_BidIt>::value_type;
		using difference_type   = typename iterator_traits<_BidIt>::difference_type;
		using pointer           = typename iterator_traits<_BidIt>::pointer;
		using reference         = typename iterator_traits<_BidIt>::reference;

		using iterator_type = _BidIt;

		inline reverse_iterator() : current() {}

		inline explicit reverse_iterator(_BidIt _Right) : current(_Right) {}

		template <class _Other>
		inline reverse_iterator(const reverse_iterator<_Other>& _Right) : current(_Right.base()) {}

		template <class _Other>
		inline reverse_iterator& operator=(const reverse_iterator<_Other>& _Right) {

			current = _Right.base();
			return *this;
		}

		inline _BidIt base() const {
			return current;
		}

		inline reference operator*() const {
			_BidIt _Tmp = current;
			return *--_Tmp;
		}

		inline pointer operator->() const {
			_BidIt _Tmp = current;
			--_Tmp;
			return _Operator_arrow(_Tmp, is_pointer<_BidIt>());
		}

		inline reverse_iterator& operator++() {
			--current;
			return *this;
		}

		inline reverse_iterator operator++(int) {
			reverse_iterator _Tmp = *this;
			--current;
			return _Tmp;
		}

		inline reverse_iterator& operator--() {
			++current;
			return *this;
		}

		inline reverse_iterator operator--(int) {
			reverse_iterator _Tmp = *this;
			++current;
			return _Tmp;
		}



		inline reverse_iterator& operator+=(const difference_type _Off) {
			current -= _Off;
			return *this;
		}

		inline reverse_iterator operator+(const difference_type _Off) const {
			return reverse_iterator(current - _Off);
		}

		inline reverse_iterator& operator-=(const difference_type _Off) {
			current += _Off;
			return *this;
		}

		inline reverse_iterator operator-(const difference_type _Off) const {
			return reverse_iterator(current + _Off);
		}

		inline reference operator[](const difference_type _Off) const {
			return current[static_cast<difference_type>(-_Off - 1)];
		}

		using _Prevent_inheriting_unwrap = reverse_iterator;

		template <class _BidIt2 = _BidIt, enable_if_t<_Offset_verifiable_v<_BidIt2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const {
			do { if (_Off != _Min_possible_v<difference_type>) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 962, 0, "%s", "integer overflow")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"integer overflow\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 962, 0); } while (false); }; } while (false);
			current._Verify_offset(-_Off);
		}

		template <class _BidIt2 = _BidIt, enable_if_t<_Unwrappable_v<_BidIt2>, int> = 0>
		constexpr reverse_iterator<_Unwrapped_t<_BidIt2>> _Unwrapped() const {
			return static_cast<reverse_iterator<_Unwrapped_t<_BidIt2>>>(current._Unwrapped());
		}

		static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<_BidIt>;

		template <class _Src, enable_if_t<_Wrapped_seekable_v<_BidIt, _Src>, int> = 0>
		constexpr void _Seek_to(const reverse_iterator<_Src> & _It) {
			current._Seek_to(_It.base());
		}

	protected:
		_BidIt current;
	};

	template <class _BidIt, class _BidIt2, enable_if_t<_Range_verifiable_v<_BidIt, _BidIt2>, int> = 0>
	constexpr void _Verify_range(const reverse_iterator<_BidIt> & _First, const reverse_iterator<_BidIt2> & _Last) {

		_Verify_range(_Last.base(), _First.base());
	}

	template <class _BidIt>
	inline reverse_iterator<_BidIt> operator+(
		typename reverse_iterator<_BidIt>::difference_type _Off, const reverse_iterator<_BidIt>& _Right) {
		return _Right + _Off;
	}

	template <class _BidIt1, class _BidIt2>
	inline auto operator-(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
		-> decltype(_Right.base() - _Left.base()) {
		return _Right.base() - _Left.base();
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator==(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return _Left.base() == _Right.base();
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator!=(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return !(_Left == _Right);
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator<(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return _Right.base() < _Left.base();
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator>(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return _Right < _Left;
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator<=(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return !(_Right < _Left);
	}

	template <class _BidIt1, class _BidIt2>
	inline bool operator>=(
		const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
		return !(_Left < _Right);
	}


	template <class _BidIt>
	inline reverse_iterator<_BidIt> make_reverse_iterator(
		_BidIt _Iter) {
		return reverse_iterator<_BidIt>(_Iter);
	}


	template <class _Container>
	inline auto begin(_Container& _Cont) -> decltype(_Cont.begin()) {
		return _Cont.begin();
	}

	template <class _Container>
	inline auto begin(const _Container& _Cont) -> decltype(_Cont.begin()) {
		return _Cont.begin();
	}

	template <class _Container>
	inline auto end(_Container& _Cont) -> decltype(_Cont.end()) {
		return _Cont.end();
	}

	template <class _Container>
	inline auto end(const _Container& _Cont) -> decltype(_Cont.end()) {
		return _Cont.end();
	}

	template <class _Ty, size_t _Size>
	constexpr _Ty* begin(_Ty(&_Array)[_Size]) noexcept {
		return _Array;
	}

	template <class _Ty, size_t _Size>
	constexpr _Ty* end(_Ty(&_Array)[_Size]) noexcept {
		return _Array + _Size;
	}


	template <class _Container>
	constexpr auto cbegin(const _Container& _Cont) noexcept(noexcept(::std::begin(_Cont)))
		-> decltype(::std::begin(_Cont)) {
		return ::std::begin(_Cont);
	}

	template <class _Container>
	constexpr auto cend(const _Container& _Cont) noexcept(noexcept(::std::end(_Cont)))
		-> decltype(::std::end(_Cont)) {
		return ::std::end(_Cont);
	}


	template <class _Container>
	inline auto rbegin(_Container& _Cont)
		-> decltype(_Cont.rbegin()) {
		return _Cont.rbegin();
	}

	template <class _Container>
	inline auto rbegin(const _Container& _Cont)
		-> decltype(_Cont.rbegin()) {
		return _Cont.rbegin();
	}

	template <class _Container>
	inline auto rend(_Container& _Cont) -> decltype(_Cont.rend()) {
		return _Cont.rend();
	}

	template <class _Container>
	inline auto rend(const _Container& _Cont) -> decltype(_Cont.rend()) {
		return _Cont.rend();
	}

	template <class _Ty,
		size_t _Size>
		inline reverse_iterator<_Ty*> rbegin(_Ty(&_Array)[_Size]) {
		return reverse_iterator<_Ty*>(_Array + _Size);
	}

	template <class _Ty,
		size_t _Size>
		inline reverse_iterator<_Ty*> rend(_Ty(&_Array)[_Size]) {
		return reverse_iterator<_Ty*>(_Array);
	}

	template <class _Elem>
	inline reverse_iterator<const _Elem*> rbegin(
		initializer_list<_Elem> _Ilist) {
		return reverse_iterator<const _Elem*>(_Ilist.end());
	}

	template <class _Elem>
	inline reverse_iterator<const _Elem*> rend(
		initializer_list<_Elem> _Ilist) {
		return reverse_iterator<const _Elem*>(_Ilist.begin());
	}


	template <class _Container>
	inline auto crbegin(const _Container& _Cont)
		-> decltype(::std::rbegin(_Cont)) {
		return ::std::rbegin(_Cont);
	}

	template <class _Container>
	inline auto crend(const _Container& _Cont)
		-> decltype(::std::rend(_Cont)) {
		return ::std::rend(_Cont);
	}


	template <class _Container>
	constexpr auto size(const _Container& _Cont) -> decltype(_Cont.size()) {
		return _Cont.size();
	}

	template <class _Ty, size_t _Size>
	constexpr size_t size(const _Ty(&)[_Size]) noexcept {
		return _Size;
	}

	template <class _Container>
	constexpr auto empty(const _Container& _Cont) -> decltype(_Cont.empty()) {
		return _Cont.empty();
	}

	template <class _Ty, size_t _Size>
	constexpr bool empty(const _Ty(&)[_Size]) noexcept {
		return false;
	}

	template <class _Elem>
	constexpr bool empty(initializer_list<_Elem> _Ilist) noexcept {
		return _Ilist.size() == 0;
	}

	template <class _Container>
	constexpr auto data(_Container& _Cont) -> decltype(_Cont.data()) {
		return _Cont.data();
	}

	template <class _Container>
	constexpr auto data(const _Container& _Cont)
		-> decltype(_Cont.data()) {
		return _Cont.data();
	}

	template <class _Ty, size_t _Size>
	constexpr _Ty* data(_Ty(&_Array)[_Size]) noexcept {
		return _Array;
	}

	template <class _Elem>
	constexpr const _Elem* data(
		initializer_list<_Elem> _Ilist) noexcept {
		return _Ilist.begin();
	}






	struct _Container_proxy;
	struct _Iterator_base12;



	struct _Iterator_base12_compatible {
		_Container_proxy* _Myproxy{};
		_Iterator_base12* _Mynextiter{};
	};
#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Ty, size_t _Size>
	class _Array_const_iterator

		: private _Iterator_base12_compatible
#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
	{
	public:
		using iterator_category = random_access_iterator_tag;

		using value_type      = _Ty;
		using difference_type = ptrdiff_t;
		using pointer         = const _Ty*;
		using reference       = const _Ty &;
		enum { _EEN_SIZE = _Size };







































































































#line 1329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
		inline _Array_const_iterator() : _Ptr(), _Idx(0) {
		}

		inline explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0) : _Ptr(_Parg), _Idx(_Off) {}

		inline reference operator*() const {
			return *operator->();
		}

		inline pointer operator->() const {
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1339, 0, "%s", "cannot dereference value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized array iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1339, 0); } while (false); }; } while (false);
			do { if (_Idx < _Size) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1340, 0, "%s", "cannot dereference out of range array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference out of range array iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1340, 0); } while (false); }; } while (false);
			return _Ptr + _Idx;
		}

		inline _Array_const_iterator& operator++() {
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1345, 0, "%s", "cannot increment value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized array iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1345, 0); } while (false); }; } while (false);
			do { if (_Idx < _Size) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1346, 0, "%s", "cannot increment array iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment array iterator past end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1346, 0); } while (false); }; } while (false);
			++_Idx;
			return *this;
		}

		inline _Array_const_iterator operator++(int) {
			_Array_const_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		inline _Array_const_iterator& operator--() {
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1358, 0, "%s", "cannot decrement value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized array iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1358, 0); } while (false); }; } while (false);
			do { if (_Idx != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1359, 0, "%s", "cannot decrement array iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement array iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1359, 0); } while (false); }; } while (false);
			--_Idx;
			return *this;
		}

		inline _Array_const_iterator operator--(int) {
			_Array_const_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		constexpr void _Verify_offset(const ptrdiff_t _Off) const noexcept {
			if (_Off != 0) {
				do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1372, 0, "%s", "cannot seek value-initialized array iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized array iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1372, 0); } while (false); }; } while (false);
			}

			if (_Off < 0) {
#pragma warning(suppress : 4146) 
				do { if (_Idx >= -static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1377, 0, "%s", "cannot seek array iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek array iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1377, 0); } while (false); }; } while (false);
			}

			if (_Off > 0) {
				do { if (_Size - _Idx >= static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1381, 0, "%s", "cannot seek array iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek array iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1381, 0); } while (false); }; } while (false);
			}
		}

		inline _Array_const_iterator& operator+=(const ptrdiff_t _Off) {
			_Verify_offset(_Off);
			_Idx += _Off;
			return *this;
		}

		inline _Array_const_iterator operator+(const ptrdiff_t _Off) const {
			_Array_const_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		inline _Array_const_iterator& operator-=(const ptrdiff_t _Off) {
			return *this += -_Off;
		}

		inline _Array_const_iterator operator-(const ptrdiff_t _Off) const {
			_Array_const_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		inline ptrdiff_t operator-(const _Array_const_iterator& _Right) const {
			_Compat(_Right);
			return static_cast<ptrdiff_t>(_Idx - _Right._Idx);
		}

		inline reference operator[](const ptrdiff_t _Off) const {
			return *(*this + _Off);
		}

		inline bool operator==(const _Array_const_iterator& _Right) const {
			_Compat(_Right);
			return _Idx == _Right._Idx;
		}

		inline bool operator!=(const _Array_const_iterator& _Right) const {
			return !(*this == _Right);
		}

		inline bool operator<(const _Array_const_iterator& _Right) const {
			_Compat(_Right);
			return _Idx < _Right._Idx;
		}

		inline bool operator>(const _Array_const_iterator& _Right) const {
			return _Right < *this;
		}

		inline bool operator<=(const _Array_const_iterator& _Right) const {
			return !(_Right < *this);
		}

		inline bool operator>=(const _Array_const_iterator& _Right) const {
			return !(*this < _Right);
		}

		inline void _Compat(const _Array_const_iterator& _Right) const {
			do { if (_Ptr == _Right._Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1441, 0, "%s", "array iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array iterators incompatible\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1441, 0); } while (false); }; } while (false);
		}

		using _Prevent_inheriting_unwrap = _Array_const_iterator;

		constexpr pointer _Unwrapped() const {
			return _Ptr + _Idx;
		}

		constexpr void _Verify_with(const _Array_const_iterator& _Last) const noexcept {

			do { if (*this <= _Last) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1452, 0, "%s", "array iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array iterator range transposed\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1452, 0); } while (false); }; } while (false);
		}

		constexpr void _Seek_to(pointer _It) {
			_Idx = static_cast<size_t>(_It - _Ptr);
		}

	private:
		pointer _Ptr;
		size_t _Idx;
#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
	};


	template <class _Ty, size_t _Size>
	constexpr void _Verify_range(
		const _Array_const_iterator<_Ty, _Size>& _First, const _Array_const_iterator<_Ty, _Size>& _Last) noexcept {

		_First._Verify_with(_Last);
	}
#line 1473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Ty, size_t _Size>
	inline _Array_const_iterator<_Ty, _Size> operator+(
		ptrdiff_t _Off, _Array_const_iterator<_Ty, _Size> _Next) {
		return _Next += _Off;
	}


	template <class _Ty, size_t _Size>
	class _Array_iterator : public _Array_const_iterator<_Ty, _Size> {
	public:
		using _Mybase           = _Array_const_iterator<_Ty, _Size>;
		using iterator_category = random_access_iterator_tag;

		using value_type      = _Ty;
		using difference_type = ptrdiff_t;
		using pointer         = _Ty *;
		using reference       = _Ty &;

		inline _Array_iterator() {
		}

		inline explicit _Array_iterator(pointer _Parg, size_t _Off = 0) : _Mybase(_Parg, _Off) {}

		enum { _EEN_SIZE = _Size };

		inline reference operator*() const {
			return const_cast<reference>(_Mybase::operator*());
		}

		inline pointer operator->() const {
			return const_cast<pointer>(_Mybase::operator->());
		}

		inline _Array_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		inline _Array_iterator operator++(int) {
			_Array_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		inline _Array_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		inline _Array_iterator operator--(int) {
			_Array_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}

		inline _Array_iterator& operator+=(const ptrdiff_t _Off) {
			_Mybase::operator+=(_Off);
			return *this;
		}

		inline _Array_iterator operator+(const ptrdiff_t _Off) const {
			_Array_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		inline _Array_iterator& operator-=(const ptrdiff_t _Off) {
			_Mybase::operator-=(_Off);
			return *this;
		}

		using _Mybase::operator-;

		inline _Array_iterator operator-(const ptrdiff_t _Off) const {
			_Array_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		inline reference operator[](const ptrdiff_t _Off) const {
			return const_cast<reference>(_Mybase::operator[](_Off));
		}

		using _Prevent_inheriting_unwrap = _Array_iterator;

		constexpr pointer _Unwrapped() const {
			return const_cast<pointer>(_Mybase::_Unwrapped());
		}
	};

	template <class _Ty, size_t _Size>
	inline _Array_iterator<_Ty, _Size> operator+(ptrdiff_t _Off, _Array_iterator<_Ty, _Size> _Next) {
		return _Next += _Off;
	}


	struct _Default_sentinel {};


	template <class _Iter>
	class move_iterator {
	public:
		using iterator_category = typename iterator_traits<_Iter>::iterator_category;
		using value_type        = typename iterator_traits<_Iter>::value_type;
		using difference_type   = typename iterator_traits<_Iter>::difference_type;
		using pointer           = _Iter;
		using _Ref0             = typename iterator_traits<_Iter>::reference;
		using reference         = conditional_t<is_reference_v<_Ref0>, remove_reference_t<_Ref0>&&, _Ref0>;
		using iterator_type     = _Iter;

		inline move_iterator() : current() {}

		inline explicit move_iterator(iterator_type _Right)
			: current(_Right) {
		}

		template <class _Iter2>
		inline move_iterator(const move_iterator<_Iter2>& _Right) : current(_Right.base()) {}

		template <class _Iter2>
		inline move_iterator& operator=(const move_iterator<_Iter2>& _Right) {
			current = _Right.base();
			return *this;
		}

		inline _Iter base() const {
			return current;
		}

		inline reference operator*() const {
			return static_cast<reference>(*current);
		}

		inline pointer operator->() const {
			return current;
		}

		inline move_iterator& operator++() {
			++current;
			return *this;
		}

		inline move_iterator operator++(int) {
			move_iterator _Tmp = *this;
			++current;
			return _Tmp;
		}

		inline move_iterator& operator--() {
			--current;
			return *this;
		}

		inline move_iterator operator--(int) {
			move_iterator _Tmp = *this;
			--current;
			return _Tmp;
		}

		template <class _Iter2 = _Iter>
		auto operator==(_Default_sentinel _Sentinel) const noexcept
			-> decltype(::std::declval<const _Iter2&>() == _Sentinel) {
			return current == _Sentinel;
		}

		template <class _Iter2 = _Iter>
		auto operator!=(_Default_sentinel _Sentinel) const noexcept
			-> decltype(::std::declval<const _Iter2&>() != _Sentinel) {
			return current != _Sentinel;
		}



		inline move_iterator& operator+=(const difference_type _Off) {
			current += _Off;
			return *this;
		}

		inline move_iterator operator+(const difference_type _Off) const {
			return move_iterator(current + _Off);
		}

		inline move_iterator& operator-=(const difference_type _Off) {
			current -= _Off;
			return *this;
		}

		inline move_iterator operator-(const difference_type _Off) const {
			return move_iterator(current - _Off);
		}

		inline reference operator[](const difference_type _Off) const {
			return ::std::move(current[_Off]);
		}

		template <class _Iter2, enable_if_t<_Range_verifiable_v<_Iter, _Iter2>, int> = 0>
		friend constexpr void _Verify_range(const move_iterator & _First, const move_iterator<_Iter2> & _Last) {
			_Verify_range(_First.base(), _Last.base());
		}

		using _Prevent_inheriting_unwrap = move_iterator;

		template <class _Iter2 = iterator_type, enable_if_t<_Offset_verifiable_v<_Iter2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const {
			current._Verify_offset(_Off);
		}

		template <class _Iter2 = iterator_type, enable_if_t<_Unwrappable_v<_Iter2>, int> = 0>
		constexpr move_iterator<_Unwrapped_t<_Iter2>> _Unwrapped() const {
			return static_cast<move_iterator<_Unwrapped_t<_Iter2>>>(current._Unwrapped());
		}

		static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<iterator_type>;

		template <class _Src, enable_if_t<_Wrapped_seekable_v<iterator_type, _Src>, int> = 0>
		constexpr void _Seek_to(const move_iterator<_Src> & _It) {
			current._Seek_to(_It.base());
		}

	protected:
		iterator_type current;
	};

	template <class _Iter>
	inline move_iterator<_Iter> operator+(typename move_iterator<_Iter>::difference_type _Off,
		const move_iterator<_Iter>& _Right) {
		return _Right + _Off;
	}

	template <class _Iter1, class _Iter2>
	inline auto operator-(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
		-> decltype(_Left.base() - _Right.base()) {
		return _Left.base() - _Right.base();
	}

	template <class _Iter1, class _Iter2>
	inline bool operator==(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return _Left.base() == _Right.base();
	}

	template <class _Iter1, class _Iter2>
	inline bool operator!=(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return !(_Left == _Right);
	}

	template <class _Iter1, class _Iter2>
	inline bool operator<(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return _Left.base() < _Right.base();
	}

	template <class _Iter1, class _Iter2>
	inline bool operator>(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return _Right < _Left;
	}

	template <class _Iter1, class _Iter2>
	inline bool operator<=(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return !(_Right < _Left);
	}

	template <class _Iter1, class _Iter2>
	inline bool operator>=(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
		return !(_Left < _Right);
	}


	template <class _Iter>
	inline move_iterator<_Iter> make_move_iterator(_Iter _It) {
		return move_iterator<_Iter>(_It);
	}


	template <class _InIt, class _OutIt>
	inline _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {
		const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
		const char* const _Last_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
		char* const _Dest_ch = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
		const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
		::memmove(_Dest_ch, _First_ch, _Count);
		return reinterpret_cast<_OutIt>(_Dest_ch + _Count);
	}

	template <class _InIt, class _OutIt>
	inline _OutIt _Copy_memmove(move_iterator<_InIt> _First, move_iterator<_InIt> _Last, _OutIt _Dest) {
		return _Copy_memmove(_First.base(), _Last.base(), _Dest);
	}


	template <class _InIt, class _OutIt>
	inline _OutIt _Copy_unchecked(
		_InIt _First, _InIt _Last, _OutIt _Dest) {

		if constexpr (_Ptr_copy_cat<_InIt, _OutIt>::_Trivially_copyable) {
			return _Copy_memmove(_First, _Last, _Dest);
		}
		else {
			for (; _First != _Last; ++_Dest, (void) ++_First) {
				*_Dest = *_First;
			}

			return _Dest;
		}
	}























#line 1798 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _InIt, class _OutIt>
	inline _OutIt copy(_InIt _First, _InIt _Last, _OutIt _Dest) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize>
	inline _DestTy* copy(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize]) {
		return ::std::copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped();
	}
#line 1815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"




















#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"




	template <class _InIt, class _Diff, class _OutIt>
	inline _OutIt copy_n(_InIt _First, _Diff _Count_raw, _OutIt _Dest) {
		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			auto _UFirst = _Get_unwrapped_n(_First, _Count);
			auto _UDest = _Get_unwrapped_n(_Dest, _Count);
			if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Trivially_copyable) {
				_UDest = _Copy_memmove(_UFirst, _UFirst + _Count, _UDest);
			}
			else {
				for (;;) {
					*_UDest = *_UFirst;
					++_UDest;
					--_Count;
					if (_Count == 0) {

						break;
					}

					++_UFirst;
				}
			}

			_Seek_wrapped(_Dest, _UDest);
		}

		return _Dest;
	}






































#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _SourceTy, size_t _SourceSize, class _Diff, class _OutIt>
	inline _OutIt copy_n(_SourceTy(&_First)[_SourceSize], _Diff _Count_raw, _OutIt _Dest) {

		const _Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1913, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1913, 0); } while (false); }; } while (false);
			_Seek_wrapped(_Dest, ::std::copy_n(static_cast<_SourceTy*>(_First), _Count, _Get_unwrapped_n(_Dest, _Count)));
		}

		return _Dest;
	}

	template <class _InIt, class _Diff, class _DestTy, size_t _DestSize>
	inline _DestTy* copy_n(_InIt _First, _Diff _Count_raw, _DestTy(&_Dest)[_DestSize]) {

		const _Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1925, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1925, 0); } while (false); }; } while (false);
			return ::std::copy_n(_First, _Count, static_cast<_DestTy*>(_Dest));
		}

		return _Dest;
	}

	template <class _SourceTy, size_t _SourceSize, class _Diff, class _DestTy, size_t _DestSize>
	inline _DestTy* copy_n(_SourceTy(&_First)[_SourceSize], _Diff _Count_raw, _DestTy(&_Dest)[_DestSize]) {

		const _Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1937, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1937, 0); } while (false); }; } while (false);
			do { if ((::std::size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1938, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 1938, 0); } while (false); }; } while (false);
			return ::std::copy_n(static_cast<_SourceTy*>(_First), _Count, static_cast<_DestTy*>(_Dest));
		}

		return _Dest;
	}
#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"







































#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _BidIt1, class _BidIt2>
	inline _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

		const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
		const char* const _Last_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
		char* const _Dest_ch = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
		const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
		return static_cast<_BidIt2>(::memmove(_Dest_ch - _Count, _First_ch, _Count));
	}

	template <class _BidIt1, class _BidIt2>
	inline _BidIt2 _Copy_backward_memmove(move_iterator<_BidIt1> _First, move_iterator<_BidIt1> _Last, _BidIt2 _Dest) {
		return _Copy_backward_memmove(_First.base(), _Last.base(), _Dest);
	}


	template <class _BidIt1, class _BidIt2>
	inline _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
		if constexpr (_Ptr_copy_cat<decltype(_ULast), decltype(_UDest)>::_Trivially_copyable) {
			_UDest = _Copy_backward_memmove(_UFirst, _ULast, _UDest);
		}
		else {
			while (_UFirst != _ULast) {
				*--_UDest = *--_ULast;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}




























#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"








#line 2059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _InIt, class _OutIt>
	inline _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {


		if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
			return _Copy_memmove(_First, _Last, _Dest);
		}
		else {
			for (; _First != _Last; ++_Dest, (void) ++_First) {
				*_Dest = ::std::move(*_First);
			}

			return _Dest;
		}
	}























#line 2100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _InIt, class _OutIt>
	inline _OutIt move(_InIt _First, _InIt _Last, _OutIt _Dest) {

		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		_Seek_wrapped(_Dest, _Move_unchecked(_UFirst, _ULast, _UDest));
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize>
	inline _DestTy* move(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize]) {
		return ::std::move(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped();
	}
#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"




















#line 2139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _BidIt1, class _BidIt2>
	inline _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {


		if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
			return _Copy_backward_memmove(_First, _Last, _Dest);
		}
		else {
			while (_First != _Last) {
				*--_Dest = ::std::move(*--_Last);
			}

			return _Dest;
		}
	}
























#line 2181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _BidIt1, class _BidIt2>
	inline _BidIt2 move_backward(
		_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		const auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
		_Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));
		return _Dest;
	}








#line 2201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _Ty>
	struct _Is_character : false_type {};

	template <>
	struct _Is_character<char> : true_type {};

	template <>
	struct _Is_character<signed char> : true_type {};

	template <>
	struct _Is_character<unsigned char> : true_type {};




#line 2219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Ty>
	struct _Is_character_or_byte : _Is_character<_Ty>::type {};




#line 2227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"



	template <class _FwdIt, class _Ty,
		class _Value_type = _Iter_value_t<_FwdIt>,
		class _Raw_ty = _Unwrap_enum_t<_Ty>,
		class _Raw_value_type = _Unwrap_enum_t<_Value_type>>
		constexpr bool _Fill_memset_is_safe =
		conjunction_v<
		is_pointer<_FwdIt>,
		disjunction<
		conjunction<_Is_character_or_byte<_Raw_ty>, _Is_character_or_byte<_Raw_value_type>>,
		conjunction<is_same<bool, _Raw_ty>, is_same<bool, _Raw_value_type>>>,
		is_assignable<_Iter_ref_t<_FwdIt>, const _Ty& >>;



	template <class _FwdIt, class _Ty>
	inline void fill(const _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if constexpr (_Fill_memset_is_safe<_Unwrapped_t<_FwdIt>, _Ty>) {
			::memset(_UFirst, static_cast<unsigned char>(_Val), static_cast<size_t>(_ULast - _UFirst));
		}
		else {
			for (; _UFirst != _ULast; ++_UFirst) {
				*_UFirst = _Val;
			}
		}
	}





















#line 2279 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"









#line 2289 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"




	template <class _OutIt, class _Diff, class _Ty>
	inline _OutIt fill_n(_OutIt _Dest, const _Diff _Count_raw, const _Ty& _Val) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			auto _UDest = _Get_unwrapped_n(_Dest, _Count);
			if constexpr (_Fill_memset_is_safe<decltype(_UDest), _Ty>) {
				::memset(_UDest, static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
				_UDest += _Count;
			}
			else {
				for (; 0 < _Count; --_Count, (void) ++_UDest) {
					*_UDest = _Val;
				}
			}

			_Seek_wrapped(_Dest, _UDest);
		}

		return _Dest;
	}































#line 2345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"









#line 2355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _Elem1, class _Elem2>
	struct _Value_equality_is_bitwise_equality : bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)> {



	};

	template <class _Elem1, class _Elem2,
		class _Pr>
		struct _Equal_memcmp_is_safe_helper : false_type {

	};

	template <class _Elem1, class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: bool_constant<conjunction_v<bool_constant<sizeof(_Elem1) == sizeof(_Elem2)
		&& _Is_nonbool_integral<_Elem1> && _Is_nonbool_integral<_Elem2>>,
		negation<is_volatile<_Elem1>>, negation<is_volatile<_Elem2>>,


		_Value_equality_is_bitwise_equality<_Elem1, _Elem2>>> {

	};

	template <class _Elem1, class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1*, _Elem2*, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type {
	};





#line 2391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type {


	};

	template <class _Iter1, class _Iter2, class _Pr>
	inline false_type _Equal_memcmp_is_safe(
		const _Iter1&, const _Iter2&, const _Pr&) {
		return {};
	}

	template <class _Obj1, class _Obj2, class _Pr>
	inline typename _Equal_memcmp_is_safe_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _Pr>::type
		_Equal_memcmp_is_safe(_Obj1* const&, _Obj2* const&, const _Pr&) {
		return {};
	}


	template <class _InIt1, class _InIt2, class _Pr>
	inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Pr _Pred) {

		_Adl_verify_range(_First1, _Last1);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
		if constexpr (decltype(_Equal_memcmp_is_safe(_UFirst1, _UFirst2, _Pred))::value) {
			const auto _First1_ch = reinterpret_cast<const char*>(_UFirst1);
			const auto _First2_ch = reinterpret_cast<const char*>(_UFirst2);
			const auto _Count = static_cast<size_t>(reinterpret_cast<const char*>(_ULast1) - _First1_ch);
			return ::memcmp(_First1_ch, _First2_ch, _Count) == 0;
		}
		else {
			for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2) {
				if (!_Pred(*_UFirst1, *_UFirst2)) {
					return false;
				}
			}

			return true;
		}
	}





































#line 2472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _InIt1, class _RightTy, size_t _RightSize, class _Pr, enable_if_t<!is_same_v<_RightTy*, _Pr>, int> = 0>
	inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, _RightTy(&_First2)[_RightSize], _Pr _Pred) {

		return ::std::equal(_First1, _Last1, _Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred));
	}
#line 2480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


















#line 2499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _InIt1, class _InIt2>
	inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2) {

		return ::std::equal(_First1, _Last1, _First2, equal_to<>());
	}


	template <class _InIt1, class _RightTy, size_t _RightSize>
	inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, _RightTy(&_First2)[_RightSize]) {

		return ::std::equal(_First1, _Last1, _First2, equal_to<>());
	}
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

















#line 2531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _InIt1, class _InIt2, class _Pr>
	inline bool equal(
		const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred) {

		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		if constexpr (_Is_random_iter_v<_InIt1> && _Is_random_iter_v<_InIt2>) {
			if (_ULast1 - _UFirst1 != _ULast2 - _UFirst2) {
				return false;
			}

			return ::std::equal(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred));
		}
		else {
			for (;;) {
				if (_UFirst1 == _ULast1) {
					return _UFirst2 == _ULast2;
				}

				if (_UFirst2 == _ULast2) {
					return false;
				}

				if (!_Pred(*_UFirst1, *_UFirst2)) {
					return false;
				}

				++_UFirst1;
				++_UFirst2;
			}
		}
	}











































#line 2612 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"





#line 2618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _InIt1, class _InIt2>
	inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2) {

		return ::std::equal(_First1, _Last1, _First2, _Last2, equal_to<>());
	}








#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _Elem1, class _Elem2, class _FTy>
	struct _Lex_compare_check_element_types_helper
		: bool_constant<conjunction_v<_Is_character<_Elem1>, _Is_character<_Elem2>, _Is_character<_FTy>,
		is_unsigned<_FTy>>> {

	};

	template <class _Elem1, class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: bool_constant<
		conjunction_v<_Is_character<_Elem1>, _Is_character<_Elem2>, is_unsigned<_Elem1>, is_unsigned<_Elem2>>> {

	};











#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _Memcmp_pr>
	struct _Lex_compare_optimize {};

	template <class _Memcmp_pr, class _Obj1, class _Obj2, class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<
		conditional_t<_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;

	template <class _InIt1, class _InIt2, class _Pr>
	inline _Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&) {

		return {};
	}

	template <class _Obj1, class _Obj2, class _FTy>
	inline _Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy> _Lex_compare_memcmp_classify(
		_Obj1* const&, _Obj2* const&, const less<_FTy>&) {

		return {};
	}

	template <class _Obj1, class _Obj2, class _FTy>
	inline _Lex_compare_check_element_types<greater<int>, _Obj1, _Obj2, _FTy> _Lex_compare_memcmp_classify(
		_Obj1* const&, _Obj2* const&, const greater<_FTy>&) {

		return {};
	}

	template <class _InIt1, class _InIt2, class _Pr>
	inline bool _Lex_compare_unchecked(
		_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>) {

		for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) {
			if (_Debug_lt_pred(_Pred, *_First1, *_First2)) {
				return true;
			}
			else if (_Pred(*_First2, *_First1)) {
				return false;
			}
		}

		return _First1 == _Last1 && _First2 != _Last2;
	}

	template <class _InIt1, class _InIt2, class _Pr, class _Memcmp_pr>
	inline bool _Lex_compare_unchecked(
		_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr, _Lex_compare_optimize<_Memcmp_pr>) {

		const auto _Num1 = static_cast<size_t>(_Last1 - _First1);
		const auto _Num2 = static_cast<size_t>(_Last2 - _First2);
		const int _Ans = ::memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
		return _Memcmp_pr{}(_Ans, 0) || (_Ans == 0 && _Num1 < _Num2);
	}

	template <class _InIt1, class _InIt2, class _Pr>
	inline bool lexicographical_compare(
		_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred) {

		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		const auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		return _Lex_compare_unchecked(
			_UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred), _Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred));
	}

	template <class _InIt1, class _InIt2>
	inline bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2) {

		return ::std::lexicographical_compare(_First1, _Last1, _First2, _Last2, less<>());
	}





















#line 2755 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _Ty>
	inline bool _Within_limits(const _Ty & _Val, true_type, true_type, _Any_tag) {
		return (-128) <= _Val && _Val <= 127;
	}

	template <class _Ty>
	inline bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type) {

		return _Val <= 127 || static_cast<_Ty>((-128)) <= _Val;
	}

	template <class _Ty>
	inline bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type) {

		return _Val <= 127;
	}

	template <class _Ty>
	inline bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag) {

		return 0 <= _Val && _Val <= 0xff;
	}

	template <class _Ty>
	inline bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag) {

		return _Val <= 0xff;
	}

	template <class _InIt, class _Ty>
	inline bool _Within_limits(_InIt, const _Ty& _Val) {
		using _Elem = remove_pointer_t<_InIt>;
		return _Within_limits(_Val, is_signed<_Elem>{}, is_signed<_Ty>{}, bool_constant<-1 == static_cast<_Ty>(-1)>{});
	}

	template <class _InIt>
	inline bool _Within_limits(_InIt, const bool&) {
		return true;
	}

	template <class _InIt, class _Ty>
	inline _InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, true_type) {

		if (!_Within_limits(_First, _Val)) {
			return _Last;
		}

		_First =
			static_cast<_InIt>(::memchr(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
		return _First ? _First : _Last;
	}

	template <class _InIt, class _Ty>
	inline _InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, false_type) {

		for (; _First != _Last; ++_First) {
			if (*_First == _Val) {
				break;
			}
		}

		return _First;
	}

	template <class _InIt, class _Ty>
	inline _InIt _Find_unchecked(const _InIt _First, const _InIt _Last, const _Ty& _Val) {


		using _Memchr_opt = bool_constant<
			is_integral_v<_Ty>&& _Is_any_of_v<_InIt, char*, signed char*, unsigned char*,
			const char*, const signed char*, const unsigned char* >>;

		return _Find_unchecked1(_First, _Last, _Val, _Memchr_opt{});
	}

	template <class _InIt, class _Ty>
	inline _InIt find(_InIt _First, const _InIt _Last, const _Ty& _Val) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(_First, _Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));
		return _First;
	}




#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _InIt, class _Ty, class _Pr>
	inline _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred) {
		for (; _First != _Last; ++_First) {
			if (_Pred(*_First, _Val)) {
				break;
			}
		}

		return _First;
	}


	template <class _InIt, class _Ty>
	inline _Iter_diff_t<_InIt> count(const _InIt _First, const _InIt _Last, const _Ty& _Val) {

		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_Iter_diff_t<_InIt> _Count = 0;

		for (; _UFirst != _ULast; ++_UFirst) {
			if (*_UFirst == _Val) {
				++_Count;
			}
		}

		return _Count;
	}





#line 2879 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _InIt, class _Ty, class _Pr>
	inline _Iter_diff_t<_InIt> _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred) {

		_Iter_diff_t<_InIt> _Count = 0;

		for (; _First != _Last; ++_First) {
			if (_Pred(*_First, _Val)) {
				++_Count;
			}
		}

		return _Count;
	}


	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr, forward_iterator_tag, forward_iterator_tag) {

	}

	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline void _Trim_matching_suffixes(
		_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr _Pred, bidirectional_iterator_tag, bidirectional_iterator_tag) {


		do {
			--_Last1;
			--_Last2;
		} while (_Pred(*_Last1, *_Last2));
		++_Last1;
		++_Last2;
	}


	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) {

		_Trim_matching_suffixes(_Last1, _Last2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1) {
			if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred)) {
				_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
				if (_Count2 == 0) {
					return false;
				}

				_FwdIt1 _Skip1 = _Next_iter(_Next1);
				_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
				if (_Count2 != _Count1) {
					return false;
				}
			}
		}

		return true;
	}


	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Pr _Pred) {

		for (; _First1 != _Last1; ++_First1, (void) ++_First2) {
			if (!_Pred(*_First1, *_First2)) {



				auto _Last2 = ::std::next(_First2, static_cast<_Iter_diff_t<_FwdIt2>>(::std::distance(_First1, _Last1)));
				return _Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred);
			}
		}

		return true;
	}

	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Pr _Pred) {

		_Adl_verify_range(_First1, _Last1);
		const auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
		return _Is_permutation_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred));
	}


	template <class _FwdIt1, class _RightTy, size_t _RightSize, class _Pr, class = enable_if_t<!is_same_v<_RightTy*, _Pr>>>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _RightTy(&_First2)[_RightSize], _Pr _Pred) {

		return ::std::is_permutation(_First1, _Last1, _Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred));
	}
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _FwdIt1, class _FwdIt2>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2) {

		return ::std::is_permutation(_First1, _Last1, _First2, equal_to<>());
	}



	template <class _FwdIt1, class _RightTy, size_t _RightSize>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _RightTy(&_First2)[_RightSize]) {

		return ::std::is_permutation(_First1, _Last1, _First2, equal_to<>());
	}
#line 2986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag) {

		for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) {
			if (!_Pred(*_First1, *_First2)) {
				if (::std::distance(_First1, _Last1) == ::std::distance(_First2, _Last2)) {
					return _Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred);
				}
				else {
					return false;
				}
			}
		}

		return _First1 == _Last1 && _First2 == _Last2;
	}

	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag) {

		if (_Last1 - _First1 != _Last2 - _First2) {
			return false;
		}

		return _Is_permutation_unchecked(_First1, _Last1, _First2, _Pred);
	}

	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) {

		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		return _Is_permutation_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1), _Get_unwrapped(_First2),
			_Get_unwrapped(_Last2), _Pass_fn(_Pred), _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	}


	template <class _FwdIt1, class _FwdIt2>
	inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2) {

		return ::std::is_permutation(_First1, _Last1, _First2, _Last2, equal_to<>());
	}



	template <class _BidIt>
	inline void reverse(const _BidIt _First, const _BidIt _Last) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);

		using _Elem = remove_pointer_t<decltype(_UFirst)>;
		constexpr bool _Allow_vectorization =
			conjunction_v<is_pointer<decltype(_UFirst)>, _Is_trivially_swappable<_Elem>, negation<is_volatile<_Elem>>>;
		if constexpr (_Allow_vectorization && sizeof(_Elem) == 1) {
			__std_reverse_trivially_swappable_1(_UFirst, _ULast);
		}
		else if constexpr (_Allow_vectorization && sizeof(_Elem) == 2) {
			__std_reverse_trivially_swappable_2(_UFirst, _ULast);
		}
		else if constexpr (_Allow_vectorization && sizeof(_Elem) == 4) {
			__std_reverse_trivially_swappable_4(_UFirst, _ULast);
		}
		else if constexpr (_Allow_vectorization && sizeof(_Elem) == 8) {
			__std_reverse_trivially_swappable_8(_UFirst, _ULast);
		}
		else
#line 3052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
		{
			for (; _UFirst != _ULast && _UFirst != --_ULast; ++_UFirst) {
				::std::iter_swap(_UFirst, _ULast);
			}
		}
	}



























































#line 3118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"








#line 3127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _BidIt>
	inline pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(_BidIt _First, _BidIt _Sentinel, _BidIt _Last) {

		while (_First != _Sentinel && _Last != _Sentinel) {
			::std::iter_swap(_First, --_Last);
			++_First;
		}

		return pair<_BidIt, _BidIt>(_First, _Last);
	}


	template <class _FwdIt>
	inline _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last) {



		_Adl_verify_range(_First, _Mid);
		_Adl_verify_range(_Mid, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _UMid = _Get_unwrapped(_Mid);
		const auto _ULast = _Get_unwrapped(_Last);
		if (_UFirst == _UMid) {
			return _Last;
		}

		if (_UMid == _ULast) {
			return _First;
		}

		if constexpr (_Is_random_iter_v<_FwdIt>) {
			::std::reverse(_UFirst, _UMid);
			::std::reverse(_UMid, _ULast);
			::std::reverse(_UFirst, _ULast);
			_Seek_wrapped(_First, _UFirst + (_ULast - _UMid));
		}
		else if constexpr (_Is_bidi_iter_v<_FwdIt>) {
			::std::reverse(_UFirst, _UMid);
			::std::reverse(_UMid, _ULast);
			auto _Tmp = _Reverse_until_sentinel_unchecked(_UFirst, _UMid, _ULast);
			::std::reverse(_Tmp.first, _Tmp.second);
			_Seek_wrapped(_First, _UMid != _Tmp.first ? _Tmp.first : _Tmp.second);
		}
		else {
			auto _UNext = _UMid;
			do {
				::std::iter_swap(_UFirst, _UNext);
				++_UFirst;
				++_UNext;
				if (_UFirst == _UMid) {
					_UMid = _UNext;
				}
			} while (_UNext != _ULast);
			_Seek_wrapped(_First, _UFirst);
			while (_UMid != _ULast) {
				_UNext = _UMid;
				do {
					::std::iter_swap(_UFirst, _UNext);
					++_UFirst;
					++_UNext;
					if (_UFirst == _UMid) {
						_UMid = _UNext;
					}
				} while (_UNext != _ULast);
			}
		}

		return _First;
	}

































































#line 3262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"








#line 3271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"


	template <class _FwdIt, class _Ty, class _Pr>
	inline _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {

		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		_Iter_diff_t<_FwdIt> _Count = ::std::distance(_UFirst, _Get_unwrapped(_Last));

		while (0 < _Count) {
			const _Iter_diff_t<_FwdIt> _Count2 = _Count >> 1;
			const auto _UMid = ::std::next(_UFirst, _Count2);
			if (_Pred(*_UMid, _Val)) {
				_UFirst = _Next_iter(_UMid);
				_Count -= _Count2 + 1;
			}
			else {
				_Count = _Count2;
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}


	template <class _Diff, class _Urng>
	class _Rng_from_urng {
	public:
		using _Ty0 = make_unsigned_t<_Diff>;
		using _Ty1 = typename _Urng::result_type;

		using _Udiff = conditional_t < sizeof(_Ty1) < sizeof(_Ty0), _Ty0, _Ty1 > ;

		explicit _Rng_from_urng(_Urng& _Func) : _Ref(_Func), _Bits(8 * sizeof(_Udiff)), _Bmask(_Udiff(-1)) {
			for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1) {
				--_Bits;
			}
		}

		_Diff operator()(_Diff _Index) {
			for (;;) {
				_Udiff _Ret = 0;
				_Udiff _Mask = 0;

				while (_Mask < _Udiff(_Index - 1)) {
					_Ret <<= _Bits - 1;
					_Ret <<= 1;
					_Ret |= _Get_bits();
					_Mask <<= _Bits - 1;
					_Mask <<= 1;
					_Mask |= _Bmask;
				}


				if (_Ret / _Index < _Mask / _Index || _Mask % _Index == _Udiff(_Index - 1)) {
					return static_cast<_Diff>(_Ret % _Index);
				}
			}
		}

		_Udiff _Get_all_bits() {
			_Udiff _Ret = 0;

			for (size_t _Num = 0; _Num < 8 * sizeof(_Udiff); _Num += _Bits) {
				_Ret <<= _Bits - 1;
				_Ret <<= 1;
				_Ret |= _Get_bits();
			}

			return _Ret;
		}

		_Rng_from_urng(const _Rng_from_urng&) = delete;
		_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

	private:
		_Udiff _Get_bits() {
			for (;;) {
				_Udiff _Val = _Ref() - (_Urng::min)();

				if (_Val <= _Bmask) {
					return _Val;
				}
			}
		}

		_Urng& _Ref;
		size_t _Bits;
		_Udiff _Bmask;
	};


	template <class _Elem>
	class __declspec(dllimport) _Yarn {
	public:
		_Yarn() : _Myptr(nullptr), _Nul(0) {}

		_Yarn(const _Yarn& _Right) : _Myptr(nullptr), _Nul(0) {
			*this = _Right;
		}

		_Yarn(const _Elem* _Right) : _Myptr(nullptr), _Nul(0) {
			*this = _Right;
		}

		_Yarn& operator=(const _Yarn& _Right) {
			return *this = _Right._Myptr;
		}

		_Yarn& operator=(const _Elem* _Right) {
			if (_Myptr != _Right) {
				_Tidy();

				if (_Right != nullptr) {
					const _Elem* _Ptr = _Right;
					while (*_Ptr != (_Elem)0) {
						++_Ptr;
					}

					const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);


					_Myptr = (_Elem*)_malloc_dbg(_Count, 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility", 3393);


#line 3397 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"

					if (_Myptr != nullptr) {
						::memcpy(_Myptr, _Right, _Count);
					}
				}
			}

			return *this;
		}

		~_Yarn() noexcept {
			_Tidy();
		}

		bool  empty() const {
			return _Myptr == nullptr;
		}

		const _Elem* c_str() const {
			return _Myptr != nullptr ? _Myptr : &_Nul;
		}

		bool  _Empty() const {
			return _Myptr == nullptr;
		}

		const _Elem* _C_str() const {
			return _Myptr != nullptr ? _Myptr : &_Nul;
		}

	private:
		void  _Tidy() noexcept {
			if (_Myptr != nullptr) {

				_free_dbg(_Myptr, 2);


#line 3435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
			}

			_Myptr = nullptr;
		}

		_Elem* _Myptr;
		_Elem _Nul;
	};



	template <class _Container>
	class back_insert_iterator {
	public:
		using iterator_category = output_iterator_tag;
		using value_type        = void;
		using difference_type   = void;
		using pointer           = void;
		using reference         = void;

		using container_type = _Container;

		explicit back_insert_iterator(_Container& _Cont) : container(::std::addressof(_Cont)) {
		}

		back_insert_iterator& operator=(const typename _Container::value_type& _Val) {
			container->push_back(_Val);
			return *this;
		}

		back_insert_iterator& operator=(typename _Container::value_type&& _Val) {
			container->push_back(::std::move(_Val));
			return *this;
		}

		back_insert_iterator& operator*() {
			return *this;
		}

		back_insert_iterator& operator++() {
			return *this;
		}

		back_insert_iterator operator++(int) {
			return *this;
		}

	protected:
		_Container* container;
	};


	template <class _Container>
	inline back_insert_iterator<_Container> back_inserter(_Container& _Cont) {
		return back_insert_iterator<_Container>(_Cont);
	}



	template <class _Ty, class _Alloc,
		class = void>
		struct _Has_allocator_type : false_type {
	};

	template <class _Ty, class _Alloc>
	struct _Has_allocator_type<_Ty, _Alloc, void_t<typename _Ty::allocator_type>>
		: is_convertible<_Alloc, typename _Ty::allocator_type>::type {
	};


	struct allocator_arg_t {
		explicit allocator_arg_t() = default;
	};

	constexpr allocator_arg_t allocator_arg{};

	[[noreturn]] void __cdecl _Xbad_alloc();
	[[noreturn]] void __cdecl _Xinvalid_argument(const char*);
	[[noreturn]] void __cdecl _Xlength_error(const char*);
	[[noreturn]] void __cdecl _Xout_of_range(const char*);
	[[noreturn]] void __cdecl _Xoverflow_error(const char*);
	[[noreturn]] void __cdecl _Xruntime_error(const char*);


	template <class _Ty, class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type {
	};

	template <class _Ty, class _Alloc>
	constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;


	template <class _Category, class _Ty, class _Diff = ptrdiff_t, class _Pointer = _Ty *,
		class _Reference = _Ty &>
		struct  iterator {
		using iterator_category = _Category;
		using value_type        = _Ty;
		using difference_type   = _Diff;
		using pointer           = _Pointer;
		using reference         = _Reference;
	};


	template <class _Ty>
	struct _Tidy_guard {
		_Ty* _Target;
		~_Tidy_guard() {
			if (_Target) {
				_Target->_Tidy();
			}
		}
	};


	template <class _Ty>
	struct _Tidy_deallocate_guard {
		_Ty* _Target;
		~_Tidy_deallocate_guard() {
			if (_Target) {
				_Target->_Tidy_deallocate();
			}
		}
	};
}


#pragma warning(pop)
#pragma pack(pop)
#line 3565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"
#line 3566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xutility"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <size_t _Ty_size>
	constexpr size_t _Get_size_of_n(const size_t _Count) noexcept {
		constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
		size_t _Result = _Count * _Ty_size;
		if (_Max_possible < _Count) {

			_Result = static_cast<size_t>(-1);
		}

		return _Result;
	}

	template <>
	constexpr size_t _Get_size_of_n<1>(const size_t _Count) noexcept {
		return _Count;
	}


	template <class _Ty>
	constexpr size_t _New_alignof = _Max_value(alignof(_Ty),
		static_cast<size_t>(16ull)
	);


	struct _Default_allocate_traits {
		__declspec(allocator) static void* _Allocate(const size_t _Bytes) {
			return ::operator new(_Bytes);
		}






	};

	constexpr bool _Is_pow_2(const size_t _Value) noexcept {
		return _Value != 0 && (_Value & (_Value - 1)) == 0;
	}


	constexpr size_t _Big_allocation_threshold = 4096;
	constexpr size_t _Big_allocation_alignment = 32;

	static_assert(2 * sizeof(void*) <= _Big_allocation_alignment,
		"Big allocation alignment should at least match vector register alignment");
	static_assert(_Is_pow_2(_Big_allocation_alignment), "Big allocation alignment must be a power of two");


	constexpr size_t _Non_user_size = 2 * sizeof(void*) + _Big_allocation_alignment - 1;


#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	constexpr size_t _Big_allocation_sentinel = 0xFAFAFAFAFAFAFAFAULL;


#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _Traits>
	inline __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

		size_t _Block_size = _Non_user_size + _Bytes;
		if (_Block_size <= _Bytes) {

			_Block_size = static_cast<size_t>(-1);
		}

		const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
		do { if (_Ptr_container != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 93, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 93, 0); } while (false); }; } while (false);
		void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));
		static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;


		static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
		return _Ptr;
	}


	inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

		_Bytes += _Non_user_size;

		const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
		const uintptr_t _Ptr_container = _Ptr_user[-1];



		do { if (_Ptr_user[-2] == _Big_allocation_sentinel) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 113, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 113, 0); } while (false); }; } while (false);




		constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);


#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
		const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
		do { if (_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 123, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 123, 0); } while (false); }; } while (false);
		_Ptr = reinterpret_cast<void*>(_Ptr_container);
	}
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"






































#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

	template <size_t _Align, class _Traits = _Default_allocate_traits,
		enable_if_t<(!0 || _Align <= 16ull), int> = 0>
		inline __declspec(allocator) void* _Allocate(const size_t _Bytes) {


		if (_Bytes >= _Big_allocation_threshold) {
			return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
		}
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

		if (_Bytes != 0) {
			return _Traits::_Allocate(_Bytes);
		}

		return nullptr;
	}

	template <size_t _Align, enable_if_t<(!0 || _Align <= 16ull), int> = 0>
	inline void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {


		if (_Bytes >= _Big_allocation_threshold) {
			_Adjust_manually_vector_aligned(_Ptr, _Bytes);
		}
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

		::operator delete(_Ptr, _Bytes);
	}




	template <class _Ty, class... _Types>
	inline void _Construct_in_place(_Ty& _Obj, _Types&& ... _Args)
		noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {
		::new (const_cast<void*>(static_cast<const volatile void*>(::std::addressof(_Obj))))
			_Ty(::std::forward<_Types>(_Args)...);
	}


	template <class _Ty, class... _Types>
	inline _Ty* _Global_new(_Types&& ... _Args) {
		struct _Guard_type {
			void* _Result;
			~_Guard_type() {
				if (_Result) {
					_Deallocate<_New_alignof<_Ty>>(_Result, sizeof(_Ty));
				}
			}
		};

		_Guard_type _Guard{ _Allocate<_New_alignof<_Ty>>(sizeof(_Ty)) };
		::new (_Guard._Result) _Ty(::std::forward<_Types>(_Args)...);
		return static_cast<_Ty*>(::std::exchange(_Guard._Result, nullptr));
	}


	template <class _Ty>
	struct _Get_first_parameter;

	template <template <class, class...> class _Ty, class _First, class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...>> {
		using type = _First;
	};


	template <class _Newfirst, class _Ty>
	struct _Replace_first_parameter;

	template <class _Newfirst, template <class, class...> class _Ty, class _First, class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...>> {
		using type = _Ty<_Newfirst, _Rest...>;
	};


	template <class _Ty, class = void>
	struct _Get_element_type {
		using type = typename _Get_first_parameter<_Ty>::type;
	};

	template <class _Ty>
	struct _Get_element_type<_Ty, void_t<typename _Ty::element_type>> {
		using type = typename _Ty::element_type;
	};


	template <class _Ty, class = void>
	struct _Get_ptr_difference_type {
		using type = ptrdiff_t;
	};

	template <class _Ty>
	struct _Get_ptr_difference_type<_Ty, void_t<typename _Ty::difference_type>> {
		using type = typename _Ty::difference_type;
	};


	template <class _Ty, class _Other, class = void>
	struct _Get_rebind_alias {
		using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

	template <class _Ty, class _Other>
	struct _Get_rebind_alias<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>>> {
		using type = typename _Ty::template rebind<_Other>;
	};


	template <class _Ty>
	struct pointer_traits {
		using element_type    = typename _Get_element_type<_Ty>::type;
		using pointer         = _Ty;
		using difference_type = typename _Get_ptr_difference_type<_Ty>::type;

		template <class _Other>
		using rebind = typename _Get_rebind_alias<_Ty, _Other>::type;

		using _Reftype = conditional_t<is_void_v<element_type>, char&, add_lvalue_reference_t<element_type>>;

		static pointer pointer_to(_Reftype _Val) {
			return _Ty::pointer_to(_Val);
		}
	};

	template <class _Ty>
	struct pointer_traits<_Ty*> {
		using element_type    = _Ty;
		using pointer         = _Ty *;
		using difference_type = ptrdiff_t;

		template <class _Other>
		using rebind = _Other *;

		using _Reftype = conditional_t<is_void_v<_Ty>, char&, add_lvalue_reference_t<_Ty>>;

		static pointer pointer_to(_Reftype _Val) noexcept {
			return ::std::addressof(_Val);
		}
	};


	template <class _Ptr, class _Ty>
	using _Rebind_pointer_t = typename pointer_traits<_Ptr>::template rebind<_Ty>;


	template <class _Pointer, enable_if_t<!is_pointer_v<_Pointer>, int> = 0>
	inline _Pointer _Refancy(typename pointer_traits<_Pointer>::element_type * _Ptr) noexcept {
		return pointer_traits<_Pointer>::pointer_to(*_Ptr);
	}

	template <class _Pointer, enable_if_t<is_pointer_v<_Pointer>, int> = 0>
	inline _Pointer _Refancy(_Pointer _Ptr) noexcept {
		return _Ptr;
	}


	template <class _Ty>
	inline void _Destroy_in_place(_Ty& _Obj) noexcept {
		_Obj.~_Ty();
	}


	template <class _Ptrty>
	inline auto _Const_cast(_Ptrty _Ptr) noexcept {
		using _Elem       = typename pointer_traits<_Ptrty>::element_type;
		using _Modifiable = remove_const_t<_Elem>;
		using _Dest       = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

		return pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr));
	}

	template <class _Ty>
	inline auto _Const_cast(_Ty* _Ptr) noexcept {
		return const_cast<remove_const_t<_Ty>*>(_Ptr);
	}


	template <class _Ty, class = void>
	struct _Get_pointer_type {
		using type = typename _Ty::value_type*;
	};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	struct _Get_pointer_type<_Ty, void_t<typename _Ty::pointer>> {
		using type = typename _Ty::pointer;
	};
#pragma warning(pop)


	template <class _Ty, class = void>
	struct _Get_const_pointer_type {
		using _Ptrty = typename _Get_pointer_type<_Ty>::type;
		using _Valty = typename _Ty::value_type;
		using type   = typename pointer_traits<_Ptrty>::template rebind<const _Valty>;
	};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty>
	struct _Get_const_pointer_type<_Ty, void_t<typename _Ty::const_pointer>> {
		using type = typename _Ty::const_pointer;
	};
#pragma warning(pop)


	template <class _Ty, class = void>
	struct _Get_void_pointer_type {
		using _Ptrty = typename _Get_pointer_type<_Ty>::type;
		using type   = typename pointer_traits<_Ptrty>::template rebind<void>;
	};

	template <class _Ty>
	struct _Get_void_pointer_type<_Ty, void_t<typename _Ty::void_pointer>> {
		using type = typename _Ty::void_pointer;
	};


	template <class _Ty, class = void>
	struct _Get_const_void_pointer_type {
		using _Ptrty = typename _Get_pointer_type<_Ty>::type;
		using type   = typename pointer_traits<_Ptrty>::template rebind<const void>;
	};

	template <class _Ty>
	struct _Get_const_void_pointer_type<_Ty, void_t<typename _Ty::const_void_pointer>> {
		using type = typename _Ty::const_void_pointer;
	};


	template <class _Ty, class = void>
	struct _Get_difference_type {
		using _Ptrty = typename _Get_pointer_type<_Ty>::type;
		using type   = typename pointer_traits<_Ptrty>::difference_type;
	};

	template <class _Ty>
	struct _Get_difference_type<_Ty, void_t<typename _Ty::difference_type>> {
		using type = typename _Ty::difference_type;
	};


	template <class _Ty, class = void>
	struct _Get_size_type {
		using type = make_unsigned_t<typename _Get_difference_type<_Ty>::type>;
	};

	template <class _Ty>
	struct _Get_size_type<_Ty, void_t<typename _Ty::size_type>> {
		using type = typename _Ty::size_type;
	};


	template <class _Ty, class = void>
	struct _Get_propagate_on_container_copy {
		using type = false_type;
	};

	template <class _Ty>
	struct _Get_propagate_on_container_copy<_Ty, void_t<typename _Ty::propagate_on_container_copy_assignment>> {
		using type = typename _Ty::propagate_on_container_copy_assignment;
	};


	template <class _Ty, class = void>
	struct _Get_propagate_on_container_move {
		using type = false_type;
	};

	template <class _Ty>
	struct _Get_propagate_on_container_move<_Ty, void_t<typename _Ty::propagate_on_container_move_assignment>> {
		using type = typename _Ty::propagate_on_container_move_assignment;
	};


	template <class _Ty, class = void>
	struct _Get_propagate_on_container_swap {
		using type = false_type;
	};

	template <class _Ty>
	struct _Get_propagate_on_container_swap<_Ty, void_t<typename _Ty::propagate_on_container_swap>> {
		using type = typename _Ty::propagate_on_container_swap;
	};


	template <class _Ty, class = void>
	struct _Get_is_always_equal {
		using type = typename is_empty<_Ty>::type;
	};

	template <class _Ty>
	struct _Get_is_always_equal<_Ty, void_t<typename _Ty::is_always_equal>> {
		using type = typename _Ty::is_always_equal;
	};


	template <class _Ty, class _Other, class = void>
	struct _Get_rebind_type {
		using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Ty, class _Other>
	struct _Get_rebind_type<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>::other>> {
		using type = typename _Ty::template rebind<_Other>::other;
	};
#pragma warning(pop)


	template <class _Ty>
	class allocator;

	template <class _Alloc, class = void>
	struct _Is_default_allocator : false_type {};

	template <class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized> : true_type {};


	template <class _Void, class... _Types>
	struct _Has_no_allocator_construct : true_type {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Alloc, class _Ptr, class... _Args>
	struct _Has_no_allocator_construct<
		void_t<decltype(::std::declval<_Alloc&>().construct(::std::declval<_Ptr>(), ::std::declval<_Args>()...))>, _Alloc, _Ptr,
		_Args...> : false_type {};
#pragma warning(pop)

	template <class _Alloc, class _Ptr, class... _Args>
	using _Uses_default_construct =
		disjunction<_Is_default_allocator<_Alloc>, _Has_no_allocator_construct<void, _Alloc, _Ptr, _Args...>>;



	template <class _Alloc, class _Ptr, class = void>
	struct _Has_no_alloc_destroy : true_type {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Alloc, class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<decltype(::std::declval<_Alloc&>().destroy(::std::declval<_Ptr>()))>>
		: false_type {};
#pragma warning(pop)

	template <class _Alloc, class _Ptr>
	using _Uses_default_destroy = disjunction<_Is_default_allocator<_Alloc>, _Has_no_alloc_destroy<_Alloc, _Ptr>>;

	template <class _Alloc, class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;



	template <class _Alloc, class _Size_type, class _Const_void_pointer, class = void>
	struct _Has_allocate_hint : false_type {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Alloc, class _Size_type, class _Const_void_pointer>
	struct _Has_allocate_hint<_Alloc, _Size_type, _Const_void_pointer,
		void_t<decltype(::std::declval<_Alloc&>().allocate(
			::std::declval<const _Size_type&>(), ::std::declval<const _Const_void_pointer&>()))>> : true_type {};
#pragma warning(pop)


	template <class _Alloc, class = void>
	struct _Has_max_size : false_type {};

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Alloc>
	struct _Has_max_size<_Alloc, void_t<decltype(::std::declval<const _Alloc&>().max_size())>> : true_type {};
#pragma warning(pop)


	template <class _Alloc, class = void>
	struct _Has_select_on_container_copy_construction : false_type {};

	template <class _Alloc>
	struct _Has_select_on_container_copy_construction<_Alloc,
		void_t<decltype(::std::declval<const _Alloc&>().select_on_container_copy_construction())>> : true_type {};



	template <class _Alloc>
	struct allocator_traits;

#pragma warning(push)
#pragma warning(disable : 4996) 
	template <class _Alloc>
	struct _Normal_allocator_traits {
		using allocator_type = _Alloc;
		using value_type     = typename _Alloc::value_type;

		using pointer            = typename _Get_pointer_type<_Alloc>::type;
		using const_pointer      = typename _Get_const_pointer_type<_Alloc>::type;
		using void_pointer       = typename _Get_void_pointer_type<_Alloc>::type;
		using const_void_pointer = typename _Get_const_void_pointer_type<_Alloc>::type;

		using size_type       = typename _Get_size_type<_Alloc>::type;
		using difference_type = typename _Get_difference_type<_Alloc>::type;

		using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy<_Alloc>::type;
		using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move<_Alloc>::type;
		using propagate_on_container_swap            = typename _Get_propagate_on_container_swap<_Alloc>::type;
		using is_always_equal                        = typename _Get_is_always_equal<_Alloc>::type;

		template <class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

		template <class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other>>;

		static __declspec(allocator) pointer allocate(_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count) {
			return _Al.allocate(_Count);
		}


		static __declspec(allocator) pointer allocate(
			_Alloc& _Al, __declspec(guard(overflow)) const size_type _Count, const const_void_pointer _Hint) {
			if constexpr (_Has_allocate_hint<_Alloc, size_type, const_void_pointer>::value) {
				return _Al.allocate(_Count, _Hint);
			}
			else {
				(void)_Hint;
				return _Al.allocate(_Count);
			}
		}















#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

		static void deallocate(_Alloc & _Al, pointer _Ptr, size_type _Count) {
			_Al.deallocate(_Ptr, _Count);
		}


		template <class _Ty, class... _Types>
		static void construct(_Alloc& _Al, _Ty* _Ptr, _Types&& ... _Args) {
			if constexpr (_Uses_default_construct<_Alloc, _Ty*, _Types...>::value) {
				(void)_Al;
				::new (static_cast<void*>(_Ptr)) _Ty(::std::forward<_Types>(_Args)...);
			}
			else {
				_Al.construct(_Ptr, ::std::forward<_Types>(_Args)...);
			}
		}
















#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


		template <class _Ty>
		static void destroy(_Alloc & _Al, _Ty * _Ptr) {
			if constexpr (_Uses_default_destroy_t<_Alloc, _Ty*>::value) {
				(void)_Al;
				_Ptr->~_Ty();
			}
			else {
				_Al.destroy(_Ptr);
			}
		}















#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


		static size_type max_size(const _Alloc & _Al) noexcept {
			if constexpr (_Has_max_size<_Alloc>::value) {
				return _Al.max_size();
			}
			else {
				(void)_Al;
				return (numeric_limits<size_type>::max)() / sizeof(value_type);
			}
		}












#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


		static _Alloc select_on_container_copy_construction(const _Alloc & _Al) {
			if constexpr (_Has_select_on_container_copy_construction<_Alloc>::value) {
				return _Al.select_on_container_copy_construction();
			}
			else {
				return _Al;
			}
		}












#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
	};
#pragma warning(pop)

	template <class _Alloc>
	struct _Default_allocator_traits {
		using allocator_type = _Alloc;
		using value_type     = typename _Alloc::value_type;

		using pointer            = value_type *;
		using const_pointer      = const value_type*;
		using void_pointer       = void*;
		using const_void_pointer = const void*;

		using size_type       = size_t;
		using difference_type = ptrdiff_t;

		using propagate_on_container_copy_assignment = false_type;
		using propagate_on_container_move_assignment = true_type;
		using propagate_on_container_swap            = false_type;
		using is_always_equal                        = true_type;

		template <class _Other>
		using rebind_alloc = allocator<_Other>;

		template <class _Other>
		using rebind_traits = allocator_traits<allocator<_Other>>;

		static __declspec(allocator) pointer allocate(_Alloc&, __declspec(guard(overflow)) const size_type _Count) {
			return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));
		}

		static __declspec(allocator) pointer allocate(
			_Alloc&, __declspec(guard(overflow)) const size_type _Count, const_void_pointer) {
			return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));
		}

		static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) {

			_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
		}

		template <class _Objty, class... _Types>
		static void construct(_Alloc&, _Objty* const _Ptr, _Types&& ... _Args) {
			::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(::std::forward<_Types>(_Args)...);
		}

		template <class _Uty>
		static void destroy(_Alloc&, _Uty* const _Ptr) {
			_Ptr->~_Uty();
		}

		static size_type max_size(const _Alloc&) noexcept {
			return static_cast<size_t>(-1) / sizeof(value_type);
		}

		static _Alloc select_on_container_copy_construction(const _Alloc& _Al) {
			return _Al;
		}
	};

	template <class _Alloc>
	struct allocator_traits : conditional_t<_Is_default_allocator<_Alloc>::value, _Default_allocator_traits<_Alloc>,
		_Normal_allocator_traits<_Alloc>> {};



	template <class _Alloc>
	using _Choose_pocca = bool_constant<allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value
		&& !allocator_traits<_Alloc>::is_always_equal::value>;

	struct _Equal_allocators {};
	using _Propagate_allocators    = true_type;
	using _No_propagate_allocators = false_type;

	template <class _Alloc>
	using _Choose_pocma = conditional_t<allocator_traits<_Alloc>::is_always_equal::value, _Equal_allocators,
		typename allocator_traits<_Alloc>::propagate_on_container_move_assignment::type>;


	template <class _Alloc, class _Value_type>
	using _Rebind_alloc_t = typename allocator_traits<_Alloc>::template rebind_alloc<_Value_type>;


	template <class _Alloc>
	constexpr bool _Is_simple_alloc_v = is_same_v<typename allocator_traits<_Alloc>::size_type, size_t>&&
		is_same_v<typename allocator_traits<_Alloc>::difference_type, ptrdiff_t>&&
		is_same_v<typename allocator_traits<_Alloc>::pointer, typename _Alloc::value_type*>&&
		is_same_v<typename allocator_traits<_Alloc>::const_pointer, const typename _Alloc::value_type*>;


	template <class _Value_type>
	struct _Simple_types {

		using value_type      = _Value_type;
		using size_type       = size_t;
		using difference_type = ptrdiff_t;
		using pointer         = value_type *;
		using const_pointer   = const value_type*;
	};


	template <class _Ty>
	class allocator {
	public:
		static_assert(!is_const_v<_Ty>, "The C++ Standard forbids containers of const elements "
			"because allocator<const T> is ill-formed.");

		using _Not_user_specialized = void;

		using value_type = _Ty;

		typedef _Ty* pointer;
		typedef const _Ty* const_pointer;

		typedef _Ty& reference;
		typedef const _Ty& const_reference;

		using size_type       = size_t;
		using difference_type = ptrdiff_t;

		using propagate_on_container_move_assignment = true_type;
		using is_always_equal                        = true_type;

		template <class _Other>
		struct  rebind {
			using other = allocator<_Other>;
		};

		_Ty* address(_Ty& _Val) const noexcept {
			return ::std::addressof(_Val);
		}

		const _Ty* address(const _Ty& _Val) const noexcept {
			return ::std::addressof(_Val);
		}

		constexpr allocator() noexcept {}

		constexpr allocator(const allocator&) noexcept = default;
		template <class _Other>
		constexpr allocator(const allocator<_Other>&) noexcept {}

		void deallocate(_Ty* const _Ptr, const size_t _Count) {

			_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
		}

		__declspec(allocator) _Ty* allocate(__declspec(guard(overflow)) const size_t _Count) {
			return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
		}

		__declspec(allocator) _Ty* allocate(
			__declspec(guard(overflow)) const size_t _Count, const void*) {
			return allocate(_Count);
		}

		template <class _Objty, class... _Types>
		void construct(_Objty* const _Ptr, _Types&& ... _Args) {
			::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(::std::forward<_Types>(_Args)...);
		}

		template <class _Uty>
		void destroy(_Uty* const _Ptr) {
			_Ptr->~_Uty();
		}

		size_t max_size() const noexcept {
			return static_cast<size_t>(-1) / sizeof(_Ty);
		}
	};


	template <>
	class allocator<void> {
	public:
		using value_type = void;
		typedef void* pointer;
		typedef const void* const_pointer;

		using size_type       = size_t;
		using difference_type = ptrdiff_t;

		using propagate_on_container_move_assignment = true_type;
		using is_always_equal                        = true_type;

		template <class _Other>
		struct  rebind {
			using other = allocator<_Other>;
		};
	};

	template <class _Ty, class _Other>
	inline bool operator==(const allocator<_Ty>&, const allocator<_Other>&) noexcept {
		return true;
	}

	template <class _Ty, class _Other>
	inline bool operator!=(const allocator<_Ty>&, const allocator<_Other>&) noexcept {
		return false;
	}






#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _Alloc>
	using _Alloc_ptr_t = typename allocator_traits<_Alloc>::pointer;


	template <class _Alloc>
	using _Alloc_size_t = typename allocator_traits<_Alloc>::size_type;



	template <class _Alloc>
	inline void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {
		if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
			_Left = _Right;
		}
		else {
			(void)_Left;
			(void)_Right;
		}
	}













#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	template <class _Alloc>
	inline void _Pocma(_Alloc & _Left, _Alloc & _Right) noexcept {
		if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
			_Left = ::std::move(_Right);
		}
		else {
			(void)_Left;
			(void)_Right;
		}
	}














#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	template <class _Alloc>
	inline void _Pocs(_Alloc & _Left, _Alloc & _Right) noexcept {
		if constexpr (allocator_traits<_Alloc>::propagate_on_container_swap::value) {
			_Swap_adl(_Left, _Right);
		}
		else {
			do { if (_Left == _Right) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 994, 0, "%s", "containers incompatible for swap")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"containers incompatible for swap\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 994, 0); } while (false); }; } while (false);
			(void)_Left;
			(void)_Right;
		}
	}


















#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	template <class _Alloc>
	inline void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc & _Al) noexcept {

		using _Ty = typename _Alloc::value_type;
		if
			constexpr (conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
			(void)_First;
			(void)_Last;
			(void)_Al;
		}
		else {
			for (; _First != _Last; ++_First) {
				allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
			}
		}
	}



	template <class _NoThrowFwdIt>
	inline void _Destroy_range(_NoThrowFwdIt _First, const _NoThrowFwdIt _Last) noexcept {

		if
			constexpr (is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
			(void)_First;
			(void)_Last;
		}
		else {
			for (; _First != _Last; ++_First) {
				_Destroy_in_place(*_First);
			}
		}
	}



	template <class _Size_type>
	constexpr _Size_type _Convert_size(const size_t _Len) noexcept {

		if (_Len > (numeric_limits<_Size_type>::max)()) {
			_Xlength_error("size_t too long for _Size_type");
		}

		return static_cast<_Size_type>(_Len);
	}

	template <>
	constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

		return _Len;
	}



	template <class _Alloc>
	inline void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

		using _Alloc_traits = allocator_traits<_Alloc>;
		if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
			_Alloc_traits::deallocate(_Al, _Ptr, 1);
		}
		else {
			using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
			_Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
		}
	}














#line 1101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _Alloc>
	inline void _Delete_plain(_Alloc & _Al, typename _Alloc::value_type * const _Ptr) noexcept {

		allocator_traits<_Alloc>::destroy(_Al, _Ptr);
		_Deallocate_plain(_Al, _Ptr);
	}


	template <class _Alloc>
	struct _Alloc_construct_ptr {
		using pointer = _Alloc_ptr_t<_Alloc>;
		_Alloc& _Al;
		pointer _Ptr;

		explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

		pointer _Release() noexcept {
			return ::std::exchange(_Ptr, nullptr);
		}

		void _Allocate() {
			_Ptr = nullptr;
			_Ptr = _Al.allocate(1);
		}

		~_Alloc_construct_ptr() {
			if (_Ptr) {
				_Al.deallocate(_Ptr, 1);
			}
		}

		_Alloc_construct_ptr(const _Alloc_construct_ptr&) = delete;
		_Alloc_construct_ptr& operator=(const _Alloc_construct_ptr&) = delete;
	};


	template <class _Alloc, class... _Args, enable_if_t<!is_const_v<_Alloc>, int> = 0>
	inline _Alloc_ptr_t<_Alloc> _Alloc_new(_Alloc & _Al, _Args && ... _Vals) {

		_Alloc_construct_ptr<_Alloc> _Constructor{ _Al };
		_Constructor._Allocate();
		allocator_traits<_Alloc>::construct(_Constructor._Al, _Unfancy(_Constructor._Ptr), ::std::forward<_Args>(_Vals)...);
		return _Constructor._Release();
	}


	template <class _Ty, class _Alloc, class... _Args>
	inline typename allocator_traits<remove_const_t<_Alloc>>::template rebind_traits<_Ty>::pointer
		_Alloc_rebound(_Alloc& _Al, _Args&& ... _Vals) {

		using _Rebound_alloc = _Rebind_alloc_t<remove_const_t<_Alloc>, _Ty>;


		using _Rebound_instance = conditional_t<is_same_v<_Rebound_alloc, _Alloc>, _Alloc&, _Rebound_alloc>;
		_Rebound_instance _Rebound(_Al);
		return _Alloc_new(_Rebound, ::std::forward<_Args>(_Vals)...);
	}


	struct _Fake_allocator {};

	struct _Container_base0 {
		void _Orphan_all() noexcept {}
		void _Swap_proxy_and_iterators(_Container_base0&) noexcept {}
		void _Alloc_proxy(const _Fake_allocator&) noexcept {}
		void _Reload_proxy(const _Fake_allocator&, const _Fake_allocator&) noexcept {}
	};

	struct _Iterator_base0 {
		void _Adopt(const void*) noexcept {}
		const _Container_base0* _Getcont() const noexcept {
			return nullptr;
		}

		static constexpr bool _Unwrap_when_unverified = true;
	};


	struct _Container_base12;
	struct _Container_proxy {
		_Container_proxy() noexcept : _Mycont(nullptr), _Myfirstiter(nullptr) {}
		_Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

		const _Container_base12* _Mycont;
		_Iterator_base12* _Myfirstiter;
	};

	struct _Container_base12 {
	public:
		_Container_base12() : _Myproxy(nullptr) {}

		_Container_base12(const _Container_base12&) = delete;
		_Container_base12& operator=(const _Container_base12&) = delete;

		void _Orphan_all() noexcept;
		void _Swap_proxy_and_iterators(_Container_base12&) noexcept;

		template <class _Alloc>
		void _Alloc_proxy(_Alloc&& _Al) {
			_Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
			allocator_traits<remove_reference_t<_Alloc>>::construct(_Al, _New_proxy, this);
			_Myproxy = _New_proxy;
			_New_proxy->_Mycont = this;
		}

		template <class _Alloc>
		void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {

			_Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));

			allocator_traits<remove_reference_t<_Alloc>>::construct(_New_alloc, _New_proxy, this);
			_New_proxy->_Mycont = this;
			_Delete_plain(_Old_alloc, ::std::exchange(_Myproxy, _New_proxy));
		}

		_Container_proxy* _Myproxy;
	};

	struct _Iterator_base12 {
		_Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {}

		_Iterator_base12(const _Iterator_base12& _Right) noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {
			*this = _Right;
		}

		_Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
			if (_Myproxy != _Right._Myproxy) {
				if (_Right._Myproxy == nullptr) {

					_Lockit _Lock(3);
					_Orphan_me();


#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
				}
				else {
					_Adopt(_Right._Myproxy->_Mycont);
				}
			}

			return *this;
		}

		~_Iterator_base12() noexcept {

			_Lockit _Lock(3);
			_Orphan_me();
#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
		}

		void _Adopt(const _Container_base12* _Parent) noexcept {
			if (_Parent == nullptr) {

				_Lockit _Lock(3);
				_Orphan_me();


#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
			}
			else {
				_Container_proxy* _Parent_proxy = _Parent->_Myproxy;


				if (_Myproxy != _Parent_proxy) {
					_Lockit _Lock(3);
					_Orphan_me();
					_Mynextiter = _Parent_proxy->_Myfirstiter;
					_Parent_proxy->_Myfirstiter = this;
					_Myproxy = _Parent_proxy;
				}



#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
			}
		}

		const _Container_base12* _Getcont() const noexcept {
			return _Myproxy == nullptr ? nullptr : _Myproxy->_Mycont;
		}


		void _Orphan_me() noexcept {
			if (_Myproxy != nullptr) {
				_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;
				while (*_Pnext != nullptr && *_Pnext != this) {
					_Pnext = &(*_Pnext)->_Mynextiter;
				}

				do { if (*_Pnext) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 1290, 0, "%s", "ITERATOR LIST CORRUPTED!")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"ITERATOR LIST CORRUPTED!\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory", 1290, 0); } while (false); }; } while (false);
				*_Pnext = _Mynextiter;
				_Myproxy = nullptr;
			}
		}
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

		static constexpr bool _Unwrap_when_unverified = 2 == 0;

		_Container_proxy* _Myproxy;
		_Iterator_base12* _Mynextiter;
	};


	inline void _Container_base12::_Orphan_all() noexcept {

		if (_Myproxy != nullptr) {
			_Lockit _Lock(3);

			for (_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter; *_Pnext != nullptr;
				*_Pnext = (*_Pnext)->_Mynextiter) {
				(*_Pnext)->_Myproxy = nullptr;
			}

			_Myproxy->_Myfirstiter = nullptr;
		}
#line 1317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
	}

	inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

		_Lockit _Lock(3);
#line 1323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

		_Container_proxy * _Temp = _Myproxy;
		_Myproxy = _Right._Myproxy;
		_Right._Myproxy = _Temp;

		if (_Myproxy != nullptr) {
			_Myproxy->_Mycont = this;
		}

		if (_Right._Myproxy != nullptr) {
			_Right._Myproxy->_Mycont = &_Right;
		}
	}





#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
	using _Container_base = _Container_base12;
	using _Iterator_base = _Iterator_base12;
#line 1345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	struct _Leave_proxy_unbound {};


	struct _Fake_proxy_ptr_impl {
		_Fake_proxy_ptr_impl(const _Fake_proxy_ptr_impl&) = delete;
		_Fake_proxy_ptr_impl& operator=(const _Fake_proxy_ptr_impl&) = delete;
		_Fake_proxy_ptr_impl(const _Fake_allocator&, _Leave_proxy_unbound) noexcept {}
		_Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

		void _Bind(const _Fake_allocator&, _Container_base0*) noexcept {}
		void _Release() noexcept {}
	};

	struct _Basic_container_proxy_ptr12 {

		_Container_proxy* _Ptr;

		void _Release() noexcept {
			_Ptr = nullptr;
		}

	protected:
		_Basic_container_proxy_ptr12() = default;
		_Basic_container_proxy_ptr12(const _Basic_container_proxy_ptr12&) = delete;
		_Basic_container_proxy_ptr12(_Basic_container_proxy_ptr12&&) = delete;
	};

	template <class _Alloc>
	struct _Container_proxy_ptr12
		: _Basic_container_proxy_ptr12 {
		_Alloc& _Al;

		_Container_proxy_ptr12(_Alloc& _Al_, _Leave_proxy_unbound) : _Al(_Al_) {
			_Ptr = _Unfancy(_Al_.allocate(1));
			allocator_traits<_Alloc>::construct(_Al, _Ptr);
		}

		_Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)
			: _Al(_Al_) {
			_Ptr = _Unfancy(_Al_.allocate(1));
			allocator_traits<_Alloc>::construct(_Al, _Ptr, ::std::addressof(_Mycont));
			_Mycont._Myproxy = _Ptr;
		}

		void _Bind(_Alloc& _Old_alloc, _Container_base12* _Mycont) noexcept {


			_Ptr->_Mycont = _Mycont;
			_Delete_plain(_Old_alloc, ::std::exchange(_Mycont->_Myproxy, ::std::exchange(_Ptr, nullptr)));
		}

		~_Container_proxy_ptr12() {
			if (_Ptr) {
				_Delete_plain(_Al, _Ptr);
			}
		}
	};





#line 1411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"

	template <class _Alloc>
	using _Container_proxy_ptr = _Container_proxy_ptr12<_Rebind_alloc_t<_Alloc, _Container_proxy>>;
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	struct _Zero_then_variadic_args_t {};

	struct _One_then_variadic_args_t {
	};

	template <class _Ty1, class _Ty2, bool = is_empty_v<_Ty1> && !is_final_v<_Ty1>>
	class _Compressed_pair final : private _Ty1 {
	public:
		_Ty2 _Myval2;

		using _Mybase = _Ty1;

		template <class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t, _Other2&& ... _Val2)
			: _Ty1(), _Myval2(::std::forward<_Other2>(_Val2)...) {}

		template <class _Other1, class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t, _Other1&& _Val1, _Other2&& ... _Val2)
			: _Ty1(::std::forward<_Other1>(_Val1)), _Myval2(::std::forward<_Other2>(_Val2)...) {}

		_Ty1& _Get_first() noexcept {
			return *this;
		}

		const _Ty1& _Get_first() const noexcept {
			return *this;
		}
	};

	template <class _Ty1, class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final {
	public:
		_Ty1 _Myval1;
		_Ty2 _Myval2;

		template <class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t, _Other2&& ... _Val2)
			: _Myval1(), _Myval2(::std::forward<_Other2>(_Val2)...) {}

		template <class _Other1, class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t, _Other1&& _Val1, _Other2&& ... _Val2)
			: _Myval1(::std::forward<_Other1>(_Val1)), _Myval2(::std::forward<_Other2>(_Val2)...) {}

		_Ty1& _Get_first() noexcept {
			return _Myval1;
		}

		const _Ty1& _Get_first() const noexcept {
			return _Myval1;
		}
	};

	struct _Move_allocator_tag {};


	template <class _Ty>
	inline pair<_Ty*, ptrdiff_t> _Get_temporary_buffer(ptrdiff_t _Count) noexcept {
		if (static_cast<size_t>(_Count) <= static_cast<size_t>(-1) / sizeof(_Ty)) {
			for (; 0 < _Count; _Count /= 2) {
				const auto _Size = static_cast<size_t>(_Count) * sizeof(_Ty);
				void* _Pbuf;





				{
					_Pbuf = ::operator new(_Size, nothrow);
				}

				if (_Pbuf) {
					return { static_cast<_Ty*>(_Pbuf), _Count };
				}
			}
		}

		return { nullptr, 0 };
	}


	template <class _Ty>
	inline void _Return_temporary_buffer(_Ty* const _Pbuf) noexcept {





		{
			::operator delete(_Pbuf);
		}
	}


	template <class _NoThrowFwdIt>
	struct _Uninitialized_backout {
		_NoThrowFwdIt _First;
		_NoThrowFwdIt _Last;

		explicit _Uninitialized_backout(_NoThrowFwdIt _Dest) : _First(_Dest), _Last(_Dest) {}

		_Uninitialized_backout(_NoThrowFwdIt _First_, _NoThrowFwdIt _Last_) : _First(_First_), _Last(_Last_) {}

		_Uninitialized_backout(const _Uninitialized_backout&) = delete;
		_Uninitialized_backout& operator=(const _Uninitialized_backout&) = delete;

		~_Uninitialized_backout() {
			_Destroy_range(_First, _Last);
		}

		template <class... _Types>
		void _Emplace_back(_Types&& ... _Vals) {
			_Construct_in_place(*_Last, ::std::forward<_Types>(_Vals)...);
			++_Last;
		}

		_NoThrowFwdIt _Release() {
			_First = _Last;
			return _Last;
		}
	};



	template <class _InIt, class _NoThrowFwdIt>
	inline _NoThrowFwdIt _Uninitialized_move_unchecked(_InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

		if constexpr (_Ptr_move_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
			return _Copy_memmove(_First, _Last, _Dest);
		}
		else {
			_Uninitialized_backout<_NoThrowFwdIt> _Backout{ _Dest };
			for (; _First != _Last; ++_First) {
				_Backout._Emplace_back(::std::move(*_First));
			}

			return _Backout._Release();
		}
	}


























#line 1581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _Alloc>
	class _Uninitialized_backout_al {
		using pointer = _Alloc_ptr_t<_Alloc>;

	public:
		_Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

		_Uninitialized_backout_al(const _Uninitialized_backout_al&) = delete;
		_Uninitialized_backout_al& operator=(const _Uninitialized_backout_al&) = delete;

		~_Uninitialized_backout_al() {
			_Destroy_range(_First, _Last, _Al);
		}

		template <class... _Types>
		void _Emplace_back(_Types&& ... _Vals) {
			allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), ::std::forward<_Types>(_Vals)...);
			++_Last;
		}

		pointer _Release() {
			_First = _Last;
			return _Last;
		}

	private:
		pointer _First;
		pointer _Last;
		_Alloc& _Al;
	};



	template <class _InIt, class _Alloc>
	inline _Alloc_ptr_t<_Alloc> _Uninitialized_copy(
		const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {


		using _Ptrval = typename _Alloc::value_type*;

		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);

		if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
			_Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
			_Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
			_Dest += _ULast - _UFirst;
			(void)_Al;
		}
		else {
			_Uninitialized_backout_al<_Alloc> _Backout{ _Dest, _Al };
			for (; _UFirst != _ULast; ++_UFirst) {
				_Backout._Emplace_back(*_UFirst);
			}

			_Dest = _Backout._Release();
		}

		return _Dest;
	}




































#line 1679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	template <class _InIt, class _Alloc>
	inline _Alloc_ptr_t<_Alloc> _Uninitialized_move(
		const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {


		using _Ptrval     = typename _Alloc::value_type*;
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
			_Uses_default_construct<_Alloc, _Ptrval, decltype(::std::move(*_UFirst))>>) {
			_Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
			return _Dest + (_ULast - _UFirst);
			(void)_Al;
		}
		else {
			_Uninitialized_backout_al<_Alloc> _Backout{ _Dest, _Al };
			for (; _UFirst != _ULast; ++_UFirst) {
				_Backout._Emplace_back(::std::move(*_UFirst));
			}

			return _Backout._Release();
		}
	}








































#line 1745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"



	template <class _Alloc>
	inline _Alloc_ptr_t<_Alloc> _Uninitialized_fill_n(
		_Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, const typename _Alloc::value_type & _Val, _Alloc & _Al) {

		using _Ty = typename _Alloc::value_type;
		if constexpr (_Fill_memset_is_safe<_Ty*, _Ty> && _Uses_default_construct<_Alloc, _Ty*, _Ty>::value) {
			(void)_Al;
			::memset(_Unfancy(_First), static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
			return _First + _Count;
		}
		else {
			_Uninitialized_backout_al<_Alloc> _Backout{ _First, _Al };
			for (; 0 < _Count; --_Count) {
				_Backout._Emplace_back(_Val);
			}

			return _Backout._Release();
		}
	}





























#line 1796 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _NoThrowFwdIt>
	constexpr bool _Use_memset_value_construct_v = conjunction_v<is_pointer<_NoThrowFwdIt>,
		is_scalar<_Iter_value_t<_NoThrowFwdIt>>, negation<is_volatile<remove_reference_t<_Iter_ref_t<_NoThrowFwdIt>>>>,
		negation<is_member_pointer<_Iter_value_t<_NoThrowFwdIt>>>>;

	template <class _Ptr>
	inline _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) {
		char* const _First_ch = reinterpret_cast<char*>(_First);
		char* const _Last_ch = reinterpret_cast<char*>(_Last);
		::memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));
		return _Last;
	}


	template <class _Alloc>
	inline _Alloc_ptr_t<_Alloc> _Uninitialized_value_construct_n(
		_Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

		using _Ptrty = typename _Alloc::value_type*;
		if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
			(void)_Al;
			auto _PFirst = _Unfancy(_First);
			_Zero_range(_PFirst, _PFirst + _Count);
			return _First + _Count;
		}
		else {
			_Uninitialized_backout_al<_Alloc> _Backout{ _First, _Al };
			for (; 0 < _Count; --_Count) {
				_Backout._Emplace_back();
			}

			return _Backout._Release();
		}
	}






























#line 1862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"


	template <class _Ty>
	pair<_Ty*, ptrdiff_t> get_temporary_buffer(ptrdiff_t _Count) noexcept {
		return _Get_temporary_buffer<_Ty>(_Count);
	}


	template <class _Ty>
	void return_temporary_buffer(_Ty* _Pbuf) {
		_Return_temporary_buffer(_Pbuf);
	}


	struct _Do_not_construct {};



	template <class _Key, class... _Args>
	struct _In_place_key_extract_set {

		static constexpr bool _Extractable = false;
	};

	template <class _Key>
	struct _In_place_key_extract_set<_Key, _Key> {

		static constexpr bool _Extractable = true;
		static const _Key& _Extract(const _Key& _Val) noexcept {
			return _Val;
		}
	};



	template <class _Key, class... Args>
	struct _In_place_key_extract_map {

		static constexpr bool _Extractable = false;
	};

	template <class _Key, class _Second>
	struct _In_place_key_extract_map<_Key, _Key, _Second> {

		static constexpr bool _Extractable = true;
		static const _Key& _Extract(const _Key& _Val, const _Second&) noexcept {
			return _Val;
		}
	};

	template <class _Key, class _First, class _Second>
	struct _In_place_key_extract_map<_Key, pair<_First, _Second>> {

		static constexpr bool _Extractable = is_same_v<_Key, _Remove_cvref_t<_First>>;
		static const _Key& _Extract(const pair<_First, _Second>& _Val) {
			return _Val.first;
		}
	};
}



#pragma warning(pop)
#pragma pack(pop)
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xmemory"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {


	template <class _InIt, class _NoThrowFwdIt>
	inline _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
			_UDest = _Copy_memmove(_UFirst, _ULast, _UDest);
		}
		else {
			_Uninitialized_backout<decltype(_UDest)> _Backout{ _UDest };
			for (; _UFirst != _ULast; ++_UFirst) {
				_Backout._Emplace_back(*_UFirst);
			}

			_UDest = _Backout._Release();
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}































#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	template <class _InIt, class _OutTy, size_t _OutSize>
	inline _OutTy* uninitialized_copy(const _InIt _First, const _InIt _Last, _OutTy(&_Dest)[_OutSize]) {

		return ::std::uninitialized_copy(_First, _Last, _Array_iterator<_OutTy, _OutSize>(_Dest))._Unwrapped();
	}
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"




	template <class _InIt, class _Diff, class _NoThrowFwdIt>
	inline _NoThrowFwdIt uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _NoThrowFwdIt _Dest) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			auto _UFirst = _Get_unwrapped_n(_First, _Count);
			auto _UDest = _Get_unwrapped_n(_Dest, _Count);
			if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
				_UDest = _Copy_memmove(_UFirst, _UFirst + _Count, _UDest);
			}
			else {
				_Uninitialized_backout<decltype(_UDest)> _Backout{ _UDest };
				for (; 0 < _Count; --_Count, (void) ++_UFirst) {
					_Backout._Emplace_back(*_UFirst);
				}

				_UDest = _Backout._Release();
			}

			_Seek_wrapped(_Dest, _UDest);
		}

		return _Dest;
	}































#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	template <class _InTy, size_t _InSize, class _Diff, class _NoThrowFwdIt>
	inline _NoThrowFwdIt uninitialized_copy_n(_InTy(&_First)[_InSize], const _Diff _Count_raw, _NoThrowFwdIt _Dest) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 149, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 149, 0); } while (false); }; } while (false);
			return ::std::uninitialized_copy_n(static_cast<_InTy*>(_First), _Count, _Dest);
		}

		return _Dest;
	}

	template <class _InIt, class _Diff, class _OutTy, size_t _OutSize>
	inline _OutTy* uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _OutTy(&_Dest)[_OutSize]) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 161, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 161, 0); } while (false); }; } while (false);
			return ::std::uninitialized_copy_n(_Get_unwrapped_n(_First, _Count), _Count, static_cast<_OutTy*>(_Dest));
		}

		return _Dest;
	}

	template <class _InTy, size_t _InSize, class _Diff, class _OutTy, size_t _OutSize>
	inline _OutTy* uninitialized_copy_n(_InTy(&_First)[_InSize], const _Diff _Count_raw, _OutTy(&_Dest)[_OutSize]) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			do { if ((::std::size(_First) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 173, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 173, 0); } while (false); }; } while (false);
			do { if ((::std::size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 174, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 174, 0); } while (false); }; } while (false);
			return ::std::uninitialized_copy_n(static_cast<_InTy*>(_First), _Count, static_cast<_OutTy*>(_Dest));
		}

		return _Dest;
	}
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

































































































































#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"



	template <class _NoThrowFwdIt, class _Tval>
	inline void uninitialized_fill(const _NoThrowFwdIt _First, const _NoThrowFwdIt _Last, const _Tval & _Val) {

		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if constexpr (_Fill_memset_is_safe<_Unwrapped_t<_NoThrowFwdIt>, _Tval>) {
			::memset(_UFirst, static_cast<unsigned char>(_Val), static_cast<size_t>(_ULast - _UFirst));
		}
		else {
			_Uninitialized_backout<_Unwrapped_t<_NoThrowFwdIt>> _Backout{ _UFirst };
			while (_Backout._Last != _ULast) {
				_Backout._Emplace_back(_Val);
			}

			_Backout._Release();
		}
	}




























#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"




	template <class _NoThrowFwdIt, class _Diff, class _Tval>
	inline _NoThrowFwdIt uninitialized_fill_n(_NoThrowFwdIt _First, const _Diff _Count_raw, const _Tval& _Val) {

		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			auto _UFirst = _Get_unwrapped_n(_First, _Count);
			if constexpr (_Fill_memset_is_safe<_Unwrapped_n_t<_NoThrowFwdIt>, _Tval>) {
				::memset(_UFirst, static_cast<unsigned char>(_Val), _Count);
				_UFirst += _Count;
			}
			else {
				_Uninitialized_backout<_Unwrapped_n_t<_NoThrowFwdIt>> _Backout{ _UFirst };
				for (; 0 < _Count; --_Count) {
					_Backout._Emplace_back(_Val);
				}

				_UFirst = _Backout._Release();
			}

			_Seek_wrapped(_First, _UFirst);
		}

		return _First;
	}

































#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"






















































































































#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"



	template <class _OutIt, class _Ty>
	class  raw_storage_iterator {
	public:
		using iterator_category = output_iterator_tag;
		using value_type        = void;
		using difference_type   = void;
		using pointer           = void;
		using reference         = void;

		explicit raw_storage_iterator(_OutIt _First) : _Next(_First) {}

		raw_storage_iterator& operator*() {
			return *this;
		}

		raw_storage_iterator& operator=(const _Ty& _Val) {
			_Construct_in_place(*_Next, _Val);
			return *this;
		}

		raw_storage_iterator& operator=(_Ty&& _Val) {
			_Construct_in_place(*_Next, ::std::move(_Val));
			return *this;
		}

		raw_storage_iterator& operator++() {
			++_Next;
			return *this;
		}

		raw_storage_iterator operator++(int) {
			raw_storage_iterator _Ans = *this;
			++_Next;
			return _Ans;
		}

		_OutIt base() const {
			return _Next;
		}

	private:
		_OutIt _Next;
	};




	template <class _Ty>
	class auto_ptr;

	template <class _Ty>
	struct auto_ptr_ref {
		explicit auto_ptr_ref(_Ty* _Right) : _Ref(_Right) {}

		_Ty* _Ref;
	};

	template <class _Ty>
	class auto_ptr {
	public:
		using element_type = _Ty;

		explicit auto_ptr(_Ty* _Ptr = nullptr) noexcept : _Myptr(_Ptr) {}

		auto_ptr(auto_ptr& _Right) noexcept : _Myptr(_Right.release()) {

		}

		auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept {
			_Ty* _Ptr = _Right._Ref;
			_Right._Ref = nullptr;
			_Myptr = _Ptr;
		}

		template <class _Other>
		operator auto_ptr<_Other>() noexcept {
			return auto_ptr<_Other>(*this);
		}

		template <class _Other>
		operator auto_ptr_ref<_Other>() noexcept {
			_Other* _Cvtptr = _Myptr;
			auto_ptr_ref<_Other> _Ans(_Cvtptr);
			_Myptr = nullptr;
			return _Ans;
		}

		template <class _Other>
		auto_ptr& operator=(auto_ptr<_Other>& _Right) noexcept {
			reset(_Right.release());
			return *this;
		}

		template <class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) noexcept : _Myptr(_Right.release()) {

		}

		auto_ptr& operator=(auto_ptr& _Right) noexcept {
			reset(_Right.release());
			return *this;
		}

		auto_ptr& operator=(auto_ptr_ref<_Ty> _Right) noexcept {

			_Ty* _Ptr = _Right._Ref;
			_Right._Ref = 0;
			reset(_Ptr);
			return *this;
		}

		~auto_ptr() noexcept {
			delete _Myptr;
		}

		_Ty& operator*() const noexcept {

			do { if (_Myptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 660, 0, "%s", "auto_ptr not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"auto_ptr not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 660, 0); } while (false); }; } while (false);
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

			return *get();
		}

		_Ty* operator->() const noexcept {

			do { if (_Myptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 668, 0, "%s", "auto_ptr not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"auto_ptr not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory", 668, 0); } while (false); }; } while (false);
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

			return get();
		}

		_Ty* get() const noexcept {
			return _Myptr;
		}

		_Ty* release() noexcept {
			_Ty* _Tmp = _Myptr;
			_Myptr = nullptr;
			return _Tmp;
		}

		void reset(_Ty* _Ptr = nullptr) {
			if (_Ptr != _Myptr) {
				delete _Myptr;
			}

			_Myptr = _Ptr;
		}

	private:
		_Ty* _Myptr;
	};

	template <>
	class auto_ptr<void> {
	public:
		using element_type = void;
	};
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"



	class bad_weak_ptr : public exception {
	public:
		bad_weak_ptr() noexcept {}

		virtual const char* what() const noexcept override {

			return "bad_weak_ptr";
		}
	};


	class __declspec(novtable) _Ref_count_base {
	private:










		virtual void _Destroy() noexcept = 0;
		virtual void _Delete_this() noexcept = 0;
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		_Atomic_counter_t _Uses = 1;
		_Atomic_counter_t _Weaks = 1;

	protected:
		constexpr _Ref_count_base() noexcept = default;

	public:
		_Ref_count_base(const _Ref_count_base&) = delete;
		_Ref_count_base& operator=(const _Ref_count_base&) = delete;

		virtual ~_Ref_count_base() noexcept {}

		bool _Incref_nz() noexcept {
			auto& _Volatile_uses = reinterpret_cast<volatile long&>(_Uses);
			long _Count = (*_Atomic_address_as<const long>(_Volatile_uses));

			while (_Count != 0) {
				const long _Old_value = _InterlockedCompareExchange(&_Volatile_uses, _Count + 1, _Count);
				if (_Old_value == _Count) {
					return true;
				}

				_Count = _Old_value;
			}

			return false;
		}

		void _Incref() noexcept {
			_InterlockedIncrement(reinterpret_cast<volatile long*>(&_Uses));
		}

		void _Incwref() noexcept {
			_InterlockedIncrement(reinterpret_cast<volatile long*>(&_Weaks));
		}

		void _Decref() noexcept {
			if (_InterlockedDecrement(reinterpret_cast<volatile long*>(&_Uses)) == 0) {
				_Destroy();
				_Decwref();
			}
		}

		void _Decwref() noexcept {
			if (_InterlockedDecrement(reinterpret_cast<volatile long*>(&_Weaks)) == 0) {
				_Delete_this();
			}
		}

		long _Use_count() const noexcept {
			return static_cast<long>(_Uses);
		}

		virtual void* _Get_deleter(const type_info&) const noexcept {
			return nullptr;
		}
	};


	template <class _Ty>
	class _Ref_count : public _Ref_count_base {
	public:
		explicit _Ref_count(_Ty* _Px) : _Ref_count_base(), _Ptr(_Px) {}

	private:
		virtual void _Destroy() noexcept override {
			delete _Ptr;
		}

		virtual void _Delete_this() noexcept override {
			delete this;
		}

		_Ty* _Ptr;
	};


	template <class _Resource, class _Dx>
	class _Ref_count_resource : public _Ref_count_base {
	public:
		_Ref_count_resource(_Resource _Px, _Dx _Dt)
			: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std::move(_Dt), _Px) {}

		virtual void* _Get_deleter(const type_info& _Typeid) const noexcept override {

			if (_Typeid == typeid(_Dx)) {
				return const_cast<_Dx*>(::std::addressof(_Mypair._Get_first()));
			}


#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

			return nullptr;
		}

	private:
		virtual void _Destroy() noexcept override {
			_Mypair._Get_first()(_Mypair._Myval2);
		}

		virtual void _Delete_this() noexcept override {
			delete this;
		}

		_Compressed_pair<_Dx, _Resource> _Mypair;
	};


	template <class _Resource, class _Dx, class _Alloc>
	class _Ref_count_resource_alloc : public _Ref_count_base {

	public:
		_Ref_count_resource_alloc(_Resource _Px, _Dx _Dt, const _Alloc& _Ax)
			: _Ref_count_base(),
			_Mypair(_One_then_variadic_args_t(), ::std::move(_Dt), _One_then_variadic_args_t(), _Ax, _Px) {}

		virtual void* _Get_deleter(const type_info& _Typeid) const noexcept override {

			if (_Typeid == typeid(_Dx)) {
				return const_cast<_Dx*>(::std::addressof(_Mypair._Get_first()));
			}


#line 856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

			return nullptr;
		}

	private:
		using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_resource_alloc>;

		virtual void _Destroy() noexcept override {
			_Mypair._Get_first()(_Mypair._Myval2._Myval2);
		}

		virtual void _Delete_this() noexcept override {
			_Myalty _Al = _Mypair._Myval2._Get_first();
			_Delete_plain(_Al, this);
		}

		_Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Resource>> _Mypair;
	};


	template <class _Ty>
	struct default_delete;

	template <class _Ty, class _Dx = default_delete<_Ty>>
	class unique_ptr;

	template <class _Ty>
	class shared_ptr;

	template <class _Ty>
	class weak_ptr;

	template <class _Yty, class = void>
	struct _Can_enable_shared : false_type {};

	template <class _Yty>
	struct _Can_enable_shared<_Yty, void_t<typename _Yty::_Esft_type>>
		: is_convertible<remove_cv_t<_Yty>*, typename _Yty::_Esft_type*>::type {

	};














#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	template <class _Ty>
	class _Ptr_base {
	public:
		using element_type = remove_extent_t<_Ty>;

		long use_count() const noexcept {
			return _Rep ? _Rep->_Use_count() : 0;
		}

		template <class _Ty2>
		bool owner_before(const _Ptr_base<_Ty2>& _Right) const noexcept {
			return _Rep < _Right._Rep;
		}

		_Ptr_base(const _Ptr_base&) = delete;
		_Ptr_base& operator=(const _Ptr_base&) = delete;

	protected:
		element_type* get() const noexcept {
			return _Ptr;
		}

		constexpr _Ptr_base() noexcept = default;

		~_Ptr_base() = default;

		template <class _Ty2>
		void _Move_construct_from(_Ptr_base<_Ty2>&& _Right) noexcept {

			_Ptr = _Right._Ptr;
			_Rep = _Right._Rep;

			_Right._Ptr = nullptr;
			_Right._Rep = nullptr;
		}

		template <class _Ty2>
		void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {

			if (_Other._Rep) {
				_Other._Rep->_Incref();
			}

			_Ptr = _Other._Ptr;
			_Rep = _Other._Rep;
		}

		template <class _Ty2>
		void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type* _Px) noexcept {

			if (_Other._Rep) {
				_Other._Rep->_Incref();
			}

			_Ptr = _Px;
			_Rep = _Other._Rep;
		}

		template <class _Ty0>
		friend class weak_ptr;

		template <class _Ty2>
		bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other) noexcept {

			if (_Other._Rep && _Other._Rep->_Incref_nz()) {
				_Ptr = _Other._Ptr;
				_Rep = _Other._Rep;
				return true;
			}

			return false;
		}

		void _Decref() noexcept {
			if (_Rep) {
				_Rep->_Decref();
			}
		}

		void _Swap(_Ptr_base& _Right) noexcept {
			::std::swap(_Ptr, _Right._Ptr);
			::std::swap(_Rep, _Right._Rep);
		}

		void _Set_ptr_rep(element_type* _Other_ptr, _Ref_count_base* _Other_rep) noexcept {
			_Ptr = _Other_ptr;
			_Rep = _Other_rep;
		}

		template <class _Ty2>
		void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other) noexcept {
			if (_Other._Rep) {
				_Ptr = _Other._Ptr;
				_Rep = _Other._Rep;
				_Rep->_Incwref();
			}
			else {
				;
			}
		}

		void _Decwref() noexcept {
			if (_Rep) {
				_Rep->_Decwref();
			}
		}

	private:
		element_type* _Ptr{ nullptr };
		_Ref_count_base* _Rep{ nullptr };

		template <class _Ty0>
		friend class _Ptr_base;


		template <class _Dx, class _Ty0>
		friend _Dx* get_deleter(const shared_ptr<_Ty0>& _Sx) noexcept;
#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
	};


	template <class _Yty, class = void>
	struct _Can_scalar_delete : false_type {};
	template <class _Yty>
	struct _Can_scalar_delete<_Yty, void_t<decltype(delete ::std::declval<_Yty*>())>> : true_type {};


	template <class _Yty, class = void>
	struct _Can_array_delete : false_type {};
	template <class _Yty>
	struct _Can_array_delete<_Yty, void_t<decltype(delete[] ::std::declval<_Yty*>())>> : true_type {};


	template <class _Fx, class _Arg, class = void>
	struct _Can_call_function_object : false_type {};
	template <class _Fx, class _Arg>
	struct _Can_call_function_object<_Fx, _Arg, void_t<decltype(::std::declval<_Fx>()(::std::declval<_Arg>()))>> : true_type {};


	template <class _Yty, class _Ty>
	struct _SP_convertible : is_convertible<_Yty*, _Ty*>::type {};
	template <class _Yty, class _Uty>
	struct _SP_convertible<_Yty, _Uty[]> : is_convertible<_Yty(*)[], _Uty(*)[]>::type {};
	template <class _Yty, class _Uty, size_t _Ext>
	struct _SP_convertible<_Yty, _Uty[_Ext]> : is_convertible<_Yty(*)[_Ext], _Uty(*)[_Ext]>::type {};


	template <class _Yty, class _Ty>
	struct _SP_pointer_compatible : is_convertible<_Yty*, _Ty*>::type {


	};
	template <class _Uty, size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], _Uty[]> : true_type {

	};
	template <class _Uty, size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const _Uty[]> : true_type {

	};
	template <class _Uty, size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], volatile _Uty[]> : true_type {

	};
	template <class _Uty, size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const volatile _Uty[]> : true_type {

	};


	template <class _Ux>
	struct _Temporary_owner {
		_Ux* _Ptr;

		explicit _Temporary_owner(_Ux* const _Ptr_) noexcept : _Ptr(_Ptr_) {}
		_Temporary_owner(const _Temporary_owner&) = delete;
		_Temporary_owner& operator=(const _Temporary_owner&) = delete;
		~_Temporary_owner() {
			delete _Ptr;
		}
	};

	template <class _UxptrOrNullptr, class _Dx>
	struct _Temporary_owner_del {
		_UxptrOrNullptr _Ptr;
		_Dx& _Dt;
		bool _Call_deleter = true;

		explicit _Temporary_owner_del(const _UxptrOrNullptr _Ptr_, _Dx& _Dt_) noexcept : _Ptr(_Ptr_), _Dt(_Dt_) {}
		_Temporary_owner_del(const _Temporary_owner_del&) = delete;
		_Temporary_owner_del& operator=(const _Temporary_owner_del&) = delete;
		~_Temporary_owner_del() {
			if (_Call_deleter) {
				_Dt(_Ptr);
			}
		}
	};

	template <class _Ty>
	class shared_ptr : public _Ptr_base<_Ty> {
	private:
		using _Mybase = _Ptr_base<_Ty>;

	public:
		using typename _Mybase::element_type;



#line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		constexpr shared_ptr() noexcept {}

		constexpr shared_ptr(nullptr_t) noexcept {}

		template <class _Ux,
			enable_if_t<conjunction_v<conditional_t<is_array_v<_Ty>, _Can_array_delete<_Ux>, _Can_scalar_delete<_Ux>>,
			_SP_convertible<_Ux, _Ty>>,
			int> = 0>
			explicit shared_ptr(_Ux * _Px) {

			if constexpr (is_array_v<_Ty>) {
				_Setpd(_Px, default_delete<_Ux[]>{});
			}
			else {
				_Temporary_owner<_Ux> _Owner(_Px);
				_Set_ptr_rep_and_enable_shared(_Owner._Ptr, new _Ref_count<_Ux>(_Owner._Ptr));
				_Owner._Ptr = nullptr;
			}


#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
		}

		template <class _Ux, class _Dx,
			enable_if_t<conjunction_v<is_move_constructible<_Dx>, _Can_call_function_object<_Dx&, _Ux*&>,
			_SP_convertible<_Ux, _Ty>>,
			int> = 0>
			shared_ptr(_Ux * _Px, _Dx _Dt) {
			_Setpd(_Px, ::std::move(_Dt));
		}

		template <class _Ux, class _Dx, class _Alloc,
			enable_if_t<conjunction_v<is_move_constructible<_Dx>, _Can_call_function_object<_Dx&, _Ux*&>,
			_SP_convertible<_Ux, _Ty>>,
			int> = 0>
			shared_ptr(_Ux * _Px, _Dx _Dt, _Alloc _Ax) {
			_Setpda(_Px, ::std::move(_Dt), _Ax);
		}

		template <class _Dx,
			enable_if_t<conjunction_v<is_move_constructible<_Dx>, _Can_call_function_object<_Dx&, nullptr_t&>>, int> = 0>
			shared_ptr(nullptr_t, _Dx _Dt) {
			_Setpd(nullptr, ::std::move(_Dt));
		}

		template <class _Dx, class _Alloc,
			enable_if_t<conjunction_v<is_move_constructible<_Dx>, _Can_call_function_object<_Dx&, nullptr_t&>>, int> = 0>
			shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax) {
			_Setpda(nullptr, ::std::move(_Dt), _Ax);
		}

		template <class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, element_type* _Px) noexcept {

			this->_Alias_construct_from(_Right, _Px);
		}

		shared_ptr(const shared_ptr& _Other) noexcept {
			this->_Copy_construct_from(_Other);
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(const shared_ptr<_Ty2> & _Other) noexcept {

			this->_Copy_construct_from(_Other);
		}

		shared_ptr(shared_ptr&& _Right) noexcept {
			this->_Move_construct_from(::std::move(_Right));
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(shared_ptr<_Ty2> && _Right) noexcept {
			this->_Move_construct_from(::std::move(_Right));
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		explicit shared_ptr(const weak_ptr<_Ty2> & _Other) {
			if (!this->_Construct_from_weak(_Other)) {
				throw bad_weak_ptr{};
			}
		}


		template <class _Ty2, enable_if_t<is_convertible_v<_Ty2*, _Ty*>, int> = 0>
		shared_ptr(auto_ptr<_Ty2> && _Other) {
			_Ty2* _Px = _Other.get();
			_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ty2>(_Px));
			_Other.release();
		}
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		template <class _Ux, class _Dx,
			enable_if_t<conjunction_v<_SP_pointer_compatible<_Ux, _Ty>,
			is_convertible<typename unique_ptr<_Ux, _Dx>::pointer, element_type* >>,
			int> = 0>
			shared_ptr(unique_ptr<_Ux, _Dx> && _Other) {
			using _Fancy_t   = typename unique_ptr<_Ux, _Dx>::pointer;
			using _Raw_t     = typename unique_ptr<_Ux, _Dx>::element_type*;
			using _Deleter_t = conditional_t<is_reference_v<_Dx>, decltype(::std::ref(_Other.get_deleter())), _Dx>;

			const _Fancy_t _Fancy = _Other.get();

			if (_Fancy) {
				const _Raw_t _Raw = _Fancy;
				const auto _Rx = new _Ref_count_resource<_Fancy_t, _Deleter_t>(_Fancy, _Other.get_deleter());
				_Set_ptr_rep_and_enable_shared(_Raw, _Rx);
				_Other.release();
			}
		}

		~shared_ptr() noexcept {
			this->_Decref();
		}

		shared_ptr& operator=(const shared_ptr& _Right) noexcept {
			shared_ptr(_Right).swap(*this);
			return *this;
		}

		template <class _Ty2>
		shared_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept {

			shared_ptr(_Right).swap(*this);
			return *this;
		}

		shared_ptr& operator=(shared_ptr&& _Right) noexcept {
			shared_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}

		template <class _Ty2>
		shared_ptr& operator=(shared_ptr<_Ty2>&& _Right) noexcept {
			shared_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}


		template <class _Ty2>
		shared_ptr& operator=(auto_ptr<_Ty2>&& _Right) {
			shared_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}
#line 1266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		template <class _Ux, class _Dx>
		shared_ptr& operator=(unique_ptr<_Ux, _Dx>&& _Right) {
			shared_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}

		void swap(shared_ptr& _Other) noexcept {
			this->_Swap(_Other);
		}

		void reset() noexcept {
			shared_ptr().swap(*this);
		}

		template <class _Ux>
		void reset(_Ux* _Px) {
			shared_ptr(_Px).swap(*this);
		}

		template <class _Ux, class _Dx>
		void reset(_Ux* _Px, _Dx _Dt) {
			shared_ptr(_Px, _Dt).swap(*this);
		}

		template <class _Ux, class _Dx, class _Alloc>
		void reset(_Ux* _Px, _Dx _Dt, _Alloc _Ax) {
			shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}

		using _Mybase::get;

		template <class _Ty2 = _Ty, enable_if_t<!disjunction_v<is_array<_Ty2>, is_void<_Ty2>>, int> = 0>
		_Ty2 & operator*() const noexcept {
			return *get();
		}

		template <class _Ty2 = _Ty, enable_if_t<!is_array_v<_Ty2>, int> = 0>
		_Ty2 * operator->() const noexcept {
			return get();
		}

		template <class _Ty2 = _Ty, class _Elem = element_type, enable_if_t<is_array_v<_Ty2>, int> = 0>
		_Elem & operator[](ptrdiff_t _Idx) const {
			return get()[_Idx];
		}

		bool unique() const noexcept {

			return this->use_count() == 1;
		}

		explicit operator bool() const noexcept {
			return get() != nullptr;
		}

	private:












#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		template <class _UxptrOrNullptr, class _Dx>
		void _Setpd(const _UxptrOrNullptr _Px, _Dx _Dt) {
			_Temporary_owner_del<_UxptrOrNullptr, _Dx> _Owner(_Px, _Dt);
			_Set_ptr_rep_and_enable_shared(
				_Owner._Ptr, new _Ref_count_resource<_UxptrOrNullptr, _Dx>(_Owner._Ptr, ::std::move(_Dt)));
			_Owner._Call_deleter = false;
		}

		template <class _UxptrOrNullptr, class _Dx, class _Alloc>
		void _Setpda(const _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax) {
			using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Ref_count_resource_alloc<_UxptrOrNullptr, _Dx, _Alloc>>;

			_Temporary_owner_del<_UxptrOrNullptr, _Dx> _Owner(_Px, _Dt);
			_Alref_alloc _Alref(_Ax);
			_Alloc_construct_ptr<_Alref_alloc> _Constructor(_Alref);
			_Constructor._Allocate();
			const auto _Pref = _Unfancy(_Constructor._Ptr);
			allocator_traits<_Alref_alloc>::construct(_Alref, _Pref, _Owner._Ptr, ::std::move(_Dt), _Ax);
			_Set_ptr_rep_and_enable_shared(_Owner._Ptr, _Pref);
			_Constructor._Ptr = nullptr;
			_Owner._Call_deleter = false;
		}

		template <class _Ty0, class... _Types>
		friend shared_ptr<_Ty0> make_shared(_Types&& ... _Args);

		template <class _Ty0, class _Alloc, class... _Types>
		friend shared_ptr<_Ty0> allocate_shared(const _Alloc& _Al_arg, _Types&& ... _Args);

		template <class _Ux>
		void _Set_ptr_rep_and_enable_shared(_Ux* const _Px, _Ref_count_base* const _Rx) noexcept {
			this->_Set_ptr_rep(_Px, _Rx);

			if constexpr (conjunction_v<negation<is_array<_Ty>>, negation<is_volatile<_Ux>>, _Can_enable_shared<_Ux>>) {
				if (_Px && _Px->_Wptr.expired()) {
					_Px->_Wptr = shared_ptr<remove_cv_t<_Ux>>(*this, const_cast<remove_cv_t<_Ux>*>(_Px));
				}
			}




#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
		}

		void _Set_ptr_rep_and_enable_shared(nullptr_t, _Ref_count_base* const _Rx) noexcept {
			this->_Set_ptr_rep(nullptr, _Rx);
		}
	};







#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

	template <class _Ty1, class _Ty2>
	bool operator==(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() == _Right.get();
	}

	template <class _Ty1, class _Ty2>
	bool operator!=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() != _Right.get();
	}

	template <class _Ty1, class _Ty2>
	bool operator<(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() < _Right.get();
	}

	template <class _Ty1, class _Ty2>
	bool operator>=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() >= _Right.get();
	}

	template <class _Ty1, class _Ty2>
	bool operator>(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() > _Right.get();
	}

	template <class _Ty1, class _Ty2>
	bool operator<=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept {
		return _Left.get() <= _Right.get();
	}

	template <class _Ty>
	bool operator==(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() == nullptr;
	}

	template <class _Ty>
	bool operator==(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return nullptr == _Right.get();
	}

	template <class _Ty>
	bool operator!=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() != nullptr;
	}

	template <class _Ty>
	bool operator!=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return nullptr != _Right.get();
	}

	template <class _Ty>
	bool operator<(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() < static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr);
	}

	template <class _Ty>
	bool operator<(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr) < _Right.get();
	}

	template <class _Ty>
	bool operator>=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() >= static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr);
	}

	template <class _Ty>
	bool operator>=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr) >= _Right.get();
	}

	template <class _Ty>
	bool operator>(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() > static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr);
	}

	template <class _Ty>
	bool operator>(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr) > _Right.get();
	}

	template <class _Ty>
	bool operator<=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept {
		return _Left.get() <= static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr);
	}

	template <class _Ty>
	bool operator<=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept {
		return static_cast<typename shared_ptr<_Ty>::element_type*>(nullptr) <= _Right.get();
	}

	template <class _Elem, class _Traits, class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const shared_ptr<_Ty>& _Px) {

		return _Out << _Px.get();
	}

	template <class _Ty>
	void swap(shared_ptr<_Ty>& _Left, shared_ptr<_Ty>& _Right) noexcept {
		_Left.swap(_Right);
	}

	template <class _Ty1, class _Ty2>
	shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept {

		const auto _Ptr = static_cast<typename shared_ptr<_Ty1>::element_type*>(_Other.get());
		return shared_ptr<_Ty1>(_Other, _Ptr);
	}

	template <class _Ty1, class _Ty2>
	shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept {

		const auto _Ptr = const_cast<typename shared_ptr<_Ty1>::element_type*>(_Other.get());
		return shared_ptr<_Ty1>(_Other, _Ptr);
	}

	template <class _Ty1, class _Ty2>
	shared_ptr<_Ty1> reinterpret_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept {

		const auto _Ptr = reinterpret_cast<typename shared_ptr<_Ty1>::element_type*>(_Other.get());
		return shared_ptr<_Ty1>(_Other, _Ptr);
	}


	template <class _Ty1, class _Ty2>
	shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept {

		const auto _Ptr = dynamic_cast<typename shared_ptr<_Ty1>::element_type*>(_Other.get());

		if (_Ptr) {
			return shared_ptr<_Ty1>(_Other, _Ptr);
		}

		return shared_ptr<_Ty1>();
	}



#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	template <class _Dx, class _Ty>
	_Dx* get_deleter(const shared_ptr<_Ty>& _Sx) noexcept {

		if (_Sx._Rep) {
			return static_cast<_Dx*>(_Sx._Rep->_Get_deleter(typeid(_Dx)));
		}

		return nullptr;
	}



#line 1548 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	template <class _Ty>
	class _Ref_count_obj : public _Ref_count_base {
	public:
		template <class... _Types>
		explicit _Ref_count_obj(_Types&& ... _Args) : _Ref_count_base() {
			::new (static_cast<void*>(&_Storage)) _Ty(::std::forward<_Types>(_Args)...);
		}

		_Ty* _Getptr() {
			return reinterpret_cast<_Ty*>(&_Storage);
		}

	private:
		virtual void _Destroy() noexcept override {
			_Getptr()->~_Ty();
		}

		virtual void _Delete_this() noexcept override {
			delete this;
		}

		aligned_union_t<1, _Ty> _Storage;
	};


	template <class _Ty, class _Alloc>
	class _Ref_count_obj_alloc : public _Ref_count_base {

	public:
		template <class... _Types>
		explicit _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&& ... _Args)
			: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg) {
			::new (static_cast<void*>(&_Mypair._Myval2)) _Ty(::std::forward<_Types>(_Args)...);
		}

		_Ty* _Getptr() {
			return reinterpret_cast<_Ty*>(&_Mypair._Myval2);
		}

	private:
		using _Myalty      = _Rebind_alloc_t<_Alloc, _Ref_count_obj_alloc>;
		using _Mystoragety = aligned_union_t<1, _Ty>;

		virtual void _Destroy() noexcept override {
			_Getptr()->~_Ty();
		}

		virtual void _Delete_this() noexcept override {
			_Myalty _Al = _Mypair._Get_first();
			_Delete_plain(_Al, this);
		}

		_Compressed_pair<_Myalty, _Mystoragety> _Mypair;
	};


	template <class _Ty, class... _Types>
	inline shared_ptr<_Ty> make_shared(_Types&& ... _Args) {
		const auto _Rx = new _Ref_count_obj<_Ty>(::std::forward<_Types>(_Args)...);

		shared_ptr<_Ty> _Ret;
		_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Rx);
		return _Ret;
	}


	template <class _Ty, class _Alloc, class... _Types>
	inline shared_ptr<_Ty> allocate_shared(const _Alloc& _Al, _Types&& ... _Args) {
		using _Refoa   = _Ref_count_obj_alloc<_Ty, _Alloc>;
		const auto _Rx = _Alloc_rebound<_Refoa>(_Al, _Al, ::std::forward<_Types>(_Args)...);
		shared_ptr<_Ty> _Ret;
		_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Unfancy(_Rx));
		return _Ret;
	}


	template <class _Ty>
	class weak_ptr : public _Ptr_base<_Ty> {
	public:
		constexpr weak_ptr() noexcept {}

		weak_ptr(const weak_ptr& _Other) noexcept {
			this->_Weakly_construct_from(_Other);
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const shared_ptr<_Ty2> & _Other) noexcept {
			this->_Weakly_construct_from(_Other);
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const weak_ptr<_Ty2> & _Other) noexcept {
			this->_Weakly_construct_from(_Other.lock());
		}

		weak_ptr(weak_ptr&& _Other) noexcept {
			this->_Move_construct_from(::std::move(_Other));
		}

		template <class _Ty2, enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(weak_ptr<_Ty2> && _Other) noexcept {
			this->_Weakly_construct_from(_Other.lock());
			_Other.reset();
		}

		~weak_ptr() noexcept {
			this->_Decwref();
		}

		weak_ptr& operator=(const weak_ptr& _Right) noexcept {
			weak_ptr(_Right).swap(*this);
			return *this;
		}

		template <class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept {
			weak_ptr(_Right).swap(*this);
			return *this;
		}

		weak_ptr& operator=(weak_ptr&& _Right) noexcept {
			weak_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}

		template <class _Ty2>
		weak_ptr& operator=(weak_ptr<_Ty2>&& _Right) noexcept {
			weak_ptr(::std::move(_Right)).swap(*this);
			return *this;
		}

		template <class _Ty2>
		weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept {
			weak_ptr(_Right).swap(*this);
			return *this;
		}

		void reset() noexcept {
			weak_ptr().swap(*this);
		}

		void swap(weak_ptr& _Other) noexcept {
			this->_Swap(_Other);
		}

		bool expired() const noexcept {
			return this->use_count() == 0;
		}

		shared_ptr<_Ty> lock() const noexcept {
			shared_ptr<_Ty> _Ret;
			(void)_Ret._Construct_from_weak(*this);
			return _Ret;
		}
	};




#line 1710 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

	template <class _Ty>
	void swap(weak_ptr<_Ty> & _Left, weak_ptr<_Ty> & _Right) noexcept {
		_Left.swap(_Right);
	}


	template <class _Ty>
	class enable_shared_from_this {
	public:
		using _Esft_type = enable_shared_from_this;

		shared_ptr<_Ty> shared_from_this() {
			return shared_ptr<_Ty>(_Wptr);
		}

		shared_ptr<const _Ty> shared_from_this() const {
			return shared_ptr<const _Ty>(_Wptr);
		}

		weak_ptr<_Ty> weak_from_this() noexcept {
			return _Wptr;
		}

		weak_ptr<const _Ty> weak_from_this() const noexcept {
			return _Wptr;
		}

	protected:
		constexpr enable_shared_from_this() noexcept : _Wptr() {}

		enable_shared_from_this(const enable_shared_from_this&) noexcept : _Wptr() {

		}

		enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept {
			return *this;
		}

		~enable_shared_from_this() = default;

	private:

		template <class _Yty>
		friend class shared_ptr;



#line 1759 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		mutable weak_ptr<_Ty> _Wptr;
	};





	template <class _Ty>
	struct default_delete {
		constexpr default_delete() noexcept = default;

		template <class _Ty2, enable_if_t<is_convertible_v<_Ty2*, _Ty*>, int> = 0>
		default_delete(const default_delete<_Ty2>&) noexcept {}

		void operator()(_Ty* _Ptr) const noexcept {
			static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
			delete _Ptr;
		}
	};

	template <class _Ty>
	struct default_delete<_Ty[]> {
		constexpr default_delete() noexcept = default;

		template <class _Uty, enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		default_delete(const default_delete<_Uty[]>&) noexcept {}

		template <class _Uty, enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		void operator()(_Uty * _Ptr) const noexcept {
			static_assert(0 < sizeof(_Uty), "can't delete an incomplete type");
			delete[] _Ptr;
		}
	};


	template <class _Ty, class _Dx_noref, class = void>
	struct _Get_deleter_pointer_type {
		using type = _Ty *;
	};

	template <class _Ty, class _Dx_noref>
	struct _Get_deleter_pointer_type<_Ty, _Dx_noref, void_t<typename _Dx_noref::pointer>> {
		using type = typename _Dx_noref::pointer;
	};

	template <class _Dx2>
	using _Unique_ptr_enable_default_t =
		enable_if_t<conjunction_v<negation<is_pointer<_Dx2>>, is_default_constructible<_Dx2>>, int>;


	template <class _Ty, class _Dx >
	class unique_ptr {
	public:
		using pointer      = typename _Get_deleter_pointer_type<_Ty, remove_reference_t<_Dx>>::type;
		using element_type = _Ty;
		using deleter_type = _Dx;

		template <class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

		template <class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

		unique_ptr& operator=(nullptr_t) noexcept {
			reset();
			return *this;
		}

		template <class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0>
		explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Ptr) {}

		template <class _Dx2 = _Dx, enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0>
		unique_ptr(pointer _Ptr, const _Dx & _Dt) noexcept : _Mypair(_One_then_variadic_args_t(), _Dt, _Ptr) {}

		template <class _Dx2 = _Dx,
			enable_if_t<conjunction_v<negation<is_reference<_Dx2>>, is_constructible<_Dx2, _Dx2>>, int> = 0>
			unique_ptr(pointer _Ptr, _Dx && _Dt) noexcept : _Mypair(_One_then_variadic_args_t(), ::std::move(_Dt), _Ptr) {}

		template <class _Dx2 = _Dx,
			enable_if_t<conjunction_v<is_reference<_Dx2>, is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
			unique_ptr(pointer, remove_reference_t<_Dx>&&) = delete;

		unique_ptr(unique_ptr&& _Right) noexcept
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Dx>(_Right.get_deleter()), _Right.release()) {}

		template <class _Ty2, class _Dx2,
			enable_if_t<
			conjunction_v<negation<is_array<_Ty2>>, is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>,
			conditional_t<is_reference_v<_Dx>, is_same<_Dx2, _Dx>, is_convertible<_Dx2, _Dx>>>,
			int> = 0>
			unique_ptr(unique_ptr<_Ty2, _Dx2> && _Right) noexcept
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Dx2>(_Right.get_deleter()), _Right.release()) {}


		template <class _Ty2,
			enable_if_t<conjunction_v<is_convertible<_Ty2*, _Ty*>, is_same<_Dx, default_delete<_Ty>>>, int> = 0>
			unique_ptr(auto_ptr<_Ty2> && _Right) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Right.release()) {}
#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

		template <class _Ty2, class _Dx2,
			enable_if_t<conjunction_v<negation<is_array<_Ty2>>, is_assignable<_Dx&, _Dx2>,
			is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>>,
			int> = 0>
			unique_ptr & operator=(unique_ptr<_Ty2, _Dx2> && _Right) noexcept {
			reset(_Right.release());
			_Mypair._Get_first() = ::std::forward<_Dx2>(_Right._Mypair._Get_first());
			return *this;
		}

		unique_ptr& operator=(unique_ptr&& _Right) noexcept {
			if (this != ::std::addressof(_Right)) {
				reset(_Right.release());
				_Mypair._Get_first() = ::std::forward<_Dx>(_Right._Mypair._Get_first());
			}
			return *this;
		}

		void swap(unique_ptr& _Right) noexcept {
			_Swap_adl(_Mypair._Myval2, _Right._Mypair._Myval2);
			_Swap_adl(_Mypair._Get_first(), _Right._Mypair._Get_first());
		}

		~unique_ptr() noexcept {
			if (_Mypair._Myval2 != pointer()) {
				_Mypair._Get_first()(_Mypair._Myval2);
			}
		}

		_Dx& get_deleter() noexcept {
			return _Mypair._Get_first();
		}

		const _Dx& get_deleter() const noexcept {
			return _Mypair._Get_first();
		}

		add_lvalue_reference_t<_Ty> operator*() const {
			return *_Mypair._Myval2;
		}

		pointer operator->() const noexcept {
			return _Mypair._Myval2;
		}

		pointer get() const noexcept {
			return _Mypair._Myval2;
		}

		explicit operator bool() const noexcept {
			return _Mypair._Myval2 != pointer();
		}

		pointer release() noexcept {
			return ::std::exchange(_Mypair._Myval2, pointer());
		}

		void reset(pointer _Ptr = pointer()) noexcept {
			pointer _Old = ::std::exchange(_Mypair._Myval2, _Ptr);
			if (_Old != pointer()) {
				_Mypair._Get_first()(_Old);
			}
		}

		unique_ptr(const unique_ptr&) = delete;
		unique_ptr& operator=(const unique_ptr&) = delete;

	private:
		template <class, class>
		friend class unique_ptr;

		_Compressed_pair<_Dx, pointer> _Mypair;
	};


	template <class _Ty, class _Dx>
	class unique_ptr<_Ty[], _Dx> {
	public:
		using pointer      = typename _Get_deleter_pointer_type<_Ty, remove_reference_t<_Dx>>::type;
		using element_type = _Ty;
		using deleter_type = _Dx;

		template <class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

		template <class _Uty, class _Is_nullptr = is_same<_Uty, nullptr_t>>
		using _Enable_ctor_reset = enable_if_t<is_same_v<_Uty, pointer>
			|| _Is_nullptr::value
			|| (is_same_v<pointer, element_type*>
				&& is_pointer_v<_Uty>
				&& is_convertible_v<remove_pointer_t<_Uty>(*)[], element_type(*)[]>)>;

		template <class _Uty, class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0, class = _Enable_ctor_reset<_Uty>>
		explicit unique_ptr(_Uty _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t(), _Ptr) {}

		template <class _Uty, class _Dx2 = _Dx, enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0,
			class = _Enable_ctor_reset<_Uty>>
			unique_ptr(_Uty _Ptr, const _Dx & _Dt) noexcept : _Mypair(_One_then_variadic_args_t(), _Dt, _Ptr) {}

		template <class _Uty, class _Dx2 = _Dx,
			enable_if_t<conjunction_v<negation<is_reference<_Dx2>>, is_constructible<_Dx2, _Dx2>>, int> = 0,
			class = _Enable_ctor_reset<_Uty>>
			unique_ptr(_Uty _Ptr, _Dx && _Dt) noexcept : _Mypair(_One_then_variadic_args_t(), ::std::move(_Dt), _Ptr) {}

		template <class _Uty, class _Dx2 = _Dx,
			enable_if_t<conjunction_v<is_reference<_Dx2>, is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
			unique_ptr(_Uty, remove_reference_t<_Dx>&&) = delete;

		unique_ptr(unique_ptr&& _Right) noexcept
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Dx>(_Right.get_deleter()), _Right.release()) {}

		unique_ptr& operator=(unique_ptr&& _Right) noexcept {
			if (this != ::std::addressof(_Right)) {
				reset(_Right.release());
				_Mypair._Get_first() = ::std::move(_Right._Mypair._Get_first());
			}

			return *this;
		}

		template <class _Uty, class _Ex, class _More, class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
			class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
			using _Enable_conversion = enable_if_t<conjunction_v<is_array<_Uty>, is_same<pointer, element_type*>,
			is_same<_UP_pointer, _UP_element_type*>, is_convertible<_UP_element_type(*)[], element_type(*)[]>, _More>>;

		template <class _Uty, class _Ex,
			class = _Enable_conversion<_Uty, _Ex,
			conditional_t<is_reference_v<_Dx>, is_same<_Ex, _Dx>, is_convertible<_Ex, _Dx>>>>
			unique_ptr(unique_ptr<_Uty, _Ex> && _Right) noexcept
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Ex>(_Right.get_deleter()), _Right.release()) {}

		template <class _Uty, class _Ex, class = _Enable_conversion<_Uty, _Ex, is_assignable<_Dx&, _Ex>>>
		unique_ptr& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept {
			reset(_Right.release());
			_Mypair._Get_first() = ::std::forward<_Ex>(_Right._Mypair._Get_first());
			return *this;
		}

		template <class _Dx2 = _Dx, _Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept : _Mypair(_Zero_then_variadic_args_t()) {}

		unique_ptr& operator=(nullptr_t) noexcept {
			reset();
			return *this;
		}

		void reset(nullptr_t = nullptr) noexcept {
			reset(pointer());
		}

		void swap(unique_ptr& _Right) noexcept {
			_Swap_adl(_Mypair._Myval2, _Right._Mypair._Myval2);
			_Swap_adl(_Mypair._Get_first(), _Right._Mypair._Get_first());
		}

		~unique_ptr() noexcept {
			if (_Mypair._Myval2 != pointer()) {
				_Mypair._Get_first()(_Mypair._Myval2);
			}
		}

		_Dx& get_deleter() noexcept {
			return _Mypair._Get_first();
		}

		const _Dx& get_deleter() const noexcept {
			return _Mypair._Get_first();
		}

		_Ty& operator[](size_t _Idx) const {
			return _Mypair._Myval2[_Idx];
		}

		pointer get() const noexcept {
			return _Mypair._Myval2;
		}

		explicit operator bool() const noexcept {
			return _Mypair._Myval2 != pointer();
		}

		pointer release() noexcept {
			return ::std::exchange(_Mypair._Myval2, pointer());
		}

		template <class _Uty, class = _Enable_ctor_reset<_Uty, false_type>>
		void reset(_Uty _Ptr) noexcept {
			pointer _Old = ::std::exchange(_Mypair._Myval2, _Ptr);
			if (_Old != pointer()) {
				_Mypair._Get_first()(_Old);
			}
		}

		unique_ptr(const unique_ptr&) = delete;
		unique_ptr& operator=(const unique_ptr&) = delete;

	private:
		template <class, class>
		friend class unique_ptr;

		_Compressed_pair<_Dx, pointer> _Mypair;
	};



	template <class _Ty, class... _Types, enable_if_t<!is_array_v<_Ty>, int> = 0>
	inline unique_ptr<_Ty> make_unique(_Types && ... _Args) {
		return unique_ptr<_Ty>(new _Ty(::std::forward<_Types>(_Args)...));
	}

	template <class _Ty, enable_if_t<is_array_v<_Ty>&& extent_v<_Ty> == 0, int> = 0>
	inline unique_ptr<_Ty> make_unique(size_t _Size) {
		using _Elem = remove_extent_t<_Ty>;
		return unique_ptr<_Ty>(new _Elem[_Size]());
	}

	template <class _Ty, class... _Types, enable_if_t<extent_v<_Ty> != 0, int> = 0>
	void make_unique(_Types && ...) = delete;



	template <class _Alloc>
	struct _Allocator_deleter {
		_Alloc _Al;

		using pointer = typename allocator_traits<_Alloc>::pointer;
		void operator()(pointer _Ptr) noexcept {
			allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_Ptr));
			_Al.deallocate(_Ptr, 1);
		}
	};

	template <class _Alloc>
	using _Unique_ptr_alloc = unique_ptr<typename _Alloc::value_type, _Allocator_deleter<_Alloc>>;

	template <class _Alloc, class... _Args>
	_Unique_ptr_alloc<_Alloc> _Make_unique_alloc(_Alloc& _Al, _Args&& ... _Vals) {

		return _Unique_ptr_alloc<_Alloc>(_Alloc_new(_Al, ::std::forward<_Args>(_Vals)...), _Allocator_deleter<_Alloc>{_Al});
	}

	template <class _Ty, class _Dx, enable_if_t<_Is_swappable<_Dx>::value, int> = 0>
	void swap(unique_ptr<_Ty, _Dx> & _Left, unique_ptr<_Ty, _Dx> & _Right) noexcept {
		_Left.swap(_Right);
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		return _Left.get() == _Right.get();
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		return !(_Left == _Right);
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		using _Ptr1   = typename unique_ptr<_Ty1, _Dx1>::pointer;
		using _Ptr2   = typename unique_ptr<_Ty2, _Dx2>::pointer;
		using _Common = common_type_t<_Ptr1, _Ptr2>;
		return less<_Common>()(_Left.get(), _Right.get());
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		return !(_Left < _Right);
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		return _Right < _Left;
	}

	template <class _Ty1, class _Dx1, class _Ty2, class _Dx2>
	bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right) {

		return !(_Right < _Left);
	}

	template <class _Ty, class _Dx>
	bool operator==(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t) noexcept {
		return !_Left;
	}

	template <class _Ty, class _Dx>
	bool operator==(nullptr_t, const unique_ptr<_Ty, _Dx>& _Right) noexcept {
		return !_Right;
	}

	template <class _Ty, class _Dx>
	bool operator!=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) noexcept {

		return !(_Left == _Right);
	}

	template <class _Ty, class _Dx>
	bool operator!=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) noexcept {

		return !(_Left == _Right);
	}

	template <class _Ty, class _Dx>
	bool operator<(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) {
		using _Ptr = typename unique_ptr<_Ty, _Dx>::pointer;
		return less<_Ptr>()(_Left.get(), _Right);
	}

	template <class _Ty, class _Dx>
	bool operator<(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) {
		using _Ptr = typename unique_ptr<_Ty, _Dx>::pointer;
		return less<_Ptr>()(_Left, _Right.get());
	}

	template <class _Ty, class _Dx>
	bool operator>=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) {
		return !(_Left < _Right);
	}

	template <class _Ty, class _Dx>
	bool operator>=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) {
		return !(_Left < _Right);
	}

	template <class _Ty, class _Dx>
	bool operator>(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) {
		return _Right < _Left;
	}

	template <class _Ty, class _Dx>
	bool operator>(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) {
		return _Right < _Left;
	}

	template <class _Ty, class _Dx>
	bool operator<=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) {
		return !(_Right < _Left);
	}

	template <class _Ty, class _Dx>
	bool operator<=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) {
		return !(_Right < _Left);
	}

	template <class _OutTy, class _PxTy, class = void>
	struct _Can_stream_unique_ptr : false_type {};
	template <class _OutTy, class _PxTy>
	struct _Can_stream_unique_ptr<_OutTy, _PxTy, void_t<decltype(::std::declval<_OutTy>() << ::std::declval<_PxTy>().get())>>
		: true_type {};

	template <class _Elem, class _Traits, class _Yty, class _Dx,
		enable_if_t<_Can_stream_unique_ptr<basic_ostream<_Elem, _Traits>&, const unique_ptr<_Yty, _Dx>&>::value, int> = 0>
		basic_ostream<_Elem, _Traits> & operator<<(basic_ostream<_Elem, _Traits> & _Out, const unique_ptr<_Yty, _Dx> & _Px) {

		_Out << _Px.get();
		return _Out;
	}

























#line 2247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"


	enum class pointer_safety {
		relaxed,
		preferred,
		strict
	};

	inline void declare_reachable(void*) {}

	template <class _Ty>
	inline _Ty* undeclare_reachable(_Ty* _Ptr) {
		return _Ptr;
	}

	inline void declare_no_pointers(char*, size_t) {}

	inline void undeclare_no_pointers(char*, size_t) {}

	inline pointer_safety get_pointer_safety() noexcept {
		return pointer_safety::relaxed;
	}


	template <class _Ty = void>
	struct owner_less;

	template <class _Ty>
	struct owner_less<shared_ptr<_Ty>> {
		typedef shared_ptr<_Ty> first_argument_type;
		typedef shared_ptr<_Ty> second_argument_type;
		typedef bool result_type;

		bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}
	};

	template <class _Ty>
	struct owner_less<weak_ptr<_Ty>> {
		typedef weak_ptr<_Ty> first_argument_type;
		typedef weak_ptr<_Ty> second_argument_type;
		typedef bool result_type;

		bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}
	};

	template <>
	struct owner_less<void> {
		using is_transparent = int;

		template <class _Ty, class _Uty>
		bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		template <class _Ty, class _Uty>
		bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		template <class _Ty, class _Uty>
		bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}

		template <class _Ty, class _Uty>
		bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept {

			return _Left.owner_before(_Right);
		}
	};


	template <class _Ty, class _Dx>
	struct hash<unique_ptr<_Ty, _Dx>>
		: _Conditionally_enabled_hash<unique_ptr<_Ty, _Dx>,
		is_default_constructible_v<hash<typename unique_ptr<_Ty, _Dx>::pointer>>> {
		static size_t _Do_hash(const unique_ptr<_Ty, _Dx>& _Keyval)
			noexcept(_Is_nothrow_hashable<typename unique_ptr<_Ty, _Dx>::pointer>::value) {

			return hash<typename unique_ptr<_Ty, _Dx>::pointer>{}(_Keyval.get());
		}
	};

	template <class _Ty>
	struct hash<shared_ptr<_Ty>> {
		typedef shared_ptr<_Ty> argument_type;
		typedef size_t result_type;

		size_t operator()(const shared_ptr<_Ty>& _Keyval) const noexcept {

			return hash<typename shared_ptr<_Ty>::element_type*>()(_Keyval.get());
		}
	};


	inline void* align(size_t _Bound, size_t _Size, void*& _Ptr, size_t& _Space) noexcept {

		size_t _Off = static_cast<size_t>(reinterpret_cast<uintptr_t>(_Ptr) & (_Bound - 1));
		if (_Off != 0) {
			_Off = _Bound - _Off;
		}

		if (_Space < _Off || _Space - _Off < _Size) {
			return nullptr;
		}


		_Ptr = static_cast<char*>(_Ptr) + _Off;
		_Space -= _Off;
		return _Ptr;
	}



	extern "C" {
		void __cdecl _Lock_shared_ptr_spin_lock();
		void __cdecl _Unlock_shared_ptr_spin_lock();
	}


	struct _Shared_ptr_spin_lock {
		_Shared_ptr_spin_lock() {
			_Lock_shared_ptr_spin_lock();
		}

		~_Shared_ptr_spin_lock() noexcept {
			_Unlock_shared_ptr_spin_lock();
		}
	};

	template <class _Ty>
	inline bool atomic_is_lock_free(const shared_ptr<_Ty>*) {

		return false;
	}

	template <class _Ty>
	inline shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty>* _Ptr, memory_order) {

		_Shared_ptr_spin_lock _Lock;
		shared_ptr<_Ty> _Result = *_Ptr;
		return _Result;
	}

	template <class _Ty>
	inline shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty>* _Ptr) {
		return ::std::atomic_load_explicit(_Ptr, memory_order_seq_cst);
	}

	template <class _Ty>
	inline void atomic_store_explicit(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty> _Other, memory_order) {

		_Shared_ptr_spin_lock _Lock;
		_Ptr->swap(_Other);
	}

	template <class _Ty>
	inline void atomic_store(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty> _Other) {
		::std::atomic_store_explicit(_Ptr, ::std::move(_Other), memory_order_seq_cst);
	}

	template <class _Ty>
	inline shared_ptr<_Ty> atomic_exchange_explicit(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty> _Other, memory_order) {

		_Shared_ptr_spin_lock _Lock;
		_Ptr->swap(_Other);
		return _Other;
	}

	template <class _Ty>
	inline shared_ptr<_Ty> atomic_exchange(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty> _Other) {

		return ::std::atomic_exchange_explicit(_Ptr, ::std::move(_Other), memory_order_seq_cst);
	}

	template <class _Ty>
	inline bool atomic_compare_exchange_weak_explicit(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty>* _Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order) {
		shared_ptr<_Ty> _Old_exp;
		_Shared_ptr_spin_lock _Lock;
		bool _Success = _Ptr->get() == _Exp->get() && !_Ptr->owner_before(*_Exp) && !_Exp->owner_before(*_Ptr);
		if (_Success) {
			_Ptr->swap(_Value);
		}
		else {
			_Exp->swap(_Old_exp);
			*_Exp = *_Ptr;
		}
		return _Success;
	}

	template <class _Ty>
	inline bool atomic_compare_exchange_weak(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty>* _Exp, shared_ptr<_Ty> _Value) {

		return ::std::atomic_compare_exchange_weak_explicit(
			_Ptr, _Exp, ::std::move(_Value), memory_order_seq_cst, memory_order_seq_cst);
	}

	template <class _Ty>
	inline bool atomic_compare_exchange_strong_explicit(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty>* _Exp,
		shared_ptr<_Ty> _Value, memory_order, memory_order) {
		return ::std::atomic_compare_exchange_weak_explicit(
			_Ptr, _Exp, ::std::move(_Value), memory_order_seq_cst, memory_order_seq_cst);
	}

	template <class _Ty>
	inline bool atomic_compare_exchange_strong(shared_ptr<_Ty>* _Ptr, shared_ptr<_Ty>* _Exp, shared_ptr<_Ty> _Value) {

		return ::std::atomic_compare_exchange_strong_explicit(
			_Ptr, _Exp, ::std::move(_Value), memory_order_seq_cst, memory_order_seq_cst);
	}


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::allocate_shared;
		using ::std::bad_weak_ptr;
		using ::std::const_pointer_cast;
		using ::std::dynamic_pointer_cast;
		using ::std::enable_shared_from_this;
		using ::std::get_deleter;
		using ::std::make_shared;
		using ::std::shared_ptr;
		using ::std::static_pointer_cast;
		using ::std::swap;
		using ::std::weak_ptr;
	}
#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"

}


#pragma warning(pop)
#pragma pack(pop)
#line 2509 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"
#line 2510 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\memory"





#line 58 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cmath"

#pragma once








#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




inline double pow(double _Xx, int _Yx) noexcept {
	if (_Yx == 2) {
		return _Xx * _Xx;
	}

	return ::pow(_Xx, static_cast<double>(_Yx));
}

inline float acos(float _Xx) noexcept {
	return ::acosf(_Xx);
}

inline float acosh(float _Xx) noexcept {
	return ::acoshf(_Xx);
}

inline float asin(float _Xx) noexcept {
	return ::asinf(_Xx);
}

inline float asinh(float _Xx) noexcept {
	return ::asinhf(_Xx);
}

inline float atan(float _Xx) noexcept {
	return ::atanf(_Xx);
}

inline float atanh(float _Xx) noexcept {
	return ::atanhf(_Xx);
}

inline float atan2(float _Yx, float _Xx) noexcept {
	return ::atan2f(_Yx, _Xx);
}

inline float cbrt(float _Xx) noexcept {
	return ::cbrtf(_Xx);
}

inline float ceil(float _Xx) noexcept {
	return ::ceilf(_Xx);
}

inline float copysign(float _Number, float _Sign) noexcept {
	return ::copysignf(_Number, _Sign);
}

inline float cos(float _Xx) noexcept {
	return ::cosf(_Xx);
}

inline float cosh(float _Xx) noexcept {
	return ::coshf(_Xx);
}

inline float erf(float _Xx) noexcept {
	return ::erff(_Xx);
}

inline float erfc(float _Xx) noexcept {
	return ::erfcf(_Xx);
}

inline float exp(float _Xx) noexcept {
	return ::expf(_Xx);
}

inline float exp2(float _Xx) noexcept {
	return ::exp2f(_Xx);
}

inline float expm1(float _Xx) noexcept {
	return ::expm1f(_Xx);
}

inline float fabs(float _Xx) noexcept {
	return ::fabsf(_Xx);
}

inline float fdim(float _Xx, float _Yx) noexcept {
	return ::fdimf(_Xx, _Yx);
}

inline float floor(float _Xx) noexcept {
	return ::floorf(_Xx);
}

inline float fma(float _Xx, float _Yx, float _Zx) noexcept {
	return ::fmaf(_Xx, _Yx, _Zx);
}

inline float fmax(float _Xx, float _Yx) noexcept {
	return ::fmaxf(_Xx, _Yx);
}

inline float fmin(float _Xx, float _Yx) noexcept {
	return ::fminf(_Xx, _Yx);
}

inline float fmod(float _Xx, float _Yx) noexcept {
	return ::fmodf(_Xx, _Yx);
}

inline float frexp(float _Xx, int* _Yx) noexcept {
	return ::frexpf(_Xx, _Yx);
}

inline float hypot(float _Xx, float _Yx) noexcept {
	return ::hypotf(_Xx, _Yx);
}

inline int ilogb(float _Xx) noexcept {
	return ::ilogbf(_Xx);
}

inline float ldexp(float _Xx, int _Yx) noexcept {
	return ::ldexpf(_Xx, _Yx);
}

inline float lgamma(float _Xx) noexcept {
	return ::lgammaf(_Xx);
}

inline long long llrint(float _Xx) noexcept {
	return ::llrintf(_Xx);
}

inline long long llround(float _Xx) noexcept {
	return ::llroundf(_Xx);
}

inline float log(float _Xx) noexcept {
	return ::logf(_Xx);
}

inline float log10(float _Xx) noexcept {
	return ::log10f(_Xx);
}

inline float log1p(float _Xx) noexcept {
	return ::log1pf(_Xx);
}

inline float log2(float _Xx) noexcept {
	return ::log2f(_Xx);
}

inline float logb(float _Xx) noexcept {
	return ::logbf(_Xx);
}

inline long lrint(float _Xx) noexcept {
	return ::lrintf(_Xx);
}

inline long lround(float _Xx) noexcept {
	return ::lroundf(_Xx);
}

inline float modf(float _Xx, float* _Yx) noexcept {
	return ::modff(_Xx, _Yx);
}

inline float nearbyint(float _Xx) noexcept {
	return ::nearbyintf(_Xx);
}

inline float nextafter(float _Xx, float _Yx) noexcept {
	return ::nextafterf(_Xx, _Yx);
}

inline float nexttoward(float _Xx, long double _Yx) noexcept {
	return ::nexttowardf(_Xx, _Yx);
}

inline float pow(float _Xx, float _Yx) noexcept {
	return ::powf(_Xx, _Yx);
}

inline float pow(float _Xx, int _Yx) noexcept {
	if (_Yx == 2) {
		return _Xx * _Xx;
	}

	return ::powf(_Xx, static_cast<float>(_Yx));
}

inline float remainder(float _Xx, float _Yx) noexcept {
	return ::remainderf(_Xx, _Yx);
}

inline float remquo(float _Xx, float _Yx, int* _Zx) noexcept {
	return ::remquof(_Xx, _Yx, _Zx);
}

inline float rint(float _Xx) noexcept {
	return ::rintf(_Xx);
}

inline float round(float _Xx) noexcept {
	return ::roundf(_Xx);
}

inline float scalbln(float _Xx, long _Yx) noexcept {
	return ::scalblnf(_Xx, _Yx);
}

inline float scalbn(float _Xx, int _Yx) noexcept {
	return ::scalbnf(_Xx, _Yx);
}

inline float sin(float _Xx) noexcept {
	return ::sinf(_Xx);
}

inline float sinh(float _Xx) noexcept {
	return ::sinhf(_Xx);
}

inline float sqrt(float _Xx) noexcept {
	return ::sqrtf(_Xx);
}

inline float tan(float _Xx) noexcept {
	return ::tanf(_Xx);
}

inline float tanh(float _Xx) noexcept {
	return ::tanhf(_Xx);
}

inline float tgamma(float _Xx) noexcept {
	return ::tgammaf(_Xx);
}

inline float trunc(float _Xx) noexcept {
	return ::truncf(_Xx);
}

inline long double acos(long double _Xx) noexcept {
	return ::acosl(_Xx);
}

inline long double acosh(long double _Xx) noexcept {
	return ::acoshl(_Xx);
}

inline long double asin(long double _Xx) noexcept {
	return ::asinl(_Xx);
}

inline long double asinh(long double _Xx) noexcept {
	return ::asinhl(_Xx);
}

inline long double atan(long double _Xx) noexcept {
	return ::atanl(_Xx);
}

inline long double atanh(long double _Xx) noexcept {
	return ::atanhl(_Xx);
}

inline long double atan2(long double _Yx, long double _Xx) noexcept {
	return ::atan2l(_Yx, _Xx);
}

inline long double cbrt(long double _Xx) noexcept {
	return ::cbrtl(_Xx);
}

inline long double ceil(long double _Xx) noexcept {
	return ::ceill(_Xx);
}

inline long double copysign(long double _Number, long double _Sign) noexcept {
	return ::copysignl(_Number, _Sign);
}

inline long double cos(long double _Xx) noexcept {
	return ::cosl(_Xx);
}

inline long double cosh(long double _Xx) noexcept {
	return ::coshl(_Xx);
}

inline long double erf(long double _Xx) noexcept {
	return ::erfl(_Xx);
}

inline long double erfc(long double _Xx) noexcept {
	return ::erfcl(_Xx);
}

inline long double exp(long double _Xx) noexcept {
	return ::expl(_Xx);
}

inline long double exp2(long double _Xx) noexcept {
	return ::exp2l(_Xx);
}

inline long double expm1(long double _Xx) noexcept {
	return ::expm1l(_Xx);
}

inline long double fabs(long double _Xx) noexcept {
	return ::fabsl(_Xx);
}

inline long double fdim(long double _Xx, long double _Yx) noexcept {
	return ::fdiml(_Xx, _Yx);
}

inline long double floor(long double _Xx) noexcept {
	return ::floorl(_Xx);
}

inline long double fma(long double _Xx, long double _Yx, long double _Zx) noexcept {
	return ::fmal(_Xx, _Yx, _Zx);
}

inline long double fmax(long double _Xx, long double _Yx) noexcept {
	return ::fmaxl(_Xx, _Yx);
}

inline long double fmin(long double _Xx, long double _Yx) noexcept {
	return ::fminl(_Xx, _Yx);
}

inline long double fmod(long double _Xx, long double _Yx) noexcept {
	return ::fmodl(_Xx, _Yx);
}

inline long double frexp(long double _Xx, int* _Yx) noexcept {
	return ::frexpl(_Xx, _Yx);
}

inline long double hypot(long double _Xx, long double _Yx) noexcept {
	return ::hypotl(_Xx, _Yx);
}

inline int ilogb(long double _Xx) noexcept {
	return ::ilogbl(_Xx);
}

inline long double ldexp(long double _Xx, int _Yx) noexcept {
	return ::ldexpl(_Xx, _Yx);
}

inline long double lgamma(long double _Xx) noexcept {
	return ::lgammal(_Xx);
}

inline long long llrint(long double _Xx) noexcept {
	return ::llrintl(_Xx);
}

inline long long llround(long double _Xx) noexcept {
	return ::llroundl(_Xx);
}

inline long double log(long double _Xx) noexcept {
	return ::logl(_Xx);
}

inline long double log10(long double _Xx) noexcept {
	return ::log10l(_Xx);
}

inline long double log1p(long double _Xx) noexcept {
	return ::log1pl(_Xx);
}

inline long double log2(long double _Xx) noexcept {
	return ::log2l(_Xx);
}

inline long double logb(long double _Xx) noexcept {
	return ::logbl(_Xx);
}

inline long lrint(long double _Xx) noexcept {
	return ::lrintl(_Xx);
}

inline long lround(long double _Xx) noexcept {
	return ::lroundl(_Xx);
}

inline long double modf(long double _Xx, long double* _Yx) noexcept {
	return ::modfl(_Xx, _Yx);
}

inline long double nearbyint(long double _Xx) noexcept {
	return ::nearbyintl(_Xx);
}

inline long double nextafter(long double _Xx, long double _Yx) noexcept {
	return ::nextafterl(_Xx, _Yx);
}

inline long double nexttoward(long double _Xx, long double _Yx) noexcept {
	return ::nexttowardl(_Xx, _Yx);
}

inline long double pow(long double _Xx, long double _Yx) noexcept {
	return ::powl(_Xx, _Yx);
}

inline long double pow(long double _Xx, int _Yx) noexcept {
	if (_Yx == 2) {
		return _Xx * _Xx;
	}

	return ::powl(_Xx, static_cast<long double>(_Yx));
}

inline long double remainder(long double _Xx, long double _Yx) noexcept {
	return ::remainderl(_Xx, _Yx);
}

inline long double remquo(long double _Xx, long double _Yx, int* _Zx) noexcept {
	return ::remquol(_Xx, _Yx, _Zx);
}

inline long double rint(long double _Xx) noexcept {
	return ::rintl(_Xx);
}

inline long double round(long double _Xx) noexcept {
	return ::roundl(_Xx);
}

inline long double scalbln(long double _Xx, long _Yx) noexcept {
	return ::scalblnl(_Xx, _Yx);
}

inline long double scalbn(long double _Xx, int _Yx) noexcept {
	return ::scalbnl(_Xx, _Yx);
}

inline long double sin(long double _Xx) noexcept {
	return ::sinl(_Xx);
}

inline long double sinh(long double _Xx) noexcept {
	return ::sinhl(_Xx);
}

inline long double sqrt(long double _Xx) noexcept {
	return ::sqrtl(_Xx);
}

inline long double tan(long double _Xx) noexcept {
	return ::tanl(_Xx);
}

inline long double tanh(long double _Xx) noexcept {
	return ::tanhl(_Xx);
}

inline long double tgamma(long double _Xx) noexcept {
	return ::tgammal(_Xx);
}

inline long double trunc(long double _Xx) noexcept {
	return ::truncl(_Xx);
}

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"



#pragma once








#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
	template <class _Ty1, class _Ty2>
	using _Common_float_type_t = conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
		conditional_t<is_same_v<_Ty1, float>&& is_same_v<_Ty2, float>, float,
		double>>;
}































template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>
inline ::std::_Common_float_type_t<_Ty1, _Ty2> pow(
	const _Ty1 _Left, const _Ty2 _Right) {
	using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>;
	return ::pow(static_cast<_Common>(_Left), static_cast<_Common>(_Right));
}


extern "C"    double __cdecl acos(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double acos(_Ty _Left) { return ::acos(static_cast<double>(_Left)); }
extern "C"    double __cdecl asin(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double asin(_Ty _Left) { return ::asin(static_cast<double>(_Left)); }
extern "C"    double __cdecl atan(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double atan(_Ty _Left) { return ::atan(static_cast<double>(_Left)); }
extern "C"    double __cdecl atan2(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::atan2(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl ceil(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double ceil(_Ty _Left) { return ::ceil(static_cast<double>(_Left)); }
extern "C"    double __cdecl cos(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double cos(_Ty _Left) { return ::cos(static_cast<double>(_Left)); }
extern "C"    double __cdecl cosh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double cosh(_Ty _Left) { return ::cosh(static_cast<double>(_Left)); }
extern "C"    double __cdecl exp(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double exp(_Ty _Left) { return ::exp(static_cast<double>(_Left)); }

extern "C"    double __cdecl fabs(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double fabs(_Ty _Left) { return ::fabs(static_cast<double>(_Left)); }

extern "C"   __declspec(dllimport) double __cdecl floor(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double floor(_Ty _Left) { return ::floor(static_cast<double>(_Left)); }
extern "C"    double __cdecl fmod(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::fmod(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl frexp(double, int*); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double frexp(_Ty _Left, int* _Arg2) { return ::frexp(static_cast<double>(_Left), _Arg2); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(double, int); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double ldexp(_Ty _Left, int _Arg2) { return ::ldexp(static_cast<double>(_Left), _Arg2); }
extern "C"    double __cdecl log(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double log(_Ty _Left) { return ::log(static_cast<double>(_Left)); }
extern "C"    double __cdecl log10(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double log10(_Ty _Left) { return ::log10(static_cast<double>(_Left)); }


extern "C"    double __cdecl sin(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double sin(_Ty _Left) { return ::sin(static_cast<double>(_Left)); }
extern "C"    double __cdecl sinh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double sinh(_Ty _Left) { return ::sinh(static_cast<double>(_Left)); }
extern "C"    double __cdecl sqrt(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double sqrt(_Ty _Left) { return ::sqrt(static_cast<double>(_Left)); }
extern "C"    double __cdecl tan(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double tan(_Ty _Left) { return ::tan(static_cast<double>(_Left)); }
extern "C"    double __cdecl tanh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double tanh(_Ty _Left) { return ::tanh(static_cast<double>(_Left)); }

















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"

template <class _Ty1, class _Ty2, class _Ty3,
	class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2> && ::std::is_arithmetic_v<_Ty3>>>
	inline ::std::_Common_float_type_t<_Ty1, ::std::_Common_float_type_t<_Ty2, _Ty3>> fma(
		_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right) {
	using _Common = ::std::_Common_float_type_t<_Ty1, ::std::_Common_float_type_t<_Ty2, _Ty3>>;

	if constexpr (::std::is_same_v<_Common, float>) {
		return ::fmaf(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
	}
	else if constexpr (::std::is_same_v<_Common, double>) {
		return ::fma(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
	}
	else {
		return ::fmal(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right));
	}


#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"
}














#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"

template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>
inline ::std::_Common_float_type_t<_Ty1, _Ty2> remquo(
	_Ty1 _Left, _Ty2 _Right, int* _Pquo) {
	using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>;

	if constexpr (::std::is_same_v<_Common, float>) {
		return ::remquof(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
	}
	else if constexpr (::std::is_same_v<_Common, double>) {
		return ::remquo(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
	}
	else {
		return ::remquol(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo);
	}


#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"
}

extern "C"   __declspec(dllimport) double __cdecl acosh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double acosh(_Ty _Left) { return ::acosh(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl asinh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double asinh(_Ty _Left) { return ::asinh(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl atanh(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double atanh(_Ty _Left) { return ::atanh(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double cbrt(_Ty _Left) { return ::cbrt(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl copysign(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::copysign(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl erf(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double erf(_Ty _Left) { return ::erf(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl erfc(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double erfc(_Ty _Left) { return ::erfc(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl expm1(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double expm1(_Ty _Left) { return ::expm1(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl exp2(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double exp2(_Ty _Left) { return ::exp2(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl fdim(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::fdim(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }

extern "C"   __declspec(dllimport) double __cdecl fmax(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::fmax(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl fmin(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::fmin(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl hypot(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::hypot(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline int ilogb(_Ty _Left) { return ::ilogb(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double lgamma(_Ty _Left) { return ::lgamma(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline long long llrint(_Ty _Left) { return ::llrint(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llround(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline long long llround(_Ty _Left) { return ::llround(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log1p(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double log1p(_Ty _Left) { return ::log1p(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log2(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double log2(_Ty _Left) { return ::log2(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl logb(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double logb(_Ty _Left) { return ::logb(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lrint(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline long lrint(_Ty _Left) { return ::lrint(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lround(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline long lround(_Ty _Left) { return ::lround(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double nearbyint(_Ty _Left) { return ::nearbyint(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::nextafter(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(double, long double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double nexttoward(_Ty _Left, long double _Arg2) { return ::nexttoward(static_cast<double>(_Left), _Arg2); }
extern "C"   __declspec(dllimport) double __cdecl remainder(double, double); template <class _Ty1, class _Ty2, class = ::std::enable_if_t<::std::is_arithmetic_v<_Ty1> && ::std::is_arithmetic_v<_Ty2>>>  inline ::std::_Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std::_Common_float_type_t<_Ty1, _Ty2>; return ::remainder(static_cast<_Common>(_Left), static_cast<_Common>(_Right)); }

extern "C"   __declspec(dllimport) double __cdecl rint(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double rint(_Ty _Left) { return ::rint(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl round(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double round(_Ty _Left) { return ::round(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(double, long); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double scalbln(_Ty _Left, long _Arg2) { return ::scalbln(static_cast<double>(_Left), _Arg2); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(double, int); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double scalbn(_Ty _Left, int _Arg2) { return ::scalbn(static_cast<double>(_Left), _Arg2); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double tgamma(_Ty _Left) { return ::tgamma(static_cast<double>(_Left)); }
extern "C"   __declspec(dllimport) double __cdecl trunc(double); template <class _Ty, class = ::std::enable_if_t<::std::is_integral_v<_Ty>>>  inline double trunc(_Ty _Left) { return ::trunc(static_cast<double>(_Left)); }











#pragma warning(pop)
#pragma pack(pop)
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtgmath.h"





#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cmath"

namespace std {
	using ::abs;
	using ::acos;
	using ::asin;
	using ::atan;
	using ::atan2;
	using ::ceil;
	using ::cos;
	using ::cosh;
	using ::exp;
	using ::fabs;
	using ::floor;
	using ::fmod;
	using ::frexp;
	using ::ldexp;
	using ::log;
	using ::log10;
	using ::modf;
	using ::pow;
	using ::sin;
	using ::sinh;
	using ::sqrt;
	using ::tan;
	using ::tanh;

	using ::acosf;
	using ::asinf;
	using ::atanf;
	using ::atan2f;
	using ::ceilf;
	using ::cosf;
	using ::coshf;
	using ::expf;
	using ::fabsf;
	using ::floorf;
	using ::fmodf;
	using ::frexpf;
	using ::ldexpf;
	using ::logf;
	using ::log10f;
	using ::modff;
	using ::powf;
	using ::sinf;
	using ::sinhf;
	using ::sqrtf;
	using ::tanf;
	using ::tanhf;

	using ::acosl;
	using ::asinl;
	using ::atanl;
	using ::atan2l;
	using ::ceill;
	using ::cosl;
	using ::coshl;
	using ::expl;
	using ::fabsl;
	using ::floorl;
	using ::fmodl;
	using ::frexpl;
	using ::ldexpl;
	using ::logl;
	using ::log10l;
	using ::modfl;
	using ::powl;
	using ::sinl;
	using ::sinhl;
	using ::sqrtl;
	using ::tanl;
	using ::tanhl;

	using ::float_t;
	using ::double_t;

	using ::acosh;
	using ::asinh;
	using ::atanh;
	using ::cbrt;
	using ::erf;
	using ::erfc;
	using ::expm1;
	using ::exp2;
	using ::hypot;
	using ::ilogb;
	using ::lgamma;
	using ::log1p;
	using ::log2;
	using ::logb;
	using ::llrint;
	using ::lrint;
	using ::nearbyint;
	using ::rint;
	using ::llround;
	using ::lround;
	using ::fdim;
	using ::fma;
	using ::fmax;
	using ::fmin;
	using ::round;
	using ::trunc;
	using ::remainder;
	using ::remquo;
	using ::copysign;
	using ::nan;
	using ::nextafter;
	using ::scalbn;
	using ::scalbln;
	using ::nexttoward;
	using ::tgamma;

	using ::acoshf;
	using ::asinhf;
	using ::atanhf;
	using ::cbrtf;
	using ::erff;
	using ::erfcf;
	using ::expm1f;
	using ::exp2f;
	using ::hypotf;
	using ::ilogbf;
	using ::lgammaf;
	using ::log1pf;
	using ::log2f;
	using ::logbf;
	using ::llrintf;
	using ::lrintf;
	using ::nearbyintf;
	using ::rintf;
	using ::llroundf;
	using ::lroundf;
	using ::fdimf;
	using ::fmaf;
	using ::fmaxf;
	using ::fminf;
	using ::roundf;
	using ::truncf;
	using ::remainderf;
	using ::remquof;
	using ::copysignf;
	using ::nanf;
	using ::nextafterf;
	using ::scalbnf;
	using ::scalblnf;
	using ::nexttowardf;
	using ::tgammaf;

	using ::acoshl;
	using ::asinhl;
	using ::atanhl;
	using ::cbrtl;
	using ::erfl;
	using ::erfcl;
	using ::expm1l;
	using ::exp2l;
	using ::hypotl;
	using ::ilogbl;
	using ::lgammal;
	using ::log1pl;
	using ::log2l;
	using ::logbl;
	using ::llrintl;
	using ::lrintl;
	using ::nearbyintl;
	using ::rintl;
	using ::llroundl;
	using ::lroundl;
	using ::fdiml;
	using ::fmal;
	using ::fmaxl;
	using ::fminl;
	using ::roundl;
	using ::truncl;
	using ::remainderl;
	using ::remquol;
	using ::copysignl;
	using ::nanl;
	using ::nextafterl;
	using ::scalbnl;
	using ::scalblnl;
	using ::nexttowardl;
	using ::tgammal;

	using ::fpclassify;
	using ::signbit;
	using ::isfinite;
	using ::isinf;
	using ::isnan;
	using ::isnormal;
	using ::isgreater;
	using ::isgreaterequal;
	using ::isless;
	using ::islessequal;
	using ::islessgreater;
	using ::isunordered;
}










































































































































































































































































































































































































#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cmath"



#pragma warning(pop)
#pragma pack(pop)

#line 1089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cmath"
#line 1090 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cmath"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\share.h"







#pragma once




#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\share.h"
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cerrno"

#pragma once







#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cerrno"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cerrno"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

#pragma once








#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem, class _Int_type>
	struct _Char_traits {
		using char_type  = _Elem;
		using int_type   = _Int_type;
		using pos_type   = streampos;
		using off_type   = streamoff;
		using state_type = _Mbstatet;

		static inline int compare(const _Elem* _First1,
			const _Elem* _First2, size_t _Count) noexcept {

			for (; 0 < _Count; --_Count, ++_First1, ++_First2) {
				if (*_First1 != *_First2) {
					return *_First1 < *_First2 ? -1 : +1;
				}
			}

			return 0;
		}

		static inline size_t length(const _Elem* _First) noexcept {

			size_t _Count = 0;
			while (*_First != _Elem()) {
				++_Count;
				++_First;
			}

			return _Count;
		}

		static _Elem* copy(_Elem* const _First1, const _Elem* _First2,
			size_t _Count) noexcept {

			return static_cast<_Elem*>(::memcpy(_First1, _First2, _Count * sizeof(_Elem)));
		}

		static _Elem* _Copy_s(_Elem* const _First1,
			const size_t _Dest_size, const _Elem* const _First2,
			const size_t _Count) noexcept {
			do { if (_Count <= _Dest_size) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 62, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 62, 0); } while (false); }; } while (false);
			return copy(_First1, _First2, _Count);
		}

		static inline const _Elem* find(
			const _Elem* _First, size_t _Count, const _Elem& _Ch) noexcept {

			for (; 0 < _Count; --_Count, ++_First) {
				if (*_First == _Ch) {
					return _First;
				}
			}

			return nullptr;
		}

		static _Elem* move(_Elem* const _First1, const _Elem* _First2,
			size_t _Count) noexcept {

			return static_cast<_Elem*>(::memmove(_First1, _First2, _Count * sizeof(_Elem)));
		}

		static _Elem* assign(
			_Elem* const _First, size_t _Count, const _Elem _Ch) noexcept {

			_Elem* _Next = _First;
			for (; 0 < _Count; --_Count, ++_Next) {
				*_Next = _Ch;
			}

			return _First;
		}

		static inline void assign(_Elem& _Left, const _Elem& _Right) noexcept {
			_Left = _Right;
		}

		static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept {
			return _Left == _Right;
		}

		static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept {

			return _Left < _Right;
		}

		static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

			return static_cast<_Elem>(_Meta);
		}

		static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {
			return static_cast<int_type>(_Ch);
		}

		static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

			return _Left == _Right;
		}

		static constexpr int_type not_eof(const int_type& _Meta) noexcept {
			return _Meta != eof() ? _Meta : !eof();
		}

		static constexpr int_type eof() noexcept {
			return static_cast<int_type>((-1));
		}
	};


	template <class _Elem>
	struct _WChar_traits {
		using char_type  = _Elem;
		using int_type   = unsigned short;
		using pos_type   = streampos;
		using off_type   = streamoff;
		using state_type = mbstate_t;

		static inline int compare(const _Elem* const _First1,
			const _Elem* const _First2, const size_t _Count) noexcept {







#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return ::wmemcmp(
				reinterpret_cast<const wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count);
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static inline size_t length(const _Elem* _First) noexcept {







#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return ::wcslen(reinterpret_cast<const wchar_t*>(_First));
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static _Elem* copy(_Elem* const _First1, const _Elem* const _First2,
			const size_t _Count) noexcept {

			return reinterpret_cast<_Elem*>(
				::wmemcpy(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
		}

		static _Elem* _Copy_s(
			_Elem* const _First1,
			const size_t _Size_in_words, const _Elem* const _First2,
			const size_t _Count) noexcept {
			do { if (_Count <= _Size_in_words) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 179, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 179, 0); } while (false); }; } while (false);
			return copy(_First1, _First2, _Count);
		}

		static inline const _Elem* find(
			const _Elem* _First, const size_t _Count, const _Elem& _Ch) noexcept {







#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return reinterpret_cast<const _Elem*>(::wmemchr(reinterpret_cast<const wchar_t*>(_First), _Ch, _Count));
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static _Elem* move(_Elem* const _First1, const _Elem* const _First2,
			const size_t _Count) noexcept {

			return reinterpret_cast<_Elem*>(
				::wmemmove(reinterpret_cast<wchar_t*>(_First1), reinterpret_cast<const wchar_t*>(_First2), _Count));
		}

		static _Elem* assign(
			_Elem* const _First, size_t _Count, _Elem _Ch) noexcept {

			return reinterpret_cast<_Elem*>(::wmemset(reinterpret_cast<wchar_t*>(_First), _Ch, _Count));
		}

		static inline void assign(_Elem& _Left, const _Elem& _Right) noexcept {
			_Left = _Right;
		}

		static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept {
			return _Left == _Right;
		}

		static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept {

			return _Left < _Right;
		}

		static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

			return _Meta;
		}

		static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {
			return _Ch;
		}

		static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

			return _Left == _Right;
		}

		static constexpr int_type not_eof(const int_type& _Meta) noexcept {
			return _Meta != eof() ? _Meta : static_cast<int_type>(!eof());
		}

		static constexpr int_type eof() noexcept {
			return ((wint_t)(0xFFFF));
		}
	};


	template <class _Elem>
	struct char_traits : _Char_traits<_Elem, long> {};


	template <>
	struct char_traits<char16_t> : _WChar_traits<char16_t> {};

	using u16streampos = streampos;


	template <>
	struct char_traits<char32_t>
		: _Char_traits<char32_t, unsigned int> {
	};

	using u32streampos = streampos;


	template <>
	struct char_traits<wchar_t> : _WChar_traits<wchar_t> {};



	template <>
	struct char_traits<unsigned short> : _WChar_traits<unsigned short> {

	};
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"



#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"


	template <class _Elem, class _Int_type>
	struct _Narrow_char_traits {
		using char_type  = _Elem;
		using int_type   = _Int_type;
		using pos_type   = streampos;
		using off_type   = streamoff;
		using state_type = mbstate_t;

		static inline int compare(const _Elem* const _First1,
			const _Elem* const _First2, const size_t _Count) noexcept {










#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return ::memcmp(_First1, _First2, _Count);
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static inline size_t length(const _Elem* const _First) noexcept {














#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return ::strlen(reinterpret_cast<const char*>(_First));
#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static _Elem* copy(_Elem* const _First1, const _Elem* const _First2,
			const size_t _Count) noexcept {

			return static_cast<_Elem*>(::memcpy(_First1, _First2, _Count));
		}

		static _Elem* _Copy_s(
			_Elem* const _First1,
			const size_t _Size_in_bytes, const _Elem* const _First2, const size_t _Count) noexcept {

			do { if (_Count <= _Size_in_bytes) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 339, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 339, 0); } while (false); }; } while (false);
			return copy(_First1, _First2, _Count);
		}

		static inline const _Elem* find(
			const _Elem* const _First, const size_t _Count, const _Elem& _Ch) noexcept {














#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return static_cast<const _Elem*>(::memchr(_First, _Ch, _Count));
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static _Elem* move(_Elem* const _First1, const _Elem* const _First2,
			const size_t _Count) noexcept {

			return static_cast<_Elem*>(::memmove(_First1, _First2, _Count));
		}

		static _Elem* assign(_Elem* const _First, const size_t _Count,
			const _Elem _Ch) noexcept {

			return static_cast<_Elem*>(::memset(_First, _Ch, _Count));
		}

		static inline void assign(_Elem& _Left, const _Elem& _Right) noexcept {
			_Left = _Right;
		}

		static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept {

			return _Left == _Right;
		}

		static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept {

			return static_cast<unsigned char>(_Left) < static_cast<unsigned char>(_Right);
		}

		static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

			return static_cast<_Elem>(_Meta);
		}

		static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {

			return static_cast<unsigned char>(_Ch);
		}

		static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

			return _Left == _Right;
		}

		static constexpr int_type not_eof(const int_type& _Meta) noexcept {
			return _Meta != eof() ? _Meta : !eof();
		}

		static constexpr int_type eof() noexcept {
			return static_cast<int_type>((-1));
		}
	};




	template <>
	struct char_traits<char> : _Narrow_char_traits<char, int> {};









#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

	template <class _Elem, class _Traits, class _SizeT>
	inline basic_ostream<_Elem, _Traits>& _Insert_string(basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data,
		const _SizeT _Size) {
		using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
		typename _Ostr_t::iostate _State = _Ostr_t::goodbit;
		_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size
			? 0
			: static_cast<_SizeT>(_Ostr.width()) - _Size;
		const typename _Ostr_t::sentry _Ok(_Ostr);

		if (!_Ok) {
			_State |= _Ostr_t::badbit;
		}
		else {
			try {
				if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= _Ostr_t::badbit;
							break;
						}
					}
				}

				if (_State == _Ostr_t::goodbit && _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size) != (streamsize)_Size) {
					_State |= _Ostr_t::badbit;
				}
				else {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= _Ostr_t::badbit;
							break;
						}
					}
				}

				_Ostr.width(0);
			}
			catch (...) { (_Ostr).setstate(_Ostr_t::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}


	template <class _Traits>
	struct _Char_traits_eq {
		using _Elem = typename _Traits::char_type;

		bool operator()(_Elem _Left, _Elem _Right) const {
			return _Traits::eq(_Left, _Right);
		}
	};


	template <class _Traits>
	struct _Char_traits_lt {
		using _Elem = typename _Traits::char_type;

		bool operator()(_Elem _Left, _Elem _Right) const {
			return _Traits::lt(_Left, _Right);
		}
	};

	template <class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type {
	};

	template <class _Traits>
	using _Traits_ch_t = typename _Traits::char_type;

	template <class _Traits>
	using _Traits_ptr_t = const typename _Traits::char_type*;

	template <class _Traits>
	constexpr bool _Traits_equal(const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

		return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;
	}

	template <class _Traits>
	constexpr int _Traits_compare(const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

		const int _Ans = _Traits::compare(_Left, _Right, _Min_value(_Left_size, _Right_size));

		if (_Ans != 0) {
			return _Ans;
		}

		if (_Left_size < _Right_size) {
			return -1;
		}

		if (_Left_size > _Right_size) {
			return 1;
		}

		return 0;
	}

	template <class _Traits>
	constexpr size_t _Traits_find(const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size,
		const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size) noexcept {

		if (_Needle_size > _Hay_size
			|| _Start_at > _Hay_size - _Needle_size) {








			return static_cast<size_t>(-1);
		}

		if (_Needle_size == 0) {
			return _Start_at;
		}

		const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;
		for (auto _Match_try = _Haystack + _Start_at;; ++_Match_try) {
			_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);
			if (!_Match_try) {
				return static_cast<size_t>(-1);
			}

			if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0) {
				return static_cast<size_t>(_Match_try - _Haystack);
			}
		}
	}

	template <class _Traits>
	constexpr size_t _Traits_find_ch(const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size,
		const size_t _Start_at, const _Traits_ch_t<_Traits> _Ch) noexcept {

		if (_Start_at < _Hay_size) {
			const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);
			if (_Found_at) {
				return static_cast<size_t>(_Found_at - _Haystack);
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_rfind(const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size,
		const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size) noexcept {

		if (_Needle_size == 0) {
			return _Min_value(_Start_at, _Hay_size);
		}

		if (_Needle_size <= _Hay_size) {
			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - _Needle_size);; --_Match_try) {
				if (_Traits::eq(*_Match_try, *_Needle) && _Traits::compare(_Match_try, _Needle, _Needle_size) == 0) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_rfind_ch(const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size,
		const size_t _Start_at, const _Traits_ch_t<_Traits> _Ch) noexcept {

		if (_Hay_size != 0) {
			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (_Traits::eq(*_Match_try, _Ch)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Elem, bool = _Is_character<_Elem>::value>
	class _String_bitmap {
	public:
		constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) {


			for (; _First != _Last; ++_First) {
				_Matches[static_cast<unsigned char>(*_First)] = true;
			}

			return true;
		}

		constexpr bool _Match(const _Elem _Ch) const {
			return _Matches[static_cast<unsigned char>(_Ch)];
		}

	private:
		bool _Matches[256] = {};
	};

	template <class _Elem>
	class _String_bitmap<_Elem, false> {
	public:
		static_assert(is_unsigned_v<_Elem>,
			"Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N5687 [char.traits]. "
			"Visual C++ accepts other unsigned integral types as an extension.");

		constexpr bool _Mark(const _Elem* _First, const _Elem* const _Last) {


			for (; _First != _Last; ++_First) {
				const auto _Ch = *_First;
				if (_Ch >= 256U) {
					return false;
				}

				_Matches[static_cast<unsigned char>(_Ch)] = true;
			}

			return true;
		}

		constexpr bool _Match(const _Elem _Ch) const {
			return _Ch < 256U && _Matches[_Ch];
		}

	private:
		bool _Matches[256] = {};
	};

	template <class _Traits>
	constexpr size_t _Traits_find_first_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, false_type) noexcept {


		if (_Needle_size != 0 && _Start_at < _Hay_size) {
			const auto _End = _Haystack + _Hay_size;
			for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {
				if (_Traits::find(_Needle, _Needle_size, *_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_first_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, true_type) noexcept {


		if (_Needle_size != 0 && _Start_at < _Hay_size) {
			_String_bitmap<typename _Traits::char_type> _Matches;
			if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) {

				return _Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
			}

			const auto _End = _Haystack + _Hay_size;
			for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {
				if (_Matches._Match(*_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_last_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, false_type) noexcept {


		if (_Needle_size != 0 && _Hay_size != 0) {
			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (_Traits::find(_Needle, _Needle_size, *_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_last_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, true_type) noexcept {


		if (_Needle_size != 0 && _Hay_size != 0) {
			_String_bitmap<typename _Traits::char_type> _Matches;
			if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) {

				return _Traits_find_last_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
			}

			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (_Matches._Match(*_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_first_not_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, false_type) noexcept {


		if (_Start_at < _Hay_size) {
			const auto _End = _Haystack + _Hay_size;
			for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {
				if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_first_not_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, true_type) noexcept {


		if (_Start_at < _Hay_size) {
			_String_bitmap<typename _Traits::char_type> _Matches;
			if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) {

				return _Traits_find_first_not_of<_Traits>(
					_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
			}

			const auto _End = _Haystack + _Hay_size;
			for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {
				if (!_Matches._Match(*_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_not_ch(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t<_Traits> _Ch) noexcept {

		if (_Start_at < _Hay_size) {
			const auto _End = _Haystack + _Hay_size;
			for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try) {
				if (!_Traits::eq(*_Match_try, _Ch)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_last_not_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, false_type) noexcept {


		if (_Hay_size != 0) {
			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (!_Traits::find(_Needle, _Needle_size, *_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_find_last_not_of(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t<_Traits> _Needle,
		const size_t _Needle_size, true_type) noexcept {


		if (_Hay_size != 0) {
			_String_bitmap<typename _Traits::char_type> _Matches;
			if (!_Matches._Mark(_Needle, _Needle + _Needle_size)) {

				return _Traits_find_last_not_of<_Traits>(
					_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size, false_type{});
			}

			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (!_Matches._Match(*_Match_try)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}

	template <class _Traits>
	constexpr size_t _Traits_rfind_not_ch(const _Traits_ptr_t<_Traits> _Haystack,
		const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t<_Traits> _Ch) noexcept {

		if (_Hay_size != 0) {
			for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1);; --_Match_try) {
				if (!_Traits::eq(*_Match_try, _Ch)) {
					return static_cast<size_t>(_Match_try - _Haystack);
				}

				if (_Match_try == _Haystack) {
					break;
				}
			}
		}

		return static_cast<size_t>(-1);
	}


























































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"


	template <class _Mystr>
	class _String_const_iterator : public _Iterator_base {
	public:
		using iterator_category = random_access_iterator_tag;

		using value_type      = typename _Mystr::value_type;
		using difference_type = typename _Mystr::difference_type;
		using pointer         = typename _Mystr::const_pointer;
		using reference       = const value_type &;

		_String_const_iterator() : _Ptr() {}

		_String_const_iterator(pointer _Parg, const _Container_base* _Pstring) : _Ptr(_Parg) {
			this->_Adopt(_Pstring);
		}

		reference operator*() const {

			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1801, 0, "%s", "cannot dereference value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized string iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1801, 0); } while (false); }; } while (false);
			const auto _Mycont = static_cast<const _Mystr*>(this->_Getcont());
			do { if (_Mycont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1804, 0, "%s", "cannot dereference string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1804, 0); } while (false); }; } while (false);
#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			const auto _Contptr = _Mycont->_Myptr();
			const auto _Rawptr = _Unfancy(_Ptr);
			do { if (_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1808, 0, "%s", "cannot dereference string iterator because it is out of range (e.g. an end iterator)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference string iterator because it is out of range (e.g. an end iterator)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1808, 0); } while (false); }; } while (false);
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			;
			return *_Ptr;
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_String_const_iterator& operator++() {

			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1821, 0, "%s", "cannot increment value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized string iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1821, 0); } while (false); }; } while (false);
			const auto _Mycont = static_cast<const _Mystr*>(this->_Getcont());
			do { if (_Mycont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1824, 0, "%s", "cannot increment string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1824, 0); } while (false); }; } while (false);
#line 1826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			do { if (_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1825, 0, "%s", "cannot increment string iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment string iterator past end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1825, 0); } while (false); }; } while (false);
#line 1827 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			++_Ptr;
			return *this;
		}

		_String_const_iterator operator++(int) {
			_String_const_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		_String_const_iterator& operator--() {

			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1840, 0, "%s", "cannot decrement value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized string iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1840, 0); } while (false); }; } while (false);
			const auto _Mycont = static_cast<const _Mystr*>(this->_Getcont());
			do { if (_Mycont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1843, 0, "%s", "cannot decrement string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1843, 0); } while (false); }; } while (false);
#line 1845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			do { if (_Mycont->_Myptr() < _Unfancy(_Ptr)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1844, 0, "%s", "cannot decrement string iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement string iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1844, 0); } while (false); }; } while (false);
#line 1846 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			--_Ptr;
			return *this;
		}

		_String_const_iterator operator--(int) {
			_String_const_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		void _Verify_offset(const difference_type _Off) const noexcept {

			if (_Off == 0) {
				return;
			}

			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1863, 0, "%s", "cannot seek value-initialized string iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized string iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1863, 0); } while (false); }; } while (false);
			const auto _Mycont = static_cast<const _Mystr*>(this->_Getcont());
			do { if (_Mycont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1866, 0, "%s", "cannot seek string iterator because the iterator was" " invalidated (e.g. reallocation occurred, or the string was destroyed)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator because the iterator was\" \" invalidated (e.g. reallocation occurred, or the string was destroyed)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1866, 0); } while (false); }; } while (false);
#line 1868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			const auto _Contptr = _Mycont->_Myptr();
			const auto _Rawptr = _Unfancy(_Ptr);

			if (_Off < 0) {
#pragma warning(suppress : 4146) 
				do { if (_Contptr - _Rawptr <= _Off) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1872, 0, "%s", "cannot seek string iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1872, 0); } while (false); }; } while (false);
			}

			if (_Off > 0) {
				using _Size_type = typename _Mystr::size_type;
				const auto _Left = _Mycont->_Mysize - static_cast<_Size_type>(_Rawptr - _Contptr);
				do { if (static_cast<_Size_type>(_Off) <= _Left) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1878, 0, "%s", "cannot seek string iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek string iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1878, 0); } while (false); }; } while (false);
			}


#line 1883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		_String_const_iterator& operator+=(const difference_type _Off) {

			_Verify_offset(_Off);
#line 1889 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			_Ptr += _Off;
			return *this;
		}

		_String_const_iterator operator+(const difference_type _Off) const {
			_String_const_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_String_const_iterator& operator-=(const difference_type _Off) {
			return *this += -_Off;
		}

		_String_const_iterator operator-(const difference_type _Off) const {
			_String_const_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		difference_type operator-(const _String_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr - _Right._Ptr;
		}

		reference operator[](const difference_type _Off) const {
			return *(*this + _Off);
		}

		bool operator==(const _String_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr == _Right._Ptr;
		}

		bool operator!=(const _String_const_iterator& _Right) const {
			return !(*this == _Right);
		}

		bool operator<(const _String_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr < _Right._Ptr;
		}

		bool operator>(const _String_const_iterator& _Right) const {
			return _Right < *this;
		}

		bool operator<=(const _String_const_iterator& _Right) const {
			return !(_Right < *this);
		}

		bool operator>=(const _String_const_iterator& _Right) const {
			return !(*this < _Right);
		}

		void _Compat(const _String_const_iterator& _Right) const {

			do { if (this->_Getcont() == _Right._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1945, 0, "%s", "string iterators incompatible (e.g." " point to different string instances)")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterators incompatible (e.g.\" \" point to different string instances)\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1945, 0); } while (false); }; } while (false);
#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"


#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}


		friend void _Verify_range(const _String_const_iterator& _First, const _String_const_iterator& _Last) {
			do { if (_First._Getcont() == _Last._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1953, 0, "%s", "string iterators in range are from different containers")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterators in range are from different containers\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1953, 0); } while (false); }; } while (false);
			do { if (_First._Ptr <= _Last._Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1954, 0, "%s", "string iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string iterator range transposed\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 1954, 0); } while (false); }; } while (false);
		}
#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		using _Prevent_inheriting_unwrap = _String_const_iterator;

		pointer _Unwrapped() const {
			return _Ptr;
		}

		void _Seek_to(pointer _It) {
			_Ptr = _It;
		}

		pointer _Ptr;
	};

	template <class _Mystr>
	inline _String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>::difference_type _Off, _String_const_iterator<_Mystr> _Next) {
		return _Next += _Off;
	}


	template <class _Mystr>
	class _String_iterator : public _String_const_iterator<_Mystr> {
	public:
		using _Mybase           = _String_const_iterator<_Mystr>;
		using iterator_category = random_access_iterator_tag;

		using value_type      = typename _Mystr::value_type;
		using difference_type = typename _Mystr::difference_type;
		using pointer         = typename _Mystr::pointer;
		using reference       = value_type &;

		_String_iterator() {}

		_String_iterator(pointer _Parg, const _Container_base* _Pstring) : _Mybase(_Parg, _Pstring) {}

		reference operator*() const {
			return const_cast<reference>(_Mybase::operator*());
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_String_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		_String_iterator operator++(int) {
			_String_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		_String_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		_String_iterator operator--(int) {
			_String_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}

		_String_iterator& operator+=(const difference_type _Off) {
			_Mybase::operator+=(_Off);
			return *this;
		}

		_String_iterator operator+(const difference_type _Off) const {
			_String_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_String_iterator& operator-=(const difference_type _Off) {
			_Mybase::operator-=(_Off);
			return *this;
		}

		using _Mybase::operator-;

		_String_iterator operator-(const difference_type _Off) const {
			_String_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		reference operator[](const difference_type _Off) const {
			return const_cast<reference>(_Mybase::operator[](_Off));
		}

		using _Prevent_inheriting_unwrap = _String_iterator;

		pointer _Unwrapped() const {
			return _Const_cast(this->_Ptr);
		}
	};

	template <class _Mystr>
	inline _String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>::difference_type _Off, _String_iterator<_Mystr> _Next) {
		return _Next += _Off;
	}


	template <class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer,
		class _Reference, class _Const_reference>
		struct _String_iter_types {
		using value_type      = _Value_type;
		using size_type       = _Size_type;
		using difference_type = _Difference_type;
		using pointer         = _Pointer;
		using const_pointer   = _Const_pointer;
	};


	template <class _Val_types>
	class _String_val : public _Container_base {
	public:
		using value_type      = typename _Val_types::value_type;
		using size_type       = typename _Val_types::size_type;
		using difference_type = typename _Val_types::difference_type;
		using pointer         = typename _Val_types::pointer;
		using const_pointer   = typename _Val_types::const_pointer;
		using reference       = value_type &;
		using const_reference = const value_type &;

		_String_val() : _Bx(), _Mysize(0), _Myres(0) {}


		static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);

		static constexpr size_type _ALLOC_MASK =
			sizeof(value_type) <= 1
			? 15
			: sizeof(value_type) <= 2 ? 7 : sizeof(value_type) <= 4 ? 3 : sizeof(value_type) <= 8 ? 1 : 0;

		value_type* _Myptr() {
			value_type* _Result = _Bx._Buf;
			if (_Large_string_engaged()) {
				_Result = _Unfancy(_Bx._Ptr);
			}

			return _Result;
		}

		const value_type* _Myptr() const {
			const value_type* _Result = _Bx._Buf;
			if (_Large_string_engaged()) {
				_Result = _Unfancy(_Bx._Ptr);
			}

			return _Result;
		}

		bool _Large_string_engaged() const {
			return _BUF_SIZE <= _Myres;
		}

		void _Check_offset(const size_type _Off) const {
			if (_Mysize < _Off) {
				_Xran();
			}
		}

		void _Check_offset_exclusive(const size_type _Off) const {
			if (_Mysize <= _Off) {
				_Xran();
			}
		}

		[[noreturn]] static void _Xran() {
			_Xout_of_range("invalid string position");
		}

		size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

			return _Min_value(_Size, _Mysize - _Off);
		}

		union _Bxty {
			_Bxty() {}

			~_Bxty() noexcept {}

			value_type _Buf[_BUF_SIZE];
			pointer _Ptr;
			char _Alias[_BUF_SIZE];
		} _Bx;

		size_type _Mysize;
		size_type _Myres;
	};


	template <class _Ty>
	constexpr size_t _Size_after_ebco_v = is_empty_v<_Ty> ? 0 : sizeof(_Ty);

	template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
	class basic_string {
	private:
		friend _Tidy_deallocate_guard<basic_string>;

		using _Alty        = _Rebind_alloc_t<_Alloc, _Elem>;
		using _Alty_traits = allocator_traits<_Alty>;

		using _Scary_val = _String_val<conditional_t<_Is_simple_alloc_v<_Alty>, _Simple_types<_Elem>,
			_String_iter_types<_Elem, typename _Alty_traits::size_type, typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer, typename _Alty_traits::const_pointer, _Elem&, const _Elem& >>>;

		static_assert(!0 || is_same_v<_Elem, typename _Alloc::value_type>,
			"basic_string<T, Traits, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		static_assert(is_same_v<_Elem, typename _Traits::char_type>,
			"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
			"char_traits character type match the string's character type.");

	public:
		using traits_type    = _Traits;
		using allocator_type = _Alloc;

		using value_type      = _Elem;
		using size_type       = typename _Alty_traits::size_type;
		using difference_type = typename _Alty_traits::difference_type;
		using pointer         = typename _Alty_traits::pointer;
		using const_pointer   = typename _Alty_traits::const_pointer;
		using reference       = value_type &;
		using const_reference = const value_type &;

		using iterator       = _String_iterator<_Scary_val>;
		using const_iterator = _String_const_iterator<_Scary_val>;

		using reverse_iterator       = ::std::reverse_iterator<iterator>;
		using const_reverse_iterator = ::std::reverse_iterator<const_iterator>;

	private:
		static constexpr auto _BUF_SIZE = _Scary_val::_BUF_SIZE;
		static constexpr auto _ALLOC_MASK = _Scary_val::_ALLOC_MASK;











		static constexpr bool _Can_memcpy_val = _Is_specialization_v<_Traits, char_traits>&& is_trivial_v<pointer>;

		static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v<_Container_base>;
		static constexpr size_t _Memcpy_val_size = sizeof(_Scary_val) - _Memcpy_val_offset;

		template <class _Iter>
		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter, const _Elem* const, _Elem* const, const _Elem*, _Elem*>>;






#line 2221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

	public:
		basic_string(const basic_string & _Right)
			: _Mypair(_One_then_variadic_args_t(), _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Construct_lv_contents(_Right);
			_Proxy._Release();
		}

		basic_string(const basic_string& _Right, const _Alloc& _Al) : _Mypair(_One_then_variadic_args_t(), _Al) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Construct_lv_contents(_Right);
			_Proxy._Release();
		}

		basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t()) {

			_Get_data()._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
			_Tidy_init();
		}

		explicit basic_string(const _Alloc& _Al) noexcept : _Mypair(_One_then_variadic_args_t(), _Al) {

			_Get_data()._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
			_Tidy_init();
		}

		basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Right, _Roff, npos);
			_Proxy._Release();
		}

		basic_string(
			const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Right, _Roff, _Count);
			_Proxy._Release();
		}

		basic_string(const _Elem* const _Ptr, __declspec(guard(overflow)) const size_type _Count)
			: _Mypair(_Zero_then_variadic_args_t()) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Ptr, _Count);
			_Proxy._Release();
		}

		basic_string(
			const _Elem* const _Ptr, __declspec(guard(overflow)) const size_type _Count, const _Alloc& _Al)
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Ptr, _Count);
			_Proxy._Release();
		}

		basic_string(const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t()) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Ptr);
			_Proxy._Release();
		}



#line 2302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		basic_string(const _Elem * const _Ptr, const _Alloc & _Al) : _Mypair(_One_then_variadic_args_t(), _Al) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Ptr);
			_Proxy._Release();
		}

		basic_string(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch) : _Mypair(_Zero_then_variadic_args_t()) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Count, _Ch);
			_Proxy._Release();
		}



#line 2323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		basic_string(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch, const _Alloc & _Al)
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Count, _Ch);
			_Proxy._Release();
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string(_Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t(), _Al) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			_Adl_verify_range(_First, _Last);
			_Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());
			_Proxy._Release();
		}

		template <class _Iter>
		void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag) {

			_Tidy_deallocate_guard<basic_string> _Guard{ this };
			for (; _First != _Last; ++_First) {
				push_back(*_First);
			}

			_Guard._Target = nullptr;
		}

		template <class _Iter>
		void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag) {

			const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std::distance(_First, _Last)));
			reserve(_Count);
			_Construct(_First, _Last, input_iterator_tag());
		}

		void _Construct(_Elem* const _First, _Elem* const _Last, random_access_iterator_tag) {

			if (_First != _Last) {
				assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

		void _Construct(const _Elem* const _First, const _Elem* const _Last, random_access_iterator_tag) {

			if (_First != _Last) {
				assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

		basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t(), ::std::move(_Right._Getal())) {

			_Get_data()._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
			_Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
		}

		basic_string(basic_string&& _Right, const _Alloc& _Al)
			noexcept(_Alty_traits::is_always_equal::value)
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			if
				constexpr (!_Alty_traits::is_always_equal::value) {
				if (_Getal() != _Right._Getal()) {
					_Construct_lv_contents(_Right);
					_Proxy._Release();
					return;
				}
			}

			_Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
			_Proxy._Release();
		}






















#line 2422 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

	private:
		void _Move_assign(basic_string & _Right, _Equal_allocators) noexcept {
			_Tidy_deallocate();
			_Pocma(_Getal(), _Right._Getal());
			_Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
		}

		void _Move_assign(basic_string& _Right, _Propagate_allocators) noexcept {
			if (_Getal() == _Right._Getal()) {
				_Move_assign(_Right, _Equal_allocators{});
			}
			else {

				auto& _My_data = _Get_data();
				_My_data._Orphan_all();
				_My_data._Reload_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()), static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Right._Getal()));
				_Pocma(_Getal(), _Right._Getal());
				_Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
			}
		}

		void _Move_assign(basic_string& _Right, _No_propagate_allocators) {
			if (_Getal() == _Right._Getal()) {
				_Move_assign(_Right, _Equal_allocators{});
			}
			else {
				auto& _Right_data = _Right._Get_data();
				assign(_Right_data._Myptr(), _Right_data._Mysize);
			}
		}

	public:
		basic_string& operator=(basic_string&& _Right)
			noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {
			if (this != ::std::addressof(_Right)) {
				_Move_assign(_Right, _Choose_pocma<_Alty>{});
			}

			return *this;
		}

		basic_string& assign(basic_string&& _Right) noexcept(noexcept(*this = ::std::move(_Right))) {

			*this = ::std::move(_Right);
			return *this;
		}

	private:
		void _Memcpy_val_from(const basic_string& _Right) noexcept {
			;
			auto& _Right_data = _Right._Get_data();
			const auto _My_data_mem = reinterpret_cast<unsigned char*>(::std::addressof(_Get_data())) + _Memcpy_val_offset;
			const auto _Right_data_mem =
				reinterpret_cast<const unsigned char*>(::std::addressof(_Right_data)) + _Memcpy_val_offset;
			::memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);
		}

		void _Take_contents(basic_string& _Right, true_type) noexcept {






			auto& _Right_data = _Right._Get_data();
			if (_Right_data._Large_string_engaged()) {
				_Swap_proxy_and_iterators(_Right);
			}
			else {
				_Right_data._Orphan_all();
			}
#line 2492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			_Memcpy_val_from(_Right);
			_Right._Tidy_init();
		}

		void _Take_contents(basic_string& _Right, false_type) noexcept {





			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			if (_Right_data._Large_string_engaged()) {
				_Alty_traits::construct(_Getal(), ::std::addressof(_My_data._Bx._Ptr), _Right_data._Bx._Ptr);
				_Right_data._Bx._Ptr = pointer();
				_Swap_proxy_and_iterators(_Right);
			}
			else {
				_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);
				_Right_data._Orphan_all();
			}

			_My_data._Mysize = _Right_data._Mysize;
			_My_data._Myres = _Right_data._Myres;
			_Right._Tidy_init();
		}

		void _Construct_lv_contents(const basic_string& _Right) {




			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			const size_type _Right_size = _Right_data._Mysize;
			const _Elem* const _Right_ptr = _Right_data._Myptr();
			if (_Right_size < _BUF_SIZE) {
				_Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);
				_My_data._Mysize = _Right_size;
				_My_data._Myres = _BUF_SIZE - 1;
				return;
			}

			auto& _Al = _Getal();
			const size_type _New_capacity = _Min_value(_Right_size | _ALLOC_MASK, max_size());
			const pointer _New_array = _Al.allocate(_New_capacity + 1);
			_Alty_traits::construct(_Al, ::std::addressof(_My_data._Bx._Ptr), _New_array);
			_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);
			_My_data._Mysize = _Right_size;
			_My_data._Myres = _New_capacity;
		}

	public:
		basic_string(initializer_list<_Elem> _Ilist, const _Alloc& _Al = allocator_type())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());
			_Tidy_init();
			assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
			_Proxy._Release();
		}

		basic_string& operator=(initializer_list<_Elem> _Ilist) {
			return assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

		basic_string& operator+=(initializer_list<_Elem> _Ilist) {
			return append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

		basic_string& assign(initializer_list<_Elem> _Ilist) {
			return assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

		basic_string& append(initializer_list<_Elem> _Ilist) {
			return append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

		iterator insert(const const_iterator _Where, const initializer_list<_Elem> _Ilist) {
			const difference_type _Off = _Where - begin();
			insert(static_cast<size_type>(_Off), _Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
			return begin() + _Off;
		}

		basic_string& replace(const const_iterator _First, const const_iterator _Last,
			const initializer_list<_Elem> _Ilist) {
			return replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ilist.begin(),
				_Convert_size<size_type>(_Ilist.size()));
		}

		~basic_string() noexcept {
			_Tidy_deallocate();

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Delete_plain(_Alproxy, ::std::exchange(_Get_data()._Myproxy, nullptr));
#line 2588 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
		}

		static constexpr auto npos{ static_cast<size_type>(-1) };

	private:
		void _Copy_assign_val_from_small(const basic_string& _Right) {

			_Tidy_deallocate();
			if
				constexpr (_Can_memcpy_val) {
				_Memcpy_val_from(_Right);
			}
			else {
				auto& _My_data = _Get_data();
				auto& _Right_data = _Right._Get_data();
				_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);
				_My_data._Mysize = _Right_data._Mysize;
				_My_data._Myres = _Right_data._Myres;
			}
		}

		void _Copy_assign(const basic_string& _Right, false_type) {
			_Pocca(_Getal(), _Right._Getal());
			auto& _Right_data = _Right._Get_data();
			assign(_Right_data._Myptr(), _Right_data._Mysize);
		}

		void _Copy_assign(const basic_string& _Right, true_type) {
			auto& _Al = _Getal();
			const auto& _Right_al = _Right._Getal();
			if (_Al == _Right_al) {
				_Copy_assign(_Right, false_type{});
				return;
			}

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Al);
			auto&& _Right_alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Right_al);
			_Container_proxy_ptr<_Alty> _New_proxy(_Right_alproxy, _Leave_proxy_unbound{});

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			if (_Right_data._Large_string_engaged()) {
				const auto _New_size = _Right_data._Mysize;
				const auto _New_capacity = _Calculate_growth(_New_size, 0, _Right.max_size());
				auto _Right_al_non_const = _Right_al;
				const auto _New_ptr = _Right_al_non_const.allocate(_New_capacity);
				_Traits::copy(_Unfancy(_New_ptr), _Unfancy(_Right_data._Bx._Ptr), _New_size + 1);
				_Tidy_deallocate();
				_My_data._Bx._Ptr = _New_ptr;
				_My_data._Mysize = _New_size;
				_My_data._Myres = _New_capacity;
			}
			else {
				_Copy_assign_val_from_small(_Right);
			}

			_Pocca(_Al, _Right_al);
			_New_proxy._Bind(_Alproxy, ::std::addressof(_My_data));
		}

	public:
		basic_string& operator=(const basic_string& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Copy_assign(_Right, _Choose_pocca<_Alty>{});
			}

			return *this;
		}






#line 2662 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & operator=(const _Elem * const _Ptr) {
			return assign(_Ptr);
		}

		basic_string& operator=(const _Elem _Ch) {
			auto& _My_data = _Get_data();
			_My_data._Mysize = 1;
			_Elem* const _Ptr = _My_data._Myptr();
			_Traits::assign(_Ptr[0], _Ch);
			_Traits::assign(_Ptr[1], _Elem());
			return *this;
		}

		basic_string& operator+=(const basic_string& _Right) {
			return append(_Right);
		}






#line 2686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & operator+=(const _Elem * const _Ptr) {
			return append(_Ptr);
		}

		basic_string& operator+=(_Elem _Ch) {
			push_back(_Ch);
			return *this;
		}

		basic_string& append(const basic_string& _Right) {
			auto& _Right_data = _Right._Get_data();
			return append(_Right_data._Myptr(), _Right_data._Mysize);
		}

		basic_string& append(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

			auto& _Right_data = _Right._Get_data();
			_Right_data._Check_offset(_Roff);
			_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
			return append(_Right_data._Myptr() + _Roff, _Count);
		}














#line 2723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & append(const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count) {

			auto& _My_data = _Get_data();
			const size_type _Old_size = _My_data._Mysize;
			if (_Count <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Count;
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);
				_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
				return *this;
			}

			return _Reallocate_grow_by(
				_Count,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
					const size_type _Count) {
						_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
						_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
						_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
				},
				_Ptr, _Count);
		}

		basic_string& append(const _Elem* const _Ptr) {
			return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
		}

		basic_string& append(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch) {
			auto& _My_data = _Get_data();
			const size_type _Old_size = _My_data._Mysize;
			if (_Count <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Count;
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);
				_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
				return *this;
			}

			return _Reallocate_grow_by(
				_Count,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Count,
					const _Elem _Ch) {
						_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
						_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
						_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
				},
				_Count, _Ch);
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string & append(const _Iter _First, const _Iter _Last) {
			return replace(end(), end(), _First, _Last);
		}

		basic_string& assign(const basic_string& _Right) {
			*this = _Right;
			return *this;
		}

		basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

			auto& _Right_data = _Right._Get_data();
			_Right_data._Check_offset(_Roff);
			_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
			return assign(_Right_data._Myptr() + _Roff, _Count);
		}














#line 2805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & assign(const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count) {

			auto& _My_data = _Get_data();
			if (_Count <= _My_data._Myres) {
				_Elem* const _Old_ptr = _My_data._Myptr();
				_My_data._Mysize = _Count;
				_Traits::move(_Old_ptr, _Ptr, _Count);
				_Traits::assign(_Old_ptr[_Count], _Elem());
				return *this;
			}

			return _Reallocate_for(
				_Count,
				[](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
					_Traits::copy(_New_ptr, _Ptr, _Count);
					_Traits::assign(_New_ptr[_Count], _Elem());
				},
				_Ptr);
		}

		basic_string& assign(const _Elem* const _Ptr) {
			return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
		}

		basic_string& assign(__declspec(guard(overflow)) const size_type _Count, const _Elem _Ch) {
			auto& _My_data = _Get_data();
			if (_Count <= _My_data._Myres) {
				_Elem* const _Old_ptr = _My_data._Myptr();
				_My_data._Mysize = _Count;
				_Traits::assign(_Old_ptr, _Count, _Ch);
				_Traits::assign(_Old_ptr[_Count], _Elem());
				return *this;
			}

			return _Reallocate_for(
				_Count,
				[](_Elem* const _New_ptr, const size_type _Count, const _Elem _Ch) {
					_Traits::assign(_New_ptr, _Count, _Ch);
					_Traits::assign(_New_ptr[_Count], _Elem());
				},
				_Ch);
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string & assign(const _Iter _First, const _Iter _Last) {
			return replace(begin(), end(), _First, _Last);
		}

		basic_string& insert(const size_type _Off, const basic_string& _Right) {
			auto& _Right_data = _Right._Get_data();
			return insert(_Off, _Right_data._Myptr(), _Right_data._Mysize);
		}

		basic_string& insert(const size_type _Off, const basic_string& _Right, const size_type _Roff,
			size_type _Count = npos) {
			auto& _Right_data = _Right._Get_data();
			_Right_data._Check_offset(_Roff);
			_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
			return insert(_Off, _Right_data._Myptr() + _Roff, _Count);
		}














#line 2881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & insert(
			const size_type _Off, const _Elem * const _Ptr, __declspec(guard(overflow)) const size_type _Count) {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			const size_type _Old_size = _My_data._Mysize;
			if (_Count <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Count;
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Elem* const _Insert_at = _Old_ptr + _Off;


				size_type _Ptr_shifted_after;
				if (_Ptr + _Count <= _Insert_at
					|| _Ptr > _Old_ptr + _Old_size) {
					_Ptr_shifted_after = _Count;
				}
				else if (_Insert_at <= _Ptr) {
					_Ptr_shifted_after = 0;
				}
				else {
					_Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);
				}

				_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1);
				_Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
				_Traits::copy(
					_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after, _Count - _Ptr_shifted_after);
				return *this;
			}

			return _Reallocate_grow_by(
				_Count,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
					const _Elem* const _Ptr, const size_type _Count) {
						_Traits::copy(_New_ptr, _Old_ptr, _Off);
						_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
						_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
				},
				_Off, _Ptr, _Count);
		}

		basic_string& insert(const size_type _Off, const _Elem* const _Ptr) {
			return insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
		}

		basic_string& insert(const size_type _Off, __declspec(guard(overflow)) const size_type _Count, const _Elem _Ch) {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			const size_type _Old_size = _My_data._Mysize;
			if (_Count <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Count;
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Elem* const _Insert_at = _Old_ptr + _Off;
				_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1);
				_Traits::assign(_Insert_at, _Count, _Ch);
				return *this;
			}

			return _Reallocate_grow_by(
				_Count,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
					const size_type _Count, const _Elem _Ch) {
						_Traits::copy(_New_ptr, _Old_ptr, _Off);
						_Traits::assign(_New_ptr + _Off, _Count, _Ch);
						_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
				},
				_Off, _Count, _Ch);
		}

		iterator insert(const const_iterator _Where, const _Elem _Ch) {
			const difference_type _Off = _Where - begin();
			insert(static_cast<size_type>(_Off), 1, _Ch);
			return begin() + _Off;
		}

		iterator insert(const const_iterator _Where, __declspec(guard(overflow)) const size_type _Count, const _Elem _Ch) {

			const difference_type _Off = _Where - begin();
			insert(static_cast<size_type>(_Off), _Count, _Ch);
			return begin() + _Off;
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const const_iterator _Where, const _Iter _First, const _Iter _Last) {

			const difference_type _Off = _Where - begin();
			replace(_Where, _Where, _First, _Last);
			return begin() + _Off;
		}

		basic_string& erase(const size_type _Off = 0) {
			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_Eos(_Off);
			return *this;
		}

		basic_string& erase(const size_type _Off, size_type _Count) {
			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_Count = _My_data._Clamp_suffix_size(_Off, _Count);
			const size_type _Old_size = _My_data._Mysize;
			_Elem* const _My_ptr = _My_data._Myptr();
			_Elem* const _Erase_at = _My_ptr + _Off;
			const size_type _New_size = _Old_size - _Count;
			_My_data._Mysize = _New_size;
			_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1);
			return *this;
		}

		iterator erase(const const_iterator _Where) {
			const difference_type _Off = _Where - begin();
			erase(static_cast<size_type>(_Off), 1);
			return begin() + _Off;
		}

		iterator erase(const const_iterator _First, const const_iterator _Last) {
			_Adl_verify_range(_First, _Last);
			const difference_type _Off = _First - begin();
			erase(static_cast<size_type>(_Off), static_cast<size_type>(_Last - _First));
			return begin() + _Off;
		}

		void clear() noexcept {
			_Eos(0);
		}

		basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right) {

			auto& _Right_data = _Right._Get_data();
			return replace(_Off, _N0, _Right_data._Myptr(), _Right_data._Mysize);
		}

		basic_string& replace(const size_type _Off, size_type _N0, const basic_string& _Right, const size_type _Roff,
			size_type _Count = npos) {
			auto& _Right_data = _Right._Get_data();
			_Right_data._Check_offset(_Roff);
			_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
			return replace(_Off, _N0, _Right_data._Myptr() + _Roff, _Count);
		}
















#line 3039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & replace(
			const size_type _Off, size_type _N0, const _Elem * const _Ptr, const size_type _Count) {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
			if (_N0 == _Count) {
				_Traits::move(_My_data._Myptr() + _Off, _Ptr, _Count);
				return *this;
			}

			const size_type _Old_size = _My_data._Mysize;
			const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;
			if (_Count < _N0) {
				_My_data._Mysize = _Old_size - (_N0 - _Count);
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Elem* const _Insert_at = _Old_ptr + _Off;
				_Traits::move(_Insert_at, _Ptr, _Count);
				_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);
				return *this;
			}

			const size_type _Growth = static_cast<size_type>(_Count - _N0);
			if (_Growth <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Growth;
				_Elem* const _Old_ptr = _My_data._Myptr();
				_Elem* const _Insert_at = _Old_ptr + _Off;
				_Elem* const _Suffix_at = _Insert_at + _N0;

				size_type _Ptr_shifted_after;
				if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size) {
					_Ptr_shifted_after = _Count;
				}
				else if (_Suffix_at <= _Ptr) {
					_Ptr_shifted_after = 0;
				}
				else {
					_Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);
				}

				_Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);



				_Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);


				_Traits::copy(
					_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after);
				return *this;
			}

			return _Reallocate_grow_by(
				_Growth,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
					const size_type _N0, const _Elem* const _Ptr, const size_type _Count) {
						_Traits::copy(_New_ptr, _Old_ptr, _Off);
						_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
						_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
				},
				_Off, _N0, _Ptr, _Count);
		}

		basic_string& replace(const size_type _Off, const size_type _N0, const _Elem* const _Ptr) {

			return replace(_Off, _N0, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
		}

		basic_string& replace(const size_type _Off, size_type _N0, const size_type _Count, const _Elem _Ch) {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
			if (_Count == _N0) {
				_Traits::assign(_My_data._Myptr() + _Off, _Count, _Ch);
				return *this;
			}

			const size_type _Old_size = _My_data._Mysize;
			if (_Count < _N0
				|| _Count - _N0 <= _My_data._Myres - _Old_size) {
				_My_data._Mysize = _Old_size + _Count - _N0;

				_Elem* const _Old_ptr = _My_data._Myptr();
				_Elem* const _Insert_at = _Old_ptr + _Off;
				_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Old_size - _N0 - _Off + 1);
				_Traits::assign(_Insert_at, _Count, _Ch);
				return *this;
			}

			return _Reallocate_grow_by(
				_Count - _N0,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
					const size_type _N0, const size_type _Count, const _Elem _Ch) {
						_Traits::copy(_New_ptr, _Old_ptr, _Off);
						_Traits::assign(_New_ptr + _Off, _Count, _Ch);
						_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
				},
				_Off, _N0, _Count, _Ch);
		}

		basic_string& replace(const const_iterator _First, const const_iterator _Last, const basic_string& _Right) {

			return replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Right);
		}







#line 3151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string & replace(const const_iterator _First, const const_iterator _Last,
			const _Elem * const _Ptr, const size_type _Count) {

			return replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr, _Count);
		}

		basic_string& replace(const const_iterator _First, const const_iterator _Last, const _Elem* const _Ptr) {

			return replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr);
		}

		basic_string& replace(
			const const_iterator _First, const const_iterator _Last, const size_type _Count, const _Elem _Ch) {

			return replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Count, _Ch);
		}

		template <class _Iter>
		basic_string& _Replace_range(
			const const_iterator _First, const const_iterator _Last, const _Iter _First2, const _Iter _Last2, false_type) {

			const basic_string _Right(_First2, _Last2, get_allocator());
			replace(_First, _Last, _Right);
			return *this;
		}

		template <class _Ptr>
		basic_string& _Replace_range(
			const const_iterator _First, const const_iterator _Last, const _Ptr _First2, const _Ptr _Last2, true_type) {

			return replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First), _First2,
				static_cast<size_type>(_Last2 - _First2));
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string & replace(
			const const_iterator _First, const const_iterator _Last, const _Iter _First2, const _Iter _Last2) {

			_Adl_verify_range(_First2, _Last2);
			const auto _UFirst2 = _Get_unwrapped(_First2);
			const auto _ULast2 = _Get_unwrapped(_Last2);
			return _Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>());
		}

		iterator begin() noexcept {
			auto _My_data = ::std::addressof(_Get_data());
			return iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data);
		}

		const_iterator begin() const noexcept {
			auto _My_data = ::std::addressof(_Get_data());
			return const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data);
		}

		iterator end() noexcept {
			auto _My_data = ::std::addressof(_Get_data());
			return iterator(
				_Refancy<pointer>(_My_data->_Myptr()) + static_cast<difference_type>(_My_data->_Mysize), _My_data);
		}

		const_iterator end() const noexcept {
			auto _My_data = ::std::addressof(_Get_data());
			return const_iterator(
				_Refancy<const_pointer>(_My_data->_Myptr()) + static_cast<difference_type>(_My_data->_Mysize), _My_data);
		}

		_Elem* _Unchecked_begin() noexcept {
			return _Get_data()._Myptr();
		}

		const _Elem* _Unchecked_begin() const noexcept {
			return _Get_data()._Myptr();
		}

		_Elem* _Unchecked_end() noexcept {
			auto& _My_data = _Get_data();
			return _My_data._Myptr() + _My_data._Mysize;
		}

		const _Elem* _Unchecked_end() const noexcept {
			const auto& _My_data = _Get_data();
			return _My_data._Myptr() + _My_data._Mysize;
		}

		reverse_iterator rbegin() noexcept {
			return reverse_iterator(end());
		}

		const_reverse_iterator rbegin() const noexcept {

			return const_reverse_iterator(end());
		}

		reverse_iterator rend() noexcept {
			return reverse_iterator(begin());
		}

		const_reverse_iterator rend() const noexcept {
			return const_reverse_iterator(begin());
		}

		const_iterator cbegin() const noexcept {
			return begin();
		}

		const_iterator cend() const noexcept {
			return end();
		}

		const_reverse_iterator crbegin() const noexcept {

			return rbegin();
		}

		const_reverse_iterator crend() const noexcept {
			return rend();
		}

		void shrink_to_fit() {
			auto& _My_data = _Get_data();
			if (!_My_data._Large_string_engaged()) {
				return;
			}

			if (_My_data._Mysize < _BUF_SIZE) {
				_Become_small();
				return;
			}

			const size_type _Target_capacity = _Min_value(_My_data._Mysize | _ALLOC_MASK, max_size());
			if (_Target_capacity < _My_data._Myres) {
				auto& _Al = _Getal();
				const pointer _New_ptr = _Al.allocate(_Target_capacity + 1);
				_My_data._Orphan_all();
				_Traits::copy(_Unfancy(_New_ptr), _Unfancy(_My_data._Bx._Ptr), _My_data._Mysize + 1);
				_Al.deallocate(_My_data._Bx._Ptr, _My_data._Myres + 1);
				_My_data._Bx._Ptr = _New_ptr;
				_My_data._Myres = _Target_capacity;
			}
		}

		reference at(const size_type _Off) {
			auto& _My_data = _Get_data();
			_My_data._Check_offset_exclusive(_Off);
			return _My_data._Myptr()[_Off];
		}

		const_reference at(const size_type _Off) const {
			auto& _My_data = _Get_data();
			_My_data._Check_offset_exclusive(_Off);
			return _My_data._Myptr()[_Off];
		}

		reference operator[](const size_type _Off) {
			auto& _My_data = _Get_data();

			do { if (_Off <= _My_data._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3308, 0, "%s", "string subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3308, 0); } while (false); }; } while (false);
#line 3310 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return _My_data._Myptr()[_Off];
		}

		const_reference operator[](const size_type _Off) const {
			auto& _My_data = _Get_data();

			do { if (_Off <= _My_data._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3316, 0, "%s", "string subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"string subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3316, 0); } while (false); }; } while (false);
#line 3318 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			return _My_data._Myptr()[_Off];
		}







#line 3328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		void push_back(const _Elem _Ch) {
			auto& _My_data = _Get_data();
			const size_type _Old_size = _My_data._Mysize;
			if (_Old_size < _My_data._Myres) {
				_My_data._Mysize = _Old_size + 1;
				_Elem* const _Ptr = _My_data._Myptr();
				_Traits::assign(_Ptr[_Old_size], _Ch);
				_Traits::assign(_Ptr[_Old_size + 1], _Elem());
				return;
			}

			_Reallocate_grow_by(
				1,
				[](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem _Ch) {
					_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
					_Traits::assign(_New_ptr[_Old_size], _Ch);
					_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
				},
				_Ch);
		}

		void pop_back() {
			auto& _My_data = _Get_data();
			const size_type _Old_size = _My_data._Mysize;

			do { if (_Old_size != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3354, 0, "%s", "invalid to pop_back empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid to pop_back empty string\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3354, 0); } while (false); }; } while (false);
#line 3356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			_Eos(_Old_size - 1);
		}

		reference front() {
			auto& _My_data = _Get_data();

			do { if (_My_data._Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3362, 0, "%s", "front() called on empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty string\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3362, 0); } while (false); }; } while (false);
#line 3364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			return _My_data._Myptr()[0];
		}

		const_reference front() const {
			auto& _My_data = _Get_data();

			do { if (_My_data._Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3371, 0, "%s", "front() called on empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty string\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3371, 0); } while (false); }; } while (false);
#line 3373 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			return _My_data._Myptr()[0];
		}

		reference back() {
			auto& _My_data = _Get_data();

			do { if (_My_data._Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3380, 0, "%s", "back() called on empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty string\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3380, 0); } while (false); }; } while (false);
#line 3382 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			return _My_data._Myptr()[_My_data._Mysize - 1];
		}

		const_reference back() const {
			auto& _My_data = _Get_data();

			do { if (_My_data._Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3389, 0, "%s", "back() called on empty string")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty string\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring", 3389, 0); } while (false); }; } while (false);
#line 3391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			return _My_data._Myptr()[_My_data._Mysize - 1];
		}

		const _Elem* c_str() const noexcept {
			return _Get_data()._Myptr();
		}

		const _Elem* data() const noexcept {
			return _Get_data()._Myptr();
		}





#line 3408 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type length() const noexcept {
			return _Get_data()._Mysize;
		}

		size_type size() const noexcept {
			return _Get_data()._Mysize;
		}

		size_type max_size() const noexcept {
			const size_type _Alloc_max = _Alty_traits::max_size(_Getal());
			const size_type _Storage_max =
				_Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
			return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),
				_Storage_max - 1
			);
		}

		void resize(__declspec(guard(overflow)) const size_type _Newsize, const _Elem _Ch = _Elem()) {

			const size_type _Old_size = size();
			if (_Newsize <= _Old_size) {
				_Eos(_Newsize);
			}
			else {
				append(_Newsize - _Old_size, _Ch);
			}
		}

		size_type capacity() const noexcept {
			return _Get_data()._Myres;
		}

		void reserve(__declspec(guard(overflow)) const size_type _Newcap = 0) {
			auto& _My_data = _Get_data();
			if (_My_data._Mysize > _Newcap) {
				return;
			}

			if (_My_data._Myres == _Newcap) {
				return;
			}

			if (_My_data._Myres < _Newcap) {
				const size_type _Old_size = _My_data._Mysize;
				_Reallocate_grow_by(
					_Newcap - _Old_size, [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size) {
						_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
					});

				_My_data._Mysize = _Old_size;
				return;
			}

			if (_BUF_SIZE > _Newcap
				&& _My_data._Large_string_engaged()) {
				_Become_small();
				return;
			}


		}

		bool empty() const noexcept {
			return size() == 0;
		}

		size_type copy(_Elem* const _Ptr, size_type _Count, const size_type _Off = 0) const {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_Count = _My_data._Clamp_suffix_size(_Off, _Count);
			_Traits::copy(_Ptr, _My_data._Myptr() + _Off, _Count);
			return _Count;
		}

		size_type _Copy_s(_Elem* const _Dest,
			const size_type _Dest_size, size_type _Count, const size_type _Off = 0) const {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			_Count = _My_data._Clamp_suffix_size(_Off, _Count);
			_Traits::_Copy_s(_Dest, _Dest_size, _My_data._Myptr() + _Off, _Count);
			return _Count;
		}

		void _Swap_data(basic_string& _Right, true_type) {

			const auto _My_data_mem = reinterpret_cast<unsigned char*>(::std::addressof(_Get_data())) + _Memcpy_val_offset;
			const auto _Right_data_mem =
				reinterpret_cast<unsigned char*>(::std::addressof(_Right._Get_data())) + _Memcpy_val_offset;
			unsigned char _Temp_mem[_Memcpy_val_size];
			::memcpy(_Temp_mem, _My_data_mem, _Memcpy_val_size);
			::memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);
			::memcpy(_Right_data_mem, _Temp_mem, _Memcpy_val_size);
		}

		void _Swap_bx_large_with_small(_Scary_val& _Starts_large, _Scary_val& _Starts_small) {

			const pointer _Ptr = _Starts_large._Bx._Ptr;
			auto& _Al = _Getal();
			_Alty_traits::destroy(_Al, ::std::addressof(_Starts_large._Bx._Ptr));
			_Traits::copy(_Starts_large._Bx._Buf, _Starts_small._Bx._Buf, _BUF_SIZE);
			_Alty_traits::construct(_Al, ::std::addressof(_Starts_small._Bx._Ptr), _Ptr);
		}

		void _Swap_data(basic_string& _Right, false_type) {
			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			const bool _My_large = _My_data._Large_string_engaged();
			const bool _Right_large = _Right_data._Large_string_engaged();
			if (_My_large) {
				if (_Right_large) {
					_Swap_adl(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);
				}
				else {
					_Swap_bx_large_with_small(_My_data, _Right_data);
				}
			}
			else {
				if (_Right_large) {
					_Swap_bx_large_with_small(_Right_data, _My_data);
				}
				else {
					_Elem _Temp_buf[_BUF_SIZE];
					_Traits::copy(_Temp_buf, _My_data._Bx._Buf, _BUF_SIZE);
					_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _BUF_SIZE);
					_Traits::copy(_Right_data._Bx._Buf, _Temp_buf, _BUF_SIZE);
				}
			}

			::std::swap(_My_data._Mysize, _Right_data._Mysize);
			::std::swap(_My_data._Myres, _Right_data._Myres);
		}

		void swap(basic_string& _Right) noexcept {

			if (this != ::std::addressof(_Right)) {
				_Pocs(_Getal(), _Right._Getal());


				auto& _My_data = _Get_data();
				auto& _Right_data = _Right._Get_data();
				const bool _My_large = _My_data._Large_string_engaged();
				const bool _Right_large = _Right_data._Large_string_engaged();
				if (!_My_large) {
					_My_data._Orphan_all();
				}

				if (!_Right_large) {
					_Right_data._Orphan_all();
				}

				if (_My_large || _Right_large) {
					_My_data._Swap_proxy_and_iterators(_Right_data);
				}
#line 3561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
			}

			_Swap_data(_Right, bool_constant<_Can_memcpy_val>{});
		}










#line 3576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type find(const basic_string & _Right, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_find<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Right_data._Myptr(), _Right_data._Mysize));
		}

		size_type find(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count));
		}

		size_type find(const _Elem* const _Ptr, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(
				_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
		}

		size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}










#line 3615 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type rfind(const basic_string & _Right, const size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_rfind<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Right_data._Myptr(), _Right_data._Mysize));
		}

		size_type rfind(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count));
		}

		size_type rfind(const _Elem* const _Ptr, const size_type _Off = npos) const
			noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(
				_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
		}

		size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}










#line 3655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type find_first_of(const basic_string & _Right, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_of(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_first_of<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_of(const _Elem* const _Ptr, const size_type _Off = 0) const
			noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr,
				_Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_of(const _Elem _Ch, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}










#line 3696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type find_last_of(const basic_string & _Right, size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_of(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_last_of<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_of(const _Elem* const _Ptr, const size_type _Off = npos) const
			noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr,
				_Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_of(const _Elem _Ch, const size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}










#line 3737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type find_first_not_of(const basic_string & _Right, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_not_of(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_not_of(const _Elem* const _Ptr, size_type _Off = 0) const
			noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_first_not_of(const _Elem _Ch, const size_type _Off = 0) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}










#line 3778 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		size_type find_last_not_of(const basic_string & _Right, const size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_not_of(const _Elem* const _Ptr, const size_type _Off,
			const size_type _Count) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(
				_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count, _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_not_of(const _Elem* const _Ptr, const size_type _Off = npos) const
			noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr,
				_Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{}));
		}

		size_type find_last_not_of(const _Elem _Ch, const size_type _Off = npos) const noexcept {

			auto& _My_data = _Get_data();
			return static_cast<size_type>(_Traits_rfind_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch));
		}






#line 3815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const {

			return basic_string(*this, _Off, _Count, get_allocator());
		}

		bool _Equal(const basic_string& _Right) const noexcept {
			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return _Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Right_data._Myptr(), _Right_data._Mysize);
		}

		bool _Equal(const _Elem* const _Ptr) const noexcept {
			auto& _My_data = _Get_data();
			return _Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr));
		}






























#line 3862 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		int compare(const basic_string & _Right) const noexcept {
			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			return _Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Right_data._Myptr(), _Right_data._Mysize);
		}

		int compare(size_type _Off, size_type _N0, const basic_string& _Right) const {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			auto& _Right_data = _Right._Get_data();
			return _Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
				_Right_data._Myptr(), _Right_data._Mysize);
		}

		int compare(const size_type _Off, const size_type _N0, const basic_string& _Right, const size_type _Roff,
			const size_type _Count = npos) const {
			auto& _My_data = _Get_data();
			auto& _Right_data = _Right._Get_data();
			_My_data._Check_offset(_Off);
			_Right_data._Check_offset(_Roff);
			return _Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
				_Right_data._Myptr() + _Roff, _Right_data._Clamp_suffix_size(_Roff, _Count));
		}

		int compare(const _Elem* const _Ptr) const noexcept {

			auto& _My_data = _Get_data();
			return _Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr));
		}

		int compare(const size_type _Off, const size_type _N0, const _Elem* const _Ptr) const {

			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			return _Traits_compare<_Traits>(
				_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0), _Ptr, _Traits::length(_Ptr));
		}

		int compare(const size_type _Off, const size_type _N0, const _Elem* const _Ptr,
			const size_type _Count) const {
			auto& _My_data = _Get_data();
			_My_data._Check_offset(_Off);
			return _Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0), _Ptr, _Count);
		}





































#line 3946 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

		allocator_type get_allocator() const noexcept {
			return static_cast<allocator_type>(_Getal());
		}

	private:
		static size_type _Calculate_growth(
			const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {
			const size_type _Masked = _Requested | _ALLOC_MASK;
			if (_Masked > _Max) {
				return _Max;
			}

			if (_Old > _Max - _Old / 2) {
				return _Max;
			}

			return _Max_value(_Masked, _Old + _Old / 2);
		}

		size_type _Calculate_growth(const size_type _Requested) const noexcept {
			return _Calculate_growth(_Requested, _Get_data()._Myres, max_size());
		}

		template <class _Fty, class... _ArgTys>
		basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {


			if (_New_size > max_size()) {
				_Xlen();
			}

			auto& _My_data = _Get_data();
			const size_type _Old_capacity = _My_data._Myres;
			const size_type _New_capacity = _Calculate_growth(_New_size);
			auto& _Al = _Getal();
			const pointer _New_ptr = _Al.allocate(_New_capacity + 1);
			_My_data._Orphan_all();
			_My_data._Mysize = _New_size;
			_My_data._Myres = _New_capacity;
			_Fn(_Unfancy(_New_ptr), _New_size, _Args...);
			if (_BUF_SIZE <= _Old_capacity) {
				_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);
				_My_data._Bx._Ptr = _New_ptr;
			}
			else {
				_Alty_traits::construct(_Al, ::std::addressof(_My_data._Bx._Ptr), _New_ptr);
			}

			return *this;
		}

		template <class _Fty, class... _ArgTys>
		basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {


			auto& _My_data = _Get_data();
			const size_type _Old_size = _My_data._Mysize;
			if (max_size() - _Old_size < _Size_increase) {
				_Xlen();
			}

			const size_type _New_size = _Old_size + _Size_increase;
			const size_type _Old_capacity = _My_data._Myres;
			const size_type _New_capacity = _Calculate_growth(_New_size);
			auto& _Al = _Getal();
			const pointer _New_ptr = _Al.allocate(_New_capacity + 1);
			_My_data._Orphan_all();
			_My_data._Mysize = _New_size;
			_My_data._Myres = _New_capacity;
			_Elem* const _Raw_new = _Unfancy(_New_ptr);
			if (_BUF_SIZE <= _Old_capacity) {
				const pointer _Old_ptr = _My_data._Bx._Ptr;
				_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
				_Al.deallocate(_Old_ptr, _Old_capacity + 1);
				_My_data._Bx._Ptr = _New_ptr;
			}
			else {
				_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
				_Alty_traits::construct(_Al, ::std::addressof(_My_data._Bx._Ptr), _New_ptr);
			}

			return *this;
		}

		void _Become_small() {



			auto& _My_data = _Get_data();
			_My_data._Orphan_all();
			const pointer _Ptr = _My_data._Bx._Ptr;
			auto& _Al = _Getal();
			_Alty_traits::destroy(_Al, ::std::addressof(_My_data._Bx._Ptr));
			_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);
			_Al.deallocate(_Ptr, _My_data._Myres + 1);
			_My_data._Myres = _BUF_SIZE - 1;
		}

		void _Eos(const size_type _Newsize) {
			auto& _My_data = _Get_data();
			_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());
		}

		void _Tidy_init() noexcept {
			auto& _My_data = _Get_data();
			_My_data._Mysize = 0;
			_My_data._Myres = _BUF_SIZE - 1;


			_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

		void _Tidy_deallocate() noexcept {
			auto& _My_data = _Get_data();
			_My_data._Orphan_all();
			if (_My_data._Large_string_engaged()) {
				const pointer _Ptr = _My_data._Bx._Ptr;
				auto& _Al = _Getal();
				_Alty_traits::destroy(_Al, ::std::addressof(_My_data._Bx._Ptr));
				_Al.deallocate(_Ptr, _My_data._Myres + 1);
			}

			_My_data._Mysize = 0;
			_My_data._Myres = _BUF_SIZE - 1;


			_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

		[[noreturn]] static void _Xlen() {
			_Xlength_error("string too long");
		}

	public:
		void _Orphan_all() noexcept {
			_Get_data()._Orphan_all();
		}

	private:
		void _Swap_proxy_and_iterators(basic_string& _Right) {
			_Get_data()._Swap_proxy_and_iterators(_Right._Get_data());
		}

		_Alty& _Getal() noexcept {
			return _Mypair._Get_first();
		}

		const _Alty& _Getal() const noexcept {
			return _Mypair._Get_first();
		}

		_Scary_val& _Get_data() noexcept {
			return _Mypair._Myval2;
		}

		const _Scary_val& _Get_data() const noexcept {
			return _Mypair._Myval2;
		}

		_Compressed_pair<_Alty, _Scary_val> _Mypair;
	};

















#line 4124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

	template <class _Elem, class _Traits, class _Alloc>
	inline void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

		_Left.swap(_Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		basic_string<_Elem, _Traits, _Alloc> _Ans;
		_Ans.reserve(_Left.size() + _Right.size());
		_Ans += _Left;
		_Ans += _Right;
		return _Ans;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {
		using _String_type = basic_string<_Elem, _Traits, _Alloc>;
		using _Size_type   = typename _String_type::size_type;
		_String_type _Ans;
		_Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));
		_Ans += _Left;
		_Ans += _Right;
		return _Ans;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {
		basic_string<_Elem, _Traits, _Alloc> _Ans;
		_Ans.reserve(1 + _Right.size());
		_Ans += _Left;
		_Ans += _Right;
		return _Ans;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem* const _Right) {
		using _String_type = basic_string<_Elem, _Traits, _Alloc>;
		using _Size_type   = typename _String_type::size_type;
		_String_type _Ans;
		_Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));
		_Ans += _Left;
		_Ans += _Right;
		return _Ans;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right) {
		basic_string<_Elem, _Traits, _Alloc> _Ans;
		_Ans.reserve(_Left.size() + 1);
		_Ans += _Left;
		_Ans += _Right;
		return _Ans;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right) {
		return ::std::move(_Right.insert(0, _Left));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) {
		return ::std::move(_Left.append(_Right));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right) {
		if (_Right.size() <= _Left.capacity() - _Left.size() || _Right.capacity() - _Right.size() < _Left.size()) {
			return ::std::move(_Left.append(_Right));
		}
		else {
			return ::std::move(_Right.insert(0, _Left));
		}
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem* const _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {
		return ::std::move(_Right.insert(0, _Left));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {
		using size_type = typename allocator_traits<_Alloc>::size_type;
		return ::std::move(_Right.insert(static_cast<size_type>(0), static_cast<size_type>(1), _Left));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem* const _Right) {
		return ::std::move(_Left.append(_Right));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_string<_Elem, _Traits, _Alloc> operator+(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right) {
		_Left.push_back(_Right);
		return ::std::move(_Left);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return _Left._Equal(_Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator==(const _Elem* const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) {
		return _Right._Equal(_Left);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem* const _Right) {
		return _Left._Equal(_Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return !(_Left == _Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator!=(const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		return !(_Left == _Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem* const _Right) {

		return !(_Left == _Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return _Left.compare(_Right) < 0;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<(const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		return _Right.compare(_Left) > 0;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<(const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem* const _Right) {

		return _Left.compare(_Right) < 0;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return _Right < _Left;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>(const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		return _Right < _Left;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>(const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem* const _Right) {

		return _Right < _Left;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<=(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return !(_Right < _Left);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<=(const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		return !(_Right < _Left);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator<=(const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem* const _Right) {

		return !(_Right < _Left);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>=(const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {
		return !(_Left < _Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>=(const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

		return !(_Left < _Right);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline bool operator>=(const basic_string<_Elem, _Traits, _Alloc>& _Left, const _Elem* const _Right) {

		return !(_Left < _Right);
	}

	using string  = basic_string<char, char_traits<char>, allocator<char>>;
	using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;



	using u16string = basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>;
	using u32string = basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>;


	template <class _Elem, class _Traits, class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc>> {
		typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
		typedef size_t result_type;

		size_t operator()(const basic_string<_Elem, _Traits, _Alloc>& _Keyval) const noexcept {

			return _Hash_array_representation(_Keyval.c_str(), _Keyval.size());
		}
	};


	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {
		using _Myis   = basic_istream<_Elem, _Traits>;
		using _Ctype  = typename _Myis::_Ctype;
		using _Mystr  = basic_string<_Elem, _Traits, _Alloc>;
		using _Mysizt = typename _Mystr::size_type;

		typename _Myis::iostate _State = _Myis::goodbit;
		bool _Changed = false;
		const typename _Myis::sentry _Ok(_Istr);

		if (_Ok) {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Istr.getloc());
			_Str.erase();

			try {
				_Mysizt _Size =
					0 < _Istr.width() && (_Mysizt)_Istr.width() < _Str.max_size() ? (_Mysizt)_Istr.width() : _Str.max_size();
				typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

				for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc()) {
					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State |= _Myis::eofbit;
						break;
					}
					else if (_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {
						break;
					}
					else {
						_Str.push_back(_Traits::to_char_type(_Meta));
						_Changed = true;
					}
				}
			}
			catch (...) { (_Istr).setstate(_Myis::badbit, true); }
		}

		_Istr.width(0);
		if (!_Changed) {
			_State |= _Myis::failbit;
		}

		_Istr.setstate(_State);
		return _Istr;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, basic_string<_Elem, _Traits, _Alloc>& _Str) {
		return ::std::move(_Istr) >> _Str;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {
		return _Insert_string(_Ostr, _Str.data(), _Str.size());
	}


	inline namespace literals {
		inline namespace string_literals {
			inline string operator"" s(const char* _Str, size_t _Len) {

				return string(_Str, _Len);
			}

			inline wstring operator"" s(const wchar_t* _Str, size_t _Len) {

				return wstring(_Str, _Len);
			}






#line 4439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"

			inline u16string operator"" s(
				const char16_t* _Str, size_t _Len) {
				return u16string(_Str, _Len);
			}

			inline u32string operator"" s(const char32_t* _Str, size_t _Len) {

				return u32string(_Str, _Len);
			}
		}
	}














#line 4466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
}



#pragma warning(pop)
#pragma pack(pop)
#line 4473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"
#line 4474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )



namespace std {

	class logic_error : public exception {
	public:
		using _Mybase = exception;

		explicit logic_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit logic_error(const char* _Message) : _Mybase(_Message) {
		}








#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class domain_error : public logic_error {
	public:
		using _Mybase = logic_error;

		explicit domain_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit domain_error(const char* _Message) : _Mybase(_Message) {
		}








#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class invalid_argument : public logic_error {
	public:
		using _Mybase = logic_error;

		explicit invalid_argument(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit invalid_argument(const char* _Message) : _Mybase(_Message) {
		}








#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class length_error : public logic_error {
	public:
		using _Mybase = logic_error;

		explicit length_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit length_error(const char* _Message) : _Mybase(_Message) {
		}








#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class out_of_range : public logic_error {
	public:
		using _Mybase = logic_error;

		explicit out_of_range(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit out_of_range(const char* _Message) : _Mybase(_Message) {
		}








#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class runtime_error : public exception {
	public:
		using _Mybase = exception;

		explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit runtime_error(const char* _Message) : _Mybase(_Message) {
		}








#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class overflow_error : public runtime_error {
	public:
		using _Mybase = runtime_error;

		explicit overflow_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit overflow_error(const char* _Message) : _Mybase(_Message) {
		}








#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class underflow_error : public runtime_error {
	public:
		using _Mybase = runtime_error;

		explicit underflow_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit underflow_error(const char* _Message) : _Mybase(_Message) {
		}








#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};


	class range_error : public runtime_error {
	public:
		using _Mybase = runtime_error;

		explicit range_error(const string& _Message) : _Mybase(_Message.c_str()) {
		}

		explicit range_error(const char* _Message) : _Mybase(_Message) {
		}








#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
	};
}


#pragma warning(pop)
#pragma pack(pop)
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\stdexcept"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xcall_once.h"

#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	struct once_flag {
		constexpr once_flag() noexcept : _Opaque(nullptr) {}

		once_flag(const once_flag&) = delete;
		once_flag& operator=(const once_flag&) = delete;

		void* _Opaque;
	};

	using _Execute_once_fp_t = int(__stdcall*)(void*, void*, void**);

	int __cdecl _Execute_once(
		once_flag& _Flag, _Execute_once_fp_t _Callback, void* _Pv) noexcept;

}



#pragma warning(pop)
#pragma pack(pop)
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xcall_once.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xcall_once.h"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xerrc.h"

#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	enum class errc {
		address_family_not_supported = 102,
		address_in_use = 100,
		address_not_available = 101,
		already_connected = 113,
		argument_list_too_long = 7,
		argument_out_of_domain = 33,
		bad_address = 14,
		bad_file_descriptor = 9,
		bad_message = 104,
		broken_pipe = 32,
		connection_aborted = 106,
		connection_already_in_progress = 103,
		connection_refused = 107,
		connection_reset = 108,
		cross_device_link = 18,
		destination_address_required = 109,
		device_or_resource_busy = 16,
		directory_not_empty = 41,
		executable_format_error = 8,
		file_exists = 17,
		file_too_large = 27,
		filename_too_long = 38,
		function_not_supported = 40,
		host_unreachable = 110,
		identifier_removed = 111,
		illegal_byte_sequence = 42,
		inappropriate_io_control_operation = 25,
		interrupted = 4,
		invalid_argument = 22,
		invalid_seek = 29,
		io_error = 5,
		is_a_directory = 21,
		message_size = 115,
		network_down = 116,
		network_reset = 117,
		network_unreachable = 118,
		no_buffer_space = 119,
		no_child_process = 10,
		no_link = 121,
		no_lock_available = 39,
		no_message_available = 120,
		no_message = 122,
		no_protocol_option = 123,
		no_space_on_device = 28,
		no_stream_resources = 124,
		no_such_device_or_address = 6,
		no_such_device = 19,
		no_such_file_or_directory = 2,
		no_such_process = 3,
		not_a_directory = 20,
		not_a_socket = 128,
		not_a_stream = 125,
		not_connected = 126,
		not_enough_memory = 12,
		not_supported = 129,
		operation_canceled = 105,
		operation_in_progress = 112,
		operation_not_permitted = 1,
		operation_not_supported = 130,
		operation_would_block = 140,
		owner_dead = 133,
		permission_denied = 13,
		protocol_error = 134,
		protocol_not_supported = 135,
		read_only_file_system = 30,
		resource_deadlock_would_occur = 36,
		resource_unavailable_try_again = 11,
		result_out_of_range = 34,
		state_not_recoverable = 127,
		stream_timeout = 137,
		text_file_busy = 139,
		timed_out = 138,
		too_many_files_open_in_system = 23,
		too_many_files_open = 24,
		too_many_links = 31,
		too_many_symbolic_link_levels = 114,
		value_too_large = 132,
		wrong_protocol_type = 136
	};

}



#pragma warning(pop)
#pragma pack(pop)

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xerrc.h"
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xerrc.h"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	enum class io_errc {
		stream = 1
	};


	template <class _Enum>
	struct is_error_code_enum : false_type {
	};

	template <>
	struct is_error_code_enum<io_errc> : true_type {
	};

	template <class _Ty>
	constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;


	template <class _Enum>
	struct is_error_condition_enum : false_type {
	};

	template <>
	struct is_error_condition_enum<errc> : true_type {
	};

	template <class _Ty>
	constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;

	class error_code;
	class error_condition;
	error_code make_error_code(errc) noexcept;
	error_code make_error_code(io_errc) noexcept;
	error_condition make_error_condition(errc) noexcept;
	error_condition make_error_condition(io_errc) noexcept;


	class error_category;

	const error_category& generic_category() noexcept;
	const error_category& iostream_category() noexcept;
	const error_category& system_category() noexcept;

	class __declspec(novtable) error_category {
	public:
		error_category() noexcept {
			_Addr = reinterpret_cast<uintptr_t>(this);
		}

		virtual ~error_category() noexcept {}

		virtual const char* name() const noexcept = 0;

		virtual string message(int _Errval) const = 0;

		virtual error_condition default_error_condition(int _Errval) const noexcept;

		virtual bool equivalent(int _Errval, const error_condition& _Cond) const noexcept;

		virtual bool equivalent(const error_code& _Code, int _Errval) const noexcept;

		bool operator==(const error_category& _Right) const noexcept {
			return _Addr == _Right._Addr;
		}

		bool operator!=(const error_category& _Right) const noexcept {
			return !(*this == _Right);
		}

		bool operator<(const error_category& _Right) const noexcept {
			return _Addr < _Right._Addr;
		}

		error_category(const error_category&) = delete;
		error_category& operator=(const error_category&) = delete;

	protected:
		uintptr_t _Addr;

		enum : uintptr_t {
			_Future_addr = 1,
			_Generic_addr = 3,
			_Iostream_addr = 5,
			_System_addr = 7
		};
	};


	class error_code {
	public:
		error_code() noexcept : _Myval(0), _Mycat(&system_category()) {
		}

		error_code(int _Val, const error_category& _Cat) noexcept
			: _Myval(_Val), _Mycat(&_Cat) {
		}

		template <class _Enum, enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code(_Enum _Errcode) noexcept : _Myval(0), _Mycat(nullptr) {
			*this = make_error_code(_Errcode);
		}

		void assign(int _Val, const error_category& _Cat) noexcept {
			_Myval = _Val;
			_Mycat = &_Cat;
		}

		template <class _Enum, enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code & operator=(_Enum _Errcode) noexcept {

			*this = make_error_code(_Errcode);
			return *this;
		}

		void clear() noexcept {
			_Myval = 0;
			_Mycat = &system_category();
		}

		int value() const noexcept {
			return _Myval;
		}

		const error_category& category() const noexcept {
			return *_Mycat;
		}

		error_condition default_error_condition() const noexcept;

		string message() const {
			return category().message(value());
		}

		explicit operator bool() const noexcept {
			return value() != 0;
		}

	private:
		int _Myval;
		const error_category* _Mycat;
	};


	class error_condition {
	public:
		error_condition() noexcept : _Myval(0), _Mycat(&generic_category()) {
		}

		error_condition(int _Val, const error_category& _Cat) noexcept
			: _Myval(_Val), _Mycat(&_Cat) {
		}

		template <class _Enum, enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition(_Enum _Errcode) noexcept : _Myval(0), _Mycat(nullptr) {
			*this = make_error_condition(_Errcode);
		}

		void assign(int _Val, const error_category& _Cat) noexcept {
			_Myval = _Val;
			_Mycat = &_Cat;
		}

		template <class _Enum, enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition & operator=(_Enum _Errcode) noexcept {

			*this = make_error_condition(_Errcode);
			return *this;
		}

		void clear() noexcept {
			_Myval = 0;
			_Mycat = &generic_category();
		}

		int value() const noexcept {
			return _Myval;
		}

		const error_category& category() const noexcept {
			return *_Mycat;
		}

		string message() const {
			return category().message(value());
		}

		explicit operator bool() const noexcept {
			return value() != 0;
		}

	private:
		int _Myval;
		const error_category* _Mycat;
	};


	inline bool operator==(
		const error_code& _Left, const error_code& _Right) noexcept {
		return _Left.category() == _Right.category() && _Left.value() == _Right.value();
	}

	inline bool operator==(
		const error_code& _Left, const error_condition& _Right) noexcept {
		return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value());
	}

	inline bool operator==(
		const error_condition& _Left, const error_code& _Right) noexcept {
		return _Right.category().equivalent(_Right.value(), _Left) || _Left.category().equivalent(_Right, _Left.value());
	}

	inline bool operator==(
		const error_condition& _Left, const error_condition& _Right) noexcept {
		return _Left.category() == _Right.category() && _Left.value() == _Right.value();
	}


	inline bool operator!=(
		const error_code& _Left, const error_code& _Right) noexcept {
		return !(_Left == _Right);
	}

	inline bool operator!=(
		const error_code& _Left, const error_condition& _Right) noexcept {
		return !(_Left == _Right);
	}

	inline bool operator!=(
		const error_condition& _Left, const error_code& _Right) noexcept {
		return !(_Left == _Right);
	}

	inline bool operator!=(
		const error_condition& _Left, const error_condition& _Right) noexcept {
		return !(_Left == _Right);
	}


	inline bool operator<(const error_code& _Left, const error_code& _Right) noexcept {
		return _Left.category() < _Right.category()
			|| (_Left.category() == _Right.category() && _Left.value() < _Right.value());
	}

	inline bool operator<(
		const error_condition& _Left, const error_condition& _Right) noexcept {
		return _Left.category() < _Right.category()
			|| (_Left.category() == _Right.category() && _Left.value() < _Right.value());
	}


	inline error_condition error_category::default_error_condition(int _Errval) const
		noexcept {
		return error_condition(_Errval, *this);
	}

	inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const
		noexcept {
		return default_error_condition(_Errval) == _Cond;
	}

	inline bool error_category::equivalent(const error_code& _Code, int _Errval) const
		noexcept {
		return *this == _Code.category() && _Code.value() == _Errval;
	}


	inline error_condition error_code::default_error_condition() const
		noexcept {
		return category().default_error_condition(value());
	}


	inline error_code make_error_code(errc _Errno) noexcept {
		return error_code((int)_Errno, generic_category());
	}

	inline error_code make_error_code(io_errc _Errno) noexcept {
		return error_code((int)_Errno, iostream_category());
	}


	inline error_condition make_error_condition(errc _Errno) noexcept {
		return error_condition((int)_Errno, generic_category());
	}

	inline error_condition make_error_condition(io_errc _Errno) noexcept {
		return error_condition((int)_Errno, iostream_category());
	}


	template <>
	struct hash<error_code> {
		typedef error_code argument_type;
		typedef size_t result_type;

		size_t operator()(const error_code& _Keyval) const
			noexcept {
			return hash<int>{}(_Keyval.value());
		}
	};

	template <>
	struct hash<error_condition> {
		typedef error_condition argument_type;
		typedef size_t result_type;

		size_t operator()(const error_condition& _Keyval) const
			noexcept {
			return hash<int>{}(_Keyval.value());
		}
	};


	class _System_error : public runtime_error {
	private:
		static string _Makestr(error_code _Errcode, string _Message) {
			if (!_Message.empty()) {
				_Message.append(": ");
			}

			_Message.append(_Errcode.message());
			return _Message;
		}

	protected:
		_System_error(error_code _Errcode, const string& _Message)
			: runtime_error(_Makestr(_Errcode, _Message)),
			_Mycode(_Errcode) {
		}

		error_code _Mycode;
	};

	class system_error : public _System_error {
	private:
		using _Mybase = _System_error;

	public:
		system_error(error_code _Errcode) : _Mybase(_Errcode, "") {
		}

		system_error(error_code _Errcode, const string& _Message)
			: _Mybase(_Errcode, _Message) {
		}

		system_error(error_code _Errcode, const char* _Message)
			: _Mybase(_Errcode, _Message) {
		}

		system_error(int _Errval, const error_category& _Errcat)
			: _Mybase(error_code(_Errval, _Errcat), "") {
		}

		system_error(int _Errval, const error_category& _Errcat, const string& _Message)
			: _Mybase(error_code(_Errval, _Errcat), _Message) {
		}

		system_error(int _Errval, const error_category& _Errcat, const char* _Message)
			: _Mybase(error_code(_Errval, _Errcat), _Message) {
		}

		const error_code& code() const noexcept {
			return _Mycode;
		}








#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"
	};

	const char* __cdecl _Syserror_map(int);
	int __cdecl _Winerror_map(int);
	unsigned long __cdecl _Winerror_message(
		unsigned long _Message_id, char* _Narrow, unsigned long _Size);


	class _Generic_error_category : public error_category {
	public:
		_Generic_error_category() noexcept {
			_Addr = _Generic_addr;
		}

		virtual const char* name() const noexcept override {
			return "generic";
		}

		virtual string message(int _Errcode) const override {
			return _Syserror_map(_Errcode);
		}
	};


	class _Iostream_error_category : public _Generic_error_category {
	public:
		_Iostream_error_category() noexcept {
			_Addr = _Iostream_addr;
		}

		virtual const char* name() const noexcept override {
			return "iostream";
		}

		virtual string message(int _Errcode) const override {
			if (_Errcode == (int)io_errc::stream) {
				return "iostream stream error";
			}
			else {
				return _Generic_error_category::message(_Errcode);
			}
		}
	};


	class _System_error_category : public error_category {
	public:
		_System_error_category() noexcept {
			_Addr = _System_addr;
		}

		virtual const char* name() const noexcept override {
			return "system";
		}

		virtual string message(int _Errcode) const override {
			const unsigned long _Size = 32767;
			string _Narrow(_Size, '\0');

			const unsigned long _Val = _Winerror_message(static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);
			if (_Val == 0) {
				_Narrow = "unknown error";
			}
			else {
				_Narrow.resize(_Val);
			}

			_Narrow.shrink_to_fit();
			return _Narrow;
		}

		virtual error_condition default_error_condition(int _Errval) const
			noexcept override {
			const int _Posv = _Winerror_map(_Errval);
			if (_Posv == 0) {
				return error_condition(_Errval, system_category());
			}
			else {
				return error_condition(_Posv, generic_category());
			}
		}
	};




















	template <class _Ty>
	inline int __stdcall _Immortalize_impl(
		void*, void* _Storage_ptr, void**) noexcept {
		::new (_Storage_ptr) _Ty();
		return 1;
	}

	template <class _Ty>
	inline _Ty& _Immortalize() {
		static_assert(sizeof(void*) == sizeof(once_flag), "TRANSITION, VSO#406237");
		static_assert(alignof(void*) == alignof(once_flag), "TRANSITION, VSO#406237");
		static void* _Flag = nullptr;
		static aligned_union_t<1, _Ty> _Storage;
		if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage)
			== 0) {
			::std::terminate();
		}

		return reinterpret_cast<_Ty&>(_Storage);
	}
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"

	inline const error_category & generic_category() noexcept {
		return _Immortalize<_Generic_error_category>();
	}

	inline const error_category& iostream_category() noexcept {
		return _Immortalize<_Iostream_error_category>();
	}

	inline const error_category& system_category() noexcept {
		return _Immortalize<_System_error_category>();
	}
}


#pragma warning(pop)
#pragma pack(pop)
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\system_error"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"

#pragma once







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xfacet"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )









namespace std {

	class __declspec(dllimport) _Facet_base {
	public:
		virtual  ~_Facet_base() noexcept {
		}


		virtual void  _Incref() noexcept = 0;


		virtual _Facet_base* _Decref() noexcept = 0;
	};




#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xfacet"
	void __cdecl _Facet_Register(_Facet_base*);
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xfacet"
}


#pragma warning(pop)
#pragma pack(pop)
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xfacet"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xfacet"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {









	__declspec(dllimport) int __cdecl _isctype(int _C, int _Type);
	__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isalpha(int _C);
	__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isupper(int _C);
	__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl islower(int _C);
	__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale);


	__declspec(dllimport) int __cdecl isdigit(int _C);

	__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isxdigit(int _C);
	__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale);


	__declspec(dllimport) int __cdecl isspace(int _C);

	__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl ispunct(int _C);
	__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isblank(int _C);
	__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isalnum(int _C);
	__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isprint(int _C);
	__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl isgraph(int _C);
	__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl iscntrl(int _C);
	__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale);


	__declspec(dllimport) int __cdecl toupper(int _C);


	__declspec(dllimport) int __cdecl tolower(int _C);

	__declspec(dllimport) int __cdecl _tolower(int _C);
	__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale);
	__declspec(dllimport) int __cdecl _toupper(int _C);
	__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale);

	__declspec(dllimport) int __cdecl __isascii(int _C);
	__declspec(dllimport) int __cdecl __toascii(int _C);
	__declspec(dllimport) int __cdecl __iscsymf(int _C);
	__declspec(dllimport) int __cdecl __iscsym(int _C);








	__inline int __cdecl __acrt_locale_get_ctype_array_value(
		unsigned short const* const _Locale_pctype_array,
		int                    const _Char_value,
		int                    const _Mask
	)
	{




		if (_Char_value >= -1 && _Char_value <= 255)
		{
			return _Locale_pctype_array[_Char_value] & _Mask;
		}

		return 0;
	}





























	__declspec(dllimport) int __cdecl _chvalidator(int _Ch, int _Mask);




#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"














	__forceinline int __cdecl __ascii_tolower(int const _C)
	{
		if (_C >= 'A' && _C <= 'Z')
		{
			return _C - ('A' - 'a');
		}
		return _C;
	}

	__forceinline int __cdecl __ascii_toupper(int const _C)
	{
		if (_C >= 'a' && _C <= 'z')
		{
			return _C - ('a' - 'A');
		}
		return _C;
	}

	__forceinline int __cdecl __ascii_iswalpha(int const _C)
	{
		return (_C >= 'A' && _C <= 'Z') || (_C >= 'a' && _C <= 'z');
	}

	__forceinline int __cdecl __ascii_iswdigit(int const _C)
	{
		return _C >= '0' && _C <= '9';
	}

	__forceinline int __cdecl __ascii_towlower(int const _C)
	{
		return __ascii_tolower(_C);
	}

	__forceinline int __cdecl __ascii_towupper(int const _C)
	{
		return __ascii_toupper(_C);
	}
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"
















#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"

	__inline __crt_locale_data_public * __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
	{
		_locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
		return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
	}


	__declspec(dllimport) int __cdecl _chvalidator_l(_locale_t, int _Ch, int _Mask);
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"

	__inline int __cdecl _chvalidchk_l(
		int       const _C,
		int       const _Mask,
		_locale_t const _Locale
	)
	{

		return _chvalidator_l(_Locale, _C, _Mask);







#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"
	}




	__inline int __cdecl _ischartype_l(
		int       const _C,
		int       const _Mask,
		_locale_t const _Locale
	)
	{
		if (_Locale) {
			if (_C >= -1 && _C <= 255)
			{
				return __acrt_get_locale_data_prefix(_Locale)->_locale_pctype[_C] & _Mask;
			}

			if (__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
			{
				return _isctype_l(_C, _Mask, _Locale);
			}

			return 0;
		}

		return _chvalidchk_l(_C, _Mask, 0);
	}
































#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"







#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"



#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"
} __pragma(pack(pop))
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\ctype.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\locale.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {















	struct lconv
	{
		char* decimal_point;
		char* thousands_sep;
		char* grouping;
		char* int_curr_symbol;
		char* currency_symbol;
		char* mon_decimal_point;
		char* mon_thousands_sep;
		char* mon_grouping;
		char* positive_sign;
		char* negative_sign;
		char     int_frac_digits;
		char     frac_digits;
		char     p_cs_precedes;
		char     p_sep_by_space;
		char     n_cs_precedes;
		char     n_sep_by_space;
		char     p_sign_posn;
		char     n_sign_posn;
		wchar_t* _W_decimal_point;
		wchar_t* _W_thousands_sep;
		wchar_t* _W_int_curr_symbol;
		wchar_t* _W_currency_symbol;
		wchar_t* _W_mon_decimal_point;
		wchar_t* _W_mon_thousands_sep;
		wchar_t* _W_positive_sign;
		wchar_t* _W_negative_sign;
	};

	struct tm;























	__declspec(dllimport) void __cdecl _lock_locales(void);
	__declspec(dllimport) void __cdecl _unlock_locales(void);


	__declspec(dllimport) int __cdecl _configthreadlocale(
		int _Flag
	);


	__declspec(dllimport) char* __cdecl setlocale(
		int         _Category,
		char const* _Locale
	);


	__declspec(dllimport) struct lconv* __cdecl localeconv(void);


	__declspec(dllimport) _locale_t __cdecl _get_current_locale(void);


	__declspec(dllimport) _locale_t __cdecl _create_locale(
		int         _Category,
		char const* _Locale
	);

	__declspec(dllimport) void __cdecl _free_locale(
		_locale_t _Locale
	);



	__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
		int            _Category,
		wchar_t const* _Locale
	);


	__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
		int            _Category,
		wchar_t const* _Locale
	);



	__declspec(dllimport) wchar_t** __cdecl ___lc_locale_name_func(void);
	__declspec(dllimport) unsigned int __cdecl ___lc_codepage_func(void);
	__declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func(void);







	__declspec(dllimport) char* __cdecl _Getdays(void);



	__declspec(dllimport) char* __cdecl _Getmonths(void);

	__declspec(dllimport) void* __cdecl _Gettnames(void);



	__declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);



	__declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

	__declspec(dllimport) void* __cdecl _W_Gettnames(void);


	__declspec(dllimport) size_t __cdecl _Strftime(
		char* _Buffer,
		size_t           _Max_size,
		char const* _Format,
		struct tm const* _Timeptr,
		void* _Lc_time_arg);


	__declspec(dllimport) size_t __cdecl _Wcsftime(
		wchar_t* _Buffer,
		size_t           _Max_size,
		wchar_t const* _Format,
		struct tm const* _Timeptr,
		void* _Lc_time_arg
	);

#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\locale.h"


} __pragma(pack(pop))
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\locale.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"



#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )






extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"


































	typedef struct _Collvec {
		unsigned int _Page;
		wchar_t* _LocaleName;
	} _Collvec;

	typedef struct _Ctypevec {
		unsigned int _Page;
		const short* _Table;
		int _Delfl;
		wchar_t* _LocaleName;
	} _Ctypevec;

	typedef struct _Cvtvec {
		unsigned int _Page;
		unsigned int _Mbcurmax;
		int _Isclocale;
		unsigned char _Isleadbyte[32];
	} _Cvtvec;


	_Collvec __cdecl _Getcoll(void);
	_Ctypevec __cdecl _Getctype(void);
	_Cvtvec __cdecl _Getcvt(void);



	extern "C"
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"
		int __cdecl
		_Getdateorder(void);
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"







	int __cdecl _Mbrtowc(wchar_t*, const char*, size_t, mbstate_t*, const _Cvtvec*);
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"

	float __cdecl _Stof(const char*, char**, long);
	double __cdecl _Stod(const char*, char**, long);
	long double __cdecl _Stold(const char*, char**, long);

	int __cdecl _Strcoll(const char*, const char*, const char*, const char*, const _Collvec*);
	size_t __cdecl _Strxfrm(
		char* _String1,
		char* _End1, const char*, const char*, const _Collvec*);
	int __cdecl _Tolower(int, const _Ctypevec*);
	int __cdecl _Toupper(int, const _Ctypevec*);
	int __cdecl _Wcrtomb(char*, wchar_t, mbstate_t*, const _Cvtvec*);
	int __cdecl _Wcscoll(
		const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const _Collvec*);
	size_t __cdecl _Wcsxfrm(
		wchar_t* _String1,
		wchar_t* _End1, const wchar_t*, const wchar_t*, const _Collvec*);

	short __cdecl _Getwctype(wchar_t, const _Ctypevec*);
	const wchar_t* __cdecl _Getwctypes(
		const wchar_t*, const wchar_t*, short*, const _Ctypevec*);
	wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec*);
	wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec*);



}
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"

extern "C" {
	__declspec(dllimport) char* __cdecl _Getdays(void);

	__declspec(dllimport) char* __cdecl _Getmonths(void);

	__declspec(dllimport) void* __cdecl _Gettnames(void);

	__declspec(dllimport) size_t __cdecl _Strftime(
		char*, size_t _Maxsize, const char*, const struct tm*, void*);

	__declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);

	__declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

	__declspec(dllimport) void* __cdecl _W_Gettnames(void);

	__declspec(dllimport) size_t __cdecl _Wcsftime(wchar_t*, size_t _Maxsize,
		const wchar_t*, const struct tm*, void*);
}







_locale_t __cdecl _GetLocaleForCP(unsigned int);
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"



#pragma warning(pop)
#pragma pack(pop)
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"



#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	class __declspec(dllimport) _Timevec {
	public:
		_Timevec(void* _Ptr = nullptr) : _Timeptr(_Ptr) {
		}

		_Timevec(const _Timevec& _Right) {
			*this = _Right;
		}

		~_Timevec() noexcept {
			free(_Timeptr);
		}

		_Timevec& operator=(const _Timevec& _Right) {

			_Timeptr = _Right._Timeptr;
			((_Timevec*)& _Right)->_Timeptr = nullptr;
			return *this;
		}

		void* _Getptr() const {
			return _Timeptr;
		}

	private:
		void* _Timeptr;
	};


	class __declspec(dllimport) _Locinfo {
	public:
		using _Collvec  = ::_Collvec;
		using _Ctypevec = ::_Ctypevec;
		using _Cvtvec   = ::_Cvtvec;
		using _Timevec  = ::std::_Timevec;

		static  void __cdecl _Locinfo_ctor(_Locinfo*, const char*);
		static  void __cdecl _Locinfo_ctor(_Locinfo*, int, const char*);
		static  void __cdecl _Locinfo_dtor(_Locinfo*);
		static  _Locinfo& __cdecl _Locinfo_Addcats(_Locinfo*, int, const char*);

		_Locinfo(const char* _Pch = "C")

			: _Lock(0)
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"

		{
			if (_Pch == nullptr) {
				_Xruntime_error("bad locale name");
			}

			_Locinfo_ctor(this, _Pch);
		}

		_Locinfo(int _Cat, const char* _Pch)

			: _Lock(0)
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"

		{
			if (_Pch == nullptr) {
				_Xruntime_error("bad locale name");
			}

			_Locinfo_ctor(this, _Cat, _Pch);
		}

		~_Locinfo() noexcept {
			_Locinfo_dtor(this);
		}

		_Locinfo& _Addcats(int _Cat, const char* _Pch) {
			if (_Pch == nullptr) {
				_Xruntime_error("bad locale name");
			}

			return _Locinfo_Addcats(this, _Cat, _Pch);
		}

		const char* _Getname() const {
			return _Newlocname._C_str();
		}

		_Collvec  _Getcoll() const {
			return ::_Getcoll();
		}

		_Ctypevec  _Getctype() const {
			return ::_Getctype();
		}

		_Cvtvec  _Getcvt() const {
			return ::_Getcvt();
		}

		const lconv* _Getlconv() const {
			return localeconv();
		}

		_Timevec  _Gettnames() const {
			return _Timevec(::_Gettnames());
		}

		const char* _Getdays() const {
			const char* _Ptr = ::_Getdays();

			if (_Ptr != nullptr) {
				((_Locinfo*)this)->_Days = _Ptr;
				free((void*)_Ptr);
			}
			return !_Days._Empty() ? _Days._C_str()
				: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday";
		}

		const char* _Getmonths() const {
			const char* _Ptr = ::_Getmonths();

			if (_Ptr != nullptr) {
				((_Locinfo*)this)->_Months = _Ptr;
				free((void*)_Ptr);
			}
			return !_Months._Empty() ? _Months._C_str()
				: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December";
		}

		const char* _Getfalse() const {
			return "false";
		}

		const char* _Gettrue() const {
			return "true";
		}

		int  _Getdateorder() const {
			return ::_Getdateorder();
		}

		_Timevec  _W_Gettnames() const {
			return _Timevec(::_W_Gettnames());
		}

		const unsigned short* _W_Getdays() const {
			const wchar_t* _Ptr = ::_W_Getdays();

			if (_Ptr != nullptr) {
				((_Locinfo*)this)->_W_Days = _Ptr;
				free((void*)_Ptr);
			}
			return (const unsigned short*)(!_W_Days._Empty() ? _W_Days._C_str()
				: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

		const unsigned short* _W_Getmonths() const {
			const wchar_t* _Ptr = ::_W_Getmonths();

			if (_Ptr != nullptr) {
				((_Locinfo*)this)->_W_Months = _Ptr;
				free((void*)_Ptr);
			}
			return (const unsigned short*)(!_W_Months._Empty() ? _W_Months._C_str()
				: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December");
		}

		_Locinfo(const _Locinfo&) = delete;
		_Locinfo& operator=(const _Locinfo&) = delete;

	private:




		_Lockit _Lock;
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"

		_Yarn<char> _Days;
		_Yarn<char> _Months;
		_Yarn<wchar_t> _W_Days;
		_Yarn<wchar_t> _W_Months;
		_Yarn<char> _Oldlocname;
		_Yarn<char> _Newlocname;
	};


	template <class _Elem>
	inline int __cdecl _LStrcoll(const _Elem* _First1, const _Elem* _Last1, const _Elem* _First2, const _Elem* _Last2,
		const _Locinfo::_Collvec*) {
		for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2) {
			if (*_First1 < *_First2) {
				return -1;
			}
			else if (*_First2 < *_First1) {
				return +1;
			}
		}

		return _First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0;
	}

	template <>
	inline int __cdecl _LStrcoll(const char* _First1, const char* _Last1, const char* _First2, const char* _Last2,
		const _Locinfo::_Collvec* _Vector) {
		return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector);
	}

	template <>
	inline int __cdecl _LStrcoll(const wchar_t* _First1, const wchar_t* _Last1, const wchar_t* _First2,
		const wchar_t* _Last2,
		const _Locinfo::_Collvec* _Vector) {
		return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector);
	}


	template <class _Elem>
	inline size_t __cdecl _LStrxfrm(_Elem* _First1, _Elem* _Last1, const _Elem* _First2, const _Elem* _Last2,
		const _Locinfo::_Collvec*) {
		const ptrdiff_t _Count = _Last2 - _First2;
		if (_Count <= _Last1 - _First1) {
			::memcpy(_First1, _First2, _Count * sizeof(_Elem));
		}

		return _Count;
	}

	template <>
	inline size_t __cdecl _LStrxfrm(char* _First1,
		char* _Last1, const char* _First2, const char* _Last2,
		const _Locinfo::_Collvec* _Vector) {
		return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector);
	}

	template <>
	inline size_t __cdecl _LStrxfrm(wchar_t* _First1,
		wchar_t* _Last1, const wchar_t* _First2, const wchar_t* _Last2,
		const _Locinfo::_Collvec* _Vector) {
		return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector);
	}
}


#pragma warning(pop)
#pragma pack(pop)
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocinfo"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Dummy>
	class _Locbase {
	public:
		static const int collate = ((1 << (1)) >> 1);
		static const int ctype = ((1 << (2)) >> 1);
		static const int monetary = ((1 << (3)) >> 1);
		static const int numeric = ((1 << (4)) >> 1);
		static const int time = ((1 << (5)) >> 1);
		static const int messages = ((1 << (6)) >> 1);
		static const int all = (((1 << ((6 + 1))) >> 1) - 1);
		static const int none = 0;
	};

	template <class _Dummy>
	const int _Locbase<_Dummy>::collate;
	template <class _Dummy>
	const int _Locbase<_Dummy>::ctype;
	template <class _Dummy>
	const int _Locbase<_Dummy>::monetary;
	template <class _Dummy>
	const int _Locbase<_Dummy>::numeric;
	template <class _Dummy>
	const int _Locbase<_Dummy>::time;
	template <class _Dummy>
	const int _Locbase<_Dummy>::messages;
	template <class _Dummy>
	const int _Locbase<_Dummy>::all;
	template <class _Dummy>
	const int _Locbase<_Dummy>::none;


	template <class _Elem>
	class collate;

	struct __declspec(dllimport) _Crt_new_delete {

		void* __cdecl operator new(size_t _Size) {
			void* _Ptr = operator new(_Size, nothrow);
			if (!_Ptr) {
				_Xbad_alloc();
			}

			return _Ptr;
		}

		void* __cdecl operator new(size_t _Size, const nothrow_t&) noexcept {
			return _malloc_dbg(_Size > 0 ? _Size : 1, 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale", 68);
		}

		void __cdecl operator delete(void* _Ptr) noexcept {
			::free(_Ptr);
		}

		void __cdecl operator delete(void* _Ptr, const nothrow_t&) noexcept {
			operator delete(_Ptr);
		}

		void* __cdecl operator new(size_t, void* _Ptr) noexcept {
			return _Ptr;
		}

		void __cdecl operator delete(void*, void*) noexcept {
		}
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
	};

	class locale : public _Locbase<int>, public _Crt_new_delete {
	public:
		using category = int;


		class __declspec(dllimport) id {
		public:
			id(size_t _Val = 0) : _Id(_Val) {
			}

			id(const id&) = delete;
			id& operator=(const id&) = delete;

			operator size_t() {
				if (_Id == 0) {
					{ ::std::_Lockit _Lock(0);
					if (_Id == 0) {
						_Id = static_cast<size_t>(++_Id_cnt);
					}
					}
				}
				return _Id;
			}

		private:
			size_t _Id;

			static int _Id_cnt;
		};

		class _Locimp;


		class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete {

		private:
			friend struct _Facet_guard;

		public:
			static size_t __cdecl _Getcat(const facet** = nullptr, const locale* = nullptr) {

				return static_cast<size_t>(-1);
			}

			virtual void  _Incref() noexcept override {
				_InterlockedIncrement(reinterpret_cast<volatile long*>(&_Myrefs));
			}

			virtual _Facet_base* _Decref() noexcept override {
				if (_InterlockedDecrement(reinterpret_cast<volatile long*>(&_Myrefs)) == 0) {
					return this;
				}

				return nullptr;
			}

		private:
			_Atomic_counter_t _Myrefs;

		protected:
			explicit  facet(size_t _Initrefs = 0)
				: _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs))
			{}

			virtual  ~facet() noexcept override {
			}

		public:
			facet(const facet&) = delete;
			facet& operator=(const facet&) = delete;
		};

		struct _Facet_guard {
			facet* _Target;
			~_Facet_guard() {
				if (_Target) {
					delete _Target->_Decref();
				}
			}
		};


		class __declspec(dllimport) _Locimp : public facet {
		protected:
			~_Locimp() noexcept {
				_Locimp_dtor(this);
			}

		private:
			static  _Locimp* __cdecl _New_Locimp(bool _Transparent = false);
			static  _Locimp* __cdecl _New_Locimp(const _Locimp& _Right);

			static  void __cdecl _Locimp_dtor(_Locimp*);
			static  void __cdecl _Locimp_Addfac(_Locimp*, facet*, size_t);
			static void __cdecl _Locimp_ctor(_Locimp*, const _Locimp&);

			friend locale;

			_Locimp(bool _Transparent)
				: locale::facet(1), _Facetvec(nullptr), _Facetcount(0), _Catmask(none), _Xparent(_Transparent),
				_Name("*") {
			}

			_Locimp(const _Locimp& _Right)
				: locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask),
				_Xparent(_Right._Xparent), _Name(_Right._Name.c_str()) {
				_Locimp_ctor(this, _Right);
			}

			void  _Addfac(facet* _Pfacet, size_t _Id) {
				_Locimp_Addfac(this, _Pfacet, _Id);
			}

			static _Locimp* __cdecl _Makeloc(
				const _Locinfo&, category, _Locimp*, const locale*);

			static void __cdecl _Makewloc(
				const _Locinfo&, category, _Locimp*, const locale*);


			static void __cdecl _Makeushloc(
				const _Locinfo&, category, _Locimp*, const locale*);
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"

			static void __cdecl _Makexloc(
				const _Locinfo&, category, _Locimp*, const locale*);

			facet** _Facetvec;
			size_t _Facetcount;
			category _Catmask;
			bool _Xparent;
			_Yarn<char> _Name;

			static _Locimp* _Clocptr;

		public:
			_Locimp& operator=(const _Locimp&) = delete;
		};

		template <class _Elem, class _Traits, class _Alloc>
		bool operator()(
			const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) const {

			const auto& _Coll_fac = use_facet<::std::collate<_Elem>>(*this);

			const _Elem* const _Left_data = _Left.data();
			const _Elem* const _Right_data = _Right.data();
			return _Coll_fac.compare(_Left_data, _Left_data + _Left.size(), _Right_data, _Right_data + _Right.size()) < 0;
		}

		template <class _Facet>
		locale combine(const locale& _Loc) const {
			_Facet* _Facptr;

			try {
				_Facptr = const_cast<_Facet*>(::std::addressof(use_facet<_Facet>(_Loc)));
			}
			catch (...) {
				_Xruntime_error("locale::combine facet missing");
			}

			_Locimp* _Newimp = _Locimp::_New_Locimp(*_Ptr);
			_Newimp->_Addfac(_Facptr, _Facet::id);
			_Newimp->_Catmask = none;
			_Newimp->_Name = "*";
			return locale(_Newimp);
		}

		template <class _Facet>
		locale(const locale& _Loc, const _Facet* _Facptr) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {

			if (_Facptr != nullptr) {
				_Ptr->_Addfac(const_cast<_Facet*>(_Facptr), _Facet::id);
				_Ptr->_Catmask = none;
				_Ptr->_Name = "*";
			}
		}

		locale(_Uninitialized) {}

		locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {
			_Ptr->_Incref();
		}

		locale() noexcept : _Ptr(_Init(true)) {}


		locale(const locale& _Loc, const locale& _Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {

			if (_Cat != none) {
				_Facet_guard _Guard{ _Ptr };
				{ _Locinfo _Lobj;
				_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
				_Lobj._Addcats(_Loc._Ptr->_Catmask, _Loc.name().c_str());
				_Lobj._Addcats(_Other._Ptr->_Catmask, _Other.name().c_str());
				_Ptr->_Catmask = _Loc._Ptr->_Catmask | _Other._Ptr->_Catmask;
				_Ptr->_Name = _Lobj._Getname();
				}
				_Guard._Target = nullptr;
			}
		}

	private:
		void _Construct(const string& _Str, category _Cat) {

			bool _Bad = false;
			_Init();
			if (_Cat != none) {
				_Facet_guard _Guard{ _Ptr };
				{ _Locinfo _Lobj(_Cat, _Str.c_str());
				if (_Badname(_Lobj)) {
					_Bad = true;
				}
				else {
					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
					_Ptr->_Catmask = _Cat;
					_Ptr->_Name = _Str.c_str();
				}
				}
				_Guard._Target = nullptr;
			}

			if (_Bad) {
				delete _Ptr->_Decref();
				_Xruntime_error("bad locale name");
			}
		}

	public:
		explicit locale(const char* _Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {



			if (_Locname == nullptr) {
				_Xruntime_error("bad locale name");
			}

			_Construct(_Locname, _Cat);
		}

		locale(const locale& _Loc, const char* _Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {



			if (_Locname == nullptr) {
				_Xruntime_error("bad locale name");
			}

			_Construct(_Locname, _Cat);
		}

		explicit locale(const string& _Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {

			_Construct(_Str, _Cat);
		}

		locale(const locale& _Loc, const string& _Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {

			_Construct(_Str, _Cat);
		}
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"

		~locale() noexcept {
			if (_Ptr != nullptr) {
				delete _Ptr->_Decref();
			}
		}

		locale& operator=(const locale& _Right) noexcept {
			if (_Ptr != _Right._Ptr) {
				delete _Ptr->_Decref();
				_Ptr = _Right._Ptr;
				_Ptr->_Incref();
			}
			return *this;
		}

		string name() const {
			return _Ptr == nullptr ? string() : _Ptr->_Name.c_str();
		}

		const char* c_str() const {
			return _Ptr == nullptr ? "" : _Ptr->_Name.c_str();
		}

		const facet* _Getfacet(size_t _Id) const {
			const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr;
			if (_Facptr != nullptr || !_Ptr->_Xparent) {
				return _Facptr;
			}
			else {
				locale::_Locimp* _Ptr0 = _Getgloballocale();
				return _Id < _Ptr0->_Facetcount ? _Ptr0->_Facetvec[_Id]
					: nullptr;
			}
		}

		bool operator==(const locale& _Loc) const {
			return _Ptr == _Loc._Ptr || (name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
		}

		bool operator!=(const locale& _Right) const {
			return !(*this == _Right);
		}

		static  const locale& __cdecl classic();

		static  locale __cdecl global(const locale&);

		static  locale __cdecl empty();

	private:
		locale(_Locimp* _Ptrimp) : _Ptr(_Ptrimp) {}

		static  _Locimp* __cdecl _Init(bool _Do_incref = false);
		static  _Locimp* __cdecl _Getgloballocale();
		static  void __cdecl _Setgloballocale(void*);

		bool _Badname(const _Locinfo& _Lobj) {
			return ::strcmp(_Lobj._Getname(), "*") == 0;
		}

		_Locimp* _Ptr;
	};


	template <class _Facet>
	struct _Facetptr {
		static const locale::facet* _Psave;
	};

	template <class _Facet>
	const locale::facet* _Facetptr<_Facet>::_Psave = nullptr;

	template <class _Facet>
	inline const _Facet& __cdecl use_facet(const locale& _Loc) {
		{ ::std::_Lockit _Lock(0);
		const locale::facet* _Psave = _Facetptr<_Facet>::_Psave;

		const size_t _Id = _Facet::id;
		const locale::facet* _Pf = _Loc._Getfacet(_Id);

		if (_Pf == nullptr) {
			if (_Psave != nullptr) {
				_Pf = _Psave;
			}
			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

				throw bad_cast{};


#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
			}
			else {
				auto _Pfmod = const_cast<locale::facet*>(_Psave);
				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));



#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
				_Facet_Register(_Pfmod);
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"

				_Pfmod->_Incref();
				_Facetptr<_Facet>::_Psave = _Psave;
				_Pf = _Psave;

				(void)_Psave_guard.release();
			}
		}

		return static_cast<const _Facet&>(*_Pf);
		}
	}


	template <class _Elem, class _InIt>
	inline int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields, const _Elem* _Ptr) {

		for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off) {
			if (_Ptr[_Off] == _Ptr[0]) {
				++_Numfields;
			}
		}

		string _Str(_Numfields, '\0');

		int _Ans = -2;
		for (size_t _Column = 1;; ++_Column, (void) ++_First, _Ans = -1) {
			bool _Prefix = false;
			size_t _Off = 0;
			size_t _Field = 0;

			for (; _Field < _Numfields; ++_Field) {
				while (_Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]) {
					++_Off;
				}

				if (_Str[_Field] != '\0') {
					_Off += _Str[_Field];
				}
				else if (_Ptr[_Off += _Column] == _Ptr[0]
					|| _Ptr[_Off] == (_Elem)0) {
					_Str[_Field] = (char)(_Column < 127 ? _Column : 127);
					_Ans = (int)_Field;
				}
				else if (_First == _Last || _Ptr[_Off] != *_First) {
					_Str[_Field] = (char)(_Column < 127 ? _Column : 127);
				}
				else {
					_Prefix = true;
				}
			}

			if (!_Prefix || _First == _Last) {
				break;
			}
		}
		return _Ans;
	}


	template <class _Elem>
	inline char __cdecl _Maklocbyte(_Elem _Char, const _Locinfo::_Cvtvec&) {

		return (char)(unsigned char)_Char;
	}

	template <>
	inline char __cdecl _Maklocbyte(wchar_t _Char, const _Locinfo::_Cvtvec& _Cvt) {

		char _Byte = '\0';
		mbstate_t _Mbst1 = {};
		_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
		return _Byte;
	}


	template <>
	inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec& _Cvt) {

		char _Byte = '\0';
		mbstate_t _Mbst1 = {};
		_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
		return _Byte;
	}
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	template <class _Elem>
	inline _Elem __cdecl _Maklocchr(char _Byte, _Elem*, const _Locinfo::_Cvtvec&) {

		return (_Elem)(unsigned char)_Byte;
	}

	template <>
	inline wchar_t __cdecl _Maklocchr(char _Byte, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

		wchar_t _Wc = L'\0';
		mbstate_t _Mbst1 = {};
		_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
		return _Wc;
	}


	template <>
	inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short*, const _Locinfo::_Cvtvec& _Cvt) {

		unsigned short _Wc = (unsigned short)0;
		mbstate_t _Mbst1 = {};
		_Mbrtowc((wchar_t*)& _Wc, &_Byte, 1, &_Mbst1, &_Cvt);
		return _Wc;
	}
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	template <class _Elem>
	inline _Elem * __cdecl _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

		size_t _Count = ::strlen(_Ptr) + 1;

		_Elem* _Ptrdest = (_Elem*)_calloc_dbg(_Count, sizeof(_Elem), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale", 561);

		if (!_Ptrdest) {
			_Xbad_alloc();
		}

		for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {
			*_Ptrnext = (_Elem)(unsigned char)* _Ptr;
		}

		return _Ptrdest;
	}

	template <>
	inline wchar_t* __cdecl _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

		size_t _Count, _Count1;
		size_t _Wchars;
		const char* _Ptr1;
		int _Bytes;
		wchar_t _Wc;
		mbstate_t _Mbst1 = {};

		_Count1 = ::strlen(_Ptr) + 1;
		for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {
			if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {
				break;
			}
		}

		++_Wchars;

		wchar_t* _Ptrdest = (wchar_t*)_calloc_dbg(_Wchars, sizeof(wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale", 593);

		if (!_Ptrdest) {
			_Xbad_alloc();
		}

		wchar_t* _Ptrnext = _Ptrdest;
		mbstate_t _Mbst2 = {};

		for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {
			if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {
				break;
			}
		}

		*_Ptrnext = L'\0';

		return _Ptrdest;
	}


	template <>
	inline unsigned short* __cdecl _Maklocstr(const char* _Ptr, unsigned short*, const _Locinfo::_Cvtvec& _Cvt) {

		size_t _Count, _Count1;
		size_t _Wchars;
		const char* _Ptr1;
		int _Bytes;
		unsigned short _Wc;
		mbstate_t _Mbst1 = {};

		_Count1 = ::strlen(_Ptr) + 1;
		for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {
			if ((_Bytes = _Mbrtowc((wchar_t*)& _Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {
				break;
			}
		}

		++_Wchars;

		wchar_t* _Ptrdest = (wchar_t*)_calloc_dbg(_Wchars, sizeof(wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale", 633);

		if (!_Ptrdest) {
			_Xbad_alloc();
		}

		wchar_t* _Ptrnext = _Ptrdest;
		mbstate_t _Mbst2 = {};
		for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {
			if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {
				break;
			}
		}

		*_Ptrnext = L'\0';
		return (unsigned short*)_Ptrdest;
	}
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	class __declspec(dllimport) codecvt_base : public locale::facet {
	public:
		enum {
			ok,
			partial,
			error,
			noconv
		};
		using result = int;

		codecvt_base(size_t _Refs = 0) : locale::facet(_Refs) {}

		bool  always_noconv() const noexcept {

			return do_always_noconv();
		}

		int  max_length() const noexcept {

			return do_max_length();
		}

		int  encoding() const noexcept {
			return do_encoding();
		}

		~codecvt_base() noexcept {}

	protected:
		virtual bool  do_always_noconv() const noexcept {

			return false;
		}

		virtual int  do_max_length() const noexcept {

			return 1;
		}

		virtual int  do_encoding() const noexcept {
			return 1;
		}
	};


	template <class _Elem, class _Byte, class _Statype>
	class codecvt : public codecvt_base {
	public:








		static_assert(!0 || is_same_v<codecvt, codecvt<char, char, mbstate_t>>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using intern_type = _Elem;
		using extern_type = _Byte;
		using state_type  = _Statype;

		result  in(_Statype& _State, const _Byte* _First1, const _Byte* _Last1, const _Byte*& _Mid1,
			_Elem* _First2, _Elem* _Last2, _Elem*& _Mid2) const {
			return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  out(_Statype& _State, const _Elem* _First1, const _Elem* _Last1, const _Elem*& _Mid1,
			_Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const {
			return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  unshift(_Statype& _State, _Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const {

			return do_unshift(_State, _First2, _Last2, _Mid2);
		}

		int  length(_Statype& _State, const _Byte* _First1, const _Byte* _Last1, size_t _Count) const {


			return do_length(_State, _First1, _Last1, _Count);
		}

		static locale::id id;

		explicit  codecvt(size_t _Refs = 0) : codecvt_base(_Refs) {
			_Init(_Locinfo());
		}

		explicit  codecvt(const _Locinfo& _Lobj, size_t _Refs = 0) : codecvt_base(_Refs) {

			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~codecvt() noexcept {}

		void  _Init(const _Locinfo&) {}

		virtual bool  do_always_noconv() const noexcept override {

			return is_same_v<_Byte, _Elem>;
		}

		virtual result  do_in(_Statype&, const _Byte* _First1, const _Byte* _Last1, const _Byte*& _Mid1,
			_Elem* _First2, _Elem* _Last2, _Elem*& _Mid2) const {
			_Mid1 = _First1;
			_Mid2 = _First2;
			if
				constexpr (is_same_v<_Byte, _Elem>) {
				(void)_Last1;
				(void)_Last2;
				return noconv;
			}
			else {

				for (; _Mid1 != _Last1; ++_Mid1, ++_Mid2) {
					if (_Mid2 == _Last2) {
						return partial;
					}
					*_Mid2 = (_Elem)* _Mid1;
				}

				return ok;
			}
		}

		virtual result  do_out(_Statype&, const _Elem* _First1, const _Elem* _Last1, const _Elem*& _Mid1,
			_Byte* _First2, _Byte* _Last2, _Byte*& _Mid2) const {
			_Mid1 = _First1;
			_Mid2 = _First2;
			if
				constexpr (is_same_v<_Byte, _Elem>) {
				(void)_Last1;
				(void)_Last2;
				return noconv;
			}
			else {

				for (; _Mid1 != _Last1; ++_Mid1, ++_Mid2) {
					if (_Mid2 == _Last2) {
						return partial;
					}
					*_Mid2 = (_Byte)* _Mid1;
				}

				return ok;
			}
		}

		virtual result  do_unshift(_Statype&, _Byte* _First2, _Byte*, _Byte*& _Mid2) const {

			_Mid2 = _First2;
			return noconv;
		}

		virtual int  do_length(
			_Statype&, const _Byte* _First1, const _Byte* _Last1, size_t _Count) const {



			const auto _Dist = static_cast<size_t>(_Min_value(_Last1 - _First1, ptrdiff_t{ 2147483647 }));
			return static_cast<int>(_Min_value(_Count, _Dist));
		}
	};







	template <class _Elem, class _Byte, class _Statype>
	locale::id codecvt<_Elem, _Byte, _Statype>::id;






	template <class _CvtTy, class _Byte, class _Statype>
	inline int _Codecvt_do_length(
		const _CvtTy& _Cvt, _Statype& _State, const _Byte* _First1, const _Byte* _Last1, size_t _Count) {



#pragma warning(suppress : 4996) 
		using _Elem = typename _CvtTy::intern_type;

		_Adl_verify_range(_First1, _Last1);
		const auto _Old_first1 = _First1;

		while (_Count > 0 && _First1 != _Last1) {
			const _Byte* _Mid1;
			_Elem* _Mid2;
			_Elem _Ch;



#pragma warning(suppress : 4996) 
			const auto _Result = _Cvt._CvtTy::do_in(_State, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
			if (_Result != codecvt_base::ok) {
				if (_Result == codecvt_base::noconv) {
					_First1 += _Min_value(static_cast<size_t>(_Last1 - _First1), _Count);
				}

				break;
			}

			if (_Mid2 == &_Ch + 1) {
				--_Count;
			}

			_First1 = _Mid1;
		}

		return static_cast<int>(_Min_value(_First1 - _Old_first1, ptrdiff_t{ 2147483647 }));
	}


	enum _Codecvt_mode { _Consume_header = 4, _Generate_header = 2 };


	template <>
	class __declspec(dllimport)
		codecvt<char16_t, char, mbstate_t> : public codecvt_base {

	public:
		using intern_type = char16_t;
		using extern_type = char;
		using state_type  = mbstate_t;

		result  in(mbstate_t& _State, const char* _First1, const char* _Last1, const char*& _Mid1,
			char16_t* _First2, char16_t* _Last2, char16_t*& _Mid2) const {

			return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  out(mbstate_t& _State, const char16_t* _First1, const char16_t* _Last1,
			const char16_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_unshift(_State, _First2, _Last2, _Mid2);
		}

		int  length(mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			return do_length(_State, _First1, _Last1, _Count);
		}

		static locale::id id;

		explicit  codecvt(size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header) {
				{ _Locinfo _Lobj;
				_Init(_Lobj);
				}
		}

		explicit  codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header) {
			_Init(_Lobj);
		}

		codecvt(
			const _Locinfo& _Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) {

			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

			if (_Ppf != nullptr && *_Ppf == nullptr) {
#pragma warning(suppress : 4996) 
				* _Ppf = new codecvt(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~codecvt() noexcept {}

		void  _Init(const _Locinfo&) {}

		virtual result  do_in(mbstate_t& _State, const char* _First1, const char* _Last1,
			const char*& _Mid1, char16_t* _First2, char16_t* _Last2, char16_t*& _Mid2) const {

			unsigned short* _Pstate = (unsigned short*)& _State;
			_Mid1 = _First1;
			_Mid2 = _First2;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				unsigned char _By = (unsigned char)* _Mid1;
				unsigned long _Ch;
				int _Nextra, _Nskip;

				if (*_Pstate > 1) {
					if (_By < 0x80 || 0xc0 <= _By) {
						return codecvt::error;
					}


					++_Mid1;
					*_Mid2++ = (char16_t)(*_Pstate | (_By & 0x3f));
					*_Pstate = 1;
					continue;
				}

				if (_By < 0x80u) {
					_Ch = _By;
					_Nextra = 0;
				}
				else if (_By < 0xc0u) {
					++_Mid1;
					return codecvt::error;
				}
				else if (_By < 0xe0u) {
					_Ch = static_cast<unsigned long>(_By & 0x1f);
					_Nextra = 1;
				}
				else if (_By < 0xf0u) {
					_Ch = static_cast<unsigned long>(_By & 0x0f);
					_Nextra = 2;
				}
				else if (_By < 0xf8u) {
					_Ch = static_cast<unsigned long>(_By & 0x07);
					_Nextra = 3;
				}
				else {
					_Ch = static_cast<unsigned long>(_By & 0x03);
					_Nextra = _By < 0xfc ? 4 : 5;
				}

				_Nskip = _Nextra < 3 ? 0 : 1;
				_First1 = _Mid1;

				if (_Nextra == 0) {
					++_Mid1;
				}
				else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip) {
					break;
				}
				else {
					for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1) {
						if ((_By = (unsigned char)* _Mid1) < 0x80u || 0xc0u <= _By) {
							return codecvt::error;
						}
						else {
							_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

				if (0 < _Nskip) {
					_Ch <<= 6;
				}

				if ((_Maxcode < 0x10ffffu ? _Maxcode : 0x10ffffu) < _Ch) {
					return codecvt::error;
				}

				if (0xffffu < _Ch) {
					unsigned short _Ch0 = (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

					*_Mid2++ = (char16_t)_Ch0;
					*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
					continue;
				}

				if (_Nskip != 0) {
					if (_Mid1 == _Last1) {
						_Mid1 = _First1;
						break;
					}

					if ((_By = (unsigned char)* _Mid1++) < 0x80u || 0xc0u <= _By) {
						return codecvt::error;
					}

					_Ch |= _By & 0x3f;
				}

				if (*_Pstate == 0u) {
					*_Pstate = 1;

					if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeffu) {
						const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2);

						if (_Ans == codecvt::partial) {
							*_Pstate = 0;
							_Mid1 = _First1;
						}

						return _Ans;
					}
				}

				*_Mid2++ = (char16_t)_Ch;
			}

			return _First1 == _Mid1 ? codecvt::partial : codecvt::ok;
		}

		virtual result  do_out(mbstate_t& _State, const char16_t* _First1, const char16_t* _Last1,
			const char16_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			unsigned short* _Pstate = (unsigned short*)& _State;
			_Mid1 = _First1;
			_Mid2 = _First2;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				unsigned long _Ch;
				const unsigned short _Ch1 = (unsigned short)* _Mid1;
				bool _Save = false;

				if (1 < *_Pstate) {
					if (_Ch1 < 0xdc00u || 0xe000u <= _Ch1) {
						return codecvt::error;
					}

					_Ch = static_cast<unsigned long>((*_Pstate << 10) | (_Ch1 - 0xdc00));
				}
				else if (0xd800u <= _Ch1 && _Ch1 < 0xdc00u) {
					_Ch = static_cast<unsigned long>((_Ch1 - 0xd800 + 0x0040) << 10);
					_Save = true;
				}
				else {
					_Ch = _Ch1;
				}

				char _By;
				int _Nextra;

				if (_Ch < 0x0080u) {
					_By = (char)_Ch;
					_Nextra = 0;
				}
				else if (_Ch < 0x0800u) {
					_By = (char)(0xc0 | _Ch >> 6);
					_Nextra = 1;
				}
				else if (_Ch < 0x10000u) {
					_By = (char)(0xe0 | _Ch >> 12);
					_Nextra = 2;
				}
				else {
					_By = (char)(0xf0 | _Ch >> 18);
					_Nextra = 3;
				}

				int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

				if (_Last2 - _Mid2 < _Nput) {
					break;
				}

				if (*_Pstate == 0u && (_Mode & _Generate_header) != 0) {
					if (_Last2 - _Mid2 < 3 + _Nput) {
						break;
					}


					*_Mid2++ = (char)(unsigned char)0xef;
					*_Mid2++ = (char)(unsigned char)0xbb;
					*_Mid2++ = (char)(unsigned char)0xbf;
				}

				++_Mid1;
				if (_Save || _Nextra < 3) {
					*_Mid2++ = _By;
					--_Nput;
				}

				for (; 0 < _Nput; --_Nput) {
					*_Mid2++ = (char)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}

				*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
			}

			return _First1 == _Mid1 ? codecvt::partial : codecvt::ok;
		}

		virtual result  do_unshift(mbstate_t& _State, char* _First2, char*, char*& _Mid2) const {

			unsigned short* _Pstate = (unsigned short*)& _State;
			_Mid2 = _First2;

			return 1u < *_Pstate ? codecvt::error : codecvt::ok;
		}

		friend int _Codecvt_do_length<>(const codecvt&, mbstate_t&, const char*, const char*, size_t);

		virtual int  do_length(
			mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {
			return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count);
		}

		virtual bool  do_always_noconv() const noexcept override {

			return false;
		}

		virtual int  do_max_length() const noexcept override {

			return (_Mode & _Consume_header) != 0
				? 9
				: (_Mode & _Generate_header) != 0 ? 7
				: 6;
		}

		virtual int do_encoding() const noexcept override {
			return 0;
		}

	private:
		unsigned long _Maxcode;
		_Codecvt_mode _Mode;
	};


	template <>
	class __declspec(dllimport)  codecvt<char32_t, char, mbstate_t>
		: public codecvt_base {

	public:
		using intern_type = char32_t;
		using extern_type = char;
		using state_type  = mbstate_t;

		result  in(mbstate_t& _State, const char* _First1, const char* _Last1, const char*& _Mid1,
			char32_t* _First2, char32_t* _Last2, char32_t*& _Mid2) const {

			return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  out(mbstate_t& _State, const char32_t* _First1, const char32_t* _Last1,
			const char32_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_unshift(_State, _First2, _Last2, _Mid2);
		}

		int  length(mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			return do_length(_State, _First1, _Last1, _Count);
		}

		static locale::id id;

		explicit  codecvt(size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header) {
				{ _Locinfo _Lobj;
				_Init(_Lobj);
				}
		}

		explicit  codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header) {
			_Init(_Lobj);
		}

		codecvt(
			const _Locinfo& _Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0)
			: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) {

			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

			if (_Ppf != nullptr && *_Ppf == nullptr) {
#pragma warning(suppress : 4996) 
				* _Ppf = new codecvt(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~codecvt() noexcept {}

		void  _Init(const _Locinfo&) {}

		virtual result  do_in(mbstate_t& _State, const char* _First1, const char* _Last1,
			const char*& _Mid1, char32_t* _First2, char32_t* _Last2, char32_t*& _Mid2) const {

			char* _Pstate = (char*)& _State;
			_Mid1 = _First1;
			_Mid2 = _First2;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				unsigned char _By = (unsigned char)* _Mid1;
				unsigned long _Ch;
				int _Nextra;

				if (_By < 0x80u) {
					_Ch = _By;
					_Nextra = 0;
				}
				else if (_By < 0xc0u) {
					++_Mid1;
					return codecvt::error;
				}
				else if (_By < 0xe0u) {
					_Ch = static_cast<unsigned long>(_By & 0x1f);
					_Nextra = 1;
				}
				else if (_By < 0xf0u) {
					_Ch = static_cast<unsigned long>(_By & 0x0f);
					_Nextra = 2;
				}
				else if (_By < 0xf8u) {
					_Ch = static_cast<unsigned long>(_By & 0x07);
					_Nextra = 3;
				}
				else {
					_Ch = static_cast<unsigned long>(_By & 0x03);
					_Nextra = _By < 0xfc ? 4 : 5;
				}

				if (_Nextra == 0) {
					++_Mid1;
				}
				else if (_Last1 - _Mid1 < _Nextra + 1) {
					break;
				}
				else {
					for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1) {
						if ((_By = (unsigned char)* _Mid1) < 0x80u || 0xc0u <= _By) {
							return codecvt::error;
						}
						else {
							_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

				if (*_Pstate == 0) {
					*_Pstate = 1;

					if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeffu) {
						const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2);

						if (_Ans == codecvt::partial) {
							*_Pstate = 0;
							_Mid1 = _First1;
						}
						return _Ans;
					}
				}

				if (_Maxcode < _Ch) {
					return codecvt::error;
				}

				*_Mid2++ = (char32_t)_Ch;
			}

			return _First1 == _Mid1 ? codecvt::partial : codecvt::ok;
		}

		virtual result  do_out(mbstate_t& _State, const char32_t* _First1, const char32_t* _Last1,
			const char32_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			char* _Pstate = (char*)& _State;
			_Mid1 = _First1;
			_Mid2 = _First2;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				char _By;
				int _Nextra;
				unsigned long _Ch = (unsigned long)* _Mid1;

				if (_Maxcode < _Ch) {
					return codecvt::error;
				}

				if (_Ch < 0x0080u) {
					_By = (char)_Ch;
					_Nextra = 0;
				}
				else if (_Ch < 0x0800u) {
					_By = (char)(0xc0 | _Ch >> 6);
					_Nextra = 1;
				}
				else if (_Ch < 0x00010000u) {
					_By = (char)(0xe0 | _Ch >> 12);
					_Nextra = 2;
				}
				else if (_Ch < 0x00200000u) {
					_By = (char)(0xf0 | _Ch >> 18);
					_Nextra = 3;
				}
				else if (_Ch < 0x04000000u) {
					_By = (char)(0xf8 | _Ch >> 24);
					_Nextra = 4;
				}
				else {
					_By = (char)(0xfc | (_Ch >> 30 & 0x03));
					_Nextra = 5;
				}

				if (*_Pstate == 0) {
					*_Pstate = 1;
					if ((_Mode & _Generate_header) != 0) {
						if (_Last2 - _Mid2 < 3 + 1 + _Nextra) {
							return codecvt::partial;
						}


						*_Mid2++ = (char)(unsigned char)0xef;
						*_Mid2++ = (char)(unsigned char)0xbb;
						*_Mid2++ = (char)(unsigned char)0xbf;
					}
				}

				if (_Last2 - _Mid2 < 1 + _Nextra) {
					break;
				}

				++_Mid1;
				for (*_Mid2++ = _By; 0 < _Nextra;) {
					*_Mid2++ = (char)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}
			}
			return _First1 == _Mid1 ? codecvt::partial : codecvt::ok;
		}

		virtual result  do_unshift(mbstate_t&, char* _First2, char*, char*& _Mid2) const {

			_Mid2 = _First2;
			return codecvt::noconv;
		}

		friend int _Codecvt_do_length<>(const codecvt&, mbstate_t&, const char*, const char*, size_t);

		virtual int  do_length(
			mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {
			return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count);
		}

		virtual bool  do_always_noconv() const noexcept override {

			return false;
		}

		virtual int  do_max_length() const noexcept override {

			return (_Mode & (_Consume_header | _Generate_header)) != 0 ? 9 : 6;
		}

		virtual int  do_encoding() const noexcept override {

			return (_Mode & (_Consume_header | _Generate_header)) != 0 ? -1
				: 0;
		}

	private:
		unsigned long _Maxcode;
		_Codecvt_mode _Mode;
	};

































































































































































































































































































































































































































































































































































#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	template <>
	class __declspec(dllimport) codecvt<wchar_t, char, mbstate_t> : public codecvt_base {

	public:
		using intern_type = wchar_t;
		using extern_type = char;
		using state_type  = mbstate_t;

		result  in(mbstate_t& _State, const char* _First1, const char* _Last1, const char*& _Mid1,
			wchar_t* _First2, wchar_t* _Last2, wchar_t*& _Mid2) const {

			return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  out(mbstate_t& _State, const wchar_t* _First1, const wchar_t* _Last1,
			const wchar_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_unshift(_State, _First2, _Last2, _Mid2);
		}

		int  length(mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			return do_length(_State, _First1, _Last1, _Count);
		}

		static locale::id id;

		explicit  codecvt(size_t _Refs = 0) : codecvt_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		explicit  codecvt(const _Locinfo& _Lobj, size_t _Refs = 0) : codecvt_base(_Refs) {

			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~codecvt() noexcept {}

		void  _Init(const _Locinfo& _Lobj) {
			_Cvt = _Lobj._Getcvt();
		}

		virtual result  do_in(mbstate_t&, const char* _First1, const char* _Last1, const char*& _Mid1,
			wchar_t* _First2, wchar_t* _Last2, wchar_t*& _Mid2) const {

			mbstate_t _Mystate{};
			_Adl_verify_range(_First1, _Last1);
			_Adl_verify_range(_First2, _Last2);
			_Mid1 = _First1;
			_Mid2 = _First2;
			for (;;) {
				if (_Mid1 == _Last1) {
					return ok;
				}

				if (_Mid2 == _Last2) {
					return partial;
				}

				int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
				switch (_Bytes) {
				case -2:
					return partial;

				case -1:
					return error;

				case 0:
					_Bytes = 1;


				default:
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

		virtual result  do_out(mbstate_t& _State, const wchar_t* _First1, const wchar_t* _Last1,
			const wchar_t*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			_Adl_verify_range(_First1, _Last1);
			_Adl_verify_range(_First2, _Last2);
			_Mid1 = _First1;
			_Mid2 = _First2;
			int _Bytes;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				if ((int)5 <= _Last2 - _Mid2) {
					if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &_Cvt)) < 0) {
						return error;
					}
					else {
						++_Mid1;
						_Mid2 += _Bytes;
					}
				}
				else {
					char _Buf[5];
					mbstate_t _Stsave = _State;

					if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &_Cvt)) < 0) {
						return error;
					}
					else if (_Last2 - _Mid2 < _Bytes) {
						_State = _Stsave;
						break;
					}
					else {
						::memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
						++_Mid1;
						_Mid2 += _Bytes;
					}
				}
			}

			return _Mid1 == _Last1 ? ok : partial;
		}

		virtual result  do_unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			_Adl_verify_range(_First2, _Last2);
			_Mid2 = _First2;
			result _Ans = ok;
			int _Bytes;
			char _Buf[5];
			mbstate_t _Stsave = _State;

			if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0) {
				_Ans = error;
			}
			else if (_Last2 - _Mid2 < --_Bytes) {
				_State = _Stsave;
				_Ans = partial;
			}
			else if (0 < _Bytes) {
				::memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
				_Mid2 += _Bytes;
			}
			return _Ans;
		}

		virtual int  do_length(
			mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			_Adl_verify_range(_First1, _Last1);
			const auto _Old_first1 = _First1;

			for (; _Count > 0u && _First1 != _Last1; --_Count) {
				wchar_t _Ch;
				int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_State, &_Cvt);
				if (_Bytes < 0) {
					break;
				}

				if (_Bytes == 0) {
					_Bytes = 1;
				}


				_First1 += _Bytes;
			}

			return static_cast<int>(_Min_value(_First1 - _Old_first1, ptrdiff_t{ 2147483647 }));
		}

		virtual bool  do_always_noconv() const noexcept override {

			return false;
		}

		virtual int  do_max_length() const noexcept override {

			return static_cast<int>(_Cvt._Mbcurmax);
		}

		virtual int  do_encoding() const noexcept override {

			return _Cvt._Mbcurmax == 1;
		}

	private:
		_Locinfo::_Cvtvec _Cvt;
	};



	template <>
	class __declspec(dllimport) codecvt<unsigned short, char, mbstate_t> : public codecvt_base {

	public:
		using intern_type = unsigned short;
		using extern_type = char;
		using state_type  = mbstate_t;

		result  in(mbstate_t& _State, const char* _First1, const char* _Last1, const char*& _Mid1,
			unsigned short* _First2, unsigned short* _Last2, unsigned short*& _Mid2) const {

			return do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  out(mbstate_t& _State, const unsigned short* _First1, const unsigned short* _Last1,
			const unsigned short*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2);
		}

		result  unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			return do_unshift(_State, _First2, _Last2, _Mid2);
		}

		int  length(mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			return do_length(_State, _First1, _Last1, _Count);
		}

		static locale::id id;

		explicit  codecvt(size_t _Refs = 0) : codecvt_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		explicit  codecvt(const _Locinfo& _Lobj, size_t _Refs = 0) : codecvt_base(_Refs) {

			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new codecvt(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~codecvt() noexcept {}

		void  _Init(const _Locinfo& _Lobj) {
			_Cvt = _Lobj._Getcvt();
		}

		virtual result  do_in(mbstate_t&, const char* _First1, const char* _Last1, const char*& _Mid1,
			unsigned short* _First2, unsigned short* _Last2, unsigned short*& _Mid2) const {

			mbstate_t _Mystate{};
			_Adl_verify_range(_First1, _Last1);
			_Adl_verify_range(_First2, _Last2);
			_Mid1 = _First1;
			_Mid2 = _First2;
			for (;;) {
				if (_Mid1 == _Last1) {
					return ok;
				}

				if (_Mid2 == _Last2) {
					return partial;
				}

				int _Bytes = _Mbrtowc(
					reinterpret_cast<wchar_t*>(_Mid2), _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
				switch (_Bytes) {
				case -2:
					return partial;

				case -1:
					return error;

				case 0:
					_Bytes = 1;


				default:
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

		virtual result  do_out(mbstate_t& _State, const unsigned short* _First1,
			const unsigned short* _Last1, const unsigned short*& _Mid1, char* _First2, char* _Last2, char*& _Mid2) const {

			_Adl_verify_range(_First1, _Last1);
			_Adl_verify_range(_First2, _Last2);
			_Mid1 = _First1;
			_Mid2 = _First2;
			int _Bytes;

			while (_Mid1 != _Last1 && _Mid2 != _Last2) {
				if ((int)5 <= _Last2 - _Mid2) {
					if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &_Cvt)) < 0) {
						return error;
					}
					else {
						++_Mid1;
						_Mid2 += _Bytes;
					}
				}
				else {
					char _Buf[5];
					mbstate_t _Stsave = _State;

					if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &_Cvt)) < 0) {
						return error;
					}
					else if (_Last2 - _Mid2 < _Bytes) {
						_State = _Stsave;
						break;
					}
					else {
						::memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
						++_Mid1;
						_Mid2 += _Bytes;
					}
				}
			}

			return _Mid1 == _Last1 ? ok : partial;
		}

		virtual result  do_unshift(mbstate_t& _State, char* _First2, char* _Last2, char*& _Mid2) const {

			_Adl_verify_range(_First2, _Last2);
			_Mid2 = _First2;
			result _Ans = ok;
			int _Bytes;
			char _Buf[5];
			mbstate_t _Stsave = _State;

			if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0) {
				_Ans = error;
			}
			else if (_Last2 - _Mid2 < --_Bytes) {
				_State = _Stsave;
				_Ans = partial;
			}
			else if (0 < _Bytes) {
				::memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
				_Mid2 += _Bytes;
			}

			return _Ans;
		}

		virtual int  do_length(
			mbstate_t& _State, const char* _First1, const char* _Last1, size_t _Count) const {


			_Adl_verify_range(_First1, _Last1);
			const auto _Old_first1 = _First1;

			for (; _Count > 0u && _First1 != _Last1; --_Count) {
				wchar_t _Ch;
				int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_State, &_Cvt);
				if (_Bytes < 0) {
					break;
				}

				if (_Bytes == 0) {
					_Bytes = 1;
				}


				_First1 += _Bytes;
			}

			return static_cast<int>(_Min_value(_First1 - _Old_first1, ptrdiff_t{ 2147483647 }));
		}

		virtual bool  do_always_noconv() const noexcept override {

			return false;
		}

		virtual int  do_max_length() const noexcept override {

			return static_cast<int>(_Cvt._Mbcurmax);
		}

		virtual int  do_encoding() const noexcept override {

			return _Cvt._Mbcurmax == 1u;
		}

	private:
		_Locinfo::_Cvtvec _Cvt;
	};
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	template <class _Elem, class _Byte, class _Statype>
	class codecvt_byname : public codecvt<_Elem, _Byte, _Statype> {
	public:
		static_assert(!0
			|| _Is_any_of_v<codecvt_byname,


#line 2371 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
			codecvt_byname<char, char, mbstate_t>, codecvt_byname<wchar_t, char, mbstate_t>>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit  codecvt_byname(const char* _Locname, size_t _Refs = 0)
			: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs) {}

		explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
			: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs) {}

	protected:
		virtual  ~codecvt_byname() noexcept {}
	};


	struct __declspec(dllimport) ctype_base : public locale::facet {
		enum {
			alnum = 0x04 | 0x02 | 0x01 | 0x100,
			alpha = 0x02 | 0x01 | 0x100,
			cntrl = 0x20,
			digit = 0x04,
			graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
			lower = 0x02,
			print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
			punct = 0x10,
			space = 0x08 | 0x40 | 0x000,
			upper = 0x01,
			xdigit = 0x80,
			blank = 0x08 | 0x40 | 0x000 | 0x000
		};
		using mask = short;

		ctype_base(size_t _Refs = 0) : locale::facet(_Refs) {}

		~ctype_base() noexcept {}
	};


	template <class _Elem>
	class ctype : public ctype_base {
	public:

		static_assert(!0 || _Always_false<_Elem>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using char_type = _Elem;

		bool  is(mask _Maskval, _Elem _Ch) const {
			return do_is(_Maskval, _Ch);
		}

		const _Elem* is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			return do_is(_First, _Last, _Dest);
		}

		const _Elem* scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_is(_Maskval, _First, _Last);
		}

		const _Elem* scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_not(_Maskval, _First, _Last);
		}

		_Elem  tolower(_Elem _Ch) const {
			return do_tolower(_Ch);
		}

		const _Elem* tolower(
			_Elem* _First, const _Elem* _Last) const {
			return do_tolower(_First, _Last);
		}

		_Elem  toupper(_Elem _Ch) const {
			return do_toupper(_Ch);
		}

		const _Elem* toupper(
			_Elem* _First, const _Elem* _Last) const {
			return do_toupper(_First, _Last);
		}

		_Elem  widen(char _Byte) const {
			return do_widen(_Byte);
		}

		const char* widen(const char* _First, const char* _Last,
			_Elem* _Dest) const {
			return do_widen(_First, _Last, _Dest);
		}

		char  narrow(_Elem _Ch, char _Dflt = '\0') const {
			return do_narrow(_Ch, _Dflt);
		}

		const _Elem* narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			return do_narrow(_First, _Last, _Dflt, _Dest);
		}

		static locale::id id;

		explicit  ctype(size_t _Refs = 0) : ctype_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
			: ctype_base(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~ctype() noexcept {
			if (_Ctype._Delfl) {
				::free((void*)_Ctype._Table);
			}

			::free(_Ctype._LocaleName);
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Ctype = _Lobj._Getctype();
			_Cvt = _Lobj._Getcvt();
		}

		virtual bool  do_is(
			mask _Maskval, _Elem _Ch) const {
			return (_Ctype._Table[(unsigned char)narrow(_Ch)] & _Maskval) != 0;
		}

		virtual const _Elem* do_is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
			}

			return _First;
		}

		virtual const _Elem* do_scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && !is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual const _Elem* do_scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual _Elem  do_tolower(_Elem _Ch) const {
			unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
			if (_Byte == '\0') {
				return _Ch;
			}

			return widen((char)_Tolower(_Byte, &_Ctype));
		}

		virtual const _Elem* do_tolower(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
				if (_Byte != '\0') {
					*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
				}
			}
			return (const _Elem*)_First;
		}

		virtual _Elem  do_toupper(_Elem _Ch) const {
			unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
			if (_Byte == '\0') {
				return _Ch;
			}

			return widen((char)_Toupper(_Byte, &_Ctype));
		}

		virtual const _Elem* do_toupper(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
				if (_Byte != '\0') {
					*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
				}
			}

			return (const _Elem*)_First;
		}

		virtual _Elem  do_widen(char _Byte) const {
			return _Maklocchr(_Byte, static_cast<_Elem*>(nullptr), _Cvt);
		}

		virtual const char* do_widen(
			const char* _First, const char* _Last, _Elem* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Maklocchr(*_First, static_cast<_Elem*>(nullptr), _Cvt);
			}

			return _First;
		}

		char  _Donarrow(_Elem _Ch, char _Dflt) const {
			char _Byte;
			if (_Ch == (_Elem)0) {
				return '\0';
			}

			if ((_Byte = _Maklocbyte(_Ch, _Cvt)) == '\0') {
				return _Dflt;
			}

			return _Byte;
		}

		virtual char  do_narrow(_Elem _Ch, char _Dflt) const {
			return _Donarrow(_Ch, _Dflt);
		}

		virtual const _Elem* do_narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Donarrow(*_First, _Dflt);
			}

			return _First;
		}

	private:
		_Locinfo::_Ctypevec _Ctype;
		_Locinfo::_Cvtvec _Cvt;
	};







	template <class _Elem>
	locale::id ctype<_Elem>::id;






	template <>
	class __declspec(dllimport) ctype<char> : public ctype_base {
	public:
		using _Elem     = char;
		using char_type = _Elem;

		bool  is(mask _Maskval, _Elem _Ch) const {
			return (_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0;
		}

		const _Elem* is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Ctype._Table[(unsigned char)* _First];
			}

			return _First;
		}

		const _Elem* scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && !is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		const _Elem* scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		_Elem  tolower(_Elem _Ch) const {
			return do_tolower(_Ch);
		}

		const _Elem* tolower(
			_Elem* _First, const _Elem* _Last) const {
			return do_tolower(_First, _Last);
		}

		_Elem  toupper(_Elem _Ch) const {
			return do_toupper(_Ch);
		}

		const _Elem* toupper(
			_Elem* _First, const _Elem* _Last) const {
			return do_toupper(_First, _Last);
		}

		_Elem  widen(char _Byte) const {
			return do_widen(_Byte);
		}

		const _Elem* widen(const char* _First, const char* _Last,
			_Elem* _Dest) const {
			return do_widen(_First, _Last, _Dest);
		}

		_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const {
			return do_narrow(_Ch, _Dflt);
		}

		const _Elem* narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			return do_narrow(_First, _Last, _Dflt, _Dest);
		}

		static locale::id id;

		explicit  ctype(const mask* _Table = nullptr, bool _Deletetable = false,
			size_t _Refs = 0)
			: ctype_base(_Refs) {
				{ _Locinfo _Lobj;
				_Init(_Lobj);
				}

				_Tidy();
				if (_Table != nullptr) {
					_Ctype._Table = _Table;
					_Ctype._Delfl = _Deletetable ? -1 : 0;
				}
				else {
					_Ctype._Table = classic_table();
					_Ctype._Delfl = 0;
				}
		}

		ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
			: ctype_base(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

		const mask* table() const noexcept {
			return _Ctype._Table;
		}

		static const mask* __cdecl
			classic_table() noexcept {
			return ::std::use_facet<ctype>(locale::classic()).table();
		}

		static const size_t table_size = 1 << 8;

	protected:
		virtual  ~ctype() noexcept {
			_Tidy();
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Ctype = _Lobj._Getctype();
		}

		void  _Tidy() noexcept {
			if (0 < _Ctype._Delfl) {
				::free((void*)_Ctype._Table);
			}
			else if (_Ctype._Delfl < 0) {
				delete[] _Ctype._Table;
			}

			::free(_Ctype._LocaleName);
		}

		virtual _Elem  do_tolower(_Elem _Ch) const {
			return (_Elem)_Tolower((unsigned char)_Ch, &_Ctype);
		}

		virtual const _Elem* do_tolower(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = (_Elem)_Tolower((unsigned char)* _First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		virtual _Elem  do_toupper(_Elem _Ch) const {
			return (_Elem)_Toupper((unsigned char)_Ch, &_Ctype);
		}

		virtual const _Elem* do_toupper(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = (_Elem)_Toupper((unsigned char)* _First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		virtual _Elem  do_widen(char _Byte) const {
			return _Byte;
		}

		virtual const _Elem* do_widen(
			const char* _First, const char* _Last, _Elem* _Dest) const {
			_Adl_verify_range(_First, _Last);
			::memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
			return _Last;
		}

		virtual _Elem  do_narrow(_Elem _Ch, char) const {
			return _Ch;
		}

		virtual const _Elem* do_narrow(const _Elem* _First, const _Elem* _Last, char,
			char* _Dest) const {
			_Adl_verify_range(_First, _Last);
			::memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
			return _Last;
		}

	private:
		_Locinfo::_Ctypevec _Ctype;
	};


	template <>
	class __declspec(dllimport) ctype<wchar_t>
		: public ctype_base {
	public:
		using _Elem     = wchar_t;
		using char_type = _Elem;

		bool  is(mask _Maskval, _Elem _Ch) const {
			return do_is(_Maskval, _Ch);
		}

		const _Elem* is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			return do_is(_First, _Last, _Dest);
		}

		const _Elem* scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_is(_Maskval, _First, _Last);
		}

		const _Elem* scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_not(_Maskval, _First, _Last);
		}

		_Elem  tolower(_Elem _Ch) const {
			return do_tolower(_Ch);
		}

		const _Elem* tolower(
			_Elem* _First, const _Elem* _Last) const {
			return do_tolower(_First, _Last);
		}

		_Elem  toupper(_Elem _Ch) const {
			return do_toupper(_Ch);
		}

		const _Elem* toupper(
			_Elem* _First, const _Elem* _Last) const {
			return do_toupper(_First, _Last);
		}

		_Elem  widen(char _Byte) const {
			return do_widen(_Byte);
		}

		const char* widen(const char* _First, const char* _Last,
			_Elem* _Dest) const {
			return do_widen(_First, _Last, _Dest);
		}

		char  narrow(_Elem _Ch, char _Dflt = '\0') const {
			return do_narrow(_Ch, _Dflt);
		}

		const _Elem* narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			return do_narrow(_First, _Last, _Dflt, _Dest);
		}

		static locale::id id;

		explicit  ctype(size_t _Refs = 0) : ctype_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
			: ctype_base(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~ctype() noexcept {
			if (_Ctype._Delfl) {
				::free((void*)_Ctype._Table);
			}

			::free(_Ctype._LocaleName);
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Ctype = _Lobj._Getctype();
			_Cvt = _Lobj._Getcvt();
		}

		virtual bool  do_is(
			mask _Maskval, _Elem _Ch) const {
			return (::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0;
		}

		virtual const _Elem* do_is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			_Adl_verify_range(_First, _Last);
			return ::_Getwctypes(_First, _Last, _Dest, &_Ctype);
		}

		virtual const _Elem* do_scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && !is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual const _Elem* do_scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual _Elem  do_tolower(_Elem _Ch) const {
			return _Towlower(_Ch, &_Ctype);
		}

		virtual const _Elem* do_tolower(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = _Towlower(*_First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		virtual _Elem  do_toupper(_Elem _Ch) const {
			return _Towupper(_Ch, &_Ctype);
		}

		virtual const _Elem* do_toupper(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = _Towupper(*_First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		_Elem  _Dowiden(char _Byte) const {
			mbstate_t _Mbst = {};
			wchar_t _Wc;
			return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? (wchar_t)((wint_t)(0xFFFF)) : _Wc;
		}

		virtual _Elem  do_widen(char _Byte) const {
			return _Dowiden(_Byte);
		}

		virtual const char* do_widen(
			const char* _First, const char* _Last, _Elem* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Dowiden(*_First);
			}

			return _First;
		}

		char  _Donarrow(_Elem _Ch, char _Dflt) const {
			char _Buf[5];
			mbstate_t _Mbst = {};
			return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];
		}

		virtual char  do_narrow(_Elem _Ch, char _Dflt) const {
			return _Donarrow(_Ch, _Dflt);
		}

		virtual const _Elem* do_narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Donarrow(*_First, _Dflt);
			}

			return _First;
		}

	private:
		_Locinfo::_Ctypevec _Ctype;
		_Locinfo::_Cvtvec _Cvt;
	};



	template <>
	class __declspec(dllimport) ctype<unsigned short>
		: public ctype_base {
	public:
		using _Elem     = unsigned short;
		using char_type = _Elem;

		bool  is(mask _Maskval, _Elem _Ch) const {
			return do_is(_Maskval, _Ch);
		}

		const _Elem* is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			return do_is(_First, _Last, _Dest);
		}

		const _Elem* scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_is(_Maskval, _First, _Last);
		}

		const _Elem* scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			return do_scan_not(_Maskval, _First, _Last);
		}

		_Elem  tolower(_Elem _Ch) const {
			return do_tolower(_Ch);
		}

		const _Elem* tolower(
			_Elem* _First, const _Elem* _Last) const {
			return do_tolower(_First, _Last);
		}

		_Elem  toupper(_Elem _Ch) const {
			return do_toupper(_Ch);
		}

		const _Elem* toupper(
			_Elem* _First, const _Elem* _Last) const {
			return do_toupper(_First, _Last);
		}

		_Elem  widen(char _Byte) const {
			return do_widen(_Byte);
		}

		const char* widen(const char* _First, const char* _Last,
			_Elem* _Dest) const {
			return do_widen(_First, _Last, _Dest);
		}

		char  narrow(_Elem _Ch, char _Dflt = '\0') const {
			return do_narrow(_Ch, _Dflt);
		}

		const _Elem* narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			return do_narrow(_First, _Last, _Dflt, _Dest);
		}

		static locale::id id;

		explicit  ctype(size_t _Refs = 0) : ctype_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
			: ctype_base(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

			return 2;
		}

	protected:
		virtual  ~ctype() noexcept {
			if (_Ctype._Delfl) {
				::free((void*)_Ctype._Table);
			}

			::free(_Ctype._LocaleName);
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Ctype = _Lobj._Getctype();
			_Cvt = _Lobj._Getcvt();
		}

		virtual bool  do_is(
			mask _Maskval, _Elem _Ch) const {
			return (::_Getwctype(_Ch, &_Ctype) & _Maskval) != 0;
		}

		virtual const _Elem* do_is(const _Elem* _First, const _Elem* _Last,
			mask* _Dest) const {
			_Adl_verify_range(_First, _Last);
			return (const _Elem*) ::_Getwctypes((const wchar_t*)_First, (const wchar_t*)_Last, _Dest, &_Ctype);
		}

		virtual const _Elem* do_scan_is(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && !is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual const _Elem* do_scan_not(mask _Maskval, const _Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range(_First, _Last);
			while (_First != _Last && is(_Maskval, *_First)) {
				++_First;
			}

			return _First;
		}

		virtual _Elem  do_tolower(_Elem _Ch) const {
			return _Towlower(_Ch, &_Ctype);
		}

		virtual const _Elem* do_tolower(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = _Towlower(*_First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		virtual _Elem  do_toupper(_Elem _Ch) const {
			return _Towupper(_Ch, &_Ctype);
		}

		virtual const _Elem* do_toupper(_Elem* _First,
			const _Elem* _Last) const {
			_Adl_verify_range((const _Elem*)_First, _Last);
			for (; _First != _Last; ++_First) {
				*_First = _Towupper(*_First, &_Ctype);
			}

			return (const _Elem*)_First;
		}

		_Elem  _Dowiden(char _Byte) const {
			mbstate_t _Mbst = {};
			unsigned short _Wc;
			return _Mbrtowc((wchar_t*)& _Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? (unsigned short)((wint_t)(0xFFFF)) : _Wc;
		}

		virtual _Elem  do_widen(char _Byte) const {
			return _Dowiden(_Byte);
		}

		virtual const char* do_widen(
			const char* _First, const char* _Last, _Elem* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Dowiden(*_First);
			}

			return _First;
		}

		char  _Donarrow(_Elem _Ch, char _Dflt) const {
			char _Buf[5];
			mbstate_t _Mbst = {};
			return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];
		}

		virtual char  do_narrow(_Elem _Ch, char _Dflt) const {
			return _Donarrow(_Ch, _Dflt);
		}

		virtual const _Elem* do_narrow(const _Elem* _First, const _Elem* _Last, char _Dflt,
			char* _Dest) const {
			_Adl_verify_range(_First, _Last);
			for (; _First != _Last; ++_First, ++_Dest) {
				*_Dest = _Donarrow(*_First, _Dflt);
			}

			return _First;
		}

	private:
		_Locinfo::_Ctypevec _Ctype;
		_Locinfo::_Cvtvec _Cvt;
	};
#line 3245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"


	template <class _Elem>
	class ctype_byname : public ctype<_Elem> {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit  ctype_byname(const char* _Locname, size_t _Refs = 0)
			: ctype<_Elem>(_Locinfo(_Locname), _Refs) {
		}

		explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
			: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs) {
		}

	protected:
		virtual  ~ctype_byname() noexcept {}
	};



	template class __declspec(dllimport) codecvt<char, char, mbstate_t>;
#line 3268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
#line 3269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
}


#pragma warning(pop)
#pragma pack(pop)
#line 3275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"
#line 3276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocale"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )






namespace std {

























	template <class _Dummy>
	class _Iosb {
	public:
		enum _Dummy_enum { _Dummy_enum_val = 1 };
		enum _Fmtflags {
			_Fmtmask = 0xffff,
			_Fmtzero = 0
		};

		static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
		static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
		static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
		static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
		static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
		static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
		static constexpr _Fmtflags left = (_Fmtflags)0x0040;
		static constexpr _Fmtflags right = (_Fmtflags)0x0080;
		static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
		static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
		static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
		static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
		static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
		static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

		static constexpr _Fmtflags hexfloat = (_Fmtflags)0x3000;

		static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
		static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
		static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040 | 0x0080 | 0x0100);
		static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200 | 0x0400 | 0x0800);
		static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000 | 0x2000);

		enum _Iostate {
			_Statmask = 0x17
		};

		static constexpr _Iostate goodbit = (_Iostate)0x0;
		static constexpr _Iostate eofbit = (_Iostate)0x1;
		static constexpr _Iostate failbit = (_Iostate)0x2;
		static constexpr _Iostate badbit = (_Iostate)0x4;

		enum _Openmode {
			_Openmask = 0xff
		};

		static constexpr _Openmode in = (_Openmode)0x01;
		static constexpr _Openmode out = (_Openmode)0x02;
		static constexpr _Openmode ate = (_Openmode)0x04;
		static constexpr _Openmode app = (_Openmode)0x08;
		static constexpr _Openmode trunc = (_Openmode)0x10;
		static constexpr _Openmode _Nocreate = (_Openmode)0x40;
		static constexpr _Openmode _Noreplace = (_Openmode)0x80;
		static constexpr _Openmode binary = (_Openmode)0x20;

		enum _Seekdir {
			_Seekbeg,
			_Seekcur,
			_Seekend
		};

		static constexpr _Seekdir beg = _Seekbeg;
		static constexpr _Seekdir cur = _Seekcur;
		static constexpr _Seekdir end = _Seekend;

		enum {
			_Openprot = 0x40
		};
	};

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hexfloat;

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
	template <class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


	class __declspec(dllimport) ios_base : public _Iosb<int> {
	public:
		using fmtflags = int;
		using iostate  = int;
		using openmode = int;
		using seekdir  = int;


		using streamoff = ::std::streamoff;
		using streampos = ::std::streampos;
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

		enum event {
			erase_event,
			imbue_event,
			copyfmt_event
		};

		using event_callback = void(__cdecl*)(event, ios_base&, int);


		using io_state  = unsigned int;
		using open_mode = unsigned int;
		using seek_dir  = unsigned int;
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"


		class failure

			: public system_error {
		public:
			explicit failure(const string& _Message, const error_code& _Errcode = make_error_code(io_errc::stream))
				: system_error(_Errcode, _Message) {
			}

			explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))
				: system_error(_Errcode, _Message) {
			}









#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"
		};


		class __declspec(dllimport) Init {
		public:
			Init() {
				_Init_ctor(this);
			}

			~Init() noexcept {
				_Init_dtor(this);
			}

		private:
			static  void __cdecl _Init_ctor(Init*);
			static  void __cdecl _Init_dtor(Init*);

			static int _Init_cnt;

			static  int& __cdecl _Init_cnt_func();
		};

		explicit  operator bool() const {
			return !fail();
		}

		bool  operator!() const {
			return fail();
		}

		void  clear(iostate _State, bool _Reraise) {
			_State &= _Statmask;
			_Mystate = _State;
			const auto _Filtered = _State & _Except;
			if (_Filtered) {
				if (_Reraise) {
					throw;
				}

				const char* _Msg;
				if (_Filtered & ios_base::badbit) {
					_Msg = "ios_base::badbit set";
				}
				else if (_Filtered & ios_base::failbit) {
					_Msg = "ios_base::failbit set";
				}
				else {
					_Msg = "ios_base::eofbit set";
				}

				throw failure(_Msg);
			}
		}

		void  clear(iostate _State = goodbit) {
			clear(_State, false);
		}


		void  clear(io_state _State) {
			clear((iostate)_State);
		}
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

		iostate  rdstate() const {
			return _Mystate;
		}

		void  setstate(
			iostate _State, bool _Exreraise) {
			clear(rdstate() | _State, _Exreraise);
		}

		void  setstate(iostate _State) {
			clear(rdstate() | _State, false);
		}


		void  setstate(io_state _State) {
			setstate((iostate)_State);
		}
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

		bool  good() const {
			return rdstate() == ios_base::goodbit;
		}

		bool  eof() const {
			return rdstate() & ios_base::eofbit;
		}

		bool  fail() const {
			return rdstate() & (ios_base::badbit | ios_base::failbit);
		}

		bool  bad() const {
			return rdstate() & ios_base::badbit;
		}

		iostate  exceptions() const {
			return _Except;
		}

		void  exceptions(iostate _Newexcept) {
			_Except = _Newexcept & _Statmask;
			clear(rdstate());
		}


		void  exceptions(io_state _State) {
			exceptions((iostate)_State);
		}
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"

		fmtflags  flags() const {
			return _Fmtfl;
		}

		fmtflags  flags(fmtflags _Newfmtflags) {
			const fmtflags _Oldfmtflags = _Fmtfl;
			_Fmtfl = _Newfmtflags & _Fmtmask;
			return _Oldfmtflags;
		}

		fmtflags  setf(fmtflags _Newfmtflags) {
			const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
			_Fmtfl |= _Newfmtflags & _Fmtmask;
			return _Oldfmtflags;
		}

		fmtflags  setf(
			fmtflags _Newfmtflags, fmtflags _Mask) {
			const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
			_Fmtfl = (_Oldfmtflags & ~_Mask) | (_Newfmtflags & _Mask & _Fmtmask);
			return _Oldfmtflags;
		}

		void  unsetf(fmtflags _Mask) {
			_Fmtfl &= ~_Mask;
		}

		streamsize  precision() const {
			return _Prec;
		}

		streamsize  precision(streamsize _Newprecision) {
			const streamsize _Oldprecision = _Prec;
			_Prec = _Newprecision;
			return _Oldprecision;
		}

		streamsize  width() const {
			return _Wide;
		}

		streamsize  width(streamsize _Newwidth) {
			const streamsize _Oldwidth = _Wide;
			_Wide = _Newwidth;
			return _Oldwidth;
		}

		locale  getloc() const {
			return *_Ploc;
		}

		locale  imbue(const locale& _Loc) {
			locale _Oldlocale = *_Ploc;
			*_Ploc = _Loc;
			_Callfns(imbue_event);
			return _Oldlocale;
		}

		static int __cdecl xalloc() {
			{ ::std::_Lockit _Lock(2);
			return _Index++;
			}
		}

		long& iword(int _Idx) {
			return _Findarr(_Idx)._Lo;
		}

		void*& pword(int _Idx) {
			return _Findarr(_Idx)._Vp;
		}

		void  register_callback(event_callback _Pfn,
			int _Idx) {
			_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

		ios_base& copyfmt(const ios_base& _Other) {
			if (this != ::std::addressof(_Other)) {
				_Tidy();
				*_Ploc = *_Other._Ploc;
				_Fmtfl = _Other._Fmtfl;
				_Prec = _Other._Prec;
				_Wide = _Other._Wide;
				_Iosarray* _Ptr = _Other._Arr;

				for (_Arr = nullptr; _Ptr != nullptr; _Ptr = _Ptr->_Next) {
					if (_Ptr->_Lo != 0 || _Ptr->_Vp != nullptr) {
						iword(_Ptr->_Index) = _Ptr->_Lo;
						pword(_Ptr->_Index) = _Ptr->_Vp;
					}
				}

				for (_Fnarray* _Pfa = _Other._Calls; _Pfa != nullptr; _Pfa = _Pfa->_Next) {
					register_callback(_Pfa->_Pfn, _Pfa->_Index);
				}

				_Callfns(copyfmt_event);
				exceptions(_Other._Except);
			}
			return *this;
		}

		static bool __cdecl sync_with_stdio(
			bool _Newsync = true) {
				{ ::std::_Lockit _Lock(2);
				const bool _Oldsync = _Sync;
				_Sync = _Newsync;
				return _Oldsync;
				}
		}

		void  swap(ios_base& _Right) {
			if (this != ::std::addressof(_Right)) {
				::std::swap(_Mystate, _Right._Mystate);
				::std::swap(_Except, _Right._Except);
				::std::swap(_Fmtfl, _Right._Fmtfl);
				::std::swap(_Prec, _Right._Prec);
				::std::swap(_Wide, _Right._Wide);

				::std::swap(_Arr, _Right._Arr);
				::std::swap(_Calls, _Right._Calls);
				::std::swap(_Ploc, _Right._Ploc);
			}
		}

		virtual  ~ios_base() noexcept {
			_Ios_base_dtor(this);
		}

		static  void __cdecl _Addstd(ios_base*);

		size_t _Stdstr;

	protected:
		ios_base() {}

		void  _Init() {
			_Ploc = nullptr;
			_Stdstr = 0;
			_Except = goodbit;
			_Fmtfl = (fmtflags)(skipws | dec);
			_Prec = 6;
			_Wide = 0;
			_Arr = nullptr;
			_Calls = nullptr;
			clear(goodbit);
			_Ploc = new locale;
		}

	private:

		struct _Iosarray : public _Crt_new_delete {
		public:
			_Iosarray(int _Idx, _Iosarray* _Link)
				: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr) {
			}

			_Iosarray* _Next;
			int _Index;
			long _Lo;
			void* _Vp;
		};


		struct _Fnarray : public _Crt_new_delete {
			_Fnarray(int _Idx, event_callback _Pnew, _Fnarray* _Link)
				: _Next(_Link), _Index(_Idx), _Pfn(_Pnew) {
			}

			_Fnarray* _Next;
			int _Index;
			event_callback _Pfn;
		};

		void  _Callfns(event _Ev) {
			for (_Fnarray* _Pfa = _Calls; _Pfa != nullptr; _Pfa = _Pfa->_Next) {
				(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
			}
		}

		_Iosarray& _Findarr(int _Idx) {
			_Iosarray* _Ptr1, * _Ptr2;

			for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1 != nullptr; _Ptr1 = _Ptr1->_Next) {
				if (_Ptr1->_Index == _Idx) {
					return *_Ptr1;
				}
				else if (_Ptr2 == nullptr && _Ptr1->_Lo == 0 && _Ptr1->_Vp == nullptr) {
					_Ptr2 = _Ptr1;
				}
			}

			if (_Ptr2 != nullptr) {
				_Ptr2->_Index = _Idx;
				return *_Ptr2;
			}

			_Arr = new _Iosarray(_Idx, _Arr);
			return *_Arr;
		}

		void  _Tidy() noexcept {
			_Callfns(erase_event);
			_Iosarray* _Ptr1, * _Ptr2;

			for (_Ptr1 = _Arr; _Ptr1 != nullptr; _Ptr1 = _Ptr2) {
				_Ptr2 = _Ptr1->_Next;
				delete _Ptr1;
			}
			_Arr = nullptr;

			_Fnarray* _Pfa1, * _Pfa2;
			for (_Pfa1 = _Calls; _Pfa1 != nullptr; _Pfa1 = _Pfa2) {
				_Pfa2 = _Pfa1->_Next;
				delete _Pfa1;
			}
			_Calls = nullptr;
		}

		iostate _Mystate;
		iostate _Except;
		fmtflags _Fmtfl;
		streamsize _Prec;
		streamsize _Wide;
		_Iosarray* _Arr;
		_Fnarray* _Calls;
		locale* _Ploc;

		static int _Index;
		static bool _Sync;

		static  void __cdecl _Ios_base_dtor(ios_base*);

	public:
		ios_base(const ios_base&) = delete;
		ios_base& operator=(const ios_base&) = delete;
	};
}


#pragma warning(pop)
#pragma pack(pop)
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xiosbase"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem,
		class _Traits>
		class basic_streambuf {
		protected:
			basic_streambuf() : _Plocale(new locale) {
				_Init();
			}

			basic_streambuf(_Uninitialized) {
			}

			basic_streambuf(const basic_streambuf& _Right)
				: _Plocale(new locale(_Right.getloc())) {
				_Init();
				setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
				setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			}

			basic_streambuf& operator=(const basic_streambuf& _Right) {
				if (this != ::std::addressof(_Right)) {
					setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
					setg(_Right.eback(), _Right.gptr(), _Right.egptr());
					pubimbue(_Right.getloc());
				}
				return *this;
			}

			void  swap(basic_streambuf& _Right) {
				if (this != ::std::addressof(_Right)) {
					_Elem* _Pfirst0 = pbase();
					_Elem* _Pnext0 = pptr();
					_Elem* _Pend = epptr();
					_Elem* _Gfirst0 = eback();
					_Elem* _Gnext0 = gptr();
					_Elem* _Gend = egptr();

					setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
					_Right.setp(_Pfirst0, _Pnext0, _Pend);

					setg(_Right.eback(), _Right.gptr(), _Right.egptr());
					_Right.setg(_Gfirst0, _Gnext0, _Gend);

					::std::swap(_Plocale, _Right._Plocale);
				}
			}

		public:
			using char_type   = _Elem;
			using traits_type = _Traits;

			virtual  ~basic_streambuf() noexcept {
				delete _Plocale;
			}

			using int_type = typename _Traits::int_type;
			using pos_type = typename _Traits::pos_type;
			using off_type = typename _Traits::off_type;

			pos_type  pubseekoff(off_type _Off, ios_base::seekdir _Way,
				ios_base::openmode _Mode = ios_base::in | ios_base::out) {
				return seekoff(_Off, _Way, _Mode);
			}


			pos_type  pubseekoff(off_type _Off, ios_base::seek_dir _Way,
				ios_base::open_mode _Mode) {
				return pubseekoff(_Off, (ios_base::seekdir) _Way, (ios_base::openmode) _Mode);
			}
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

			pos_type  pubseekpos(pos_type _Pos,
				ios_base::openmode _Mode = ios_base::in | ios_base::out) {
				return seekpos(_Pos, _Mode);
			}


			pos_type  pubseekpos(pos_type _Pos,
				ios_base::open_mode _Mode) {
				return seekpos(_Pos, (ios_base::openmode) _Mode);
			}
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

			basic_streambuf * pubsetbuf(_Elem * _Buffer,
				streamsize _Count) {
				return setbuf(_Buffer, _Count);
			}

			locale  pubimbue(const locale& _Newlocale) {
				locale _Oldlocale = *_Plocale;
				imbue(_Newlocale);
				*_Plocale = _Newlocale;
				return _Oldlocale;
			}

			locale  getloc() const {
				return *_Plocale;
			}

			streamsize  in_avail() {
				streamsize _Res = _Gnavail();
				return 0 < _Res ? _Res : showmanyc();
			}

			int  pubsync() {
				return sync();
			}

			int_type  sbumpc() {
				return 0 < _Gnavail() ? _Traits::to_int_type(*_Gninc()) : uflow();
			}

			int_type  sgetc() {
				return 0 < _Gnavail() ? _Traits::to_int_type(*gptr()) : underflow();
			}

			streamsize  sgetn(_Elem* _Ptr,
				streamsize _Count) {
				return xsgetn(_Ptr, _Count);
			}

			int_type  snextc() {
				return 1 < _Gnavail() ? _Traits::to_int_type(*_Gnpreinc())
					: _Traits::eq_int_type(_Traits::eof(), sbumpc()) ? _Traits::eof() : sgetc();
			}

			int_type  sputbackc(_Elem _Ch) {
				return gptr() != nullptr && eback() < gptr() && _Traits::eq(_Ch, gptr()[-1])
					? _Traits::to_int_type(*_Gndec())
					: pbackfail(_Traits::to_int_type(_Ch));
			}


			void  stossc() {
				if (0 < _Gnavail()) {
					_Gninc();
				}
				else {
					uflow();
				}
			}
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

			int_type  sungetc() {
				return gptr() != nullptr && eback() < gptr() ? _Traits::to_int_type(*_Gndec()) : pbackfail();
			}

			int_type  sputc(_Elem _Ch) {
				return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));
			}

			streamsize  sputn(const _Elem* _Ptr,
				streamsize _Count) {
				return xsputn(_Ptr, _Count);
			}

			virtual void  _Lock() {
			}

			virtual void  _Unlock() {
			}

		protected:
			_Elem* eback() const {
				return *_IGfirst;
			}

			_Elem* gptr() const {
				return *_IGnext;
			}

			_Elem* pbase() const {
				return *_IPfirst;
			}

			_Elem* pptr() const {
				return *_IPnext;
			}

			_Elem* egptr() const {
				return *_IGnext + *_IGcount;
			}

			void  gbump(int _Off) {
				*_IGcount -= _Off;
				*_IGnext += _Off;
			}

			void  setg(_Elem* _First, _Elem* _Next, _Elem* _Last) {
				*_IGfirst = _First;
				*_IGnext = _Next;
				*_IGcount = (int)(_Last - _Next);
			}

			_Elem* epptr() const {
				return *_IPnext + *_IPcount;
			}

			_Elem* _Gndec() {
				++* _IGcount;
				return -- * _IGnext;
			}

			_Elem* _Gninc() {
				--* _IGcount;
				return (*_IGnext)++;
			}

			_Elem* _Gnpreinc() {
				--* _IGcount;
				return ++(*_IGnext);
			}

			streamsize  _Gnavail() const {
				return *_IGnext != nullptr ? *_IGcount : 0;
			}

			void  pbump(int _Off) {
				*_IPcount -= _Off;
				*_IPnext += _Off;
			}

			void  setp(_Elem* _First, _Elem* _Last) {
				*_IPfirst = _First;
				*_IPnext = _First;
				*_IPcount = (int)(_Last - _First);
			}

			void  setp(
				_Elem* _First, _Elem* _Next, _Elem* _Last) {
				*_IPfirst = _First;
				*_IPnext = _Next;
				*_IPcount = (int)(_Last - _Next);
			}

			_Elem* _Pninc() {
				--* _IPcount;
				return (*_IPnext)++;
			}

			streamsize  _Pnavail() const {
				return *_IPnext != nullptr ? *_IPcount : 0;
			}

			void  _Init() {
				_IGfirst = &_Gfirst;
				_IPfirst = &_Pfirst;
				_IGnext = &_Gnext;
				_IPnext = &_Pnext;
				_IGcount = &_Gcount;
				_IPcount = &_Pcount;
				setp(nullptr, nullptr);
				setg(nullptr, nullptr, nullptr);
			}

			void  _Init(_Elem** _Gf, _Elem** _Gn, int* _Gc, _Elem** _Pf, _Elem** _Pn,
				int* _Pc) {
				_IGfirst = _Gf;
				_IPfirst = _Pf;
				_IGnext = _Gn;
				_IPnext = _Pn;
				_IGcount = _Gc;
				_IPcount = _Pc;
			}

			virtual int_type  overflow(int_type = _Traits::eof()) {
				return _Traits::eof();
			}

			virtual int_type  pbackfail(
				int_type = _Traits::eof()) {
				return _Traits::eof();
			}

			virtual streamsize  showmanyc() {
				return 0;
			}

			virtual int_type  underflow() {
				return _Traits::eof();
			}

			virtual int_type  uflow() {
				return _Traits::eq_int_type(_Traits::eof(), underflow()) ? _Traits::eof() : _Traits::to_int_type(*_Gninc());
			}

			virtual streamsize  xsgetn(_Elem* _Ptr, streamsize _Count) {
				const streamsize _Start_count = _Count;

				while (0 < _Count) {
					streamsize _Size = _Gnavail();
					if (0 < _Size) {
						if (_Count < _Size) {
							_Size = _Count;
						}

						_Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));
						_Ptr += _Size;
						_Count -= _Size;
						gbump(static_cast<int>(_Size));
					}
					else {
						const int_type _Meta = uflow();
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							break;
						}


						*_Ptr++ = _Traits::to_char_type(_Meta);
						--_Count;
					}
				}

				return _Start_count - _Count;
			}

			virtual streamsize  xsputn(
				const _Elem* _Ptr, streamsize _Count) {
				const streamsize _Start_count = _Count;
				while (0 < _Count) {
					streamsize _Size = _Pnavail();
					if (0 < _Size) {
						if (_Count < _Size) {
							_Size = _Count;
						}

						_Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));
						_Ptr += _Size;
						_Count -= _Size;
						pbump(static_cast<int>(_Size));
					}
					else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr)))) {
						break;
					}
					else {
						++_Ptr;
						--_Count;
					}
				}

				return _Start_count - _Count;
			}

			virtual pos_type  seekoff(off_type, ios_base::seekdir,
				ios_base::openmode = ios_base::in | ios_base::out) {
				return streampos(-1);
			}

			virtual pos_type  seekpos(pos_type,
				ios_base::openmode = ios_base::in | ios_base::out) {
				return streampos(-1);
			}

			virtual basic_streambuf* setbuf(
				_Elem*, streamsize) {
				return this;
			}

			virtual int  sync() {
				return 0;
			}

			virtual void  imbue(const locale&) {
			}

		private:
			_Elem* _Gfirst;
			_Elem* _Pfirst;
			_Elem** _IGfirst;
			_Elem** _IPfirst;
			_Elem* _Gnext;
			_Elem* _Pnext;
			_Elem** _IGnext;
			_Elem** _IPnext;

			int _Gcount;
			int _Pcount;
			int* _IGcount;
			int* _IPcount;

		protected:
			locale* _Plocale;
	};




	template class __declspec(dllimport) basic_streambuf<char, char_traits<char>>;
	template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t>>;
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"




#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"


	template <class _Elem,
		class _Traits>
		class istreambuf_iterator {
		public:
			using iterator_category = input_iterator_tag;
			using value_type        = _Elem;
			using difference_type   = typename _Traits::off_type;
			using pointer           = const _Elem*;
			using reference         = _Elem;

			using char_type      = _Elem;
			using traits_type    = _Traits;
			using streambuf_type = basic_streambuf<_Elem, _Traits>;
			using istream_type   = basic_istream<_Elem, _Traits>;

			using int_type = typename traits_type::int_type;

			constexpr istreambuf_iterator() noexcept : _Strbuf(nullptr), _Got(true), _Val() {}

			istreambuf_iterator(streambuf_type* _Sb) noexcept
				: _Strbuf(_Sb), _Got(_Sb == nullptr), _Val() {
			}

			istreambuf_iterator(istream_type& _Istr) noexcept
				: _Strbuf(_Istr.rdbuf()), _Got(_Strbuf == nullptr), _Val() {
			}

		private:
			class _Istreambuf_proxy {
			public:
				_Elem operator*() const {
					return _Keep;
				}

			private:
				friend istreambuf_iterator;
				_Istreambuf_proxy(streambuf_type* _Strbuf_, _Elem _Keep_) : _Strbuf(_Strbuf_), _Keep(_Keep_) {}

				streambuf_type* _Strbuf;
				_Elem _Keep;
			};

		public:
			istreambuf_iterator(const _Istreambuf_proxy& _Px) noexcept
				: _Strbuf(_Px._Strbuf), _Got(_Strbuf == nullptr), _Val() {
			}

			_Elem operator*() const {
				if (!_Got) {
					_Peek();
				}


				do { if (_Strbuf != nullptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf", 462, 0, "%s", "istreambuf_iterator is not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"istreambuf_iterator is not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf", 462, 0); } while (false); }; } while (false);
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

				return _Val;
			}

			istreambuf_iterator& operator++() {

				do { if (_Strbuf != nullptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf", 470, 0, "%s", "istreambuf_iterator is not incrementable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"istreambuf_iterator is not incrementable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf", 470, 0); } while (false); }; } while (false);
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"

				_Inc();
				return *this;
			}

			_Istreambuf_proxy operator++(int) {
				if (!_Got) {
					_Peek();
				}

				_Istreambuf_proxy _Tmp{ _Strbuf, _Val };
				++* this;
				return _Tmp;
			}

			bool equal(const istreambuf_iterator& _Right) const {
				if (!_Got) {
					_Peek();
				}

				if (!_Right._Got) {
					_Right._Peek();
				}

				return (_Strbuf == nullptr && _Right._Strbuf == nullptr) || (_Strbuf != nullptr && _Right._Strbuf != nullptr);
			}

		private:
			void _Inc() {
				if (_Strbuf == nullptr || traits_type::eq_int_type(traits_type::eof(), _Strbuf->sbumpc())) {
					_Strbuf = nullptr;
					_Got = true;
				}
				else {
					_Got = false;
				}
			}

			_Elem _Peek() const {
				int_type _Meta;
				if (_Strbuf == nullptr || traits_type::eq_int_type(traits_type::eof(), _Meta = _Strbuf->sgetc())) {
					_Strbuf = nullptr;
				}
				else {
					_Val = traits_type::to_char_type(_Meta);
				}

				_Got = true;
				return _Val;
			}

			mutable streambuf_type* _Strbuf;
			mutable bool _Got;
			mutable _Elem _Val;
	};

	template <class _Elem, class _Traits>
	inline bool operator==(const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right) {
		return _Left.equal(_Right);
	}

	template <class _Elem, class _Traits>
	inline bool operator!=(const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right) {
		return !(_Left == _Right);
	}


	template <class _Elem,
		class _Traits>
		class ostreambuf_iterator {
		public:
			using iterator_category = output_iterator_tag;
			using value_type        = void;
			using difference_type   = void;
			using pointer           = void;
			using reference         = void;

			using char_type      = _Elem;
			using traits_type    = _Traits;
			using streambuf_type = basic_streambuf<_Elem, _Traits>;
			using ostream_type   = basic_ostream<_Elem, _Traits>;

			ostreambuf_iterator(streambuf_type* _Sb) noexcept
				: _Failed(false), _Strbuf(_Sb) {
			}

			ostreambuf_iterator(ostream_type& _Ostr) noexcept
				: _Failed(false), _Strbuf(_Ostr.rdbuf()) {
			}

			ostreambuf_iterator& operator=(_Elem _Right) {
				if (_Strbuf == nullptr || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {
					_Failed = true;
				}

				return *this;
			}

			ostreambuf_iterator& operator*() {
				return *this;
			}

			ostreambuf_iterator& operator++() {
				return *this;
			}

			ostreambuf_iterator& operator++(int) {
				return *this;
			}

			bool failed() const noexcept {
				return _Failed;
			}

		private:
			bool _Failed;
			streambuf_type* _Strbuf;
	};
}



#pragma warning(pop)
#pragma pack(pop)
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\streambuf"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )







extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"

	extern  float __cdecl _Stofx(
		const char*, char**, long, int*);
	extern  double __cdecl _Stodx(
		const char*, char**, long, int*);
	extern  long double __cdecl _Stoldx(
		const char*, char**, long, int*);
	extern  long __cdecl _Stolx(
		const char*, char**, int, int*);
	extern  unsigned long __cdecl _Stoulx(
		const char*, char**, int, int*);
	extern  long long __cdecl _Stollx(
		const char*, char**, int, int*);
	extern  unsigned long long __cdecl _Stoullx(
		const char*, char**, int, int*);


}
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"

namespace std {


	inline double _Stodx_v2(const char* _Str, char** _Endptr, int _Pten, int* _Perr) {
		int& _Errno_ref = (*_errno());
		const int _Orig = _Errno_ref;

		_Errno_ref = 0;
		double _Val = ::strtod(_Str, _Endptr);
		*_Perr = _Errno_ref;
		_Errno_ref = _Orig;

		if (_Pten != 0) {
			_Val *= ::pow(10.0, static_cast<double>(_Pten));
		}

		return _Val;
	}


	inline float _Stofx_v2(const char* _Str, char** _Endptr, int _Pten, int* _Perr) {
		int& _Errno_ref = (*_errno());
		const int _Orig = _Errno_ref;

		_Errno_ref = 0;
		float _Val = ::strtof(_Str, _Endptr);
		*_Perr = _Errno_ref;
		_Errno_ref = _Orig;

		if (_Pten != 0) {
			_Val *= ::powf(10.0f, static_cast<float>(_Pten));
		}

		return _Val;
	}


	template <class _Elem, size_t _Base_size>
	inline size_t _Find_elem(const _Elem(&_Base)[_Base_size],
		const _Elem _Ch) {

		return static_cast<size_t>(_Find_unchecked(_Base, _Base + (_Base_size - 1), _Ch) - _Base);
	}

	inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) {
		const size_t _Count = ::wcslen(_Ptr) + 1;

		wchar_t* _Ptrdest = (wchar_t*)_calloc_dbg(_Count, sizeof(wchar_t), 2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum", 91);

		if (!_Ptrdest) {
			_Xbad_alloc();
		}

		::wmemcpy(_Ptrdest, _Ptr, _Count);
		return _Ptrdest;
	}


	template <class _Elem>
	class numpunct : public locale::facet {
	private:
		friend _Tidy_guard<numpunct>;

	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using string_type = basic_string<_Elem, char_traits<_Elem>, allocator<_Elem>>;
		using char_type   = _Elem;

		__declspec(dllimport) static locale::id id;

		_Elem decimal_point() const {
			return do_decimal_point();
		}

		_Elem thousands_sep() const {
			return do_thousands_sep();
		}

		string grouping() const {
			return do_grouping();
		}

		string_type falsename() const {
			return do_falsename();
		}

		string_type truename() const {
			return do_truename();
		}

		explicit numpunct(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0) {
				_Kseparator =
					_Maklocchr(',', static_cast<_Elem*>(nullptr), _Lobj._Getcvt());
			}
			}
		}

		numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
			: locale::facet(_Refs) {
			_Init(_Lobj, _Isdef);
		}

		static size_t _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->c_str()), 0, true);
			}
			return 4;
		}

	protected:
		virtual  ~numpunct() noexcept {
			_Tidy();
		}

		numpunct(const char* _Locname, size_t _Refs = 0, bool _Isdef = false)
			: locale::facet(_Refs) {
				{ _Locinfo _Lobj(_Locname);
				_Init(_Lobj, _Isdef);
				}
		}

		template <class _Elem2>
		void _Getvals(_Elem2, const lconv* _Ptr, _Locinfo::_Cvtvec _Cvt) {
			_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2*>(nullptr), _Cvt);
			_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2*>(nullptr), _Cvt);
		}

		void _Getvals(wchar_t, const lconv* _Ptr, _Locinfo::_Cvtvec) {
			_Dp = (_Elem)_Ptr->_W_decimal_point[0];
			_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

		void _Init(const _Locinfo& _Lobj, bool _Isdef = false) {
			const lconv* _Ptr = _Lobj._Getlconv();
			_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

			_Grouping = nullptr;
			_Falsename = nullptr;
			_Truename = nullptr;

			_Tidy_guard<numpunct> _Guard{ this };
			_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char*>(nullptr), _Lobj._Getcvt());
			_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem*>(nullptr), _Cvt);
			_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem*>(nullptr), _Cvt);
			_Guard._Target = nullptr;

			if (_Isdef) {

				_Dp = _Maklocchr('.', static_cast<_Elem*>(nullptr), _Cvt);
				_Kseparator = _Maklocchr(',', static_cast<_Elem*>(nullptr), _Cvt);
			}
			else {
				_Getvals((_Elem)0, _Ptr, _Cvt);
			}
		}

		virtual _Elem  do_decimal_point() const {
			return _Dp;
		}

		virtual _Elem  do_thousands_sep() const {
			return _Kseparator;
		}

		virtual string  do_grouping() const {
			return string(_Grouping);
		}

		virtual string_type  do_falsename() const {
			return string_type(_Falsename);
		}

		virtual string_type  do_truename() const {
			return string_type(_Truename);
		}

	private:
		void _Tidy() noexcept {
			::free((void*)_Grouping);
			::free((void*)_Falsename);
			::free((void*)_Truename);
		}

		const char* _Grouping;
		_Elem _Dp;
		_Elem _Kseparator;
		const _Elem* _Falsename;
		const _Elem* _Truename;
	};


	template <class _Elem>
	class numpunct_byname : public numpunct<_Elem> {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit numpunct_byname(const char* _Locname, size_t _Refs = 0)
			: numpunct<_Elem>(_Locname, _Refs) {
		}

		explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
			: numpunct<_Elem>(_Str.c_str(), _Refs) {
		}

	protected:
		virtual  ~numpunct_byname() noexcept {}
	};








	template <class _Elem>
	locale::id numpunct<_Elem>::id;




#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"


	template <class _Elem, class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem>>>
	class num_get : public locale::facet {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new num_get<_Elem, _InIt>(_Locinfo(_Ploc->c_str()));
			}

			return 4;
		}

		static locale::id id;

	protected:
		virtual  ~num_get() noexcept {}

		void _Init(const _Locinfo&) {
		}

	public:
		explicit  num_get(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
			: locale::facet(_Refs) {
			_Init(_Lobj);
		}

		using char_type = _Elem;
		using iter_type = _InIt;

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			void*& _Val) const {
			return do_get(_First, _Last, _Iosbase, _State, _Val);
		}

	protected:
		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const {
			_Adl_verify_range(_First, _Last);
			if (_Iosbase.flags() & ios_base::boolalpha) {
				const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
				basic_string<_Elem> _Str(static_cast<size_t>(1), _Elem{});
				_Str += _Punct_fac.falsename();
				_Str.push_back(_Elem{});
				_Str += _Punct_fac.truename();
				switch (_Getloctxt(_First, _Last, 2, _Str.c_str())) {
				case 0:
					_Val = false;
					break;
				case 1:
					_Val = true;
					break;
				default:
					_Val = false;
					_State = ios_base::failbit;
					break;
				}
			}
			else {
				char _Ac[32];
				const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
				if (_Ac[0] == '\0') {





					_Val = false;
					_State = ios_base::failbit;
				}
				else {
					char* _Ep;
					int _Errno;
					const long _Ans = ::_Stolx(_Ac, &_Ep, _Base, &_Errno);
					if (_Ep == _Ac || _Errno != 0) {
						_Val = true;
						_State = ios_base::failbit;
					}
					else {
						_Val = _Ans != 0;
						if (_Ans != 0 && _Ans != 1) {
							_State = ios_base::failbit;
						}
					}
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0;
			}
			else {
				const bool _Minus = _Ac[0] == '-';
				const char* _Digits = _Ac;


				if (_Minus) {
					++_Digits;
				}

				char* _Ep;
				int _Errno;
				const unsigned long _Tmp = ::_Stoulx(_Digits, &_Ep, _Base, &_Errno);
				_Val = static_cast<unsigned short>(_Tmp);
				if (_Ep == _Digits || _Errno != 0 || _Tmp > 0xffff) {
					_State = ios_base::failbit;
					_Val = 0xffff;
				}
				else if (_Minus) {

					_Val = static_cast<unsigned short>(0 - _Val);
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const {
			static_assert(sizeof(unsigned int) == sizeof(unsigned long),
				"Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)");
			unsigned long _Tmp;
			_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Tmp);
			_Val = _Tmp;
			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0;
			}
			else {
				char* _Ep;
				int _Errno;
				_Val = ::_Stolx(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0;
			}
			else {
				char* _Ep;
				int _Errno;
				_Val = ::_Stoulx(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0;
			}
			else {
				char* _Ep;
				int _Errno;
				_Val = ::_Stollx(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0;
			}
			else {
				int _Errno;
				char* _Ep;
				_Val = ::_Stoullx(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}







		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[(8 + 768 + 16)];
			int _Hexexp = 1000000000;
			const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0.0f;
			}
			else {
				int _Errno;
				char* _Ep;
				_Val = _Stofx_v2(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
					_Val = 0.0f;
				}
				else if (_Hexexp != 1000000000 && _Hexexp != 0) {
					_Val = ::ldexpf(_Val, 4 * _Hexexp);
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[(8 + 768 + 16)];
			int _Hexexp = 1000000000;
			const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = 0.0;
			}
			else {
				int _Errno;
				char* _Ep;
				_Val = _Stodx_v2(_Ac, &_Ep, _Base, &_Errno);
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
					_Val = 0.0;
				}
				else if (_Hexexp != 1000000000 && _Hexexp != 0) {
					_Val = ::ldexp(_Val, 4 * _Hexexp);
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}


		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const {
			static_assert(sizeof(double) == sizeof(long double), "Bad assumption: sizeof(double) == sizeof(long double).");
			double _Result;
			_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Result);
			_Val = _Result;
			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			void*& _Val) const {
			_Adl_verify_range(_First, _Last);
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex, _Iosbase.getloc());
			if (_Ac[0] == '\0') {
				_State = ios_base::failbit;
				_Val = nullptr;
			}
			else {
				int _Errno;
				char* _Ep;

				_Val = reinterpret_cast<void*>(::_Stoullx(_Ac, &_Ep, _Base, &_Errno));


#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"
				if (_Ep == _Ac || _Errno != 0) {
					_State = ios_base::failbit;
					_Val = nullptr;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

	private:
		int __cdecl _Getifld(char* _Ac, _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const {
			const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Loc);
			const string _Grouping = _Punct_fac.grouping();
			const _Elem _Kseparator = _Grouping.size() == 0 ? (_Elem)0 : _Punct_fac.thousands_sep();

			constexpr int _Numget_signoff = 22;
			constexpr int _Numget_xoff = 24;
			static constexpr char _Src[] = { "0123456789ABCDEFabcdef-+Xx" };
			_Elem _Atoms[sizeof(_Src)];
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Loc);
			_Ctype_fac.widen(&_Src[0], &_Src[sizeof(_Src)], _Atoms);

			char* _Ptr = _Ac;

			if (_First != _Last) {
				if (*_First == _Atoms[_Numget_signoff + 1]) {
					*_Ptr++ = '+';
					++_First;
				}
				else if (*_First == _Atoms[_Numget_signoff]) {
					*_Ptr++ = '-';
					++_First;
				}
			}

			_Basefield &= ios_base::basefield;
			int _Base = _Basefield == ios_base::oct
				? 8
				: _Basefield == ios_base::hex ? 16 : _Basefield == ios_base::_Fmtzero ? 0 : 10;

			bool _Seendigit = false;
			bool _Nonzero = false;

			if (_First != _Last && *_First == _Atoms[0]) {
				_Seendigit = true;
				++_First;
				if (_First != _Last && (*_First == _Atoms[_Numget_xoff + 1] || *_First == _Atoms[_Numget_xoff])
					&& (_Base == 0 || _Base == 16)) {
					_Base = 16;
					_Seendigit = false;
					++_First;
				}
				else if (_Base == 0) {
					_Base = 8;
				}
			}

			const auto _Dlen = static_cast<size_t>(_Base == 0 || _Base == 10 ? 10 : _Base == 8 ? 8 : 16 + 6);
			string _Groups((size_t)1, (char)_Seendigit);
			size_t _Group = 0;

			for (char* const _Pe = &_Ac[32 - 1]; _First != _Last; ++_First) {
				size_t _Idx = _Find_elem(_Atoms, *_First);
				if (_Idx < _Dlen) {
					*_Ptr = _Src[_Idx];
					if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe) {
						++_Ptr;
						_Nonzero = true;
					}

					_Seendigit = true;
					if (_Groups[_Group] != 127) {
						++_Groups[_Group];
					}
				}
				else if (_Groups[_Group] == '\0' || _Kseparator == (_Elem)0 || *_First != _Kseparator) {
					break;
				}
				else {
					_Groups.push_back('\0');
					++_Group;
				}
			}

			if (_Group != 0) {
				if ('\0' < _Groups[_Group]) {
					++_Group;
				}
				else {
					_Seendigit = false;
				}
			}

			for (const char* _Pg = &_Grouping[0]; _Seendigit && 0 < _Group;) {
				if (*_Pg == 127) {
					break;
				}
				else if ((0 < --_Group && *_Pg != _Groups[_Group]) || (0 == _Group && *_Pg < _Groups[_Group])) {
					_Seendigit = false;
				}
				else if ('\0' < _Pg[1]) {
					++_Pg;
				}
			}

			if (_Seendigit && !_Nonzero) {
				*_Ptr++ = '0';
			}
			else if (!_Seendigit) {
				_Ptr = _Ac;
			}

			*_Ptr = '\0';
			return _Base;
		}

		int __cdecl _Getffld(char* _Ac, _InIt& _First, _InIt& _Last, ios_base& _Iosbase,
			int* _Phexexp) const {
			if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat) {
				return _Getffldx(_Ac, _First, _Last, _Iosbase, _Phexexp);
			}

			const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			const string _Grouping = _Punct_fac.grouping();
			char* _Ptr = _Ac;
			bool _Bad = false;
			bool _Sticky = false;

			constexpr int _Numget_signoff = 10;
			constexpr int _Numget_eoff = 12;
			static constexpr char _Src[] = { "0123456789-+Ee" };
			_Elem _Atoms[sizeof(_Src)];
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			_Ctype_fac.widen(&_Src[0], &_Src[sizeof(_Src)], _Atoms);

			if (_First != _Last) {
				if (*_First == _Atoms[_Numget_signoff + 1]) {
					*_Ptr++ = '+';
					++_First;
				}
				else if (*_First == _Atoms[_Numget_signoff]) {
					*_Ptr++ = '-';
					++_First;
				}
			}

			char* _Leading = _Ptr;
			*_Ptr++ = '0';

			bool _Seendigit = false;
			int _Significant = 0;
			int _Pten = 0;
			size_t _Idx;

			const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

			const char* _Pg = &_Grouping[0];
			if (*_Pg == 127 || *_Pg <= '\0') {
				for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < 10; _Seendigit = true, (void) ++_First) {
					if (_Max_sig_dig <= _Significant) {
						++_Pten;
						if (0 < _Idx) {
							_Sticky = true;
						}
					}
					else if (_Idx != 0 || _Significant != 0) {
						*_Ptr++ = _Src[_Idx];
						++_Significant;
					}
				}
			}
			else {
				const _Elem _Kseparator = _Grouping.size() == 0 ? (_Elem)0 : _Punct_fac.thousands_sep();
				string _Groups((size_t)1, '\0');
				size_t _Group = 0;

				for (; _First != _Last; ++_First) {
					if ((_Idx = _Find_elem(_Atoms, *_First)) < 10) {
						_Seendigit = true;
						if (_Max_sig_dig <= _Significant) {
							++_Pten;
							if (0 < _Idx) {
								_Sticky = true;
							}
						}
						else if (_Idx != 0 || _Significant != 0) {
							*_Ptr++ = _Src[_Idx];
							++_Significant;
						}

						if (_Groups[_Group] != 127) {
							++_Groups[_Group];
						}
					}
					else if (_Groups[_Group] == '\0' || _Kseparator == (_Elem)0 || *_First != _Kseparator) {
						break;
					}
					else {
						_Groups.push_back('\0');
						++_Group;
					}
				}

				if (_Group != 0) {
					if ('\0' < _Groups[_Group]) {
						++_Group;
					}
					else {
						_Bad = true;
					}
				}

				while (!_Bad && 0 < _Group) {
					if (*_Pg == 127) {
						break;
					}

					if ((0 < --_Group && *_Pg != _Groups[_Group]) || (0 == _Group && *_Pg < _Groups[_Group])) {
						_Bad = true;
					}
					else if ('\0' < _Pg[1]) {
						++_Pg;
					}
				}
			}

			if (_First != _Last && *_First == _Punct_fac.decimal_point()) {
				*_Ptr++ = localeconv()->decimal_point[0];
				++_First;
			}

			if (*_Phexexp != 1000000000 && _Significant == 0) {
				for (; _First != _Last && *_First == _Atoms[0]; _Seendigit = true, (void) ++_First) {
					--_Pten;
				}

				if (_Pten < 0) {
					*_Ptr++ = '0';
					++_Pten;
				}
			}

			for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < 10; _Seendigit = true, (void) ++_First) {
				if (_Significant < _Max_sig_dig) {
					*_Ptr++ = _Src[_Idx];
					++_Significant;
				}
				else if (0 < _Idx) {
					_Sticky = true;
				}
			}

			if (_Sticky) {
				char* _Px = _Ptr;
				while (--_Px != _Leading) {
					if (*_Px != localeconv()->decimal_point[0]) {
						if (*_Px != '9') {
							++* _Px;
							break;
						}

						*_Px = '0';
					}
				}

				if (_Px == _Leading) {
					*_Px = '1';
					++_Pten;
				}
			}

			if (_Seendigit && _First != _Last
				&& (*_First == _Atoms[_Numget_eoff + 1]
					|| *_First == _Atoms[_Numget_eoff])) {
				*_Ptr++ = 'e';
				++_First;
				_Seendigit = false;
				_Significant = 0;

				if (_First != _Last) {
					if (*_First == _Atoms[_Numget_signoff + 1]) {
						*_Ptr++ = '+';
						++_First;
					}
					else if (*_First == _Atoms[_Numget_signoff]) {
						*_Ptr++ = '-';
						++_First;
					}
				}

				for (; _First != _Last && *_First == _Atoms[0]; ++_First) {
					_Seendigit = true;
				}

				if (_Seendigit) {
					*_Ptr++ = '0';
				}

				for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < 10; _Seendigit = true, (void) ++_First) {
					if (_Significant < 8) {
						*_Ptr++ = _Src[_Idx];
						++_Significant;
					}
				}
			}

			if (_Bad || !_Seendigit) {
				_Ptr = _Ac;
			}

			*_Ptr = '\0';
			return _Pten;
		}

		int __cdecl _Getffldx(char* _Ac, _InIt& _First, _InIt& _Last, ios_base& _Iosbase,
			int* _Phexexp) const {
			const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			const string _Grouping = _Punct_fac.grouping();

			constexpr int _Numget_signoff = 22;
			constexpr int _Numget_xoff = 24;
			constexpr int _Numget_poff = 26;
			static constexpr char _Src[] = { "0123456789ABCDEFabcdef-+XxPp" };
			_Elem _Atoms[sizeof(_Src)];
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			_Ctype_fac.widen(&_Src[0], &_Src[sizeof(_Src)], _Atoms);

			char* _Ptr = _Ac;
			bool _Bad = false;
			size_t _Idx;

			if (_First != _Last) {
				if (*_First == _Atoms[_Numget_signoff + 1]) {
					*_Ptr++ = '+';
					++_First;
				}
				else if (*_First == _Atoms[_Numget_signoff]) {
					*_Ptr++ = '-';
					++_First;
				}
			}

			*_Ptr++ = '0';
			*_Ptr++ = 'x';

			bool _Seendigit = false;
			int _Significant = 0;
			int _Phex = 0;

			if (_First != _Last && *_First == _Atoms[0]) {
				if (++_First != _Last && (*_First == _Atoms[_Numget_xoff + 1] || *_First == _Atoms[_Numget_xoff])) {
					++_First;
				}
				else {
					_Seendigit = true;
				}
			}

			const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

			const char* _Pg = &_Grouping[0];
			if (*_Pg == 127 || *_Pg <= '\0') {
				for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
					_Seendigit = true, (void) ++_First) {
					if (_Max_sig_dig <= _Significant) {
						++_Phex;
					}
					else if (_Idx != 0 || _Significant != 0) {
						*_Ptr++ = _Src[_Idx];
						++_Significant;
					}
				}
			}
			else {
				const _Elem _Kseparator = _Grouping.size() == 0 ? (_Elem)0 : _Punct_fac.thousands_sep();
				string _Groups((size_t)1, '\0');
				size_t _Group = 0;

				for (; _First != _Last; ++_First) {
					if ((_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff) {
						_Seendigit = true;
						if (_Max_sig_dig <= _Significant) {
							++_Phex;
						}
						else if (_Idx != 0 || _Significant != 0) {
							*_Ptr++ = _Src[_Idx];
							++_Significant;
						}

						if (_Groups[_Group] != 127) {
							++_Groups[_Group];
						}
					}
					else if (_Groups[_Group] == '\0' || _Kseparator == (_Elem)0 || *_First != _Kseparator) {
						break;
					}
					else {
						_Groups.push_back('\0');
						++_Group;
					}
				}

				if (_Group != 0) {
					if ('\0' < _Groups[_Group]) {
						++_Group;
					}
					else {
						_Bad = true;
					}
				}

				while (!_Bad && 0 < _Group) {
					if (*_Pg == 127) {
						break;
					}

					if ((0 < --_Group && *_Pg != _Groups[_Group]) || (0 == _Group && *_Pg < _Groups[_Group])) {
						_Bad = true;
					}
					else if ('\0' < _Pg[1]) {
						++_Pg;
					}
				}
			}

			if (_Seendigit && _Significant == 0) {
				*_Ptr++ = '0';
			}

			if (_First != _Last && *_First == _Punct_fac.decimal_point()) {
				*_Ptr++ = localeconv()->decimal_point[0];
				++_First;
			}

			if (_Significant == 0) {
				for (; _First != _Last && *_First == _Atoms[0]; _Seendigit = true, (void) ++_First) {
					--_Phex;
				}

				if (_Phex < 0) {
					*_Ptr++ = '0';
					++_Phex;
				}
			}

			for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
				_Seendigit = true, (void) ++_First) {
				if (_Significant < _Max_sig_dig) {
					*_Ptr++ = _Src[_Idx];
					++_Significant;
				}
			}

			if (_Seendigit && _First != _Last
				&& (*_First == _Atoms[_Numget_poff + 1]
					|| *_First == _Atoms[_Numget_poff])) {
				*_Ptr++ = 'p';
				++_First;
				_Seendigit = false;
				_Significant = 0;

				if (_First != _Last) {
					if (*_First == _Atoms[_Numget_signoff + 1]) {
						*_Ptr++ = '+';
						++_First;
					}
					else if (*_First == _Atoms[_Numget_signoff]) {
						*_Ptr++ = '-';
						++_First;
					}
				}

				for (; _First != _Last && *_First == _Atoms[0]; ++_First) {
					_Seendigit = true;
				}

				if (_Seendigit) {
					*_Ptr++ = '0';
				}

				for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
					_Seendigit = true, (void) ++_First) {
					if (_Significant < 8) {
						*_Ptr++ = _Src[_Idx];
						++_Significant;
					}
				}
			}

			if (_Bad || !_Seendigit) {
				_Ptr = _Ac;
			}

			*_Ptr = '\0';
			*_Phexexp = _Phex;
			return 0;
		}


	};







	template <class _Elem, class _InIt>
	locale::id num_get<_Elem, _InIt>::id;






	template <class _Elem, class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem>>>
	class num_put : public locale::facet {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));
			}

			return 4;
		}

		static locale::id id;

	protected:
		virtual  ~num_put() noexcept {}

		void  _Init(const _Locinfo&) {
		}

	public:
		explicit  num_put(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
			: locale::facet(_Refs) {
			_Init(_Lobj);
		}

		using char_type = _Elem;
		using iter_type = _OutIt;

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, bool _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill,
			unsigned long _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long long _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill,
			unsigned long long _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

		_OutIt  put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const void* _Val) const {
			return do_put(_Dest, _Iosbase, _Fill, _Val);
		}

	protected:
		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, bool _Val) const {
			if (!(_Iosbase.flags() & ios_base::boolalpha)) {
				return do_put(_Dest, _Iosbase, _Fill, (long)_Val);
			}
			else {
				const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
				basic_string<_Elem> _Str;
				if (_Val) {
					_Str.assign(_Punct_fac.truename());
				}
				else {
					_Str.assign(_Punct_fac.falsename());
				}

				size_t _Fillcount = _Iosbase.width() <= 0 || (size_t)_Iosbase.width() <= _Str.size()
					? 0
					: (size_t)_Iosbase.width() - _Str.size();

				if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) {
					_Dest = _Rep(_Dest, _Fill, _Fillcount);
					_Fillcount = 0;
				}
				_Dest = _Put(_Dest, _Str.c_str(), _Str.size());
				_Iosbase.width(0);
				return _Rep(_Dest, _Fill, _Fillcount);
			}
		}

		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long _Val) const {
			char _Buf[2 * 32], _Fmt[6];

			return _Iput(_Dest, _Iosbase, _Fill, _Buf,
				static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "ld", _Iosbase.flags()), _Val)));
		}

		virtual _OutIt  do_put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill,
			unsigned long _Val) const {
			char _Buf[2 * 32], _Fmt[6];

			return _Iput(_Dest, _Iosbase, _Fill, _Buf,
				static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "lu", _Iosbase.flags()), _Val)));
		}

		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long long _Val) const {
			char _Buf[2 * 32], _Fmt[8];

			return _Iput(_Dest, _Iosbase, _Fill, _Buf,
				static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Ld", _Iosbase.flags()), _Val)));
		}

		virtual _OutIt  do_put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill,
			unsigned long long _Val) const {
			char _Buf[2 * 32], _Fmt[8];

			return _Iput(_Dest, _Iosbase, _Fill, _Buf,
				static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Lu", _Iosbase.flags()), _Val)));
		}

		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const {
			string _Buf;
			char _Fmt[8];
			bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed;
			streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed ? 6 : _Iosbase.precision();
			size_t _Bufsize = (size_t)_Precision;
			if (_Isfixed && 1e10 < ::fabs(_Val)) {
				int _Ptwo;
				(void) ::frexp(_Val, &_Ptwo);
				_Bufsize += ::abs(_Ptwo) * 30103L / 100000L;
			}

			_Buf.resize(_Bufsize + 50);
			const auto _Ngen = static_cast<size_t>(::sprintf_s(
				(char*)_Buf.c_str(), _Buf.size(), _Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val));

			return _Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen);
		}

		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const {
			string _Buf;
			char _Fmt[8];
			bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed;
			streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed ? 6 : _Iosbase.precision();
			size_t _Bufsize = (size_t)_Precision;
			if (_Isfixed && 1e10 < ::fabsl(_Val)) {
				int _Ptwo;
				(void) ::frexpl(_Val, &_Ptwo);
				_Bufsize += ::abs(_Ptwo) * 30103L / 100000L;
			}

			_Buf.resize(_Bufsize + 50);
			const auto _Ngen = static_cast<size_t>(::sprintf_s(
				(char*)_Buf.c_str(), _Buf.size(), _Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val));

			return _Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen);
		}

		virtual _OutIt  do_put(
			_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const void* _Val) const {
			char _Buf[2 * 32];

			return _Iput(
				_Dest, _Iosbase, _Fill, _Buf, static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), "%p", _Val)));
		}

	private:
		char* __cdecl _Ffmt(
			char* _Fmt, char _Spec, ios_base::fmtflags _Flags) const {
			char* _Ptr = _Fmt;
			*_Ptr++ = '%';

			if (_Flags & ios_base::showpos) {
				*_Ptr++ = '+';
			}

			if (_Flags & ios_base::showpoint) {
				*_Ptr++ = '#';
			}

			*_Ptr++ = '.';
			*_Ptr++ = '*';
			if (_Spec != '\0') {
				*_Ptr++ = _Spec;
			}

			ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
			if (_Flags & ios_base::uppercase) {
				*_Ptr++ = _Ffl == ios_base::fixed
					? 'f'
					: _Ffl == ios_base::hexfloat ? 'A'
					: _Ffl == ios_base::scientific ? 'E' : 'G';
			}
			else {
				*_Ptr++ = _Ffl == ios_base::fixed
					? 'f'
					: _Ffl == ios_base::hexfloat ? 'a'
					: _Ffl == ios_base::scientific ? 'e' : 'g';
			}

			*_Ptr = '\0';
			return _Fmt;
		}

		_OutIt __cdecl _Fput(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const char* _Buf,
			size_t _Count) const {
			auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
			const char* _Exps;
			if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat) {
				_Exps = "eE";
			}
			else {
				_Exps = "pP";
				if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
					&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {
					_Prefix += 2;
				}
			}
			const size_t _Eoff = ::strcspn(&_Buf[0], _Exps);
			char _Dp[2] = { "." };
			_Dp[0] = ::localeconv()->decimal_point[0];
			const size_t _Poff = ::strcspn(&_Buf[0], &_Dp[0]);

			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Groupstring(_Count, _Elem(0));
			_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

			const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			const string _Grouping = _Punct_fac.grouping();
			const _Elem _Kseparator = _Punct_fac.thousands_sep();

			if (_Poff != _Count) {
				_Groupstring[_Poff] = _Punct_fac.decimal_point();
			}

			size_t _Off = _Poff == _Count ? _Eoff : _Poff;
			const char* _Pg = &_Grouping[0];
			while (*_Pg != 127 && '\0' < *_Pg && (size_t)* _Pg < _Off - _Prefix) {
				_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
				if ('\0' < _Pg[1]) {
					++_Pg;
				}
			}

			_Count = _Groupstring.size();
			size_t _Fillcount =
				_Iosbase.width() <= 0 || (size_t)_Iosbase.width() <= _Count ? 0 : (size_t)_Iosbase.width() - _Count;

			ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;
			if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) {
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
			else if (_Adjustfield == ios_base::internal) {
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
			}
			else {
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}

			_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
			_Iosbase.width(0);
			return _Rep(_Dest, _Fill, _Fillcount);
		}

		char* __cdecl _Ifmt(
			char* _Fmt, const char* _Spec, ios_base::fmtflags _Flags) const {
			char* _Ptr = _Fmt;
			*_Ptr++ = '%';

			if (_Flags & ios_base::showpos) {
				*_Ptr++ = '+';
			}

			if (_Flags & ios_base::showbase) {
				*_Ptr++ = '#';
			}

			if (_Spec[0] != 'L') {
				*_Ptr++ = _Spec[0];
			}
			else {
				*_Ptr++ = 'I';
				*_Ptr++ = '6';
				*_Ptr++ = '4';
			}

			ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
			*_Ptr++ = _Basefield == ios_base::oct ? 'o'
				: _Basefield != ios_base::hex ? _Spec[1]
				: _Flags & ios_base::uppercase ? 'X' : 'x';
			*_Ptr = '\0';
			return _Fmt;
		}

		_OutIt __cdecl _Iput(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, char* _Buf,
			size_t _Count) const {
			auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
			if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {
				_Prefix += 2;
			}

			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Groupstring(_Count, _Elem(0));
			_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

			const auto& _Punct_fac = ::std::use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			const string _Grouping = _Punct_fac.grouping();
			const char* _Pg = &_Grouping[0];
			if (*_Pg != 127 && '\0' < *_Pg) {
				const _Elem _Kseparator = _Punct_fac.thousands_sep();
				while (*_Pg != 127 && '\0' < *_Pg && (size_t)* _Pg < _Count - _Prefix) {
					_Count -= *_Pg;
					_Groupstring.insert(_Count, 1, _Kseparator);
					if ('\0' < _Pg[1]) {
						++_Pg;
					}
				}
			}

			_Count = _Groupstring.size();
			size_t _Fillcount =
				_Iosbase.width() <= 0 || (size_t)_Iosbase.width() <= _Count ? 0 : (size_t)_Iosbase.width() - _Count;

			ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;
			if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) {
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
			else if (_Adjustfield == ios_base::internal) {
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
			}
			else {
				_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}

			_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
			_Iosbase.width(0);
			return _Rep(_Dest, _Fill, _Fillcount);
		}

		_OutIt __cdecl _Put(
			_OutIt _Dest, const _Elem* _Ptr, size_t _Count) const {
			for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {
				*_Dest = *_Ptr;
			}

			return _Dest;
		}

		_OutIt __cdecl _Rep(_OutIt _Dest, _Elem _Ch, size_t _Count) const {
			for (; 0 < _Count; --_Count, (void) ++_Dest) {
				*_Dest = _Ch;
			}

			return _Dest;
		}
	};







	template <class _Elem, class _OutIt>
	locale::id num_put<_Elem, _OutIt>::id;




	template  locale::id numpunct<char>::id;
	template class __declspec(dllimport) num_get<char, istreambuf_iterator<char, char_traits<char>>>;
	template class __declspec(dllimport) num_put<char, ostreambuf_iterator<char, char_traits<char>>>;

	template  locale::id numpunct<wchar_t>::id;
	template class __declspec(dllimport) num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t>>>;
	template class __declspec(dllimport) num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t>>>;
#line 1544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"








#line 1553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"




}


#pragma warning(pop)
#pragma pack(pop)
#line 1563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocnum"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem,
		class _Traits>
		class basic_ios : public ios_base {
		public:
			using _Myos       = basic_ostream<_Elem, _Traits>;
			using _Mysb       = basic_streambuf<_Elem, _Traits>;
			using _Ctype      = ctype<_Elem>;
			using char_type   = _Elem;
			using traits_type = _Traits;
			using int_type    = typename _Traits::int_type;
			using pos_type    = typename _Traits::pos_type;
			using off_type    = typename _Traits::off_type;

			explicit  basic_ios(_Mysb* _Strbuf) {
				init(_Strbuf);
			}

			virtual  ~basic_ios() noexcept {}

			void  clear(
				iostate _State = goodbit, bool _Reraise = false) {
				ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);
			}


			void  clear(io_state _State) {
				clear((iostate)_State);
			}
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"

			void  setstate(
				iostate _State, bool _Reraise = false) {
				clear(rdstate() | _State, _Reraise);
			}


			void  setstate(io_state _State) {
				setstate((iostate)_State);
			}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"

			basic_ios & copyfmt(const basic_ios & _Right) {
				_Tiestr = _Right.tie();
				_Fillch = _Right.fill();
				ios_base::copyfmt(_Right);
				return *this;
			}

			_Myos* tie() const {
				return _Tiestr;
			}

			_Myos* tie(_Myos* _Newtie) {
				_Myos* _Oldtie = _Tiestr;
				_Tiestr = _Newtie;
				return _Oldtie;
			}

			_Mysb* rdbuf() const {
				return _Mystrbuf;
			}

			_Mysb* rdbuf(_Mysb* _Strbuf) {
				_Mysb* _Oldstrbuf = _Mystrbuf;
				_Mystrbuf = _Strbuf;
				clear();
				return _Oldstrbuf;
			}

			locale  imbue(const locale& _Loc) {
				locale _Oldlocale = ios_base::imbue(_Loc);
				if (rdbuf() != nullptr) {
					rdbuf()->pubimbue(_Loc);
				}

				return _Oldlocale;
			}

			_Elem  fill() const {
				return _Fillch;
			}

			_Elem  fill(_Elem _Newfill) {
				_Elem _Oldfill = _Fillch;
				_Fillch = _Newfill;
				return _Oldfill;
			}

			char  narrow(_Elem _Ch, char _Dflt = '\0') const {
				return ::std::use_facet<_Ctype>(getloc()).narrow(_Ch, _Dflt);
			}

			_Elem  widen(char _Byte) const {
				return ::std::use_facet<_Ctype>(getloc()).widen(_Byte);
			}

			void  move(basic_ios& _Right) {
				if (this != ::std::addressof(_Right)) {
					_Mystrbuf = nullptr;
					_Tiestr = nullptr;
					this->swap(_Right);
				}
			}

			void  move(basic_ios&& _Right) {
				if (this != ::std::addressof(_Right)) {
					_Mystrbuf = nullptr;
					_Tiestr = nullptr;
					this->swap(_Right);
				}
			}

			void  swap(basic_ios& _Right) noexcept {
				ios_base::swap(_Right);
				::std::swap(_Fillch, _Right._Fillch);
				::std::swap(_Tiestr, _Right._Tiestr);
			}

			void  set_rdbuf(_Mysb* _Strbuf) {
				_Mystrbuf = _Strbuf;
			}

		protected:
			void  init(_Mysb* _Strbuf = nullptr,
				bool _Isstd = false) {
				_Init();
				_Mystrbuf = _Strbuf;
				_Tiestr = nullptr;
				_Fillch = widen(' ');

				if (_Mystrbuf == nullptr) {
					setstate(badbit);
				}

				if (_Isstd) {
					_Addstd(this);
				}
			}

			basic_ios() {}

		private:
			_Mysb* _Mystrbuf;
			_Myos* _Tiestr;
			_Elem _Fillch;

		public:
			basic_ios(const basic_ios&) = delete;
			basic_ios& operator=(const basic_ios&) = delete;
	};




	template class __declspec(dllimport) basic_ios<char, char_traits<char>>;
	template class __declspec(dllimport) basic_ios<wchar_t, char_traits<wchar_t>>;
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"




#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"


	inline ios_base & __cdecl boolalpha(ios_base & _Iosbase) {
		_Iosbase.setf(ios_base::boolalpha);
		return _Iosbase;
	}

	inline ios_base& __cdecl dec(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::dec, ios_base::basefield);
		return _Iosbase;
	}

	inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::floatfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl fixed(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl hex(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::hex, ios_base::basefield);
		return _Iosbase;
	}

	inline ios_base& __cdecl hexfloat(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl internal(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl left(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::left, ios_base::adjustfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::boolalpha);
		return _Iosbase;
	}

	inline ios_base& __cdecl noshowbase(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::showbase);
		return _Iosbase;
	}

	inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::showpoint);
		return _Iosbase;
	}

	inline ios_base& __cdecl noshowpos(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::showpos);
		return _Iosbase;
	}

	inline ios_base& __cdecl noskipws(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::skipws);
		return _Iosbase;
	}

	inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::unitbuf);
		return _Iosbase;
	}

	inline ios_base& __cdecl nouppercase(ios_base& _Iosbase) {
		_Iosbase.unsetf(ios_base::uppercase);
		return _Iosbase;
	}

	inline ios_base& __cdecl oct(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::oct, ios_base::basefield);
		return _Iosbase;
	}

	inline ios_base& __cdecl right(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::right, ios_base::adjustfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl scientific(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
		return _Iosbase;
	}

	inline ios_base& __cdecl showbase(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::showbase);
		return _Iosbase;
	}

	inline ios_base& __cdecl showpoint(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::showpoint);
		return _Iosbase;
	}

	inline ios_base& __cdecl showpos(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::showpos);
		return _Iosbase;
	}

	inline ios_base& __cdecl skipws(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::skipws);
		return _Iosbase;
	}

	inline ios_base& __cdecl unitbuf(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::unitbuf);
		return _Iosbase;
	}

	inline ios_base& __cdecl uppercase(ios_base& _Iosbase) {
		_Iosbase.setf(ios_base::uppercase);
		return _Iosbase;
	}


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::hexfloat;
	}
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"

}



#pragma warning(pop)
#pragma pack(pop)
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ios"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
#pragma vtordisp(push, 2) 


	template <class _Elem, class _Traits>
	class basic_ostream : virtual public basic_ios<_Elem, _Traits> {
	public:
		using _Myios = basic_ios<_Elem, _Traits>;
		using _Mysb  = basic_streambuf<_Elem, _Traits>;
		using _Iter  = ostreambuf_iterator<_Elem, _Traits>;
		using _Nput  = num_put<_Elem, _Iter>;

		explicit  basic_ostream(basic_streambuf<_Elem, _Traits>* _Strbuf,

			bool _Isstd = false) {
			_Myios::init(_Strbuf, _Isstd);
		}

		basic_ostream(_Uninitialized, bool _Addit = true) {
			if (_Addit) {
				this->_Addstd(this);
			}
		}

	protected:
		basic_ostream(basic_ostream&& _Right) {
			_Myios::init();
			_Myios::move(::std::move(_Right));
		}

		basic_ostream& operator=(basic_ostream&& _Right) {
			this->swap(_Right);
			return *this;
		}

		void  swap(basic_ostream& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Myios::swap(_Right);
			}
		}

	public:
		basic_ostream(const basic_ostream&) = delete;
		basic_ostream& operator=(const basic_ostream&) = delete;

		virtual  ~basic_ostream() noexcept {}

		using int_type = typename _Traits::int_type;
		using pos_type = typename _Traits::pos_type;
		using off_type = typename _Traits::off_type;

		class _Sentry_base {
		public:
			_Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) {
				if (_Myostr.rdbuf() != nullptr) {
					_Myostr.rdbuf()->_Lock();
				}
			}

			~_Sentry_base() noexcept {
				if (_Myostr.rdbuf() != nullptr) {
					_Myostr.rdbuf()->_Unlock();
				}
			}

			basic_ostream& _Myostr;

			_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

		class sentry : public _Sentry_base {
		public:
			explicit  sentry(basic_ostream& _Ostr)
				: _Sentry_base(_Ostr) {
				if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr) {
					_Ostr.tie()->flush();
				}

				_Ok = _Ostr.good();
			}





#pragma warning(push)
#pragma warning(disable : 4996) 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"
			~sentry() noexcept {

				if (!::std::uncaught_exception()) {
					this->_Myostr._Osfx();
				}


#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"
			}



#pragma warning(pop)
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"

			explicit  operator bool() const {
				return _Ok;
			}

			sentry(const sentry&) = delete;
			sentry& operator=(const sentry&) = delete;

		private:
			bool _Ok;
		};

		bool  opfx() {
			if (this->good() && _Myios::tie() != nullptr && _Myios::tie() != this) {
				_Myios::tie()->flush();
			}

			return this->good();
		}

		void  osfx() {
			_Osfx();
		}

		void  _Osfx() {
			try {
				if (this->good() && this->flags() & ios_base::unitbuf) {
					if (_Myios::rdbuf()->pubsync() == -1) {
						_Myios::setstate(ios_base::badbit);
					}
				}
			}
			catch (...) {
			}
		}


















		basic_ostream& operator<<(
			basic_ostream& (__cdecl* _Pfn)(basic_ostream&)) {
			return (*_Pfn)(*this);
		}

		basic_ostream& operator<<(_Myios& (__cdecl* _Pfn)(_Myios&)) {
			(*_Pfn)(*(_Myios*)this);
			return *this;
		}

		basic_ostream& operator<<(ios_base& (__cdecl* _Pfn)(ios_base&)) {
			(*_Pfn)(*(ios_base*)this);
			return *this;
		}

		basic_ostream& operator<<(bool _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(short _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());
				ios_base::fmtflags _Bfl = this->flags() & ios_base::basefield;
				long _Tmp = (_Bfl == ios_base::oct || _Bfl == ios_base::hex) ? (long)(unsigned short)_Val : (long)_Val;

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Tmp).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}









		basic_ostream& operator<<(unsigned short _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), (unsigned long)_Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(int _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());
				ios_base::fmtflags _Bfl = this->flags() & ios_base::basefield;
				long _Tmp = (_Bfl == ios_base::oct || _Bfl == ios_base::hex) ? (long)(unsigned int)_Val : (long)_Val;

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Tmp).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(unsigned int _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), (unsigned long)_Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(long _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(unsigned long _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(long long _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(unsigned long long _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(float _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), (double)_Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(double _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(long double _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& operator<<(const void* _Val) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				const _Nput& _Nput_fac = ::std::use_facet<_Nput>(this->getloc());

				try {
					if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}






#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"

		basic_ostream & operator<<(_Mysb * _Strbuf) {
			ios_base::iostate _State = ios_base::goodbit;
			bool _Copied = false;
			const sentry _Ok(*this);

			if (_Ok && _Strbuf != nullptr) {
				for (int_type _Meta = _Traits::eof();; _Copied = true) {
					try {
						_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta) ? _Strbuf->sgetc() : _Strbuf->snextc();
					}
					catch (...) {
						_Myios::setstate(ios_base::failbit);
						throw;
					}

					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						break;
					}

					try {
						if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sputc(_Traits::to_char_type(_Meta)))) {
							_State |= ios_base::badbit;
							break;
						}
					}
					catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}
			}

			this->width(0);
			_Myios::setstate(_Strbuf == nullptr ? ios_base::badbit : !_Copied ? _State | ios_base::failbit : _State);
			return *this;
		}

		basic_ostream& put(_Elem _Ch) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (!_Ok) {
				_State |= ios_base::badbit;
			}
			else {
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sputc(_Ch))) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& write(const _Elem* _Str,
			streamsize _Count) {
			ios_base::iostate _State = ios_base::goodbit;
			const sentry _Ok(*this);

			if (!_Ok) {
				_State |= ios_base::badbit;
			}
			else if (0 < _Count) {
				try {
					if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count) {
						_State |= ios_base::badbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_ostream& flush() {
			if (_Myios::rdbuf() != nullptr) {
				const sentry _Ok(*this);

				if (_Ok && _Myios::rdbuf()->pubsync() == -1) {
					_Myios::setstate(ios_base::badbit);
				}
			}
			return *this;
		}

		basic_ostream& seekp(pos_type _Pos) {
			const sentry _Ok(*this);

			if (!this->fail() && (off_type)_Myios::rdbuf()->pubseekpos(_Pos, ios_base::out) == -1) {
				_Myios::setstate(ios_base::failbit);
			}

			return *this;
		}

		basic_ostream& seekp(
			off_type _Off, ios_base::seekdir _Way) {
			const sentry _Ok(*this);

			if (!this->fail() && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way, ios_base::out) == -1) {
				_Myios::setstate(ios_base::failbit);
			}

			return *this;
		}

		pos_type  tellp() {
			const sentry _Ok(*this);

			if (!this->fail()) {
				return _Myios::rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
			}
			else {
				return pos_type(-1);
			}
		}
	};

#pragma vtordisp(pop) 



















































	template class __declspec(dllimport) basic_ostream<char, char_traits<char>>;
	template class __declspec(dllimport) basic_ostream<wchar_t, char_traits<wchar_t>>;
#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"




#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"



	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char* _Val) {
		ios_base::iostate _State = ios_base::goodbit;
		streamsize _Count = (streamsize) ::strlen(_Val);
		streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;
		const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

		if (!_Ok) {
			_State |= ios_base::badbit;
		}
		else {
			try {
				const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Ostr.getloc());
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val) {
					if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val)))) {
						_State |= ios_base::badbit;
					}
				}

				if (_State == ios_base::goodbit) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				_Ostr.width(0);
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, char _Ch) {
		ios_base::iostate _State = ios_base::goodbit;
		const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

		if (_Ok) {
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Ostr.getloc());
			streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
						}
					}
				}

				if (_State == ios_base::goodbit
					&& _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch)))) {
					_State |= ios_base::badbit;
				}

				for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
					if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
						_State |= ios_base::badbit;
					}
				}
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.width(0);
		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr,
		const char* _Val) {
		using _Elem = char;
		using _Myos = basic_ostream<_Elem, _Traits>;

		ios_base::iostate _State = ios_base::goodbit;
		streamsize _Count = (streamsize)_Traits::length(_Val);
		streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;
		const typename _Myos::sentry _Ok(_Ostr);

		if (!_Ok) {
			_State |= ios_base::badbit;
		}
		else {
			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {
					_State |= ios_base::badbit;
				}

				if (_State == ios_base::goodbit) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				_Ostr.width(0);
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch) {
		using _Elem = char;
		using _Myos = basic_ostream<_Elem, _Traits>;

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myos::sentry _Ok(_Ostr);

		if (_Ok) {
			streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
						}
					}
				}

				if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {
					_State |= ios_base::badbit;
				}

				for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
					if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
						_State |= ios_base::badbit;
					}
				}
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.width(0);
		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* _Val) {
		using _Myos = basic_ostream<_Elem, _Traits>;

		ios_base::iostate _State = ios_base::goodbit;
		streamsize _Count = (streamsize)_Traits::length(_Val);
		streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;
		const typename _Myos::sentry _Ok(_Ostr);

		if (!_Ok) {
			_State |= ios_base::badbit;
		}
		else {
			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {
					_State |= ios_base::badbit;
				}

				if (_State == ios_base::goodbit) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				_Ostr.width(0);
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch) {
		using _Myos = basic_ostream<_Elem, _Traits>;

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myos::sentry _Ok(_Ostr);

		if (_Ok) {
			streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
						}
					}
				}

				if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {
					_State |= ios_base::badbit;
				}

				for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) {
					if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
						_State |= ios_base::badbit;
					}
				}
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.width(0);
		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char* _Val) {
		return _Ostr << (const char*)_Val;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch) {
		return _Ostr << (char)_Ch;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char* _Val) {
		return _Ostr << (const char*)_Val;
	}

	template <class _Traits>
	inline basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch) {
		return _Ostr << (char)_Ch;
	}









#line 890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"

	template <class _Ostr, class _Ty, class = void>
	struct _Can_stream_out : false_type {};

	template <class _Ostr, class _Ty>
	struct _Can_stream_out<_Ostr, _Ty, void_t<decltype(::std::declval<_Ostr&>() << ::std::declval<const _Ty&>())>> : true_type {
	};

	template <class _Ostr, class _Ty,
		enable_if_t<conjunction_v<
		negation<is_lvalue_reference<_Ostr>>, is_base_of<ios_base, _Ostr>, _Can_stream_out<_Ostr, _Ty>>,
		int> = 0>
		inline _Ostr && operator<<(_Ostr && _Os, const _Ty & _Val) {
		_Os << _Val;
		return ::std::move(_Os);
	}


	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& __cdecl endl(
		basic_ostream<_Elem, _Traits>& _Ostr) {
		_Ostr.put(_Ostr.widen('\n'));
		_Ostr.flush();
		return _Ostr;
	}

	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& __cdecl ends(
		basic_ostream<_Elem, _Traits>& _Ostr) {
		_Ostr.put(_Elem());
		return _Ostr;
	}

	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr) {
		_Ostr.flush();
		return _Ostr;
	}


	template <class _Elem, class _Traits>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const error_code& _Errcode) {
		return _Ostr << _Errcode.category().name() << ':' << _Errcode.value();
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ostream"





#line 59 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

#pragma once







#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Myvec>
	class _Vector_const_iterator : public _Iterator_base {
	public:
		using iterator_category = random_access_iterator_tag;

		using value_type      = typename _Myvec::value_type;
		using difference_type = typename _Myvec::difference_type;
		using pointer         = typename _Myvec::const_pointer;
		using reference       = const value_type &;
		using _Tptr           = typename _Myvec::pointer;

		_Vector_const_iterator() : _Ptr() {
		}

		_Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) : _Ptr(_Parg) {
			this->_Adopt(_Pvector);
		}

		reference operator*() const {

			const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 42, 0, "%s", "can't dereference value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference value-initialized vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 42, 0); } while (false); }; } while (false);
			do { if (_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 44, 0, "%s", "can't dereference out of range vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference out of range vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 44, 0); } while (false); }; } while (false);
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *_Ptr;
		}

		pointer operator->() const {

			const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 53, 0, "%s", "can't dereference value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference value-initialized vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 53, 0); } while (false); }; } while (false);
			do { if (_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 55, 0, "%s", "can't dereference out of range vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't dereference out of range vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 55, 0); } while (false); }; } while (false);
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _Ptr;
		}

		_Vector_const_iterator& operator++() {

			const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 64, 0, "%s", "can't increment value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't increment value-initialized vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 64, 0); } while (false); }; } while (false);
			do { if (_Ptr < _Mycont->_Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 65, 0, "%s", "can't increment vector iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't increment vector iterator past end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 65, 0); } while (false); }; } while (false);
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			++_Ptr;
			return *this;
		}

		_Vector_const_iterator operator++(int) {
			_Vector_const_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		_Vector_const_iterator& operator--() {

			const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
			do { if (_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 81, 0, "%s", "can't decrement value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't decrement value-initialized vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 81, 0); } while (false); }; } while (false);
			do { if (_Mycont->_Myfirst < _Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 82, 0, "%s", "can't decrement vector iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"can't decrement vector iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 82, 0); } while (false); }; } while (false);
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			--_Ptr;
			return *this;
		}

		_Vector_const_iterator operator--(int) {
			_Vector_const_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		void _Verify_offset(const difference_type _Off) const {


#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			const auto _Mycont = static_cast<const _Myvec*>(this->_Getcont());
			do { if (_Off == 0 || _Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 100, 0, "%s", "cannot seek value-initialized vector iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized vector iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 100, 0); } while (false); }; } while (false);
			if (_Off < 0) {
				do { if (_Off >= _Mycont->_Myfirst - _Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 102, 0, "%s", "cannot seek vector iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 102, 0); } while (false); }; } while (false);
			}

			if (_Off > 0) {
				do { if (_Off <= _Mycont->_Mylast - _Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 106, 0, "%s", "cannot seek vector iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 106, 0); } while (false); }; } while (false);
			}
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

		_Vector_const_iterator& operator+=(const difference_type _Off) {
			_Verify_offset(_Off);
			_Ptr += _Off;
			return *this;
		}

		_Vector_const_iterator operator+(const difference_type _Off) const {
			_Vector_const_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_Vector_const_iterator& operator-=(const difference_type _Off) {
			return *this += -_Off;
		}

		_Vector_const_iterator operator-(const difference_type _Off) const {
			_Vector_const_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		difference_type operator-(const _Vector_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr - _Right._Ptr;
		}

		reference operator[](const difference_type _Off) const {
			return *(*this + _Off);
		}

		bool operator==(const _Vector_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr == _Right._Ptr;
		}

		bool operator!=(const _Vector_const_iterator& _Right) const {
			return !(*this == _Right);
		}

		bool operator<(const _Vector_const_iterator& _Right) const {
			_Compat(_Right);
			return _Ptr < _Right._Ptr;
		}

		bool operator>(const _Vector_const_iterator& _Right) const {
			return _Right < *this;
		}

		bool operator<=(const _Vector_const_iterator& _Right) const {
			return !(_Right < *this);
		}

		bool operator>=(const _Vector_const_iterator& _Right) const {
			return !(*this < _Right);
		}

		void _Compat(const _Vector_const_iterator& _Right) const {


#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			do { if (this->_Getcont() == _Right._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 170, 0, "%s", "vector iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterators incompatible\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 170, 0); } while (false); }; } while (false);
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}


		friend void _Verify_range(const _Vector_const_iterator& _First, const _Vector_const_iterator& _Last) {
			do { if (_First._Getcont() == _Last._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 176, 0, "%s", "vector iterators in range are from different containers")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterators in range are from different containers\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 176, 0); } while (false); }; } while (false);
			do { if (_First._Ptr <= _Last._Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 177, 0, "%s", "vector iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector iterator range transposed\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 177, 0); } while (false); }; } while (false);
		}
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

		using _Prevent_inheriting_unwrap = _Vector_const_iterator;

		pointer _Unwrapped() const {
			return _Ptr;
		}

		void _Seek_to(pointer _It) {
			_Ptr = _Const_cast(_It);
		}

		_Tptr _Ptr;
	};

	template <class _Myvec>
	inline _Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off, _Vector_const_iterator<_Myvec> _Next) {
		return _Next += _Off;
	}


	template <class _Myvec>
	class _Vector_iterator : public _Vector_const_iterator<_Myvec> {
	public:
		using _Mybase           = _Vector_const_iterator<_Myvec>;
		using iterator_category = random_access_iterator_tag;

		using value_type      = typename _Myvec::value_type;
		using difference_type = typename _Myvec::difference_type;
		using pointer         = typename _Myvec::pointer;
		using reference       = value_type &;

		_Vector_iterator() {
		}

		_Vector_iterator(pointer _Parg, const _Container_base* _Pvector) : _Mybase(_Parg, _Pvector) {}

		reference operator*() const {
			return const_cast<reference>(_Mybase::operator*());
		}

		pointer operator->() const {
			return _Const_cast(_Mybase::operator->());
		}

		_Vector_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		_Vector_iterator operator++(int) {
			_Vector_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		_Vector_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		_Vector_iterator operator--(int) {
			_Vector_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}

		_Vector_iterator& operator+=(const difference_type _Off) {
			_Mybase::operator+=(_Off);
			return *this;
		}

		_Vector_iterator operator+(const difference_type _Off) const {
			_Vector_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_Vector_iterator& operator-=(const difference_type _Off) {
			_Mybase::operator-=(_Off);
			return *this;
		}

		using _Mybase::operator-;

		_Vector_iterator operator-(const difference_type _Off) const {
			_Vector_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		reference operator[](const difference_type _Off) const {
			return const_cast<reference>(_Mybase::operator[](_Off));
		}

		using _Prevent_inheriting_unwrap = _Vector_iterator;

		pointer _Unwrapped() const {
			return this->_Ptr;
		}
	};

	template <class _Myvec>
	inline _Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off, _Vector_iterator<_Myvec> _Next) {
		return _Next += _Off;
	}


	template <class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer,
		class _Reference,
		class _Const_reference>
		struct _Vec_iter_types {
		using value_type      = _Value_type;
		using size_type       = _Size_type;
		using difference_type = _Difference_type;
		using pointer         = _Pointer;
		using const_pointer   = _Const_pointer;
	};


	struct _Value_init_tag {
	};


	template <class _Val_types>
	class _Vector_val : public _Container_base {
	public:
		using value_type      = typename _Val_types::value_type;
		using size_type       = typename _Val_types::size_type;
		using difference_type = typename _Val_types::difference_type;
		using pointer         = typename _Val_types::pointer;
		using const_pointer   = typename _Val_types::const_pointer;
		using reference       = value_type &;
		using const_reference = const value_type &;

		_Vector_val() : _Myfirst(), _Mylast(), _Myend() {
		}

		pointer _Myfirst;
		pointer _Mylast;
		pointer _Myend;
	};


	template <class _Ptrty>
	inline auto _Unfancy_maybe_null(_Ptrty _Ptr) {
		return _Ptr ? ::std::addressof(*_Ptr) : nullptr;
	}

	template <class _Ty>
	inline _Ty* _Unfancy_maybe_null(_Ty* _Ptr) {
		return _Ptr;
	}


	template <class _Ty, class _Alloc = allocator<_Ty>>
	class vector {
	private:
		template <class>
		friend class _Vb_val;
		friend _Tidy_guard<vector>;
		template <class>
		friend class _Hash;

		using _Alty        = _Rebind_alloc_t<_Alloc, _Ty>;
		using _Alty_traits = allocator_traits<_Alty>;

		using _Scary_val = _Vector_val<conditional_t<_Is_simple_alloc_v<_Alty>, _Simple_types<_Ty>,
			_Vec_iter_types<_Ty, typename _Alty_traits::size_type, typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer, typename _Alty_traits::const_pointer, _Ty&, const _Ty& >>>;

	public:
		static_assert(!0 || is_same_v<_Ty, typename _Alloc::value_type>,
			"vector<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using value_type             = _Ty;
		using allocator_type         = _Alloc;
		using pointer                = typename _Alty_traits::pointer;
		using const_pointer          = typename _Alty_traits::const_pointer;
		using reference              = _Ty &;
		using const_reference        = const _Ty &;
		using size_type              = typename _Alty_traits::size_type;
		using difference_type        = typename _Alty_traits::difference_type;
		using iterator               = _Vector_iterator<_Scary_val>;
		using const_iterator         = _Vector_const_iterator<_Scary_val>;
		using reverse_iterator       = ::std::reverse_iterator<iterator>;
		using const_reverse_iterator = ::std::reverse_iterator<const_iterator>;

		vector() noexcept(is_nothrow_default_constructible_v<_Alty>)
			: _Mypair(_Zero_then_variadic_args_t()) {
			_Mypair._Myval2._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
		}

		explicit vector(const _Alloc& _Al) noexcept
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			_Mypair._Myval2._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
		}

	private:
		template <class _Ty2>
		void _Construct_n_copies_of_ty(__declspec(guard(overflow)) const size_type _Count, const _Ty2& _Val) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			auto& _My_data = _Mypair._Myval2;
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
			if (_Count != 0) {
				_Buy_nonzero(_Count);
				_Tidy_guard<vector> _Guard{ this };
				_My_data._Mylast = _Ufill(_My_data._Myfirst, _Count, _Val);
				_Guard._Target = nullptr;
			}

			_Proxy._Release();
		}

	public:
		explicit vector(__declspec(guard(overflow)) const size_type _Count, const _Alloc& _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			_Construct_n_copies_of_ty(_Count, _Value_init_tag{});
		}

		vector(__declspec(guard(overflow)) const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			_Construct_n_copies_of_ty(_Count, _Val);
		}

	private:
		template <class _Any_alloc>
		vector(_Move_allocator_tag, __declspec(guard(overflow)) const size_type _Count, const _Ty& _Val, _Any_alloc& _Al)
			: _Mypair(_One_then_variadic_args_t(), ::std::move(_Al)) {
			_Construct_n_copies_of_ty(_Count, _Val);
		}

		template <class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, input_iterator_tag) {

			_Tidy_guard<vector> _Guard{ this };
			for (; _First != _Last; ++_First) {
				emplace_back(*_First);
			}

			_Guard._Target = nullptr;
		}

		template <class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag) {

			const auto _Count = _Convert_size<size_type>(static_cast<size_t>(::std::distance(_First, _Last)));
			if (_Count != 0) {
				_Buy_nonzero(_Count);
				_Tidy_guard<vector> _Guard{ this };
				auto& _My_data = _Mypair._Myval2;
				_My_data._Mylast = _Ucopy(_First, _Last, _My_data._Myfirst);
				_Guard._Target = nullptr;
			}
		}

	public:
		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
			_Adl_verify_range(_First, _Last);
			_Range_construct_or_tidy(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
			_Proxy._Release();
		}

		vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
			_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
			_Proxy._Release();
		}

		vector(const vector& _Right)
			: _Mypair(_One_then_variadic_args_t(),
				_Alty_traits::select_on_container_copy_construction(_Right._Getal())) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			auto& _My_data = _Mypair._Myval2;
			const auto& _Right_data = _Right._Mypair._Myval2;
			const pointer _Rightfirst = _Right_data._Myfirst;
			const pointer _Rightlast = _Right_data._Mylast;
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
			if (_Rightfirst != _Rightlast) {
				_Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));
				_Tidy_guard<vector> _Guard{ this };
				_My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);
				_Guard._Target = nullptr;
			}

			_Proxy._Release();
		}

		vector(const vector& _Right, const _Alloc& _Al)
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			auto& _My_data = _Mypair._Myval2;
			const auto& _Right_data = _Right._Mypair._Myval2;
			const pointer _Rightfirst = _Right_data._Myfirst;
			const pointer _Rightlast = _Right_data._Mylast;
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
			if (_Rightfirst != _Rightlast) {
				_Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));
				_Tidy_guard<vector> _Guard{ this };
				_My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);
				_Guard._Target = nullptr;
			}

			_Proxy._Release();
		}

	private:
		void _Take_contents(vector& _Right) noexcept {
			auto& _My_data = _Mypair._Myval2;
			auto& _Right_data = _Right._Mypair._Myval2;
			_My_data._Swap_proxy_and_iterators(_Right_data);

			_My_data._Myfirst = _Right_data._Myfirst;
			_My_data._Mylast = _Right_data._Mylast;
			_My_data._Myend = _Right_data._Myend;

			_Right_data._Myfirst = pointer();
			_Right_data._Mylast = pointer();
			_Right_data._Myend = pointer();
		}


		void _Move_construct(vector& _Right, true_type) noexcept {
			_Take_contents(_Right);
		}

		void _Move_construct(vector& _Right, false_type) {
			if
				constexpr (!_Alty_traits::is_always_equal::value) {
				if (_Getal() != _Right._Getal()) {
					const auto& _Right_data = _Right._Mypair._Myval2;
					const pointer _Rightfirst = _Right_data._Myfirst;
					const pointer _Rightlast = _Right_data._Mylast;
					if (_Rightfirst != _Rightlast) {
						_Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));
						_Tidy_guard<vector> _Guard{ this };
						auto& _My_data = _Mypair._Myval2;
						_My_data._Mylast = _Umove(_Rightfirst, _Rightlast, _My_data._Myfirst);
						_Guard._Target = nullptr;
					}
					return;
				}
			}

			_Move_construct(_Right, true_type{});
		}

	public:
		vector(vector&& _Right) noexcept
			: _Mypair(_One_then_variadic_args_t(), ::std::move(_Right._Getal())) {
			_Mypair._Myval2._Alloc_proxy(static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()));
			_Move_construct(_Right, true_type{});
		}

		vector(vector&& _Right, const _Alloc& _Al) noexcept(_Alty_traits::is_always_equal::value)
			: _Mypair(_One_then_variadic_args_t(), _Al) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
			_Move_construct(_Right, typename _Alty_traits::is_always_equal::type{});
			_Proxy._Release();
		}

	private:
		void _Move_assign(vector& _Right, _Equal_allocators) noexcept {
			_Tidy();
			_Pocma(_Getal(), _Right._Getal());
			_Take_contents(_Right);
		}

		void _Move_assign(vector& _Right, _Propagate_allocators) noexcept {
			_Tidy();

			if (_Getal() != _Right._Getal()) {

				_Mypair._Myval2._Reload_proxy(
					static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()), static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Right._Getal()));
			}
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			_Pocma(_Getal(), _Right._Getal());
			_Take_contents(_Right);
		}

		void _Move_assign(vector& _Right, _No_propagate_allocators) {
			if (_Getal() == _Right._Getal()) {
				_Move_assign(_Right, _Equal_allocators{});
			}
			else {
				auto& _Right_data = _Right._Mypair._Myval2;
				const pointer _First = _Right_data._Myfirst;
				const pointer _Last = _Right_data._Mylast;
				const auto _Newsize = static_cast<size_type>(_Last - _First);

				auto& _My_data = _Mypair._Myval2;
				pointer& _Myfirst = _My_data._Myfirst;
				pointer& _Mylast = _My_data._Mylast;

				_My_data._Orphan_all();

				const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

				if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Ty*, _Ty*>::_Trivially_copyable>,
					_Uses_default_construct<_Alty, _Ty*, _Ty>, _Uses_default_destroy<_Alty, _Ty * >>) {
					if (_Newsize > _Oldcapacity) {
						_Clear_and_reserve_geometric(_Newsize);
					}

					_Mylast = _Refancy<pointer>(_Copy_memmove(_Unfancy(_First), _Unfancy(_Last), _Unfancy(_Myfirst)));
				}
				else
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
				{
					auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

					if (_Newsize > _Oldsize) {
						if (_Newsize > _Oldcapacity) {
							_Clear_and_reserve_geometric(_Newsize);
							_Oldsize = 0;
						}

						const pointer _Mid = _First + _Oldsize;
						_Move_unchecked(_First, _Mid, _Myfirst);
						_Mylast = _Umove(_Mid, _Last, _Mylast);
					}
					else {
						const pointer _Newlast = _Myfirst + _Newsize;
						_Move_unchecked(_First, _Last, _Myfirst);
						_Destroy(_Newlast, _Mylast);
						_Mylast = _Newlast;
					}
				}
			}
		}

	public:
		vector& operator=(vector&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {
			if (this != ::std::addressof(_Right)) {
				_Move_assign(_Right, _Choose_pocma<_Alty>{});
			}

			return *this;
		}

		~vector() noexcept {
			_Tidy();

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal());
			_Delete_plain(_Alproxy, ::std::exchange(_Mypair._Myval2._Myproxy, nullptr));
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

	private:
		template <class... _Valty>
		decltype(auto) _Emplace_back_with_unused_capacity(_Valty&& ... _Val) {

			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;
			;
			_Alty_traits::construct(_Getal(), _Unfancy(_Mylast), ::std::forward<_Valty>(_Val)...);
			_Orphan_range(_Mylast, _Mylast);
			_Ty& _Result = *_Mylast;
			++_Mylast;


#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			(void)_Result;
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

	public:
		template <class... _Valty>
		decltype(auto) emplace_back(_Valty&& ... _Val) {

			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;
			if (_Mylast != _My_data._Myend) {
				return _Emplace_back_with_unused_capacity(::std::forward<_Valty>(_Val)...);
			}

			_Ty& _Result = *_Emplace_reallocate(_Mylast, ::std::forward<_Valty>(_Val)...);


#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			(void)_Result;
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

		void push_back(const _Ty& _Val) {
			emplace_back(_Val);
		}

		void push_back(_Ty&& _Val) {
			emplace_back(::std::move(_Val));
		}

		template <class... _Valty>
		pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&& ... _Val) {

			_Alty& _Al = _Getal();
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			;

			const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);
			const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

			if (_Oldsize == max_size()) {
				_Xlength();
			}

			const size_type _Newsize = _Oldsize + 1;
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = _Al.allocate(_Newcapacity);
			const pointer _Constructed_last = _Newvec + _Whereoff + 1;
			pointer _Constructed_first = _Constructed_last;

			try {
				_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), ::std::forward<_Valty>(_Val)...);
				_Constructed_first = _Newvec + _Whereoff;

				if (_Whereptr == _Mylast) {
					_Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
				}
				else {
					_Umove(_Myfirst, _Whereptr, _Newvec);
					_Constructed_first = _Newvec;
					_Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);
				}
			}
			catch (...) {
				_Destroy(_Constructed_first, _Constructed_last);
				_Al.deallocate(_Newvec, _Newcapacity);
				throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			return _Newvec + _Whereoff;
		}

		template <class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&& ... _Val) {
			const pointer _Whereptr = _Where._Ptr;
			auto& _My_data = _Mypair._Myval2;
			const pointer _Oldlast = _My_data._Mylast;

			do { if (_Where._Getcont() == ::std::addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Oldlast >= _Whereptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 730, 0, "%s", "vector emplace iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector emplace iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 730, 0); } while (false); }; } while (false);
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (_Oldlast != _My_data._Myend) {
				if (_Whereptr == _Oldlast) {
					_Emplace_back_with_unused_capacity(::std::forward<_Valty>(_Val)...);
				}
				else {
					_Ty _Obj(::std::forward<_Valty>(_Val)...);

					_Orphan_range(_Whereptr, _Oldlast);
					_Alty_traits::construct(_Getal(), _Unfancy(_Oldlast), ::std::move(_Oldlast[-1]));
					++_My_data._Mylast;
					_Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
					*_Whereptr = ::std::move(_Obj);
				}

				return _Make_iterator(_Whereptr);
			}

			return _Make_iterator(_Emplace_reallocate(_Whereptr, ::std::forward<_Valty>(_Val)...));
		}

		iterator insert(const_iterator _Where, const _Ty& _Val) {
			return emplace(_Where, _Val);
		}

		iterator insert(const_iterator _Where, _Ty&& _Val) {
			return emplace(_Where, ::std::move(_Val));
		}

		iterator insert(const_iterator _Where, __declspec(guard(overflow)) const size_type _Count, const _Ty& _Val) {

			const pointer _Whereptr = _Where._Ptr;

			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;

			const pointer _Oldfirst = _My_data._Myfirst;
			const pointer _Oldlast = _Mylast;

			do { if (_Where._Getcont() == ::std::addressof(_My_data) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 771, 0, "%s", "vector insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 771, 0); } while (false); }; } while (false);
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
			const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);
			const bool _One_at_back = _Count == 1 && _Whereptr == _Oldlast;
			if (_Count == 0) {
			}
			else if (_Count > _Unused_capacity) {
				const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

				if (_Count > max_size() - _Oldsize) {
					_Xlength();
				}

				const size_type _Newsize = _Oldsize + _Count;
				const size_type _Newcapacity = _Calculate_growth(_Newsize);

				const pointer _Newvec = _Getal().allocate(_Newcapacity);
				const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
				pointer _Constructed_first = _Constructed_last;

				try {
					_Ufill(_Newvec + _Whereoff, _Count, _Val);
					_Constructed_first = _Newvec + _Whereoff;

					if (_One_at_back) {
						_Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
					}
					else {
						_Umove(_Oldfirst, _Whereptr, _Newvec);
						_Constructed_first = _Newvec;
						_Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
					}
				}
				catch (...) {
					_Destroy(_Constructed_first, _Constructed_last);
					_Getal().deallocate(_Newvec, _Newcapacity);
					throw;
				}

				_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
			else if (_One_at_back) {
				_Emplace_back_with_unused_capacity(_Val);
			}
			else {
				const _Ty _Tmp = _Val;
				const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);
				_Orphan_range(_Whereptr, _Oldlast);

				if (_Count > _Affected_elements) {
					_Mylast = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
					_Mylast = _Umove(_Whereptr, _Oldlast, _Mylast);
					::std::fill(_Whereptr, _Oldlast, _Tmp);
				}
				else {
					_Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
					_Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
					::std::fill(_Whereptr, _Whereptr + _Count, _Tmp);
				}
			}

			return _Make_iterator_offset(_Whereoff);
		}

	private:
		template <class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {

			if (_First == _Last) {
				return;
			}

			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			const auto _Whereoff = static_cast<size_type>(_Where._Ptr - _Myfirst);
			const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);





			for (; _First != _Last; ++_First) {
				emplace_back(*_First);
			}

			_Orphan_range(_Myfirst + _Whereoff, _Myfirst + _Oldsize);

			::std::rotate(_Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast);
		}

		template <class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {

			const pointer _Whereptr = _Where._Ptr;
			const auto _Count = _Convert_size<size_type>(static_cast<size_t>(::std::distance(_First, _Last)));

			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;

			const pointer _Oldfirst = _My_data._Myfirst;
			const pointer _Oldlast = _Mylast;
			const auto _Unused_capacity = static_cast<size_type>(_My_data._Myend - _Oldlast);

			if (_Count == 0) {
			}
			else if (_Count > _Unused_capacity) {
				const auto _Oldsize = static_cast<size_type>(_Oldlast - _Oldfirst);

				if (_Count > max_size() - _Oldsize) {
					_Xlength();
				}

				const size_type _Newsize = _Oldsize + _Count;
				const size_type _Newcapacity = _Calculate_growth(_Newsize);

				const pointer _Newvec = _Getal().allocate(_Newcapacity);
				const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
				const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
				pointer _Constructed_first = _Constructed_last;

				try {
					_Ucopy(_First, _Last, _Newvec + _Whereoff);
					_Constructed_first = _Newvec + _Whereoff;

					if (_Count == 1 && _Whereptr == _Oldlast) {
						_Umove_if_noexcept(_Oldfirst, _Oldlast, _Newvec);
					}
					else {
						_Umove(_Oldfirst, _Whereptr, _Newvec);
						_Constructed_first = _Newvec;
						_Umove(_Whereptr, _Oldlast, _Newvec + _Whereoff + _Count);
					}
				}
				catch (...) {
					_Destroy(_Constructed_first, _Constructed_last);
					_Getal().deallocate(_Newvec, _Newcapacity);
					throw;
				}

				_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
			else {



				const auto _Affected_elements = static_cast<size_type>(_Oldlast - _Whereptr);

				if (_Count < _Affected_elements) {
					_Mylast = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
					_Move_backward_unchecked(_Whereptr, _Oldlast - _Count, _Oldlast);
					_Destroy(_Whereptr, _Whereptr + _Count);

					try {
						_Ucopy(_First, _Last, _Whereptr);
					}
					catch (...) {


						try {
							_Umove(_Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr);
						}
						catch (...) {

							_Orphan_range(_Whereptr, _Oldlast);
							_Destroy(_Whereptr + _Count, _Mylast);
							_Mylast = _Whereptr;
							throw;
						}

						_Move_unchecked(_Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count);
						_Destroy(_Oldlast, _Mylast);
						_Mylast = _Oldlast;
						throw;
					}
				}
				else {
					const pointer _Relocated = _Whereptr + _Count;
					_Mylast = _Umove(_Whereptr, _Oldlast, _Relocated);
					_Destroy(_Whereptr, _Oldlast);

					try {
						_Ucopy(_First, _Last, _Whereptr);
					}
					catch (...) {


						try {
							_Umove(_Relocated, _Mylast, _Whereptr);
						}
						catch (...) {

							_Orphan_range(_Whereptr, _Oldlast);
							_Destroy(_Relocated, _Mylast);
							_Mylast = _Whereptr;
							throw;
						}

						_Destroy(_Relocated, _Mylast);
						_Mylast = _Oldlast;
						throw;
					}
				}

				_Orphan_range(_Whereptr, _Oldlast);
			}
		}

	public:
		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
			const pointer _Whereptr = _Where._Ptr;
			auto& _My_data = _Mypair._Myval2;
			const pointer _Oldfirst = _My_data._Myfirst;

			do { if (_Where._Getcont() == ::std::addressof(_My_data) && _Whereptr >= _Oldfirst && _My_data._Mylast >= _Whereptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 975, 0, "%s", "vector insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 975, 0); } while (false); }; } while (false);
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			_Adl_verify_range(_First, _Last);
			const auto _Whereoff = static_cast<size_type>(_Whereptr - _Oldfirst);
			_Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
			return _Make_iterator_offset(_Whereoff);
		}

		iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist) {
			return insert(_Where, _Ilist.begin(), _Ilist.end());
		}

		void assign(__declspec(guard(overflow)) const size_type _Newsize, const _Ty& _Val) {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			_My_data._Orphan_all();

			auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
			if (_Newsize > _Oldsize) {
				const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
				if (_Newsize > _Oldcapacity) {
					_Clear_and_reserve_geometric(_Newsize);
					_Oldsize = 0;
				}
				else {
					::std::fill(_Myfirst, _Mylast, _Val);
				}

				_Mylast = _Ufill(_Mylast, _Newsize - _Oldsize, _Val);
			}
			else {
				const pointer _Newlast = _Myfirst + _Newsize;
				::std::fill(_Myfirst, _Newlast, _Val);
				_Destroy(_Newlast, _Mylast);
				_Mylast = _Newlast;
			}
		}

	private:
		template <class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag) {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			_My_data._Orphan_all();

			pointer _Next = _Myfirst;

			for (; _First != _Last && _Next != _Mylast; ++_First, (void) ++_Next) {
				*_Next = *_First;
			}







			_Destroy(_Next, _Mylast);
			_Mylast = _Next;


			for (; _First != _Last; ++_First) {
				emplace_back(*_First);
			}
		}

		template <class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) {
			const auto _Newsize = _Convert_size<size_type>(static_cast<size_t>(::std::distance(_First, _Last)));
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			pointer& _Myend = _My_data._Myend;

			_My_data._Orphan_all();


			if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
				_Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
				_Uses_default_destroy<_Alty, _Ty * >>) {
				const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
				if (_Newsize > _Oldcapacity) {
					_Clear_and_reserve_geometric(_Newsize);
				}

				_Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));
			}
			else
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			{
				auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

				if (_Newsize > _Oldsize) {
					const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
					if (_Newsize > _Oldcapacity) {
						_Clear_and_reserve_geometric(_Newsize);
						_Oldsize = 0;
					}


					const _Iter _Mid = ::std::next(_First, static_cast<difference_type>(_Oldsize));
					_Copy_unchecked(_First, _Mid, _Myfirst);
					_Mylast = _Ucopy(_Mid, _Last, _Mylast);
				}
				else {
					const pointer _Newlast = _Myfirst + _Newsize;
					_Copy_unchecked(_First, _Last, _Myfirst);
					_Destroy(_Newlast, _Mylast);
					_Mylast = _Newlast;
				}
			}
		}

	public:
		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last) {
			_Adl_verify_range(_First, _Last);
			_Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		}

		void assign(initializer_list<_Ty> _Ilist) {
			_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		}

	private:
		void _Copy_assign(const vector& _Right, false_type) {
			_Pocca(_Getal(), _Right._Getal());
			auto& _Right_data = _Right._Mypair._Myval2;
			assign(_Right_data._Myfirst, _Right_data._Mylast);
		}

		void _Copy_assign(const vector& _Right, true_type) {
			if (_Getal() != _Right._Getal()) {
				_Tidy();
				_Mypair._Myval2._Reload_proxy(
					static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Getal()), static_cast<_Rebind_alloc_t<_Alty, _Container_proxy>>(_Right._Getal()));
			}

			_Copy_assign(_Right, false_type{});
		}

	public:
		vector& operator=(const vector& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Copy_assign(_Right, _Choose_pocca<_Alty>{});
			}

			return *this;
		}

		vector& operator=(initializer_list<_Ty> _Ilist) {
			_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
			return *this;
		}

	private:
		template <class _Ty2>
		void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {
			if (_Newsize > max_size()) {
				_Xlength();
			}

			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = _Getal().allocate(_Newcapacity);
			const pointer _Appended_first = _Newvec + _Oldsize;
			pointer _Appended_last = _Appended_first;

			try {
				_Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);
				_Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
			}
			catch (...) {
				_Destroy(_Appended_first, _Appended_last);
				_Getal().deallocate(_Newvec, _Newcapacity);
				throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
		}

		template <class _Ty2>
		void _Resize(const size_type _Newsize, const _Ty2& _Val) {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
			if (_Newsize < _Oldsize) {
				const pointer _Newlast = _Myfirst + _Newsize;
				_Orphan_range(_Newlast, _Mylast);
				_Destroy(_Newlast, _Mylast);
				_Mylast = _Newlast;
				return;
			}

			if (_Newsize > _Oldsize) {
				const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
				if (_Newsize > _Oldcapacity) {
					_Resize_reallocate(_Newsize, _Val);
					return;
				}

				const pointer _Oldlast = _Mylast;
				_Mylast = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);
				_Orphan_range(_Oldlast, _Oldlast);
			}


		}

	public:
		void resize(__declspec(guard(overflow)) const size_type _Newsize) {

			_Resize(_Newsize, _Value_init_tag{});
		}

		void resize(__declspec(guard(overflow)) const size_type _Newsize, const _Ty& _Val) {

			_Resize(_Newsize, _Val);
		}

	private:
		void _Reallocate_exactly(const size_type _Newcapacity) {

			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

			const pointer _Newvec = _Getal().allocate(_Newcapacity);

			try {
				_Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
			}
			catch (...) {
				_Getal().deallocate(_Newvec, _Newcapacity);
				throw;
			}

			_Change_array(_Newvec, _Size, _Newcapacity);
		}

		void _Clear_and_reserve_geometric(const size_type _Newsize) {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			pointer& _Myend = _My_data._Myend;







#line 1235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (_Newsize > max_size()) {
				_Xlength();
			}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (_Myfirst != pointer()) {
				_Destroy(_Myfirst, _Mylast);
				_Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

				_Myfirst = pointer();
				_Mylast = pointer();
				_Myend = pointer();
			}

			_Buy_raw(_Newcapacity);
		}

	public:
		void reserve(__declspec(guard(overflow)) const size_type _Newcapacity) {

			if (_Newcapacity > capacity()) {
				if (_Newcapacity > max_size()) {
					_Xlength();
				}

				_Reallocate_exactly(_Newcapacity);
			}
		}

		void shrink_to_fit() {
			auto& _My_data = _Mypair._Myval2;
			const pointer _Oldlast = _My_data._Mylast;
			if (_Oldlast != _My_data._Myend) {
				const pointer _Oldfirst = _My_data._Myfirst;
				if (_Oldfirst == _Oldlast) {
					_Tidy();
				}
				else {
					_Reallocate_exactly(static_cast<size_type>(_Oldlast - _Oldfirst));
				}
			}
		}

		void pop_back() {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;


			do { if (_My_data._Myfirst != _Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1284, 0, "%s", "vector empty before pop")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector empty before pop\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1284, 0); } while (false); }; } while (false);
			_Orphan_range(_Mylast - 1, _Mylast);
#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			_Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
			--_Mylast;
		}

		iterator erase(const_iterator _Where) {
			const pointer _Whereptr = _Where._Ptr;
			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;


			do { if (_Where._Getcont() == ::std::addressof(_My_data) && _Whereptr >= _My_data._Myfirst && _Mylast > _Whereptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1300, 0, "%s", "vector erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector erase iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1300, 0); } while (false); }; } while (false);
#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			_Orphan_range(_Whereptr, _Mylast);
#line 1303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			_Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);
			_Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
			--_Mylast;
			return iterator(_Whereptr, ::std::addressof(_My_data));
		}

		iterator erase(const_iterator _First, const_iterator _Last) {
			const pointer _Firstptr = _First._Ptr;
			const pointer _Lastptr = _Last._Ptr;
			auto& _My_data = _Mypair._Myval2;
			pointer& _Mylast = _My_data._Mylast;


			do { if (_First._Getcont() == ::std::addressof(_My_data) && _Last._Getcont() == ::std::addressof(_My_data) && _Firstptr >= _My_data._Myfirst && _Lastptr >= _Firstptr && _Mylast >= _Lastptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1319, 0, "%s", "vector erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector erase iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1319, 0); } while (false); }; } while (false);
#line 1321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 1321 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (_Firstptr != _Lastptr) {
				_Orphan_range(_Firstptr, _Mylast);
			}

			const pointer _Newlast = _Move_unchecked(_Lastptr, _Mylast, _Firstptr);
			_Destroy(_Newlast, _Mylast);
			_Mylast = _Newlast;

			return iterator(_Firstptr, ::std::addressof(_My_data));
		}

		void clear() noexcept {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;

			_My_data._Orphan_all();
			_Destroy(_Myfirst, _Mylast);
			_Mylast = _Myfirst;
		}

	private:
		void _Swap_val(vector& _Right) noexcept {
			auto& _My_data = _Mypair._Myval2;
			auto& _Right_data = _Right._Mypair._Myval2;
			_My_data._Swap_proxy_and_iterators(_Right_data);
			_Swap_adl(_My_data._Myfirst, _Right_data._Myfirst);
			_Swap_adl(_My_data._Mylast, _Right_data._Mylast);
			_Swap_adl(_My_data._Myend, _Right_data._Myend);
		}

	public:
		void swap(vector& _Right) noexcept {

			if (this != ::std::addressof(_Right)) {
				_Pocs(_Getal(), _Right._Getal());
				_Swap_val(_Right);
			}
		}

		_Ty* data() noexcept {
			return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);
		}

		const _Ty* data() const noexcept {
			return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);
		}

		iterator begin() noexcept {
			auto& _My_data = _Mypair._Myval2;
			return iterator(_My_data._Myfirst, ::std::addressof(_My_data));
		}

		const_iterator begin() const noexcept {
			auto& _My_data = _Mypair._Myval2;
			return const_iterator(_My_data._Myfirst, ::std::addressof(_My_data));
		}

		iterator end() noexcept {
			auto& _My_data = _Mypair._Myval2;
			return iterator(_My_data._Mylast, ::std::addressof(_My_data));
		}

		const_iterator end() const noexcept {
			auto& _My_data = _Mypair._Myval2;
			return const_iterator(_My_data._Mylast, ::std::addressof(_My_data));
		}

		reverse_iterator rbegin() noexcept {
			return reverse_iterator(end());
		}

		const_reverse_iterator rbegin() const
			noexcept {
			return const_reverse_iterator(end());
		}

		reverse_iterator rend() noexcept {
			return reverse_iterator(begin());
		}

		const_reverse_iterator rend() const noexcept {
			return const_reverse_iterator(begin());
		}

		const_iterator cbegin() const noexcept {
			return begin();
		}

		const_iterator cend() const noexcept {
			return end();
		}

		const_reverse_iterator crbegin() const
			noexcept {
			return rbegin();
		}

		const_reverse_iterator crend() const
			noexcept {
			return rend();
		}

		pointer _Unchecked_begin() noexcept {
			return _Mypair._Myval2._Myfirst;
		}

		const_pointer _Unchecked_begin() const noexcept {
			return _Mypair._Myval2._Myfirst;
		}

		pointer _Unchecked_end() noexcept {
			return _Mypair._Myval2._Mylast;
		}

		const_pointer _Unchecked_end() const noexcept {
			return _Mypair._Myval2._Mylast;
		}

		bool empty() const noexcept {
			auto& _My_data = _Mypair._Myval2;
			return _My_data._Myfirst == _My_data._Mylast;
		}

		size_type size() const noexcept {
			auto& _My_data = _Mypair._Myval2;
			return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);
		}

		size_type max_size() const noexcept {
			return _Min_value(
				static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
		}

		size_type capacity() const noexcept {
			auto& _My_data = _Mypair._Myval2;
			return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);
		}

		_Ty& operator[](const size_type _Pos) {
			auto& _My_data = _Mypair._Myval2;

			do { if (_Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1465, 0, "%s", "vector subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1465, 0); } while (false); }; } while (false);
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _My_data._Myfirst[_Pos];
		}

		const _Ty& operator[](const size_type _Pos) const {
			auto& _My_data = _Mypair._Myval2;

			do { if (_Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1475, 0, "%s", "vector subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1475, 0); } while (false); }; } while (false);
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _My_data._Myfirst[_Pos];
		}

		_Ty& at(const size_type _Pos) {
			auto& _My_data = _Mypair._Myval2;
			if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {
				_Xrange();
			}

			return _My_data._Myfirst[_Pos];
		}

		const _Ty& at(const size_type _Pos) const {
			auto& _My_data = _Mypair._Myval2;
			if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {
				_Xrange();
			}

			return _My_data._Myfirst[_Pos];
		}

		_Ty& front() {
			auto& _My_data = _Mypair._Myval2;

			do { if (_My_data._Myfirst != _My_data._Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1502, 0, "%s", "front() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1502, 0); } while (false); }; } while (false);
#line 1504 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *_My_data._Myfirst;
		}

		const _Ty& front() const {
			auto& _My_data = _Mypair._Myval2;

			do { if (_My_data._Myfirst != _My_data._Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1511, 0, "%s", "front() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1511, 0); } while (false); }; } while (false);
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *_My_data._Myfirst;
		}

		_Ty& back() {
			auto& _My_data = _Mypair._Myval2;

			do { if (_My_data._Myfirst != _My_data._Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1520, 0, "%s", "back() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1520, 0); } while (false); }; } while (false);
#line 1522 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _My_data._Mylast[-1];
		}

		const _Ty& back() const {
			auto& _My_data = _Mypair._Myval2;

			do { if (_My_data._Myfirst != _My_data._Mylast) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1529, 0, "%s", "back() called on empty vector")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1529, 0); } while (false); }; } while (false);
#line 1531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _My_data._Mylast[-1];
		}

		allocator_type get_allocator() const noexcept {
			return static_cast<allocator_type>(_Getal());
		}

	private:


		pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val) {

			return _Uninitialized_fill_n(_Dest, _Count, _Val, _Getal());
		}

		pointer _Ufill(pointer _Dest, const size_type _Count, _Value_init_tag) {

			return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());
		}

		template <class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) {
			return _Uninitialized_copy(_First, _Last, _Dest, _Getal());
		}

		pointer _Umove(pointer _First, pointer _Last, pointer _Dest) {
			return _Uninitialized_move(_First, _Last, _Dest, _Getal());
		}

		void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

			_Uninitialized_move(_First, _Last, _Dest, _Getal());
		}

		void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, false_type) {

			_Uninitialized_copy(_First, _Last, _Dest, _Getal());
		}

		void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

			_Umove_if_noexcept1(_First, _Last, _Dest,
				bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
		}

		void _Destroy(pointer _First, pointer _Last) {
			_Destroy_range(_First, _Last, _Getal());
		}

		size_type _Calculate_growth(const size_type _Newsize) const {

			const size_type _Oldcapacity = capacity();

			if (_Oldcapacity > max_size() - _Oldcapacity / 2) {
				return _Newsize;
			}

			const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

			if (_Geometric < _Newsize) {
				return _Newsize;
			}

			return _Geometric;
		}


		void _Buy_raw(const size_type _Newcapacity) {

			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			pointer& _Myend = _My_data._Myend;

			;
			;

			const auto _Newvec = _Getal().allocate(_Newcapacity);
			_Myfirst = _Newvec;
			_Mylast = _Newvec;
			_Myend = _Newvec + _Newcapacity;
		}

		void _Buy_nonzero(const size_type _Newcapacity) {










			if (_Newcapacity > max_size()) {
				_Xlength();
			}

			_Buy_raw(_Newcapacity);
		}

		void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			pointer& _Myend = _My_data._Myend;

			_My_data._Orphan_all();

			if (_Myfirst != pointer()) {
				_Destroy(_Myfirst, _Mylast);
				_Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));
			}

			_Myfirst = _Newvec;
			_Mylast = _Newvec + _Newsize;
			_Myend = _Newvec + _Newcapacity;
		}

		void _Tidy() noexcept {
			auto& _My_data = _Mypair._Myval2;
			pointer& _Myfirst = _My_data._Myfirst;
			pointer& _Mylast = _My_data._Mylast;
			pointer& _Myend = _My_data._Myend;

			_My_data._Orphan_all();

			if (_Myfirst != pointer()) {
				_Destroy(_Myfirst, _Mylast);
				_Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

				_Myfirst = pointer();
				_Mylast = pointer();
				_Myend = pointer();
			}
		}

		[[noreturn]] static void _Xlength() {
			_Xlength_error("vector<T> too long");
		}

		[[noreturn]] static void _Xrange() {
			_Xout_of_range("invalid vector<T> subscript");
		}

		void _Orphan_range(pointer _First, pointer _Last) const {

			_Lockit _Lock(3);

			_Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
			while (*_Pnext) {
				const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
				if (_Pnextptr < _First || _Last < _Pnextptr) {
					_Pnext = &(*_Pnext)->_Mynextiter;
				}
				else {
					(*_Pnext)->_Myproxy = nullptr;
					*_Pnext = (*_Pnext)->_Mynextiter;
				}
			}



#line 1696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

		_Alty& _Getal() noexcept {
			return _Mypair._Get_first();
		}

		const _Alty& _Getal() const noexcept {
			return _Mypair._Get_first();
		}

		iterator _Make_iterator(const pointer _Ptr) noexcept {
			return iterator(_Ptr, ::std::addressof(_Mypair._Myval2));
		}

		iterator _Make_iterator_offset(const size_type _Offset) noexcept {

			auto& _My_data = _Mypair._Myval2;
			return iterator(_My_data._Myfirst + _Offset, ::std::addressof(_My_data));
		}

		_Compressed_pair<_Alty, _Scary_val> _Mypair;
	};





#line 1724 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

	template <class _Ty, class _Alloc>
	inline void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right) noexcept {

		_Left.swap(_Right);
	}

	template <class _Ty, class _Alloc>
	inline bool operator==(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return _Left.size() == _Right.size()
			&& ::std::equal(_Left._Unchecked_begin(), _Left._Unchecked_end(), _Right._Unchecked_begin());
	}

	template <class _Ty, class _Alloc>
	inline bool operator!=(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return !(_Left == _Right);
	}

	template <class _Ty, class _Alloc>
	inline bool operator<(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return ::std::lexicographical_compare(
			_Left._Unchecked_begin(), _Left._Unchecked_end(), _Right._Unchecked_begin(), _Right._Unchecked_end());
	}

	template <class _Ty, class _Alloc>
	inline bool operator>(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return _Right < _Left;
	}

	template <class _Ty, class _Alloc>
	inline bool operator<=(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return !(_Right < _Left);
	}

	template <class _Ty, class _Alloc>
	inline bool operator>=(
		const vector<_Ty, _Alloc>& _Left, const vector<_Ty, _Alloc>& _Right) {
		return !(_Left < _Right);
	}


	using _Vbase         = unsigned int;
	constexpr int _VBITS = 8 * sizeof(_Vbase);

	template <class _Alloc0>
	struct _Wrap_alloc {
		using _Alloc = _Alloc0;
	};


	template <class _Alvbase_wrapped>
	class _Vb_iter_base : public _Iterator_base {
	public:
		using _Alvbase         = typename _Alvbase_wrapped::_Alloc;
		using _Size_type       = typename allocator_traits<_Alvbase>::size_type;
		using _Difference_type = typename allocator_traits<_Alvbase>::difference_type;
		using _Mycont          = vector<bool, _Rebind_alloc_t<_Alvbase, bool>>;

		_Vb_iter_base() : _Myptr(nullptr), _Myoff(0) {
		}

		_Vb_iter_base(const _Vbase* _Ptr, _Size_type _Off, const _Container_base* _Mypvbool)
			: _Myptr(_Ptr), _Myoff(_Off) {
			this->_Adopt(_Mypvbool);
		}

		void _Advance(_Size_type _Off) {
			_Myoff += _Off;
			_Myptr += _Myoff / _VBITS;
			_Myoff %= _VBITS;
		}


		_Difference_type _Total_off(const _Mycont* _Cont) const {
			return static_cast<_Difference_type>(_VBITS * (_Myptr - _Cont->_Myvec.data()) + _Myoff);
		}
#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

		const _Vbase * _Myptr;
		_Size_type _Myoff;
	};


	template <class _Alvbase_wrapped>
	class _Vb_reference : public _Vb_iter_base<_Alvbase_wrapped> {
		using _Mybase          = _Vb_iter_base<_Alvbase_wrapped>;
		using _Mycont          = typename _Mybase::_Mycont;
		using _Difference_type = typename _Mybase::_Difference_type;

		_Vb_reference() noexcept {
		}

	public:
		_Vb_reference(const _Mybase& _Right)
			: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont()) {
		}

		_Vb_reference& operator=(const _Vb_reference& _Right) noexcept {

			return *this = bool(_Right);
		}

		_Vb_reference& operator=(bool _Val) noexcept {
			if (_Val) {
				*const_cast<_Vbase*>(_Getptr()) |= _Mask();
			}
			else {
				*const_cast<_Vbase*>(_Getptr()) &= ~_Mask();
			}

			return *this;
		}

		void flip() noexcept {
			*const_cast<_Vbase*>(_Getptr()) ^= _Mask();
		}

		operator bool() const noexcept {
			return (*_Getptr() & _Mask()) != 0;
		}

		const _Vbase* _Getptr() const {

			const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
			do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1852, 0, "%s", "cannot dereference value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1852, 0); } while (false); }; } while (false);
			do { if (this->_Total_off(_Cont) <= static_cast<_Difference_type>(_Cont->_Mysize)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1854, 0, "%s", "vector<bool> iterator not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1854, 0); } while (false); }; } while (false);
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 1856 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return this->_Myptr;
		}

		friend void swap(_Vb_reference _Left, _Vb_reference _Right) noexcept {

			bool _Val = _Left;
			_Left = _Right;
			_Right = _Val;
		}

	protected:
		_Vbase _Mask() const {
			return static_cast<_Vbase>(1) << this->_Myoff;
		}
	};


	template <class _Alvbase_wrapped>
	class _Vb_const_iterator : public _Vb_iter_base<_Alvbase_wrapped> {
	private:
		using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;

	public:
		using _Mycont          = typename _Mybase::_Mycont;
		using _Difference_type = typename _Mybase::_Difference_type;
		using _Size_type       = typename _Mybase::_Size_type;
		using _Reft            = _Vb_reference<_Alvbase_wrapped>;
		using const_reference  = bool;

		using iterator_category = random_access_iterator_tag;
		using value_type        = bool;
		using difference_type   = typename _Mybase::_Difference_type;
		using pointer           = const_reference *;
		using reference         = const_reference;

		_Vb_const_iterator() {
		}

		_Vb_const_iterator(const _Vbase* _Ptr, const _Container_base* _Mypvbool)
			: _Mybase(_Ptr, 0, _Mypvbool) {
		}

		const_reference operator*() const {

			const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
			do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1902, 0, "%s", "cannot dereference value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1902, 0); } while (false); }; } while (false);
			do { if (this->_Total_off(_Cont) < static_cast<_Difference_type>(_Cont->_Mysize)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1904, 0, "%s", "vector<bool> iterator not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1904, 0); } while (false); }; } while (false);
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _Reft(*this);
		}

		_Vb_const_iterator& operator++() {
			_Inc();
			return *this;
		}

		_Vb_const_iterator operator++(int) {
			_Vb_const_iterator _Tmp = *this;
			_Inc();
			return _Tmp;
		}

		_Vb_const_iterator& operator--() {
			_Dec();
			return *this;
		}

		_Vb_const_iterator operator--(int) {
			_Vb_const_iterator _Tmp = *this;
			_Dec();
			return _Tmp;
		}

		_Vb_const_iterator& operator+=(const difference_type _Off) {

			if (_Off != 0) {
				const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
				do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1936, 0, "%s", "cannot seek value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1936, 0); } while (false); }; } while (false);
				const auto _Start_offset = this->_Total_off(_Cont);
				if (_Off < 0) {
					do { if (-_Start_offset <= _Off) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1939, 0, "%s", "cannot seek vector<bool> iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector<bool> iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1939, 0); } while (false); }; } while (false);
				}
				else if (0 < _Off) {
					do { if (_Off <= static_cast<_Difference_type>(_Cont->_Mysize - _Start_offset)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1942, 0, "%s", "cannot seek vector<bool> iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek vector<bool> iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 1942, 0); } while (false); }; } while (false);
#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
				}
			}
#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off)) {
				this->_Myoff += _Off;
				this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;
				this->_Myoff %= _VBITS;
			}
			else {
				this->_Myoff += _Off;
				this->_Myptr += this->_Myoff / _VBITS;
				this->_Myoff %= _VBITS;
			}
			return *this;
		}

		_Vb_const_iterator operator+(const difference_type _Off) const {
			_Vb_const_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_Vb_const_iterator& operator-=(const difference_type _Off) {
			return *this += -_Off;
		}

		_Vb_const_iterator operator-(const difference_type _Off) const {
			_Vb_const_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		difference_type operator-(const _Vb_const_iterator& _Right) const {
			_Compat(_Right);
			return static_cast<difference_type>(_VBITS * (this->_Myptr - _Right._Myptr))
				+ static_cast<difference_type>(this->_Myoff) - static_cast<difference_type>(_Right._Myoff);
		}

		const_reference operator[](const difference_type _Off) const {
			return *(*this + _Off);
		}

		bool operator==(const _Vb_const_iterator& _Right) const {
			_Compat(_Right);
			return this->_Myptr == _Right._Myptr && this->_Myoff == _Right._Myoff;
		}

		bool operator!=(const _Vb_const_iterator& _Right) const {
			return !(*this == _Right);
		}

		bool operator<(const _Vb_const_iterator& _Right) const {
			_Compat(_Right);
			return this->_Myptr < _Right._Myptr || (this->_Myptr == _Right._Myptr && this->_Myoff < _Right._Myoff);
		}

		bool operator>(const _Vb_const_iterator& _Right) const {
			return _Right < *this;
		}

		bool operator<=(const _Vb_const_iterator& _Right) const {
			return !(_Right < *this);
		}

		bool operator>=(const _Vb_const_iterator& _Right) const {
			return !(*this < _Right);
		}

		void _Compat(const _Vb_const_iterator& _Right) const {


#line 2013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			do { if (this->_Getcont() == _Right._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2013, 0, "%s", "vector<bool> iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterators incompatible\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2013, 0); } while (false); }; } while (false);
#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}


		using _Prevent_inheriting_unwrap = _Vb_const_iterator;

		friend void _Verify_range(const _Vb_const_iterator& _First, const _Vb_const_iterator& _Last) {

			do { if (_First <= _Last) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2022, 0, "%s", "vector<bool> iterator range transposed")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator range transposed\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2022, 0); } while (false); }; } while (false);
		}
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

		void _Dec() {

			const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
			do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2029, 0, "%s", "cannot decrement value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2029, 0); } while (false); }; } while (false);
			do { if (this->_Total_off(_Cont) > 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2030, 0, "%s", "cannot decrement vector<bool> begin iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement vector<bool> begin iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2030, 0); } while (false); }; } while (false);
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (this->_Myoff != 0) {
				--this->_Myoff;
			}
			else {
				this->_Myoff = _VBITS - 1;
				--this->_Myptr;
			}
		}

		void _Inc() {

			const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
			do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2044, 0, "%s", "cannot increment value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2044, 0); } while (false); }; } while (false);
			do { if (this->_Total_off(_Cont) < static_cast<_Difference_type>(_Cont->_Mysize)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2046, 0, "%s", "cannot increment vector<bool> end iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment vector<bool> end iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2046, 0); } while (false); }; } while (false);
#line 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 2048 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (this->_Myoff < _VBITS - 1) {
				++this->_Myoff;
			}
			else {
				this->_Myoff = 0;
				++this->_Myptr;
			}
		}
	};

	template <class _Alvbase_wrapped>
	_Vb_const_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_const_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_const_iterator<_Alvbase_wrapped> _Right) {
		return _Right += _Off;
	}


	template <class _Alvbase_wrapped>
	class _Vb_iterator : public _Vb_const_iterator<_Alvbase_wrapped> {
	public:
		using _Mybase          = _Vb_const_iterator<_Alvbase_wrapped>;
		using _Mycont          = typename _Mybase::_Mycont;
		using _Difference_type = typename _Mybase::_Difference_type;

		using _Reft           = _Vb_reference<_Alvbase_wrapped>;
		using const_reference = bool;

		using iterator_category = random_access_iterator_tag;
		using value_type        = bool;
		using difference_type   = typename _Mybase::difference_type;
		using pointer           = _Reft *;
		using reference         = _Reft;

		_Vb_iterator() {
		}

		_Vb_iterator(_Vbase* _Ptr, _Container_base* _Mypvbool)
			: _Mybase(_Ptr, _Mypvbool) {
		}

		reference operator*() const {

			const auto _Cont = static_cast<const _Mycont*>(this->_Getcont());
			do { if (_Cont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2092, 0, "%s", "cannot dereference value-initialized vector<bool> iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized vector<bool> iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2092, 0); } while (false); }; } while (false);
			do { if (this->_Total_off(_Cont) < static_cast<_Difference_type>(_Cont->_Mysize)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2094, 0, "%s", "vector<bool> iterator not dereferencable")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> iterator not dereferencable\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2094, 0); } while (false); }; } while (false);
#line 2096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 2096 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return _Reft(*this);
		}

		_Vb_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		_Vb_iterator operator++(int) {
			_Vb_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		_Vb_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		_Vb_iterator operator--(int) {
			_Vb_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}

		_Vb_iterator& operator+=(const difference_type _Off) {
			_Mybase::operator+=(_Off);
			return *this;
		}

		_Vb_iterator operator+(const difference_type _Off) const {
			_Vb_iterator _Tmp = *this;
			return _Tmp += _Off;
		}

		_Vb_iterator& operator-=(const difference_type _Off) {
			_Mybase::operator-=(_Off);
			return *this;
		}

		using _Mybase::operator-;

		_Vb_iterator operator-(const difference_type _Off) const {
			_Vb_iterator _Tmp = *this;
			return _Tmp -= _Off;
		}

		reference operator[](const difference_type _Off) const {
			return *(*this + _Off);
		}

		using _Prevent_inheriting_unwrap = _Vb_iterator;
	};

	template <class _Alvbase_wrapped>
	inline _Vb_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_iterator<_Alvbase_wrapped> _Right) {
		return _Right += _Off;
	}


	template <class _Alloc>
	class _Vb_val : public _Container_base {
	public:
		using _Alvbase         = _Rebind_alloc_t<_Alloc, _Vbase>;
		using _Alvbase_traits  = allocator_traits<_Alvbase>;
		using _Vectype         = vector<_Vbase, _Alvbase>;
		using _Alvbase_wrapped = _Wrap_alloc<_Alvbase>;
		using size_type        = typename _Alvbase_traits::size_type;

		_Vb_val() noexcept(is_nothrow_default_constructible_v<_Vectype>)
			: _Myvec(), _Mysize(0) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(const _Alloc& _Al) noexcept(is_nothrow_constructible_v<_Vectype, _Alvbase>)
			: _Myvec(static_cast<_Alvbase>(_Al)), _Mysize(0) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(size_type _Count, const bool& _Val)
			: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0)), _Mysize(0) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
			: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0), static_cast<_Alvbase>(_Al)),
			_Mysize(0) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(const _Vb_val& _Right) : _Myvec(_Right._Myvec), _Mysize(_Right._Mysize) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
			: _Myvec(_Right._Myvec, static_cast<_Alvbase>(_Al)), _Mysize(_Right._Mysize) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(_Vb_val&& _Right) noexcept(is_nothrow_move_constructible_v<_Vectype>)
			: _Myvec(::std::move(_Right._Myvec)), _Mysize(::std::exchange(_Right._Mysize, size_type{ 0 })) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		_Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
			noexcept(is_nothrow_constructible_v<_Vectype, _Vectype, _Alvbase>)
			: _Myvec(::std::move(_Right._Myvec), static_cast<_Alvbase>(_Al)),
			_Mysize(::std::exchange(_Right._Mysize, size_type{ 0 })) {
			this->_Alloc_proxy(static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(_Getal()));
		}

		~_Vb_val() noexcept {

			this->_Orphan_all();
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alvbase, _Container_proxy>>(this->_Getal());
			_Delete_plain(_Alproxy, ::std::exchange(this->_Myproxy, nullptr));
#line 2216 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

		_Alvbase& _Getal() noexcept {
			return _Myvec._Getal();
		}

		const _Alvbase& _Getal() const noexcept {
			return _Myvec._Getal();
		}

		static size_type _Nw(size_type _Count) {
			return (_Count + _VBITS - 1) / _VBITS;
		}

		_Vectype _Myvec;
		size_type _Mysize;
	};


	template <class _Alloc>
	class vector<bool, _Alloc> : public _Vb_val<_Alloc> {
	public:
		static_assert(!0 || is_same_v<bool, typename _Alloc::value_type>,
			"vector<bool, Allocator>" " requires that Allocator's value_type match " "bool" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using _Mybase          = _Vb_val<_Alloc>;
		using _Alvbase_wrapped = typename _Mybase::_Alvbase_wrapped;
		using _Alvbase         = typename _Mybase::_Alvbase;
		using _Alvbase_traits  = typename _Mybase::_Alvbase_traits;

		using size_type       = typename _Alvbase_traits::size_type;
		using difference_type = typename _Alvbase_traits::difference_type;
		using allocator_type  = _Alloc;

		using reference       = _Vb_reference<_Alvbase_wrapped>;
		using const_reference = bool;
		using value_type      = bool;

		using _Reft          = reference;
		using iterator       = _Vb_iterator<_Alvbase_wrapped>;
		using const_iterator = _Vb_const_iterator<_Alvbase_wrapped>;

		using pointer                = iterator;
		using const_pointer          = const_iterator;
		using reverse_iterator       = ::std::reverse_iterator<iterator>;
		using const_reverse_iterator = ::std::reverse_iterator<const_iterator>;

		static const int _VBITS = ::std::_VBITS;
		enum { _EEN_VBITS = _VBITS };

		vector() noexcept(is_nothrow_default_constructible_v<_Mybase>)
			: _Mybase() {
		}

		explicit vector(const _Alloc& _Al)
			noexcept(is_nothrow_constructible_v<_Mybase, const _Alloc&>)
			: _Mybase(_Al) {
		}

		explicit vector(__declspec(guard(overflow)) size_type _Count, const _Alloc& _Al = _Alloc())
			: _Mybase(_Count, false, _Al) {
			_Trim(_Count);
		}

		vector(__declspec(guard(overflow)) size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
			: _Mybase(_Count, _Val, _Al) {
			_Trim(_Count);
		}

		vector(const vector& _Right) : _Mybase(_Right) {
		}

		vector(const vector& _Right, const _Alloc& _Al) : _Mybase(_Right, _Al) {
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc())
			: _Mybase(_Al) {
			_BConstruct(_First, _Last);
		}

		template <class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last) {
			insert(begin(), _First, _Last);
		}

		vector(vector&& _Right) noexcept(is_nothrow_move_constructible_v<_Mybase>)
			: _Mybase(::std::move(_Right)) {
			this->_Swap_proxy_and_iterators(_Right);
		}

		vector(vector&& _Right, const _Alloc& _Al)
			noexcept(is_nothrow_constructible_v<_Mybase, _Mybase, const _Alloc&>)
			: _Mybase(::std::move(_Right), _Al) {
			if
				constexpr (!_Alvbase_traits::is_always_equal::value) {
				if (this->_Getal() != _Right._Getal()) {
					return;
				}
			}

			this->_Swap_proxy_and_iterators(_Right);
		}

	private:

		void _Move_assign(vector& _Right, _Equal_allocators) noexcept {
			this->_Myvec = ::std::move(_Right._Myvec);
			this->_Mysize = ::std::exchange(_Right._Mysize, size_type{ 0 });
			this->_Swap_proxy_and_iterators(_Right);
		}

		void _Move_assign(vector& _Right, _Propagate_allocators) noexcept {
			using _Alproxy_type = _Rebind_alloc_t<_Alvbase, _Container_proxy>;
			if (this->_Getal() != _Right._Getal()) {

				_Alproxy_type _Oldal(this->_Getal());
				_Alproxy_type _Right_proxy_al(_Right._Getal());
				_Container_proxy_ptr<_Alvbase> _Proxy(_Right_proxy_al, _Leave_proxy_unbound{});
				this->_Myvec = ::std::move(_Right._Myvec);
				this->_Mysize = ::std::exchange(_Right._Mysize, size_type{ 0 });
				_Proxy._Bind(_Oldal, this);
				this->_Swap_proxy_and_iterators(_Right);
				return;
			}

			this->_Myvec = ::std::move(_Right._Myvec);
			this->_Mysize = ::std::exchange(_Right._Mysize, size_type{ 0 });
			this->_Swap_proxy_and_iterators(_Right);
		}

		void _Move_assign(vector& _Right, _No_propagate_allocators) {
			this->_Myvec = ::std::move(_Right._Myvec);
			this->_Mysize = ::std::exchange(_Right._Mysize, size_type{ 0 });
			if (this->_Getal() == _Right._Getal()) {
				this->_Swap_proxy_and_iterators(_Right);
			}
		}
#line 2355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

	public:
		vector & operator=(vector && _Right) noexcept(is_nothrow_move_assignable_v<_Mybase>) {
			if (this != ::std::addressof(_Right)) {



#line 2363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
				this->_Orphan_all();
				_Move_assign(_Right, _Choose_pocma<_Alvbase>{});
#line 2366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			}
			return *this;
		}

		template <class... _Valty>
		decltype(auto) emplace_back(_Valty&& ... _Val) {
			bool _Tmp(::std::forward<_Valty>(_Val)...);
			push_back(_Tmp);



#line 2378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
		}

		template <class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&& ... _Val) {
			bool _Tmp(::std::forward<_Valty>(_Val)...);
			return insert(_Where, _Tmp);
		}

		vector(initializer_list<bool> _Ilist, const _Alloc& _Al = allocator_type())
			: _Mybase(0, false, _Al) {
			insert(begin(), _Ilist.begin(), _Ilist.end());
		}

		vector& operator=(initializer_list<bool> _Ilist) {
			assign(_Ilist.begin(), _Ilist.end());
			return *this;
		}

		void assign(initializer_list<bool> _Ilist) {
			assign(_Ilist.begin(), _Ilist.end());
		}

		iterator insert(const_iterator _Where,
			initializer_list<bool> _Ilist) {
			return insert(_Where, _Ilist.begin(), _Ilist.end());
		}

		~vector() noexcept {}

	private:

		void _Copy_assign(const vector& _Right, false_type) {
			this->_Myvec = _Right._Myvec;
			this->_Mysize = _Right._Mysize;
		}

		void _Copy_assign(const vector& _Right, true_type) {
			if (this->_Getal() == _Right._Getal()) {
				_Copy_assign(_Right, false_type{});
			}
			else {

				using _Alproxy_type = _Rebind_alloc_t<_Alvbase, _Container_proxy>;
				_Alproxy_type _Oldal(this->_Getal());
				_Alproxy_type _Right_proxy_al(_Right._Getal());
				_Container_proxy_ptr<_Alvbase> _Proxy(_Right_proxy_al, _Leave_proxy_unbound{});
				this->_Myvec = _Right._Myvec;
				this->_Mysize = _Right._Mysize;
				_Proxy._Bind(_Oldal, this);
			}
		}
#line 2429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

	public:
		vector & operator=(const vector & _Right) {
			if (this != ::std::addressof(_Right)) {



#line 2437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
				this->_Orphan_all();
				_Copy_assign(_Right, _Choose_pocca<_Alvbase>{});
#line 2440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			}

			return *this;
		}

		void reserve(__declspec(guard(overflow)) size_type _Count) {
			this->_Myvec.reserve(this->_Nw(_Count));
		}

		size_type capacity() const noexcept {
			return this->_Myvec.capacity() * _VBITS;
		}

		iterator begin() noexcept {
			return iterator(this->_Myvec.data(), this);
		}

		const_iterator begin() const noexcept {
			return const_iterator(this->_Myvec.data(), this);
		}

		iterator end() noexcept {
			return begin() + static_cast<difference_type>(this->_Mysize);
		}

		const_iterator end() const noexcept {
			return begin() + static_cast<difference_type>(this->_Mysize);
		}

		const_iterator cbegin() const noexcept {
			return begin();
		}

		const_iterator cend() const noexcept {
			return end();
		}

		const_reverse_iterator crbegin() const
			noexcept {
			return rbegin();
		}

		const_reverse_iterator crend() const
			noexcept {
			return rend();
		}

		iterator _Unchecked_begin() noexcept {
			return iterator(this->_Myvec.data(), this);
		}

		const_iterator _Unchecked_begin() const noexcept {

			return const_iterator(this->_Myvec.data(), this);
		}

		iterator _Unchecked_end() noexcept {
			return _Unchecked_begin() + static_cast<difference_type>(this->_Mysize);
		}

		const_iterator _Unchecked_end() const noexcept {
			return _Unchecked_begin() + static_cast<difference_type>(this->_Mysize);
		}

		void shrink_to_fit() {
			if (this->_Myvec.capacity() != this->_Myvec.size()) {
				this->_Orphan_all();
				this->_Myvec.shrink_to_fit();
			}
		}

		iterator _Make_iter(const_iterator _Where) {
			iterator _Tmp = begin();
			if (0 < this->_Mysize) {
				_Tmp += _Where - begin();
			}

			return _Tmp;
		}

		reverse_iterator rbegin() noexcept {
			return reverse_iterator(end());
		}

		const_reverse_iterator rbegin() const
			noexcept {
			return const_reverse_iterator(end());
		}

		reverse_iterator rend() noexcept {
			return reverse_iterator(begin());
		}

		const_reverse_iterator rend() const noexcept {
			return const_reverse_iterator(begin());
		}

		void resize(__declspec(guard(overflow)) size_type _Newsize,
			bool _Val = false) {
			if (size() < _Newsize) {
				_Insert_n(end(), _Newsize - size(), _Val);
			}
			else if (_Newsize < size()) {
				erase(begin() + static_cast<difference_type>(_Newsize), end());
			}
		}

		size_type size() const noexcept {
			return this->_Mysize;
		}

		size_type max_size() const noexcept {
			constexpr auto _Diff_max = static_cast<size_type>((numeric_limits<difference_type>::max)());
			const size_type _Ints_max = this->_Myvec.max_size();
			if (_Ints_max > _Diff_max / _VBITS) {
				return _Diff_max;
			}


			return _Ints_max * _VBITS;
		}

		bool empty() const noexcept {
			return size() == 0;
		}

		allocator_type get_allocator() const noexcept {
			return static_cast<allocator_type>(this->_Myvec.get_allocator());
		}

		const_reference at(size_type _Off) const {
			if (size() <= _Off) {
				_Xran();
			}

			return (*this)[_Off];
		}

		reference at(size_type _Off) {
			if (size() <= _Off) {
				_Xran();
			}

			return (*this)[_Off];
		}

		const_reference operator[](size_type _Off) const {

			do { if (_Off < this->_Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2587, 0, "%s", "vector<bool> subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2587, 0); } while (false); }; } while (false);
#line 2589 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			const_iterator _It = begin();
			_It._Advance(_Off);
			return *_It;
		}

		reference operator[](size_type _Off) {

			do { if (_Off < this->_Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2597, 0, "%s", "vector<bool> subscript out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> subscript out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2597, 0); } while (false); }; } while (false);
#line 2599 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			iterator _It = begin();
			_It._Advance(_Off);
			return *_It;
		}

		reference front() {

			do { if (this->_Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2607, 0, "%s", "front() called on empty vector<bool>")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector<bool>\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2607, 0); } while (false); }; } while (false);
#line 2609 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *begin();
		}

		const_reference front() const {

			do { if (this->_Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2615, 0, "%s", "front() called on empty vector<bool>")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"front() called on empty vector<bool>\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2615, 0); } while (false); }; } while (false);
#line 2617 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *begin();
		}

		reference back() {

			do { if (this->_Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2623, 0, "%s", "back() called on empty vector<bool>")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector<bool>\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2623, 0); } while (false); }; } while (false);
#line 2625 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *(end() - 1);
		}

		const_reference back() const {

			do { if (this->_Mysize != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2631, 0, "%s", "back() called on empty vector<bool>")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"back() called on empty vector<bool>\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2631, 0); } while (false); }; } while (false);
#line 2633 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			return *(end() - 1);
		}

		void push_back(const bool& _Val) {
			insert(end(), _Val);
		}

		void pop_back() {
			erase(end() - 1);
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last) {
			clear();
			insert(begin(), _First, _Last);
		}

		void assign(__declspec(guard(overflow)) size_type _Count, const bool& _Val) {
			clear();
			_Insert_n(begin(), _Count, _Val);
		}

		iterator insert(const_iterator _Where, const bool& _Val) {
			return _Insert_n(_Where, static_cast<size_type>(1), _Val);
		}

		iterator insert(const_iterator _Where, __declspec(guard(overflow)) size_type _Count,
			const bool& _Val) {
			return _Insert_n(_Where, _Count, _Val);
		}

		template <class _Iter, class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last) {
			difference_type _Off = _Where - begin();
			_Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
			return begin() + _Off;
		}

		template <class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag) {

			difference_type _Off = _Where - begin();

			for (; _First != _Last; ++_First, (void) ++_Off) {
				insert(begin() + _Off, *_First);
			}
		}

		template <class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag) {

			_Adl_verify_range(_First, _Last);
			auto _Count = _Convert_size<size_type>(static_cast<size_t>(::std::distance(_First, _Last)));
			size_type _Off = _Insert_x(_Where, _Count);
			_Copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), begin() + static_cast<difference_type>(_Off));
		}

		iterator erase(const_iterator _Where_arg) {
			iterator _Where = _Make_iter(_Where_arg);
			difference_type _Off = _Where - begin();


			do { if (end() > _Where) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2696, 0, "%s", "vector<bool> erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> erase iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2696, 0); } while (false); }; } while (false);
			::std::copy(_Where + 1, end(), _Where);
			_Orphan_range(static_cast<size_type>(_Off), this->_Mysize);



#line 2703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			_Trim(this->_Mysize - 1);
			return begin() + _Off;
		}

		iterator erase(const_iterator _First_arg,
			const_iterator _Last_arg) {
			iterator _First = _Make_iter(_First_arg);
			iterator _Last = _Make_iter(_Last_arg);
			difference_type _Off = _First - begin();

			if (_First != _Last) {

				do { if (_Last >= _First && end() >= _Last) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2716, 0, "%s", "vector<bool> erase iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> erase iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2716, 0); } while (false); }; } while (false);
				iterator _Next = ::std::copy(_Last, end(), _First);
				const auto _Newsize = static_cast<size_type>(_Next - begin());
				_Orphan_range(_Newsize, this->_Mysize);
				_Trim(_Newsize);




#line 2726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			}
			return begin() + _Off;
		}

		void clear() noexcept {
			this->_Orphan_all();
			this->_Myvec.clear();
			this->_Mysize = 0;
		}

		void flip() noexcept {
			for (auto& _Elem : this->_Myvec) {
				_Elem = ~_Elem;
			}

			_Trim(this->_Mysize);
		}

		void swap(vector& _Right) noexcept {

			if (this != ::std::addressof(_Right)) {
				this->_Swap_proxy_and_iterators(_Right);
				this->_Myvec.swap(_Right._Myvec);
				::std::swap(this->_Mysize, _Right._Mysize);
			}
		}

		static void swap(reference _Left, reference _Right) noexcept {
			bool _Val = _Left;
			_Left = _Right;
			_Right = _Val;
		}

		friend hash<vector<bool, _Alloc>>;

		iterator _Insert_n(const_iterator _Where, size_type _Count, const bool& _Val) {
			size_type _Off = _Insert_x(_Where, _Count);
			const auto _Result = begin() + static_cast<difference_type>(_Off);
			::std::fill(_Result, _Result + static_cast<difference_type>(_Count), _Val);
			return _Result;
		}

		size_type _Insert_x(const_iterator _Where, size_type _Count) {
			difference_type _Off = _Where - begin();


			do { if (end() >= _Where) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2772, 0, "%s", "vector<bool> insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"vector<bool> insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector", 2772, 0); } while (false); }; } while (false);
			bool _Realloc = capacity() - size() < _Count;
#line 2775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

			if (_Count != 0) {
				if (max_size() - size() < _Count) {
					_Xlen();
				}


				this->_Myvec.resize(this->_Nw(size() + _Count), 0);
				if (empty()) {
					this->_Mysize += _Count;
				}
				else {
					iterator _Oldend = end();
					this->_Mysize += _Count;
					::std::copy_backward(begin() + _Off, _Oldend, end());
				}


				_Orphan_range(static_cast<size_type>(_Realloc ? 0 : _Off), this->_Mysize);
#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
			}

			return static_cast<size_type>(_Off);
		}


		void _Orphan_range(size_type _Offlo, size_type _Offhi) const {

			_Lockit _Lock(3);
			const auto _Base = this->_Myvec.data();

			_Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
			while (*_Pnext != nullptr) {
				const auto& _Pnextiter = static_cast<const_iterator&>(**_Pnext);
				const auto _Off = static_cast<size_type>(_VBITS * (_Pnextiter._Myptr - _Base)) + _Pnextiter._Myoff;
				if (_Off < _Offlo || _Offhi < _Off) {
					_Pnext = &(*_Pnext)->_Mynextiter;
				}
				else {
					(*_Pnext)->_Myproxy = nullptr;
					*_Pnext = (*_Pnext)->_Mynextiter;
				}
			}
		}




#line 2822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"

		void _Trim(size_type _Size) {
			if (max_size() < _Size) {
				_Xlen();
			}

			const size_type _Words = this->_Nw(_Size);
			if (_Words < this->_Myvec.size()) {
				this->_Myvec.erase(this->_Myvec.begin() + static_cast<difference_type>(_Words), this->_Myvec.end());
			}

			this->_Mysize = _Size;
			_Size %= _VBITS;
			if (0 < _Size) {
				this->_Myvec[_Words - 1] &= (static_cast<_Vbase>(1) << _Size) - 1;
			}
		}

		[[noreturn]] void _Xlen() const {
			_Xlength_error("vector<bool> too long");
		}

		[[noreturn]] void _Xran() const {
			_Xout_of_range("invalid vector<bool> subscript");
		}
	};

	template <class _Alloc>
	inline bool operator==(
		const vector<bool, _Alloc>& _Left, const vector<bool, _Alloc>& _Right) {
		return _Left.size() == _Right.size() && _Left._Myvec == _Right._Myvec;
	}

	template <class _Alloc>
	inline bool operator!=(
		const vector<bool, _Alloc>& _Left, const vector<bool, _Alloc>& _Right) {
		return !(_Left == _Right);
	}


	template <class _Alloc>
	struct hash<vector<bool, _Alloc>> {
		typedef vector<bool, _Alloc> argument_type;
		typedef size_t result_type;

		size_t operator()(const vector<bool, _Alloc>& _Keyval) const
			noexcept {
			return _Hash_array_representation(_Keyval._Myvec.data(), _Keyval._Myvec.size());
		}
	};






#line 2879 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
}



#pragma warning(pop)
#pragma pack(pop)
#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"
#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\vector"





#line 61 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"







































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
































































































































































































































































#line 258 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




#line 263 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )





extern "C" {

	__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(
		void* _First1, void* _Last1, void* _First2) noexcept;
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

namespace std {

	const int _ISORT_MAX = 32;


	template <class _Diff>
	constexpr ptrdiff_t _Temporary_buffer_size(
		const _Diff _Value) noexcept {
		using _CT = common_type_t<ptrdiff_t, _Diff>;
		return static_cast<ptrdiff_t>(_Min_value(static_cast<_CT>(9223372036854775807i64), static_cast<_CT>(_Value)));
	}

	template <class _Ty>
	struct _Optimistic_temporary_buffer {
		static constexpr size_t _Optimistic_size = 4096;
		static constexpr size_t _Optimistic_count = _Max_value(static_cast<size_t>(1), _Optimistic_size / sizeof(_Ty));

		template <class _Diff>
		explicit _Optimistic_temporary_buffer(const _Diff _Requested_size) noexcept {
			const auto _Attempt = _Temporary_buffer_size(_Requested_size);
			if (_Requested_size <= _Optimistic_count) {
				_Data = reinterpret_cast<_Ty*>(&_Stack_space[0]);
				_Capacity = static_cast<ptrdiff_t>(_Requested_size);
				return;
			}

			const pair<_Ty*, ptrdiff_t> _Raw = _Get_temporary_buffer<_Ty>(_Attempt);
			if (_Raw.second > _Optimistic_count) {
				_Data = _Raw.first;
				_Capacity = _Raw.second;
				return;
			}


			_Return_temporary_buffer(_Raw.first);
			_Data = reinterpret_cast<_Ty*>(&_Stack_space[0]);
			_Capacity = _Optimistic_count;
		}

		_Optimistic_temporary_buffer(const _Optimistic_temporary_buffer&) = delete;
		_Optimistic_temporary_buffer& operator=(const _Optimistic_temporary_buffer&) = delete;

		~_Optimistic_temporary_buffer() noexcept {
			if (_Capacity > _Optimistic_count) {
				_Return_temporary_buffer(_Data);
			}
		}

		_Ty* _Data;
		ptrdiff_t _Capacity;
		aligned_union_t<0, _Ty> _Stack_space[_Optimistic_count];
	};


	template <class _InIt, class _Fn>
	inline _Fn for_each(_InIt _First, _InIt _Last, _Fn _Func) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			_Func(*_UFirst);
		}

		return _Func;
	}













































#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				break;
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}




#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline _InIt find_if_not(
		_InIt _First, const _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (!_Pred(*_UFirst)) {
				break;
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}




#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	inline _FwdIt adjacent_find(
		const _FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		if (_UFirst != _ULast) {
			for (auto _UNext = _UFirst; ++_UNext != _ULast; _UFirst = _UNext) {
				if (_Pred(*_UFirst, *_UNext)) {
					_ULast = _UFirst;
					break;
				}
			}
		}

		_Seek_wrapped(_Last, _ULast);
		return _Last;
	}

	template <class _FwdIt>
	inline _FwdIt adjacent_find(const _FwdIt _First, const _FwdIt _Last) {
		return ::std::adjacent_find(_First, _Last, equal_to<>());
	}










#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline _Iter_diff_t<_InIt> count_if(
		_InIt _First, _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_Iter_diff_t<_InIt> _Count = 0;
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				++_Count;
			}
		}

		return _Count;
	}





#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _Pr>
	inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
		while (_UFirst1 != _ULast1 && _Pred(*_UFirst1, *_UFirst2)) {
			++_UFirst1;
			++_UFirst2;
		}

		_Seek_wrapped(_First2, _UFirst2);
		_Seek_wrapped(_First1, _UFirst1);
		return { _First1, _First2 };
	}


	template <class _InIt1, class _RightTy, size_t _RightSize, class _Pr, enable_if_t<!is_same_v<_RightTy*, _Pr>, int> = 0>
	inline pair<_InIt1, _RightTy*> mismatch(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy(&_First2)[_RightSize], _Pr _Pred) {
		const auto _Result =
			::std::mismatch(_First1, _Last1, _Array_iterator<_RightTy, _RightSize>(_First2), _Pass_fn(_Pred));
		return { _Result.first, _Result.second._Unwrapped() };
	}
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

















#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2>
	inline pair<_InIt1, _InIt2> mismatch(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2) {
		return ::std::mismatch(_First1, _Last1, _First2, equal_to<>());
	}


	template <class _InIt1, class _RightTy, size_t _RightSize>
	inline pair<_InIt1, _RightTy*> mismatch(const _InIt1 _First1, const _InIt1 _Last1,
		_RightTy(&_First2)[_RightSize]) {
		return ::std::mismatch(_First1, _Last1, _First2, equal_to<>());
	}
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


















#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _Pr>
	inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		if constexpr (_Is_random_iter_v<_InIt1> && _Is_random_iter_v<_InIt2>) {
			using _CT         = _Common_diff_t<_InIt1, _InIt2>;
			const _CT _Count1 = _ULast1 - _UFirst1;
			const _CT _Count2 = _ULast2 - _UFirst2;
			const auto _Count = static_cast<_Iter_diff_t<_InIt1>>(_Min_value(_Count1, _Count2));
			_ULast1 = _UFirst1 + _Count;
			while (_UFirst1 != _ULast1 && _Pred(*_UFirst1, *_UFirst2)) {
				++_UFirst1;
				++_UFirst2;
			}
		}
		else {
			while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2 && _Pred(*_UFirst1, *_UFirst2)) {
				++_UFirst1;
				++_UFirst2;
			}
		}

		_Seek_wrapped(_First2, _UFirst2);
		_Seek_wrapped(_First1, _UFirst1);
		return { _First1, _First2 };
	}




































#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2>
	inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
		_InIt2 _Last2) {
		return ::std::mismatch(_First1, _Last1, _First2, _Last2, equal_to<>());
	}









#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline bool all_of(_InIt _First, _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (!_Pred(*_UFirst)) {
				return false;
			}
		}

		return true;
	}




#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline bool any_of(const _InIt _First, const _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				return true;
			}
		}

		return false;
	}




#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline bool none_of(const _InIt _First, const _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				return false;
			}
		}

		return true;
	}




#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Pr>
	inline _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				*_UDest = *_UFirst;
				++_UDest;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* copy_if(
		_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize], _Pr _Pred) {
		return ::std::copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped();
	}
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





















#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt1, class _OutIt2, class _Pr>
	inline pair<_OutIt1, _OutIt2> partition_copy(_InIt _First, _InIt _Last, _OutIt1 _Dest_true, _OutIt2 _Dest_false,
		_Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest_true = _Get_unwrapped_unverified(_Dest_true);
		auto _UDest_false = _Get_unwrapped_unverified(_Dest_false);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				*_UDest_true = *_UFirst;
				++_UDest_true;
			}
			else {
				*_UDest_false = *_UFirst;
				++_UDest_false;
			}
		}

		_Seek_wrapped(_Dest_false, _UDest_false);
		_Seek_wrapped(_Dest_true, _UDest_true);
		return { _Dest_true, _Dest_false };
	}


	template <class _InIt, class _DestTrueTy, size_t _DestTrueSize, class _OutIt2, class _Pr>
	inline pair<_DestTrueTy*, _OutIt2> partition_copy(_InIt _First, _InIt _Last, _DestTrueTy(&_Dest_true)[_DestTrueSize],
		_OutIt2 _Dest_false, _Pr _Pred) {
		const auto _Result = ::std::partition_copy(
			_First, _Last, _Array_iterator<_DestTrueTy, _DestTrueSize>(_Dest_true), _Dest_false, _Pass_fn(_Pred));
		return { _Result.first._Unwrapped(), _Result.second };
	}

	template <class _InIt, class _OutIt1, class _DestFalseTy, size_t _DestFalseSize, class _Pr>
	inline pair<_OutIt1, _DestFalseTy*> partition_copy(_InIt _First, _InIt _Last, _OutIt1 _Dest_true,
		_DestFalseTy(&_Dest_false)[_DestFalseSize],
		_Pr _Pred) {
		const auto _Result = ::std::partition_copy(
			_First, _Last, _Dest_true, _Array_iterator<_DestFalseTy, _DestFalseSize>(_Dest_false), _Pass_fn(_Pred));
		return { _Result.first, _Result.second._Unwrapped() };
	}

	template <class _InIt, class _DestTrueTy, size_t _DestTrueSize, class _DestFalseTy, size_t _DestFalseSize, class _Pr>
	inline pair<_DestTrueTy*, _DestFalseTy*> partition_copy(_InIt _First, _InIt _Last,
		_DestTrueTy(&_Dest_true)[_DestTrueSize], _DestFalseTy(&_Dest_false)[_DestFalseSize],
		_Pr _Pred) {
		const auto _Result = ::std::partition_copy(_First, _Last, _Array_iterator<_DestTrueTy, _DestTrueSize>(_Dest_true),
			_Array_iterator<_DestFalseTy, _DestFalseSize>(_Dest_false), _Pass_fn(_Pred));
		return { _Result.first._Unwrapped(), _Result.second._Unwrapped() };
	}
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"














































#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _Pr>
	inline bool is_partitioned(
		const _InIt _First, const _InIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);

		for (;; ++_UFirst) {
			if (_UFirst == _ULast) {
				return true;
			}

			if (!_Pred(*_UFirst)) {
				break;
			}
		}

		while (++_UFirst != _ULast) {
			if (_Pred(*_UFirst)) {
				return false;
			}
		}

		return true;
	}




#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	inline _FwdIt partition_point(
		_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _Count = ::std::distance(_UFirst, _ULast);
		while (0 < _Count) {
			const auto _Count2 = static_cast<_Iter_diff_t<_FwdIt>>(_Count >> 1);
			const auto _UMid = ::std::next(_UFirst, _Count2);

			if (_Pred(*_UMid)) {
				_UFirst = _Next_iter(_UMid);
				_Count -= _Count2;
				--_Count;
			}
			else {
				_Count = _Count2;
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}



	template <class _InIt1, class _InIt2, class _Pr>
	inline bool _Equal_rev_pred_unchecked(_InIt1 _First1, _InIt2 _First2, const _InIt2 _Last2,
		_Pr _Pred) {
		if constexpr (decltype(_Equal_memcmp_is_safe(_First1, _First2, _Pred))::value) {
			const auto _First1_ch = reinterpret_cast<const char*>(_First1);
			const auto _First2_ch = reinterpret_cast<const char*>(_First2);
			const auto _Count = static_cast<size_t>(reinterpret_cast<const char*>(_Last2) - _First2_ch);
			return ::memcmp(_First1_ch, _First2_ch, _Count) == 0;
		}
		else {
			for (; _First2 != _Last2; ++_First1, (void) ++_First2) {
				if (!_Pred(*_First1, *_First2)) {
					return false;
				}
			}

			return true;
		}
	}



























#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



	template <class _FwdItHaystack, class _FwdItPat, class _Pr>
	inline _FwdItHaystack search(_FwdItHaystack _First1, _FwdItHaystack _Last1, const _FwdItPat _First2,
		const _FwdItPat _Last2, _Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		if constexpr (_Is_random_iter_v<_FwdItHaystack> && _Is_random_iter_v<_FwdItPat>) {
			const _Iter_diff_t<_FwdItPat> _Count2 = _ULast2 - _UFirst2;
			if (_ULast1 - _UFirst1 >= _Count2) {
				const auto _Last_possible = _ULast1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);
				for (;; ++_UFirst1) {
					if (_Equal_rev_pred_unchecked(_UFirst1, _UFirst2, _ULast2, _Pass_fn(_Pred))) {
						_Seek_wrapped(_Last1, _UFirst1);
						break;
					}

					if (_UFirst1 == _Last_possible) {
						break;
					}
				}
			}
		}
		else {
			for (;; ++_UFirst1) {
				auto _UMid1 = _UFirst1;
				for (auto _UMid2 = _UFirst2;; ++_UMid1, (void) ++_UMid2) {
					if (_UMid2 == _ULast2) {
						_Seek_wrapped(_Last1, _UFirst1);
						return _Last1;
					}
					else if (_UMid1 == _ULast1) {
						return _Last1;
					}
					else if (!_Pred(*_UMid1, *_UMid2)) {
						break;
					}
				}
			}
		}

		return _Last1;
	}


















































#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _FwdItHaystack, class _FwdItPat>
	inline _FwdItHaystack search(const _FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2) {
		return ::std::search(_First1, _Last1, _First2, _Last2, equal_to<>());
	}







#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _FwdItHaystack, class _Searcher>
	inline _FwdItHaystack search(const _FwdItHaystack _First, const _FwdItHaystack _Last,
		const _Searcher& _Search) {
		return _Search(_First, _Last).first;
	}



	template <class _FwdIt, class _Diff, class _Ty, class _Pr>
	inline _FwdIt search_n(const _FwdIt _First, _FwdIt _Last, const _Diff _Count_raw, const _Ty& _Val,
		_Pr _Pred) {
		const _Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (_Count <= 0) {
			return _First;
		}

		if (static_cast<uintmax_t>(_Count) > static_cast<uintmax_t>(
			(numeric_limits<_Iter_diff_t<_FwdIt>>::max)())) {

			return _Last;
		}

		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if constexpr (_Is_random_iter_v<_FwdIt>) {
			const auto _Count_diff = static_cast<_Iter_diff_t<_FwdIt>>(_Count);
			auto _UOld_first = _UFirst;
			for (_Iter_diff_t<_FwdIt> _Inc = 0; _Count_diff <= _ULast - _UOld_first;) {
				_UFirst = _UOld_first + _Inc;
				if (_Pred(*_UFirst, _Val)) {
					_Iter_diff_t<_FwdIt> _Count1 = _Count_diff;
					auto _UMid = _UFirst;

					while (_UOld_first != _UFirst && _Pred(_UFirst[-1], _Val)) {
						--_Count1;
						--_UFirst;
					}

					if (_Count1 <= _ULast - _UMid) {
						for (;;) {
							if (--_Count1 == 0) {
								_Seek_wrapped(_Last, _UFirst);
								return _Last;
							}
							else if (!_Pred(*++_UMid, _Val)) {
								break;
							}
						}
					}
					_UOld_first = ++_UMid;
					_Inc = 0;
				}
				else {
					_UOld_first = _UFirst + 1;
					_Inc = _Count_diff - 1;
				}
			}
		}
		else {
			for (; _UFirst != _ULast; ++_UFirst) {
				if (_Pred(*_UFirst, _Val)) {
					auto _UMid = _UFirst;

					for (_Algorithm_int_t<_Diff> _Count1 = _Count;;) {
						if (--_Count1 == 0) {
							_Seek_wrapped(_Last, _UFirst);
							return _Last;
						}
						else if (++_UMid == _ULast) {
							return _Last;
						}
						else if (!_Pred(*_UMid, _Val)) {
							break;
						}
					}

					_UFirst = _UMid;
				}
			}
		}

		return _Last;
	}


















































































#line 998 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _FwdIt, class _Diff, class _Ty>
	inline _FwdIt search_n(
		const _FwdIt _First, const _FwdIt _Last, const _Diff _Count, const _Ty& _Val) {
		return ::std::search_n(_First, _Last, _Count, _Val, equal_to<>());
	}







#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline _FwdIt1 find_end(_FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2, const _FwdIt2 _Last2,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		if constexpr (_Is_random_iter_v<_FwdIt1> && _Is_random_iter_v<_FwdIt2>) {
			const _Iter_diff_t<_FwdIt2> _Count2 = _ULast2 - _UFirst2;
			if (0 < _Count2 && _Count2 <= _ULast1 - _UFirst1) {
				for (auto _UCandidate = _ULast1 - static_cast<_Iter_diff_t<_FwdIt1>>(_Count2);; --_UCandidate) {
					if (_Equal_rev_pred_unchecked(_UCandidate, _UFirst2, _ULast2, _Pass_fn(_Pred))) {
						_Seek_wrapped(_First1, _UCandidate);
						return _First1;
					}

					if (_UFirst1 == _UCandidate) {
						break;
					}
				}
			}

			return _Last1;
		}
		else if constexpr (_Is_bidi_iter_v<_FwdIt1> && _Is_bidi_iter_v<_FwdIt2>) {
			for (auto _UCandidate = _ULast1;; --_UCandidate) {
				auto _UNext1 = _UCandidate;
				auto _UNext2 = _ULast2;
				for (;;) {
					if (_UFirst2 == _UNext2) {
						_Seek_wrapped(_First1, _UNext1);
						return _First1;
					}

					if (_UFirst1 == _UNext1) {

						return _Last1;
					}

					--_UNext1;
					--_UNext2;
					if (!_Pred(*_UNext1, *_UNext2)) {
						break;
					}
				}
			}
		}
		else {
			auto _UResult = _ULast1;
			for (;;) {
				auto _UNext1 = _UFirst1;
				auto _UNext2 = _UFirst2;
				for (;;) {
					const bool _End_of_needle = static_cast<bool>(_UNext2 == _ULast2);
					if (_End_of_needle) {
						_UResult = _UFirst1;
					}

					if (_UNext1 == _ULast1) {

						_Seek_wrapped(_First1, _UResult);
						return _First1;
					}

					if (_End_of_needle
						|| !_Pred(*_UNext1, *_UNext2)) {
						break;
					}

					++_UNext1;
					++_UNext2;
				}

				++_UFirst1;
			}

			_Seek_wrapped(_First1, _UResult);
			return _First1;
		}
	}


























































































#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _FwdIt1, class _FwdIt2>
	inline _FwdIt1 find_end(_FwdIt1 const _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
		const _FwdIt2 _Last2) {
		return ::std::find_end(_First1, _Last1, _First2, _Last2, equal_to<>());
	}











#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt1, class _FwdIt2, class _Pr>
	inline _FwdIt1 find_first_of(_FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
		const _FwdIt2 _Last2, _Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		for (; _UFirst1 != _ULast1; ++_UFirst1) {
			for (auto _UMid2 = _UFirst2; _UMid2 != _ULast2; ++_UMid2) {
				if (_Pred(*_UFirst1, *_UMid2)) {
					_Seek_wrapped(_First1, _UFirst1);
					return _First1;
				}
			}
		}

		_Seek_wrapped(_First1, _UFirst1);
		return _First1;
	}

	template <class _FwdIt1, class _FwdIt2>
	inline _FwdIt1 find_first_of(const _FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
		const _FwdIt2 _Last2) {
		return ::std::find_first_of(_First1, _Last1, _First2, _Last2, equal_to<>());
	}











#line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



	template <class _FwdIt1, class _FwdIt2>
	inline _FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1,
		_FwdIt2 _First2) {
		for (; _First1 != _Last1; ++_First1, (void) ++_First2) {
			::std::iter_swap(_First1, _First2);
		}

		return _First2;
	}


	template <class _Ty, enable_if_t<_Is_trivially_swappable_v<_Ty>, int> = 0>
	inline _Ty * _Swap_ranges_unchecked(_Ty * const _First1, _Ty * const _Last1,
		_Ty * const _First2) {
		__std_swap_ranges_trivially_swappable_noalias(_First1, _Last1, _First2);
		return _First2 + (_Last1 - _First1);
	}
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _FwdIt1, class _FwdIt2>
	inline _FwdIt2 swap_ranges(
		const _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2) {
		_Adl_verify_range(_First1, _Last1);
		const auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
		_Seek_wrapped(_First2, _Swap_ranges_unchecked(_UFirst1, _ULast1, _UFirst2));
		return _First2;
	}


	template <class _FwdIt1, class _DestTy, size_t _DestSize>
	inline _DestTy* swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::swap_ranges(_First1, _Last1, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped();
	}
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

















#line 1309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Fn>
	inline _OutIt transform(
		const _InIt _First, const _InIt _Last, _OutIt _Dest, _Fn _Func) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {
			*_UDest = _Func(*_UFirst);
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Fn>
	inline _DestTy* transform(const _InIt _First, const _InIt _Last, _DestTy(&_Dest)[_DestSize],
		_Fn _Func) {
		return ::std::transform(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))._Unwrapped();
	}
#line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"















#line 1349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt, class _Fn>
	inline _OutIt transform(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _OutIt _Dest,
		_Fn _Func) {
		_Adl_verify_range(_First1, _Last1);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		const auto _Count = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
		auto _UFirst2 = _Get_unwrapped_n(_First2, _Count);
		auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2, ++_UDest) {
			*_UDest = _Func(*_UFirst1, *_UFirst2);
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt1, class _RightTy, size_t _RightSize, class _OutIt, class _Fn>
	inline _OutIt transform(const _InIt1 _First1, const _InIt1 _Last1, _RightTy(&_First2)[_RightSize], const _OutIt _Dest,
		_Fn _Func) {
		return ::std::transform(_First1, _Last1, _Array_iterator<_RightTy, _RightSize>(_First2), _Dest, _Pass_fn(_Func));
	}

	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Fn>
	inline _DestTy* transform(const _InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _DestTy(&_Dest)[_DestSize],
		_Fn _Func) {
		return ::std::transform(_First1, _Last1, _First2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))
			._Unwrapped();
	}

	template <class _InIt1, class _RightTy, size_t _RightSize, class _DestTy, size_t _DestSize, class _Fn>
	inline _DestTy* transform(const _InIt1 _First1, const _InIt1 _Last1, _RightTy(&_First2)[_RightSize],
		_DestTy(&_Dest)[_DestSize], _Fn _Func) {
		return ::std::transform(_First1, _Last1, _Array_iterator<_RightTy, _RightSize>(_First2),
			_Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Func))
			._Unwrapped();
	}
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


































#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Ty>
	inline void replace(const _FwdIt _First, const _FwdIt _Last, const _Ty & _Oldval,
		const _Ty & _Newval) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (*_UFirst == _Oldval) {
				*_UFirst = _Newval;
			}
		}
	}





#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr, class _Ty>
	inline void replace_if(
		const _FwdIt _First, const _FwdIt _Last, _Pr _Pred, const _Ty& _Val) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (_Pred(*_UFirst)) {
				*_UFirst = _Val;
			}
		}
	}




#line 1463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Ty>
	inline _OutIt replace_copy(_InIt _First, _InIt _Last, _OutIt _Dest, const _Ty& _Oldval,
		const _Ty& _Newval) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {
			if (*_UFirst == _Oldval) {
				*_UDest = _Newval;
			}
			else {
				*_UDest = *_UFirst;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Ty>
	inline _DestTy* replace_copy(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize], const _Ty& _Oldval,
		const _Ty& _Newval) {
		return ::std::replace_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Oldval, _Newval)._Unwrapped();
	}
#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"























#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Pr, class _Ty>
	inline _OutIt replace_copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred,
		const _Ty& _Val) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
		for (; _UFirst != _ULast; ++_UFirst, (void) ++_UDest) {
			if (_Pred(*_UFirst)) {
				*_UDest = _Val;
			}
			else {
				*_UDest = *_UFirst;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Pr, class _Ty>
	inline _DestTy* replace_copy_if(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize], _Pr _Pred,
		const _Ty& _Val) {
		return ::std::replace_copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred), _Val)
			._Unwrapped();
	}
#line 1544 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





















#line 1566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Fn>
	inline void generate(_FwdIt _First, _FwdIt _Last, _Fn _Func) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst) {
			*_UFirst = _Func();
		}
	}








#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _OutIt, class _Diff, class _Fn>
	inline _OutIt generate_n(
		_OutIt _Dest, const _Diff _Count_raw, _Fn _Func) {
		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		if (0 < _Count) {
			auto _UDest = _Get_unwrapped_n(_Dest, _Count);
			do {
				*_UDest = _Func();
				--_Count;
				++_UDest;
			} while (0 < _Count);

			_Seek_wrapped(_Dest, _UDest);
		}

		return _Dest;
	}


	template <class _DestTy, size_t _DestSize, class _Diff, class _Fn>
	inline _DestTy* generate_n(_DestTy(&_Dest)[_DestSize], const _Diff _Count_raw,
		_Fn _Func) {
		_Algorithm_int_t<_Diff> _Count = _Count_raw;
		do { if ((::std::size(_Dest) >= static_cast<common_type_t<size_t, decltype(_Count)>>(_Count))) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 1611, 0, "%s", "array too small")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"array too small\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 1611, 0); } while (false); }; } while (false);
		_DestTy* _UDest = _Dest;
		for (; 0 < _Count; --_Count, (void) ++_UDest) {
			*_UDest = _Func();
		}

		return _UDest;
	}
#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



















#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Ty>
	inline _OutIt remove_copy(
		_InIt _First, _InIt _Last, _OutIt _Dest, const _Ty& _Val) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (!(*_UFirst == _Val)) {
				*_UDest = *_UFirst;
				++_UDest;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Ty>
	inline _DestTy* remove_copy(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize],
		const _Ty& _Val) {
		return ::std::remove_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Val)._Unwrapped();
	}
#line 1667 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





















#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _OutIt, class _Pr>
	inline _OutIt remove_copy_if(
		_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		for (; _UFirst != _ULast; ++_UFirst) {
			if (!_Pred(*_UFirst)) {
				*_UDest = *_UFirst;
				++_UDest;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* remove_copy_if(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize],
		_Pr _Pred) {
		return ::std::remove_copy_if(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped();
	}
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





















#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Ty>
	inline _FwdIt remove(_FwdIt _First, const _FwdIt _Last, const _Ty & _Val) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_UFirst = _Find_unchecked(_UFirst, _ULast, _Val);
		auto _UNext = _UFirst;
		if (_UFirst != _ULast) {
			while (++_UFirst != _ULast) {
				if (!(*_UFirst == _Val)) {
					*_UNext = ::std::move(*_UFirst);
					++_UNext;
				}
			}
		}

		_Seek_wrapped(_First, _UNext);
		return _First;
	}




#line 1764 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	inline _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_UFirst = ::std::find_if(_UFirst, _ULast, _Pass_fn(_Pred));
		auto _UNext = _UFirst;
		if (_UFirst != _ULast) {
			while (++_UFirst != _ULast) {
				if (!_Pred(*_UFirst)) {
					*_UNext = ::std::move(*_UFirst);
					++_UNext;
				}
			}
		}

		_Seek_wrapped(_First, _UNext);
		return _First;
	}




#line 1790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	inline _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if (_UFirst != _ULast) {
			for (auto _UFirstb = _UFirst; ++_UFirst != _ULast; _UFirstb = _UFirst) {
				if (_Pred(*_UFirstb, *_UFirst)) {
					while (++_UFirst != _ULast) {
						if (!_Pred(*_UFirstb, *_UFirst)) {
							*++_UFirstb = ::std::move(*_UFirst);
						}
					}

					_Seek_wrapped(_Last, ++_UFirstb);
					return _Last;
				}
			}
		}

		_Seek_wrapped(_Last, _ULast);
		return _Last;
	}

	template <class _FwdIt>
	inline _FwdIt unique(_FwdIt _First, _FwdIt _Last) {
		return ::std::unique(_First, _Last, equal_to<>());
	}















#line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _OutIt, class _Pr>
	inline _OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last, _OutIt _Dest, _Pr _Pred, true_type,
		_Any_tag) {

		if (_First != _Last) {
			_FwdIt _Firstb = _First;

			*_Dest = *_Firstb;
			++_Dest;

			while (++_First != _Last) {
				if (!_Pred(*_Firstb, *_First)) {
					_Firstb = _First;
					*_Dest = *_Firstb;
					++_Dest;
				}
			}
		}

		return _Dest;
	}

	template <class _InIt, class _FwdIt, class _Pr>
	inline _FwdIt _Unique_copy_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest, _Pr _Pred, false_type,
		true_type) {

		if (_First != _Last) {
			*_Dest = *_First;

			while (++_First != _Last) {
				if (!_Pred(*_Dest, *_First)) {
					*++_Dest = *_First;
				}
			}

			++_Dest;
		}

		return _Dest;
	}

	template <class _InIt, class _OutIt, class _Pr>
	inline _OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred, false_type,
		false_type) {

		if (_First != _Last) {
			_Iter_value_t<_InIt> _Val = *_First;

			*_Dest = _Val;
			++_Dest;

			while (++_First != _Last) {
				if (!_Pred(_Val, *_First)) {
					_Val = *_First;
					*_Dest = _Val;
					++_Dest;
				}
			}
		}

		return _Dest;
	}

	template <class _InIt, class _OutIt, class _Pr>
	inline _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(
			_Dest, _Unique_copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Get_unwrapped_unverified(_Dest),
				_Pass_fn(_Pred), bool_constant<_Is_fwd_iter_v<_InIt>>{},
				bool_constant<conjunction_v<bool_constant<_Is_fwd_iter_v<_OutIt>>,
				is_same<_Iter_value_t<_InIt>, _Iter_value_t<_OutIt>>>>{}));

		return _Dest;
	}


	template <class _InIt, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* unique_copy(_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize],
		_Pr _Pred) {
		return ::std::unique_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))._Unwrapped();
	}
#line 1920 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt, class _OutIt>
	inline _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest) {
		return ::std::unique_copy(_First, _Last, _Dest, equal_to<>());
	}


	template <class _InIt, class _DestTy, size_t _DestSize>
	inline _DestTy* unique_copy(
		_InIt _First, _InIt _Last, _DestTy(&_Dest)[_DestSize]) {
		return ::std::unique_copy(_First, _Last, _Dest, equal_to<>());
	}
#line 1933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"









































#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _BidIt, class _OutIt>
	inline _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_BidIt>(_UFirst, _ULast));
		for (; _UFirst != _ULast; ++_UDest) {
			*_UDest = *--_ULast;
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _BidIt, class _DestTy, size_t _DestSize>
	inline _DestTy* reverse_copy(_BidIt _First, _BidIt _Last,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::reverse_copy(_First, _Last, _Array_iterator<_DestTy, _DestSize>(_Dest))._Unwrapped();
	}
#line 1999 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


















#line 2018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _OutIt>
	inline _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest) {
		_Adl_verify_range(_First, _Mid);
		_Adl_verify_range(_Mid, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _UMid = _Get_unwrapped(_Mid);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_FwdIt>(_UFirst, _ULast));
		_UDest = _Copy_unchecked(_UMid, _ULast, _UDest);
		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _UMid, _UDest));
		return _Dest;
	}






































































































#line 2135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _RanIt, class _RngFn>
	inline void _Random_shuffle1(
		_RanIt _First, _RanIt _Last, _RngFn& _RngFunc) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		if (_UFirst == _ULast) {
			return;
		}

		using _Diff         = _Iter_diff_t<_RanIt>;
		auto _UTarget = _UFirst;
		_Diff _Target_index = 1;
		for (; ++_UTarget != _ULast; ++_Target_index) {
			_Diff _Off = _RngFunc(static_cast<_Diff>(_Target_index + 1));
			do { if (0 <= _Off && _Off <= _Target_index) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 2152, 0, "%s", "random value out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"random value out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 2152, 0); } while (false); }; } while (false);
			if (_Off != _Target_index) {
				::std::iter_swap(_UTarget, _UFirst + _Off);
			}
		}
	}

	template <class _RanIt, class _Urng>
	inline void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func) {
		using _Urng0 = remove_reference_t<_Urng>;
		_Rng_from_urng<_Iter_diff_t<_RanIt>, _Urng0> _RngFunc(_Func);
		_Random_shuffle1(_First, _Last, _RngFunc);
	}



	template <class _RanIt, class _RngFn>
	inline void random_shuffle(
		_RanIt _First, _RanIt _Last, _RngFn&& _RngFunc) {
		_Random_shuffle1(_First, _Last, _RngFunc);
	}


	struct _Rand_urng_from_func {
		using result_type = unsigned int;

		static result_type(min)() {
			return 0;
		}

		static result_type(max)() {
			return 0x7fff;
		}

		result_type operator()() {
			return static_cast<result_type>(::rand());
		}
	};


	template <class _RanIt>
	inline void random_shuffle(_RanIt _First, _RanIt _Last) {
		_Rand_urng_from_func _Func;
		::std::shuffle(_First, _Last, _Func);
	}
#line 2198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



























































































































#line 2322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"



	template <class _FwdIt, class _Pr>
	inline _FwdIt partition(
		_FwdIt _First, const _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		if constexpr (_Is_bidi_iter_v<_FwdIt>) {
			for (;;) {
				for (;;) {
					if (_UFirst == _ULast) {
						_Seek_wrapped(_First, _UFirst);
						return _First;
					}

					if (!_Pred(*_UFirst)) {
						break;
					}

					++_UFirst;
				}

				do {
					--_ULast;
					if (_UFirst == _ULast) {
						_Seek_wrapped(_First, _UFirst);
						return _First;
					}
				} while (!_Pred(*_ULast));

				::std::iter_swap(_UFirst, _ULast);
				++_UFirst;
			}
		}
		else {
			for (;;) {
				if (_UFirst == _ULast) {
					_Seek_wrapped(_First, _UFirst);
					return _First;
				}

				if (!_Pred(*_UFirst)) {
					break;
				}

				++_UFirst;
			}

			for (auto _UNext = _UFirst; ++_UNext != _ULast;) {
				if (_Pred(*_UNext)) {
					::std::iter_swap(_UFirst, _UNext);
					++_UFirst;
				}
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}































































#line 2446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"




#line 2451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _BidIt>
	inline _BidIt _Buffered_rotate_unchecked(const _BidIt _First, const _BidIt _Mid, const _BidIt _Last,
		const _Iter_diff_t<_BidIt> _Count1, const _Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt> * const _Temp_ptr,
		const ptrdiff_t _Capacity) {


		if (_Count1 == 0) {
			return _Last;
		}

		if (_Count2 == 0) {
			return _First;
		}

		if (_Count1 <= _Count2 && _Count1 <= _Capacity) {
			_Uninitialized_backout<_Iter_value_t<_BidIt>*> _Backout{
				_Temp_ptr, _Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr) };
			const _BidIt _New_mid = _Move_unchecked(_Mid, _Last, _First);
			_Move_unchecked(_Backout._First, _Backout._Last, _New_mid);
			return _New_mid;
		}

		if (_Count2 <= _Capacity) {
			_Uninitialized_backout<_Iter_value_t<_BidIt>*> _Backout{
				_Temp_ptr, _Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr) };
			_Move_backward_unchecked(_First, _Mid, _Last);
			return _Move_unchecked(_Backout._First, _Backout._Last, _First);
		}


		return ::std::rotate(_First, _Mid, _Last);
	}

	template <class _BidIt, class _Pr>
	inline pair<_BidIt, _Iter_diff_t<_BidIt>> _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr _Pred,
		const _Iter_diff_t<_BidIt> _Count, _Iter_value_t<_BidIt>* const _Temp_ptr,
		const ptrdiff_t _Capacity) {






		using _Diff = _Iter_diff_t<_BidIt>;
		if (_Count - static_cast<_Diff>(1) <= _Capacity) {
			_Uninitialized_backout<_Iter_value_t<_BidIt>*> _Backout{ _Temp_ptr };
			_BidIt _Next = _First;
			_Backout._Emplace_back(::std::move(*_First));
			while (++_First != _Last) {

				if (_Pred(*_First)) {
					*_Next = ::std::move(*_First);
					++_Next;
				}
				else {
					_Backout._Emplace_back(::std::move(*_First));
				}
			}


			*_Next = ::std::move(*_Last);
			++_Next;
			_Move_unchecked(_Backout._First, _Backout._Last, _Next);
			_Diff _True_distance = static_cast<_Diff>(_Count - static_cast<_Diff>(_Backout._Last - _Backout._First));
			return pair<_BidIt, _Diff>(_Next, _True_distance);
		}

		const _Diff _Mid_offset = _Count / static_cast<_Diff>(2);
		const _BidIt _Mid = ::std::next(_First, _Mid_offset);


		_BidIt _Left = _Mid;
		_Diff _Left_true_count = _Mid_offset;
		for (;;) {
			--_Left;
			if (_First == _Left) {
				--_Left_true_count;
				break;
			}

			if (_Pred(*_Left)) {
				const pair<_BidIt, _Diff> _Low =
					_Stable_partition_unchecked1(_First, _Left, _Pred, _Left_true_count, _Temp_ptr, _Capacity);
				_Left = _Low.first;
				_Left_true_count = _Low.second;
				break;
			}

			--_Left_true_count;
		}


		_BidIt _Right = _Mid;
		_Diff _Right_true_count = 0;
		for (;;) {
			if (_Right == _Last) {
				++_Right;
				++_Right_true_count;
				break;
			}

			if (!_Pred(*_Right)) {
				const _Diff _Right_count = _Count - _Mid_offset;
				const _Diff _Remaining = _Right_count - _Right_true_count;
				const pair<_BidIt, _Diff> _High =
					_Stable_partition_unchecked1(_Right, _Last, _Pred, _Remaining, _Temp_ptr, _Capacity);
				_Right = _High.first;
				_Right_true_count += _High.second;
				break;
			}

			++_Right;
			++_Right_true_count;
		}


		const _BidIt _Partition_point = _Buffered_rotate_unchecked(_Left, _Mid, _Right,
			static_cast<_Diff>(_Mid_offset - _Left_true_count), _Right_true_count, _Temp_ptr, _Capacity);
		return pair<_BidIt, _Diff>(_Partition_point, static_cast<_Diff>(_Left_true_count + _Right_true_count));
	}

	template <class _BidIt, class _Pr>
	inline _BidIt _Stable_partition_unchecked(
		_BidIt _First, _BidIt _Last, _Pr _Pred) {
		for (;;) {
			if (_First == _Last) {
				return _First;
			}

			if (!_Pred(*_First)) {
				break;
			}

			++_First;
		}

		for (;;) {
			--_Last;
			if (_First == _Last) {
				return _First;
			}

			if (_Pred(*_Last)) {
				break;
			}
		}

		using _Diff              = _Iter_diff_t<_BidIt>;
		const _Diff _Temp_count = ::std::distance(_First, _Last);
		const _Diff _Total_count = _Temp_count + static_cast<_Diff>(1);
		_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{ _Temp_count };
		return _Stable_partition_unchecked1(_First, _Last, _Pred, _Total_count, _Temp_buf._Data, _Temp_buf._Capacity).first;
	}

	template <class _BidIt, class _Pr>
	inline _BidIt stable_partition(
		_BidIt _First, _BidIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(_First, _Stable_partition_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
		return _First;
	}








#line 2622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _RanIt, class _Ty, class _Pr>
	inline void _Push_heap_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val,
		_Pr _Pred) {
		for (_Iter_diff_t<_RanIt> _Idx = (_Hole - 1) >> 1;
			_Top < _Hole && _Debug_lt_pred(_Pred, *(_First + _Idx), _Val);
			_Idx = (_Hole - 1) >> 1)
		{
			*(_First + _Hole) = ::std::move(*(_First + _Idx));
			_Hole = _Idx;
		}

		*(_First + _Hole) = ::std::move(_Val);
	}

	template <class _RanIt, class _Pr>
	inline void push_heap(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		using _Diff        = _Iter_diff_t<_RanIt>;
		_Diff _Count = _ULast - _UFirst;
		if (2 <= _Count) {
			_Iter_value_t<_RanIt> _Val = ::std::move(*--_ULast);
			_Push_heap_by_index(_UFirst, --_Count, _Diff(0), ::std::move(_Val), _Pass_fn(_Pred));
		}
	}

	template <class _RanIt>
	inline void push_heap(
		_RanIt _First, _RanIt _Last) {
		::std::push_heap(_First, _Last, less<>());
	}


	template <class _RanIt, class _Ty, class _Pr>
	inline void _Pop_heap_hole_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val,
		_Pr _Pred) {

		using _Diff      = _Iter_diff_t<_RanIt>;
		const _Diff _Top = _Hole;
		_Diff _Idx = _Hole;



		const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1;
		while (_Idx < _Max_sequence_non_leaf) {
			_Idx = 2 * _Idx + 2;
			if (_Debug_lt_pred(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
				--_Idx;
			}
			*(_First + _Hole) = ::std::move(*(_First + _Idx));
			_Hole = _Idx;
		}

		if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) {
			*(_First + _Hole) = ::std::move(*(_First + (_Bottom - 1)));
			_Hole = _Bottom - 1;
		}

		_Push_heap_by_index(_First, _Hole, _Top, ::std::move(_Val), _Pred);
	}

	template <class _RanIt, class _Ty, class _Pr>
	inline void _Pop_heap_hole_unchecked(
		_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {


		*_Dest = ::std::move(*_First);
		_Pop_heap_hole_by_index(
			_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First), ::std::move(_Val), _Pred);
	}

	template <class _RanIt, class _Pr>
	inline void _Pop_heap_unchecked(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		if (2 <= _Last - _First) {
			--_Last;
			_Iter_value_t<_RanIt> _Val = ::std::move(*_Last);
			_Pop_heap_hole_unchecked(_First, _Last, _Last, ::std::move(_Val), _Pred);
		}
	}

	template <class _RanIt, class _Pr>
	inline void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void pop_heap(_RanIt _First, _RanIt _Last) {
		::std::pop_heap(_First, _Last, less<>());
	}


	template <class _RanIt, class _Pr>
	inline void _Make_heap_unchecked(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Iter_diff_t<_RanIt> _Bottom = _Last - _First;
		for (_Iter_diff_t<_RanIt> _Hole = _Bottom >> 1; 0 < _Hole;)
		{
			--_Hole;
			_Iter_value_t<_RanIt> _Val = ::std::move(*(_First + _Hole));
			_Pop_heap_hole_by_index(_First, _Hole, _Bottom, ::std::move(_Val), _Pred);
		}
	}

	template <class _RanIt, class _Pr>
	inline void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Make_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void make_heap(_RanIt _First, _RanIt _Last) {
		::std::make_heap(_First, _Last, less<>());
	}


	template <class _RanIt, class _Pr>
	inline _RanIt _Is_heap_until_unchecked(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		const _Iter_diff_t<_RanIt> _Size = _Last - _First;
		for (_Iter_diff_t<_RanIt> _Off = 1; _Off < _Size; ++_Off) {
			if (_Debug_lt_pred(_Pred, _First[(_Off - 1) >> 1], _First[_Off])) {
				return _First + _Off;
			}
		}

		return _Last;
	}

	template <class _RanIt, class _Pr>
	inline _RanIt is_heap_until(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(_First, _Is_heap_until_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
		return _First;
	}

	template <class _RanIt, class _Pr>
	inline bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		return _Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast;
	}

	template <class _RanIt>
	inline _RanIt is_heap_until(
		_RanIt _First, _RanIt _Last) {
		return ::std::is_heap_until(_First, _Last, less<>());
	}

	template <class _RanIt>
	inline bool is_heap(_RanIt _First, _RanIt _Last) {
		return ::std::is_heap(_First, _Last, less<>());
	}






















#line 2805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _RanIt, class _Pr>
	inline void _Sort_heap_unchecked(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		for (; 2 <= _Last - _First; --_Last) {
			_Pop_heap_unchecked(_First, _Last, _Pred);
		}
	}

	template <class _RanIt, class _Pr>
	inline void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);

		const auto _Counterexample = _Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
		if (_Counterexample != _ULast) {
			do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 2823, 0, "%s", "invalid heap in sort_heap()")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid heap in sort_heap()\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 2823, 0); } while (false);
		}
#line 2826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"
		_Sort_heap_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void sort_heap(_RanIt _First, _RanIt _Last) {
		::std::sort_heap(_First, _Last, less<>());
	}


	template <class _FwdIt, class _Ty>
	inline _FwdIt lower_bound(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {
		return ::std::lower_bound(_First, _Last, _Val, less<>());
	}


	template <class _FwdIt, class _Ty, class _Pr>
	inline _FwdIt upper_bound(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		_Iter_diff_t<_FwdIt> _Count = ::std::distance(_UFirst, _Get_unwrapped(_Last));

		while (0 < _Count) {
			_Iter_diff_t<_FwdIt> _Count2 = _Count >> 1;
			const auto _UMid = ::std::next(_UFirst, _Count2);
			if (_Pred(_Val, *_UMid)) {
				_Count = _Count2;
			}
			else {
				_UFirst = _Next_iter(_UMid);
				_Count -= _Count2 + 1;
			}
		}

		_Seek_wrapped(_First, _UFirst);
		return _First;
	}

	template <class _FwdIt, class _Ty>
	inline _FwdIt upper_bound(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {
		return ::std::upper_bound(_First, _Last, _Val, less<>());
	}


	template <class _FwdIt, class _Ty, class _Pr>
	inline pair<_FwdIt, _FwdIt> equal_range(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);

		using _Diff  = _Iter_diff_t<_FwdIt>;
		_Diff _Count = ::std::distance(_UFirst, _ULast);

		for (;;) {
			if (_Count <= 0) {
				_Seek_wrapped(_Last, _UFirst);
				_Seek_wrapped(_First, _UFirst);
				break;
			}

			_Diff _Count2 = _Count >> 1;
			const auto _UMid = ::std::next(_UFirst, _Count2);
			if (_Debug_lt_pred(_Pred, *_UMid, _Val)) {
				_UFirst = _Next_iter(_UMid);
				_Count -= _Count2 + 1;
			}
			else if (_Pred(_Val, *_UMid)) {
				_Count = _Count2;
			}
			else {
				auto _UFirst2 = ::std::lower_bound(_UFirst, _UMid, _Val, _Pass_fn(_Pred));
				::std::advance(_UFirst, _Count);
				auto _ULast2 = ::std::upper_bound(_Next_iter(_UMid), _UFirst, _Val, _Pass_fn(_Pred));
				_Seek_wrapped(_Last, _ULast2);
				_Seek_wrapped(_First, _UFirst2);
				break;
			}
		}

		return { _First, _Last };
	}

	template <class _FwdIt, class _Ty>
	inline pair<_FwdIt, _FwdIt> equal_range(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {
		return ::std::equal_range(_First, _Last, _Val, less<>());
	}


	template <class _FwdIt, class _Ty, class _Pr>
	inline bool binary_search(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_UFirst = ::std::lower_bound(_UFirst, _ULast, _Val, _Pass_fn(_Pred));
		return _UFirst != _ULast && !_Pred(_Val, *_UFirst);
	}

	template <class _FwdIt, class _Ty>
	inline bool binary_search(
		_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {
		return ::std::binary_search(_First, _Last, _Val, less<>());
	}


	inline _Distance_unknown _Idl_dist_add(
		_Distance_unknown, _Distance_unknown) {
		return {};
	}

	template <class _Diff1>
	inline _Distance_unknown _Idl_dist_add(_Diff1, _Distance_unknown) {
		return {};
	}

	template <class _Diff2>
	inline _Distance_unknown _Idl_dist_add(_Distance_unknown, _Diff2) {
		return {};
	}

	template <class _Diff1, class _Diff2>
	inline auto _Idl_dist_add(_Diff1 _Lhs, _Diff2 _Rhs) {
		return _Lhs + _Rhs;
	}

	template <class _InIt1, class _InIt2, class _OutIt, class _Pr>
	inline _OutIt merge(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		const auto _Count1 = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
		const auto _Count2 = _Idl_distance<_InIt2>(_UFirst2, _ULast2);
		auto _UDest = _Get_unwrapped_n(_Dest, _Idl_dist_add(_Count1, _Count2));
		if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2) {
			for (;;) {
				if (_Debug_lt_pred(_Pred, *_UFirst2, *_UFirst1)) {
					*_UDest = *_UFirst2;
					++_UDest;
					++_UFirst2;

					if (_UFirst2 == _ULast2) {
						break;
					}
				}
				else {
					*_UDest = *_UFirst1;
					++_UDest;
					++_UFirst1;

					if (_UFirst1 == _ULast1) {
						break;
					}
				}
			}
		}

		_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
		return _Dest;
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* merge(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _DestTy(&_Dest)[_DestSize],
		_Pr _Pred) {
		return ::std::merge(_First1, _Last1, _First2, _Last2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
			._Unwrapped();
	}
#line 3001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt>
	inline _OutIt merge(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest) {
		return ::std::merge(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize>
	inline _DestTy* merge(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::merge(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}
#line 3015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"















































#line 3063 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"










	template <class _BidIt>
	inline void _Rotate_one_right(
		_BidIt _First, _BidIt _Mid, _BidIt _Last) {

		_Iter_value_t<_BidIt> _Temp(::std::move(*_Mid));
		_Move_backward_unchecked(_First, _Mid, _Last);
		*_First = ::std::move(_Temp);
	}

	template <class _BidIt>
	inline void _Rotate_one_left(
		_BidIt _First, _BidIt _Mid, _BidIt _Last) {

		_Iter_value_t<_BidIt> _Temp(::std::move(*_First));
		*_Move_unchecked(_Mid, _Last, _First) = ::std::move(_Temp);
	}

	template <class _BidIt, class _Pr>
	inline void _Inplace_merge_buffer_left(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Iter_value_t<_BidIt>* const _Temp_ptr,
		_Pr _Pred) {

		using _Ptr_ty = _Iter_value_t<_BidIt>*;
		_Uninitialized_backout<_Ptr_ty> _Backout{ _Temp_ptr, _Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr) };
		_Ptr_ty _Left_first = _Temp_ptr;
		const _Ptr_ty _Left_last = _Backout._Last - 1;
		*_First = ::std::move(*_Mid);
		++_First;
		++_Mid;
		for (;;) {
			if (_Pred(*_Mid, *_Left_first)) {
				*_First = ::std::move(*_Mid);
				++_First;
				++_Mid;
				if (_Mid == _Last) {
					_Move_unchecked(_Left_first, _Backout._Last, _First);
					return;
				}
			}
			else {
				*_First = ::std::move(*_Left_first);
				++_First;
				++_Left_first;
				if (_Left_first == _Left_last) {

					*_Move_unchecked(_Mid, _Last, _First) = ::std::move(*_Left_last);
					return;
				}
			}
		}
	}

	template <class _BidIt, class _Pr>
	inline void _Inplace_merge_buffer_right(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_value_t<_BidIt>* const _Temp_ptr, _Pr _Pred) {

		using _Ptr_ty = _Iter_value_t<_BidIt>*;
		_Uninitialized_backout<_Ptr_ty> _Backout{ _Temp_ptr, _Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr) };
		*--_Last = ::std::move(*--_Mid);
		const _Ptr_ty _Right_first = _Temp_ptr;
		_Ptr_ty _Right_last = _Backout._Last - 1;
		--_Mid;
		for (;;) {
			if (_Pred(*_Right_last, *_Mid)) {
				*--_Last = ::std::move(*_Mid);
				if (_First == _Mid) {
					*--_Last = ::std::move(*_Right_last);
					_Move_backward_unchecked(_Right_first, _Right_last, _Last);
					return;
				}

				--_Mid;
			}
			else {
				*--_Last = ::std::move(*_Right_last);
				--_Right_last;
				if (_Right_first == _Right_last) {
					*--_Last = ::std::move(*_Mid);
					_Move_backward_unchecked(_First, _Mid, _Last);
					*_First = ::std::move(*_Right_first);
					return;
				}
			}
		}
	}

	template <class _BidIt, class _Pr>
	inline void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Iter_diff_t<_BidIt> _Count1,
		_Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt>* const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred);

	template <class _BidIt, class _Pr>
	inline void _Buffered_inplace_merge_divide_and_conquer2(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt>* const _Temp_ptr,
		const ptrdiff_t _Capacity, _Pr _Pred, _BidIt _Firstn, _BidIt _Lastn, _Iter_diff_t<_BidIt> _Count1n,
		_Iter_diff_t<_BidIt> _Count2n) {
		using _Diff  = _Iter_diff_t<_BidIt>;
		_BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn, static_cast<_Diff>(_Count1 - _Count1n), _Count2n,
			_Temp_ptr, _Capacity);
		_Buffered_inplace_merge_unchecked(
			_First, _Firstn, _Midn, _Count1n, _Count2n, _Temp_ptr, _Capacity, _Pred);
		_Buffered_inplace_merge_unchecked(_Midn, _Lastn, _Last, static_cast<_Diff>(_Count1 - _Count1n),
			static_cast<_Diff>(_Count2 - _Count2n), _Temp_ptr, _Capacity, _Pred);
	}

	template <class _BidIt, class _Pr>
	inline void _Buffered_inplace_merge_divide_and_conquer(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt>* const _Temp_ptr,
		const ptrdiff_t _Capacity, _Pr _Pred) {

		if (_Count1 <= _Count2) {
			const _Iter_diff_t<_BidIt> _Count1n = _Count1 >> 1;
			const _BidIt _Firstn = ::std::next(_First, _Count1n);
			const _BidIt _Lastn = ::std::lower_bound(_Mid, _Last, *_Firstn, _Pred);
			_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred,
				_Firstn, _Lastn, _Count1n, ::std::distance(_Mid, _Lastn));
		}
		else {
			const _Iter_diff_t<_BidIt> _Count2n = _Count2 >> 1;
			const _BidIt _Lastn = ::std::next(_Mid, _Count2n);
			const _BidIt _Firstn = ::std::upper_bound(_First, _Mid, *_Lastn, _Pred);
			_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred,
				_Firstn, _Lastn, ::std::distance(_First, _Firstn), _Count2n);
		}
	}

	template <class _BidIt, class _Pr>
	inline void _Buffered_inplace_merge_unchecked_impl(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt>* const _Temp_ptr,
		const ptrdiff_t _Capacity, _Pr _Pred) {

		if (_Count1 <= _Count2 && _Count1 <= _Capacity) {
			_Inplace_merge_buffer_left(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
		else if (_Count2 <= _Capacity) {
			_Inplace_merge_buffer_right(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
		else {
			_Buffered_inplace_merge_divide_and_conquer(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
		}
	}

	template <class _BidIt, class _Pr>
	inline void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Iter_diff_t<_BidIt> _Count1,
		_Iter_diff_t<_BidIt> _Count2, _Iter_value_t<_BidIt>* const _Temp_ptr, const ptrdiff_t _Capacity,
		_Pr _Pred) {


		if (_Mid == _Last) {
			return;
		}

		for (;;) {
			if (_First == _Mid) {
				return;
			}

			if (_Pred(*_Mid, *_First)) {
				break;
			}

			++_First;
			--_Count1;
		}

		const auto _Highest = _Prev_iter(_Mid);
		do {
			--_Last;
			--_Count2;
			if (_Mid == _Last) {
				_Rotate_one_right(_First, _Mid, ++_Last);
				return;
			}
		} while (!_Pred(*_Last, *_Highest));

		++_Last;
		++_Count2;

		if (_Count1 == 1) {
			_Rotate_one_left(_First, _Mid, _Last);
			return;
		}

		_Buffered_inplace_merge_unchecked_impl(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
	}

	template <class _BidIt, class _Pr>
	inline void inplace_merge(
		_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Mid);
		_Adl_verify_range(_Mid, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _UMid = _Get_unwrapped(_Mid);
		auto _ULast = _Get_unwrapped(_Last);
		_Debug_order_unchecked(_UFirst, _UMid, _Pred);


		if (_UMid == _ULast) {
			return;
		}

		for (;;) {
			if (_UFirst == _UMid) {
				return;
			}

			if (_Pred(*_UMid, *_UFirst)) {
				break;
			}

			++_UFirst;
		}

		const auto _Highest = _Prev_iter(_UMid);
		do {
			--_ULast;
			if (_UMid == _ULast) {
				_Rotate_one_right(_UFirst, _UMid, ++_ULast);
				return;
			}
		} while (!_Pred(*_ULast, *_Highest));

		++_ULast;

		const _Iter_diff_t<_BidIt> _Count1 = ::std::distance(_UFirst, _UMid);
		if (_Count1 == 1) {
			_Rotate_one_left(_UFirst, _UMid, _ULast);
			return;
		}

		const _Iter_diff_t<_BidIt> _Count2 = ::std::distance(_UMid, _ULast);
		_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{ _Min_value(_Count1, _Count2) };
		_Buffered_inplace_merge_unchecked_impl(
			_UFirst, _UMid, _ULast, _Count1, _Count2, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}

	template <class _BidIt>
	inline void inplace_merge(
		_BidIt _First, _BidIt _Mid, _BidIt _Last) {
		::std::inplace_merge(_First, _Mid, _Last, less<>());
	}















#line 3323 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _BidIt, class _Pr>
	inline _BidIt _Insertion_sort_unchecked(
		_BidIt _First, const _BidIt _Last, _Pr _Pred) {
		if (_First != _Last) {
			for (_BidIt _Next = _First; ++_Next != _Last;) {
				_BidIt _Next1 = _Next;
				_Iter_value_t<_BidIt> _Val = ::std::move(*_Next);

				if (_Debug_lt_pred(_Pred, _Val, *_First)) {
					_Move_backward_unchecked(_First, _Next, ++_Next1);
					*_First = ::std::move(_Val);
				}
				else {
					for (_BidIt _First1 = _Next1; _Debug_lt_pred(_Pred, _Val, *--_First1); _Next1 = _First1) {
						*_Next1 = ::std::move(*_First1);
					}

					*_Next1 = ::std::move(_Val);
				}
			}
		}

		return _Last;
	}

	template <class _RanIt, class _Pr>
	inline void _Med3_unchecked(
		_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {
		if (_Debug_lt_pred(_Pred, *_Mid, *_First)) {
			::std::iter_swap(_Mid, _First);
		}

		if (_Debug_lt_pred(_Pred, *_Last, *_Mid)) {
			::std::iter_swap(_Last, _Mid);

			if (_Debug_lt_pred(_Pred, *_Mid, *_First)) {
				::std::iter_swap(_Mid, _First);
			}
		}
	}

	template <class _RanIt, class _Pr>
	inline void _Guess_median_unchecked(
		_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {
		using _Diff        = _Iter_diff_t<_RanIt>;
		const _Diff _Count = _Last - _First;
		if (40 < _Count) {
			const _Diff _Step = (_Count + 1) >> 3;
			const _Diff _Two_step = _Step << 1;
			_Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);
			_Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
			_Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);
			_Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
		else {
			_Med3_unchecked(_First, _Mid, _Last, _Pred);
		}
	}

	template <class _RanIt, class _Pr>
	inline pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(
		_RanIt _First, _RanIt _Last, _Pr _Pred) {
		_RanIt _Mid = _First + ((_Last - _First) >> 1);
		_Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
		_RanIt _Pfirst = _Mid;
		_RanIt _Plast = _Pfirst + 1;

		while (_First < _Pfirst && !_Debug_lt_pred(_Pred, *(_Pfirst - 1), *_Pfirst) && !_Pred(*_Pfirst, *(_Pfirst - 1))) {
			--_Pfirst;
		}

		while (_Plast < _Last && !_Debug_lt_pred(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {
			++_Plast;
		}

		_RanIt _Gfirst = _Plast;
		_RanIt _Glast = _Pfirst;

		for (;;) {
			for (; _Gfirst < _Last; ++_Gfirst) {
				if (_Debug_lt_pred(_Pred, *_Pfirst, *_Gfirst)) {
				}
				else if (_Pred(*_Gfirst, *_Pfirst)) {
					break;
				}
				else if (_Plast != _Gfirst) {
					::std::iter_swap(_Plast, _Gfirst);
					++_Plast;
				}
				else {
					++_Plast;
				}
			}

			for (; _First < _Glast; --_Glast) {
				if (_Debug_lt_pred(_Pred, *(_Glast - 1), *_Pfirst)) {
				}
				else if (_Pred(*_Pfirst, *(_Glast - 1))) {
					break;
				}
				else if (--_Pfirst != _Glast - 1) {
					::std::iter_swap(_Pfirst, _Glast - 1);
				}
			}

			if (_Glast == _First && _Gfirst == _Last) {
				return pair<_RanIt, _RanIt>(_Pfirst, _Plast);
			}

			if (_Glast == _First) {
				if (_Plast != _Gfirst) {
					::std::iter_swap(_Pfirst, _Plast);
				}

				++_Plast;
				::std::iter_swap(_Pfirst, _Gfirst);
				++_Pfirst;
				++_Gfirst;
			}
			else if (_Gfirst == _Last) {
				if (--_Glast != --_Pfirst) {
					::std::iter_swap(_Glast, _Pfirst);
				}

				::std::iter_swap(_Pfirst, --_Plast);
			}
			else {
				::std::iter_swap(_Gfirst, --_Glast);
				++_Gfirst;
			}
		}
	}

	template <class _RanIt, class _Pr>
	inline void _Sort_unchecked(
		_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {
		_Iter_diff_t<_RanIt> _Count;
		while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal) {
			auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

			_Ideal = (_Ideal >> 1) + (_Ideal >> 2);

			if (_Mid.first - _First < _Last - _Mid.second) {
				_Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);
				_First = _Mid.second;
			}
			else {
				_Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);
				_Last = _Mid.first;
			}
		}

		if (_ISORT_MAX < _Count) {
			_Make_heap_unchecked(_First, _Last, _Pred);
			_Sort_heap_unchecked(_First, _Last, _Pred);
		}
		else if (2 <= _Count) {
			_Insertion_sort_unchecked(_First, _Last, _Pred);
		}
	}

	template <class _RanIt, class _Pr>
	inline void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		_Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void sort(const _RanIt _First, const _RanIt _Last) {
		::std::sort(_First, _Last, less<>());
	}










#line 3498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Ty, class _Pr>
	_Ty* _Uninitialized_merge_move(_FwdIt _First, const _FwdIt _Mid, const _FwdIt _Last, _Ty* const _Dest,
		_Pr _Pred) {

		_Uninitialized_backout<_Ty*> _Backout{ _Dest };
		_FwdIt _Next = _Mid;
		for (;;) {
			if (_Debug_lt_pred(_Pred, *_Next, *_First)) {
				_Backout._Emplace_back(::std::move(*_Next));
				++_Next;

				if (_Next == _Last) {
					_Backout._Last = _Uninitialized_move_unchecked(_First, _Mid, _Backout._Last);
					return _Backout._Release();
				}
			}
			else {
				_Backout._Emplace_back(::std::move(*_First));
				++_First;

				if (_First == _Mid) {
					_Backout._Last = _Uninitialized_move_unchecked(_Next, _Last, _Backout._Last);
					return _Backout._Release();
				}
			}
		}
	}

	template <class _InIt, class _OutIt, class _Pr>
	inline _OutIt _Merge_move(_InIt _First, const _InIt _Mid, const _InIt _Last, _OutIt _Dest,
		_Pr _Pred) {

		_InIt _Next = _Mid;
		for (;;) {
			if (_Debug_lt_pred(_Pred, *_Next, *_First)) {
				*_Dest = ::std::move(*_Next);
				++_Dest;
				++_Next;

				if (_Next == _Last) {
					return _Move_unchecked(_First, _Mid, _Dest);
				}
			}
			else {
				*_Dest = ::std::move(*_First);
				++_Dest;
				++_First;

				if (_First == _Mid) {
					return _Move_unchecked(_Next, _Last, _Dest);
				}
			}
		}
	}

	template <class _BidIt, class _Ty, class _Pr>
	inline void _Uninitialized_chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _Ty* _Dest,
		const _Iter_diff_t<_BidIt> _Chunk, _Iter_diff_t<_BidIt> _Count,
		_Pr _Pred) {


		_Uninitialized_backout<_Ty*> _Backout{ _Dest };
		while (_Chunk < _Count) {
			_Count -= _Chunk;
			const _BidIt _Mid1 = ::std::next(_First, _Chunk);
			const auto _Chunk2 = _Min_value(_Chunk, _Count);
			_Count -= _Chunk2;
			const _BidIt _Mid2 = ::std::next(_Mid1, _Chunk2);
			_Backout._Last = _Uninitialized_merge_move(_First, _Mid1, _Mid2, _Backout._Last, _Pred);
			_First = _Mid2;
		}

		_Uninitialized_move_unchecked(_First, _Last, _Backout._Last);
		_Backout._Release();
	}

	template <class _BidIt, class _OutIt, class _Pr>
	inline void _Chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _OutIt _Dest, const _Iter_diff_t<_BidIt> _Chunk,
		_Iter_diff_t<_BidIt> _Count, _Pr _Pred) {


		while (_Chunk < _Count) {
			_Count -= _Chunk;
			const _BidIt _Mid1 = ::std::next(_First, _Chunk);
			const auto _Chunk2 = _Min_value(_Chunk, _Count);
			_Count -= _Chunk2;
			const _BidIt _Mid2 = ::std::next(_Mid1, _Chunk2);
			_Dest = _Merge_move(_First, _Mid1, _Mid2, _Dest, _Pred);
			_First = _Mid2;
		}

		_Move_unchecked(_First, _Last, _Dest);
	}

	template <class _BidIt, class _Pr>
	void _Insertion_sort_isort_max_chunks(_BidIt _First, const _BidIt _Last, _Iter_diff_t<_BidIt> _Count,
		_Pr _Pred) {

		constexpr auto _Diffsort_max = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
		for (; _Diffsort_max < _Count; _Count -= _Diffsort_max) {
			_First = _Insertion_sort_unchecked(_First, ::std::next(_First, _Diffsort_max), _Pred);
		}

		_Insertion_sort_unchecked(_First, _Last, _Pred);
	}

	template <class _BidIt, class _Pr>
	inline void _Buffered_merge_sort_unchecked(const _BidIt _First, const _BidIt _Last, const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt>* const _Temp_ptr,
		_Pr _Pred) {


		_Insertion_sort_isort_max_chunks(_First, _Last, _Count, _Pred);

		auto _Chunk = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
		if (_Count <= _Chunk) {
			return;
		}


		_Uninitialized_chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
		_Uninitialized_backout<_Iter_value_t<_BidIt>*> _Backout{ _Temp_ptr, _Temp_ptr + _Count };
		for (;;) {

			_Chunk <<= 1;
			_Chunked_merge_unchecked(_Temp_ptr, _Temp_ptr + _Count, _First, static_cast<ptrdiff_t>(_Chunk),
				static_cast<ptrdiff_t>(_Count), _Pred);
			_Chunk <<= 1;
			if (_Count <= _Chunk) {
				return;
			}


			_Chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
		}
	}

	template <class _BidIt, class _Pr>
	inline void _Stable_sort_unchecked(const _BidIt _First, const _BidIt _Last, const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt>* const _Temp_ptr, const ptrdiff_t _Capacity,
		_Pr _Pred) {
		using _Diff = _Iter_diff_t<_BidIt>;
		if (_Count <= _ISORT_MAX) {
			_Insertion_sort_unchecked(_First, _Last, _Pred);
		}
		else {
			const auto _Half_count = static_cast<_Diff>(_Count >> 1);
			const auto _Half_count_ceil = static_cast<_Diff>(_Count - _Half_count);
			const _BidIt _Mid = ::std::next(_First, _Half_count_ceil);
			if (_Half_count_ceil <= _Capacity) {
				_Buffered_merge_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Pred);
				_Buffered_merge_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Pred);
			}
			else {
				_Stable_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Capacity, _Pred);
				_Stable_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Capacity, _Pred);
			}

			_Buffered_inplace_merge_unchecked(
				_First, _Mid, _Last, _Half_count_ceil, _Half_count, _Temp_ptr, _Capacity, _Pred);
		}
	}

	template <class _BidIt, class _Pr>
	inline void stable_sort(
		const _BidIt _First, const _BidIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		const auto _Count = ::std::distance(_UFirst, _ULast);
		if (_Count <= _ISORT_MAX) {
			if (_Count > 1) {
				_Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
			}

			return;
		}

		_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{ _Count - (_Count >> 1) };
		_Stable_sort_unchecked(_UFirst, _ULast, _Count, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}




#line 3682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _BidIt>
	inline void stable_sort(
		const _BidIt _First, const _BidIt _Last) {
		::std::stable_sort(_First, _Last, less<>());
	}







#line 3696 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _RanIt, class _Pr>
	inline void partial_sort(
		_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Mid);
		_Adl_verify_range(_Mid, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _UMid = _Get_unwrapped(_Mid);
		const auto _ULast = _Get_unwrapped(_Last);

		if (_UFirst == _UMid) {
			return;
		}

		_Make_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
		for (auto _UNext = _UMid; _UNext < _ULast; ++_UNext) {
			if (_Debug_lt_pred(_Pred, *_UNext, *_UFirst)) {
				_Iter_value_t<_RanIt> _Val = ::std::move(*_UNext);
				_Pop_heap_hole_unchecked(_UFirst, _UMid, _UNext, ::std::move(_Val), _Pass_fn(_Pred));
			}
		}

		_Sort_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void partial_sort(
		_RanIt _First, _RanIt _Mid, _RanIt _Last) {
		::std::partial_sort(_First, _Mid, _Last, less<>());
	}















#line 3743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt, class _RanIt, class _Pr>
	inline _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1, _RanIt _First2, _RanIt _Last2,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		auto _UMid2 = _UFirst2;
		if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2) {
			for (; _UFirst1 != _ULast1 && _UMid2 != _ULast2; ++_UFirst1, (void) ++_UMid2) {
				*_UMid2 = *_UFirst1;
			}

			_Make_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
			for (; _UFirst1 != _ULast1; ++_UFirst1) {
				if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2)) {

					_Pop_heap_hole_by_index(_UFirst2, static_cast<_Iter_diff_t<_RanIt>>(0),
						static_cast<_Iter_diff_t<_RanIt>>(_UMid2 - _UFirst2), static_cast<_Iter_value_t<_InIt>>(*_UFirst1),
						_Pass_fn(_Pred));
				}
			}

			_Sort_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
		}

		_Seek_wrapped(_First2, _UMid2);
		return _First2;
	}

	template <class _InIt, class _RanIt>
	inline _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1, _RanIt _First2,
		_RanIt _Last2) {
		return ::std::partial_sort_copy(_First1, _Last1, _First2, _Last2, less<>());
	}

















#line 3800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _RanIt, class _Pr>
	inline void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Nth);
		_Adl_verify_range(_Nth, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _UNth = _Get_unwrapped(_Nth);
		auto _ULast = _Get_unwrapped(_Last);
		if (_UNth == _ULast) {
			return;
		}

		while (_ISORT_MAX < _ULast - _UFirst) {
			auto _UMid = _Partition_by_median_guess_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));

			if (_UMid.second <= _UNth) {
				_UFirst = _UMid.second;
			}
			else if (_UMid.first <= _UNth) {
				return;
			}
			else {
				_ULast = _UMid.first;
			}
		}

		_Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
	}

	template <class _RanIt>
	inline void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last) {
		::std::nth_element(_First, _Nth, _Last, less<>());
	}















#line 3848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _Pr>
	inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UFirst1) {
			if (_Debug_lt_pred(_Pred, *_UFirst2, *_UFirst1)) {
				return false;
			}

			if (!_Pred(*_UFirst1, *_UFirst2)) {
				++_UFirst2;
			}
		}

		return _UFirst2 == _ULast2;
	}

	template <class _InIt1, class _InIt2>
	inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2,
		_InIt2
		_Last2) {
		return ::std::includes(_First1, _Last1, _First2, _Last2, less<>());
	}





















#line 3902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _OutIt, class _Pr>
	inline _OutIt set_union(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UDest) {
			if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2)) {
				*_UDest = *_UFirst1;
				++_UFirst1;
			}
			else if (_Pred(*_UFirst2, *_UFirst1)) {
				*_UDest = *_UFirst2;
				++_UFirst2;
			}
			else {
				*_UDest = *_UFirst1;
				++_UFirst1;
				++_UFirst2;
			}
		}

		_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
		return _Dest;
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* set_union(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _DestTy(&_Dest)[_DestSize],
		_Pr _Pred) {
		return ::std::set_union(_First1, _Last1, _First2, _Last2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
			._Unwrapped();
	}
#line 3943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt>
	inline _OutIt set_union(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest) {
		return ::std::set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize>
	inline _DestTy* set_union(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}
#line 3957 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"















































#line 4005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _OutIt, class _Pr>
	inline _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2) {
			if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2)) {
				++_UFirst1;
			}
			else if (_Pred(*_UFirst2, *_UFirst1)) {
				++_UFirst2;
			}
			else {
				*_UDest = *_UFirst1;
				++_UDest;
				++_UFirst1;
				++_UFirst2;
			}
		}

		_Seek_wrapped(_Dest, _UDest);
		return _Dest;
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* set_intersection(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize], _Pr _Pred) {
		return ::std::set_intersection(
			_First1, _Last1, _First2, _Last2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
			._Unwrapped();
	}
#line 4045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt>
	inline _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest) {
		return ::std::set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize>
	inline _DestTy* set_intersection(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}
#line 4059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"































#line 4091 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _OutIt, class _Pr>
	inline _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2) {
			if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2)) {
				*_UDest = *_UFirst1;
				++_UDest;
				++_UFirst1;
			}
			else {
				if (!_Pred(*_UFirst2, *_UFirst1)) {
					++_UFirst1;
				}

				++_UFirst2;
			}
		}

		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst1, _ULast1, _UDest));
		return _Dest;
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* set_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize], _Pr _Pred) {
		return ::std::set_difference(
			_First1, _Last1, _First2, _Last2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
			._Unwrapped();
	}
#line 4132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt>
	inline _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest) {
		return ::std::set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize>
	inline _DestTy* set_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}
#line 4146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"































#line 4178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _InIt1, class _InIt2, class _OutIt, class _Pr>
	inline _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest,
		_Pr _Pred) {
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		auto _UFirst1 = _Get_unwrapped(_First1);
		const auto _ULast1 = _Get_unwrapped(_Last1);
		auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		_Debug_order_set_unchecked<_InIt2>(_UFirst1, _ULast1, _Pred);
		_Debug_order_set_unchecked<_InIt1>(_UFirst2, _ULast2, _Pred);
		auto _UDest = _Get_unwrapped_unverified(_Dest);
		while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2) {
			if (_Debug_lt_pred(_Pred, *_UFirst1, *_UFirst2)) {
				*_UDest = *_UFirst1;
				++_UDest;
				++_UFirst1;
			}
			else if (_Pred(*_UFirst2, *_UFirst1)) {
				*_UDest = *_UFirst2;
				++_UDest;
				++_UFirst2;
			}
			else {
				++_UFirst1;
				++_UFirst2;
			}
		}

		_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
		_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
		return _Dest;
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize, class _Pr>
	inline _DestTy* set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize], _Pr _Pred) {
		return ::std::set_symmetric_difference(
			_First1, _Last1, _First2, _Last2, _Array_iterator<_DestTy, _DestSize>(_Dest), _Pass_fn(_Pred))
			._Unwrapped();
	}
#line 4221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

	template <class _InIt1, class _InIt2, class _OutIt>
	inline _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest) {
		return ::std::set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}


	template <class _InIt1, class _InIt2, class _DestTy, size_t _DestSize>
	inline _DestTy* set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2,
		_DestTy(&_Dest)[_DestSize]) {
		return ::std::set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>());
	}
#line 4235 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"
















































#line 4284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	constexpr _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_FwdIt _Found = _First;
		if (_First != _Last) {
			while (++_First != _Last) {
				if (_Debug_lt_pred(_Pred, *_Found, *_First)) {
					_Found = _First;
				}
			}
		}

		return _Found;
	}

	template <class _FwdIt, class _Pr>
	constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(_First, _Max_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
		return _First;
	}

	template <class _FwdIt>
	constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last) {
		return ::std::max_element(_First, _Last, less<>());
	}















#line 4327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	constexpr _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_FwdIt _Found = _First;
		if (_First != _Last) {
			while (++_First != _Last) {
				if (_Debug_lt_pred(_Pred, *_First, *_Found)) {
					_Found = _First;
				}
			}
		}

		return _Found;
	}

	template <class _FwdIt, class _Pr>
	constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		_Seek_wrapped(_First, _Min_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
		return _First;
	}

	template <class _FwdIt>
	constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last) {
		return ::std::min_element(_First, _Last, less<>());
	}















#line 4370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _FwdIt, class _Pr>
	constexpr pair<_FwdIt, _FwdIt> _Minmax_element_unchecked(
		_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		pair<_FwdIt, _FwdIt> _Found(_First, _First);

		if (_First != _Last) {
			while (++_First != _Last) {
				_FwdIt _Next = _First;
				if (++_Next == _Last) {
					if (_Debug_lt_pred(_Pred, *_First, *_Found.first)) {
						_Found.first = _First;
					}
					else if (!_Debug_lt_pred(_Pred, *_First, *_Found.second)) {
						_Found.second = _First;
					}
				}
				else {
					if (_Debug_lt_pred(_Pred, *_Next, *_First)) {
						if (_Debug_lt_pred(_Pred, *_Next, *_Found.first)) {
							_Found.first = _Next;
						}
						if (!_Debug_lt_pred(_Pred, *_First, *_Found.second)) {
							_Found.second = _First;
						}
					}
					else {
						if (_Debug_lt_pred(_Pred, *_First, *_Found.first)) {
							_Found.first = _First;
						}
						if (!_Debug_lt_pred(_Pred, *_Next, *_Found.second)) {
							_Found.second = _Next;
						}
					}
					_First = _Next;
				}
			}
		}

		return _Found;
	}

	template <class _FwdIt, class _Pr>
	constexpr pair<_FwdIt, _FwdIt> minmax_element(
		_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _Result = _Minmax_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
		_Seek_wrapped(_Last, _Result.second);
		_Seek_wrapped(_First, _Result.first);
		return { _First, _Last };
	}

	template <class _FwdIt>
	constexpr pair<_FwdIt, _FwdIt> minmax_element(
		_FwdIt _First, _FwdIt _Last) {
		return ::std::minmax_element(_First, _Last, less<>());
	}















#line 4441 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"


	template <class _Ty, class _Pr>
	constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred) noexcept(noexcept(_Debug_lt_pred(_Pred, _Left, _Right))) {
#line 4447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"
		return _Debug_lt_pred(_Pred, _Left, _Right) ? _Right : _Left;
	}

	template <class _Ty, class _Pr>
	constexpr _Ty(max)(initializer_list<_Ty> _Ilist, _Pr _Pred) {
		const _Ty* _Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
		return *_Res;
	}

#pragma warning(push)
#pragma warning(disable : 28285) 
	template <class _Ty>
	constexpr const _Ty& (max)(
		const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) {
		if (_Left < _Right) {
			do { if (!(_Right < _Left)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 4461, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 4461, 0); } while (false); }; } while (false);
			return _Right;
		}

		return _Left;
	}
#pragma warning(pop)

	template <class _Ty>
	constexpr _Ty(max)(initializer_list<_Ty> _Ilist) {
		return (::std::max)(_Ilist, less<>());
	}


	template <class _Ty, class _Pr>
	constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred) noexcept(noexcept(_Debug_lt_pred(_Pred, _Right, _Left))) {
#line 4479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"
		return _Debug_lt_pred(_Pred, _Right, _Left) ? _Right : _Left;
	}

	template <class _Ty, class _Pr>
	constexpr _Ty(min)(initializer_list<_Ty> _Ilist, _Pr _Pred) {
		const _Ty* _Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
		return *_Res;
	}

#pragma warning(push)
#pragma warning(disable : 28285) 
	template <class _Ty>
	constexpr const _Ty& (min)(const _Ty& _Left,
		const _Ty& _Right) noexcept(noexcept(_Right < _Left)) {
		if (_Right < _Left) {
			do { if (!(_Left < _Right)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 4493, 0, "%s", "invalid comparator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid comparator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm", 4493, 0); } while (false); }; } while (false);
			return _Right;
		}

		return _Left;
	}
#pragma warning(pop)

	template <class _Ty>
	constexpr _Ty(min)(initializer_list<_Ty> _Ilist) {
		return (::std::min)(_Ilist, less<>());
	}


	template <class _Ty, class _Pr>
	constexpr pair<const _Ty&, const _Ty&> minmax(const _Ty& _Left, const _Ty& _Right,
		_Pr _Pred) {
		return _Pred(_Right, _Left) ? pair<const _Ty&, const _Ty&>(_Right, _Left)
			: pair<const _Ty&, const _Ty&>(_Left, _Right);
	}

	template <class _Ty, class _Pr>
	constexpr pair<_Ty, _Ty> minmax(
		initializer_list<_Ty> _Ilist, _Pr _Pred) {
		pair<const _Ty*, const _Ty*> _Res = _Minmax_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
		return pair<_Ty, _Ty>(*_Res.first, *_Res.second);
	}

	template <class _Ty>
	constexpr pair<const _Ty&, const _Ty&> minmax(
		const _Ty& _Left, const _Ty& _Right) {
		return _Right < _Left ? pair<const _Ty&, const _Ty&>(_Right, _Left) : pair<const _Ty&, const _Ty&>(_Left, _Right);
	}

	template <class _Ty>
	constexpr pair<_Ty, _Ty> minmax(
		initializer_list<_Ty> _Ilist) {
		return ::std::minmax(_Ilist, less<>());
	}


	template <class _BidIt, class _Pr>
	inline bool next_permutation(
		_BidIt _First, _BidIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UNext = _ULast;
		if (_UFirst == _ULast || _UFirst == --_UNext) {
			return false;
		}

		for (;;) {
			auto _UNext1 = _UNext;
			if (_Debug_lt_pred(_Pred, *--_UNext, *_UNext1)) {
				auto _UMid = _ULast;
				do {
					--_UMid;
				} while (!_Debug_lt_pred(_Pred, *_UNext, *_UMid));

				::std::iter_swap(_UNext, _UMid);
				::std::reverse(_UNext1, _ULast);
				return true;
			}

			if (_UNext == _UFirst) {
				::std::reverse(_UFirst, _ULast);
				return false;
			}
		}
	}

	template <class _BidIt>
	inline bool next_permutation(_BidIt _First, _BidIt _Last) {
		return ::std::next_permutation(_First, _Last, less<>());
	}


	template <class _BidIt, class _Pr>
	inline bool prev_permutation(
		_BidIt _First, _BidIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UNext = _ULast;
		if (_UFirst == _ULast || _UFirst == --_UNext) {
			return false;
		}

		for (;;) {
			auto _UNext1 = _UNext;
			if (_Debug_lt_pred(_Pred, *_UNext1, *--_UNext)) {
				auto _UMid = _ULast;
				do {
					--_UMid;
				} while (!_Debug_lt_pred(_Pred, *_UMid, *_UNext));

				::std::iter_swap(_UNext, _UMid);
				::std::reverse(_UNext1, _ULast);
				return true;
			}

			if (_UNext == _UFirst) {
				::std::reverse(_UFirst, _ULast);
				return false;
			}
		}
	}

	template <class _BidIt>
	inline bool prev_permutation(
		_BidIt _First, _BidIt _Last) {
		return ::std::prev_permutation(_First, _Last, less<>());
	}


	template <class _FwdIt, class _Pr>
	inline _FwdIt is_sorted_until(
		const _FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		auto _ULast = _Get_unwrapped(_Last);
		if (_UFirst != _ULast) {
			for (auto _UNext = _UFirst; ++_UNext != _ULast; ++_UFirst) {
				if (_Debug_lt_pred(_Pred, *_UNext, *_UFirst)) {
					_ULast = _UNext;
					break;
				}
			}
		}

		_Seek_wrapped(_Last, _ULast);
		return _Last;
	}

	template <class _FwdIt, class _Pr>
	inline bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred) {
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		return ::std::is_sorted_until(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast;
	}

	template <class _FwdIt>
	inline _FwdIt is_sorted_until(
		_FwdIt _First, _FwdIt _Last) {
		return ::std::is_sorted_until(_First, _Last, less<>());
	}

	template <class _FwdIt>
	inline bool is_sorted(_FwdIt _First, _FwdIt _Last) {
		return ::std::is_sorted(_First, _Last, less<>());
	}























#line 4670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





















#line 4692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"

}


#pragma warning(pop)
#pragma pack(pop)
#line 4699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"
#line 4700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\algorithm"





#line 265 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
#pragma vtordisp(push, 2) 


	template <class _Elem, class _Traits>
	class basic_istream : virtual public basic_ios<_Elem, _Traits> {
	public:
		using _Myios = basic_ios<_Elem, _Traits>;
		using _Mysb  = basic_streambuf<_Elem, _Traits>;
		using _Iter  = istreambuf_iterator<_Elem, _Traits>;
		using _Ctype = ctype<_Elem>;
		using _Nget  = num_get<_Elem, _Iter>;








#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"

		explicit  basic_istream(_Mysb * _Strbuf,
			bool _Isstd = false)

			: _Chcount(0) {
			_Myios::init(_Strbuf, _Isstd);
		}

		basic_istream(_Uninitialized) {
			this->_Addstd(this);
		}

	protected:
		basic_istream(basic_istream&& _Right) : _Chcount(_Right._Chcount) {
			_Myios::init();
			_Myios::move(::std::move(_Right));
			_Right._Chcount = 0;
		}

		basic_istream& operator=(basic_istream&& _Right) {
			this->swap(_Right);
			return *this;
		}

		void  swap(basic_istream& _Right) {
			_Myios::swap(_Right);
			::std::swap(_Chcount, _Right._Chcount);
		}

	public:
		basic_istream(const basic_istream&) = delete;
		basic_istream& operator=(const basic_istream&) = delete;

		virtual  ~basic_istream() noexcept {}

		using int_type = typename _Traits::int_type;
		using pos_type = typename _Traits::pos_type;
		using off_type = typename _Traits::off_type;


		class _Sentry_base {
		public:
			_Sentry_base(basic_istream& _Istr) : _Myistr(_Istr) {
				if (_Myistr.rdbuf() != nullptr) {
					_Myistr.rdbuf()->_Lock();
				}
			}

			~_Sentry_base() noexcept {
				if (_Myistr.rdbuf() != nullptr) {
					_Myistr.rdbuf()->_Unlock();
				}
			}

			basic_istream& _Myistr;

			_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

		class sentry : public _Sentry_base {
		public:
			explicit  sentry(basic_istream& _Istr, bool _Noskip = false)
				: _Sentry_base(_Istr) {
				_Ok = this->_Myistr._Ipfx(_Noskip);
			}

			explicit  operator bool() const {
				return _Ok;
			}

			sentry(const sentry&) = delete;
			sentry& operator=(const sentry&) = delete;

		private:
			bool _Ok;
		};

		bool  _Ipfx(bool _Noskip = false) {
			if (!this->good()) {
				_Myios::setstate(ios_base::failbit);
				return false;
			}


			if (_Myios::tie() != nullptr) {
				_Myios::tie()->flush();
			}

			bool _Eof = false;
			if (!_Noskip && this->flags() & ios_base::skipws) {
				const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(this->getloc());

				try {
					int_type _Meta = _Myios::rdbuf()->sgetc();

					for (;; _Meta = _Myios::rdbuf()->snextc()) {
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_Eof = true;
							break;
						}
						else if (!_Ctype_fac.is(_Ctype::space, _Traits::to_char_type(_Meta))) {
							break;
						}
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			if (_Eof) {
				_Myios::setstate(ios_base::eofbit | ios_base::failbit);
			}

			return this->good();
		}

		bool  ipfx(bool _Noskip = false) {
			return _Ipfx(_Noskip);
		}

		void  isfx() {
		}


















		basic_istream& operator>>(
			basic_istream& (__cdecl* _Pfn)(basic_istream&)) {
			return (*_Pfn)(*this);
		}

		basic_istream& operator>>(_Myios& (__cdecl* _Pfn)(_Myios&)) {
			(*_Pfn)(*(_Myios*)this);
			return *this;
		}

		basic_istream& operator>>(ios_base& (__cdecl* _Pfn)(ios_base&)) {
			(*_Pfn)(*(ios_base*)this);
			return *this;
		}

	private:
		template <class _Ty>
		basic_istream& _Common_extract_with_num_get(_Ty& _Val) {
			ios_base::iostate _Err = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				try {
					::std::use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Val);
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_Err);
			return *this;
		}

	public:
		basic_istream& operator>>(bool& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(short& _Val) {
			ios_base::iostate _Err = ios_base::goodbit;
			const sentry _Ok(*this);

			if (_Ok) {
				try {
					long _Lval;
					::std::use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Lval);
					if (_Lval < (-32768)) {
						_Err |= ios_base::failbit;
						_Val = (-32768);
					}
					else if (_Lval > 32767) {
						_Err |= ios_base::failbit;
						_Val = 32767;
					}
					else {
						_Val = static_cast<short>(_Lval);
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_Err);
			return *this;
		}









		basic_istream& operator>>(unsigned short& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(int& _Val) {
			static_assert(sizeof(int) == sizeof(long), "Bad overflow assumptions due to sizeof(int) != sizeof(long)");
			long _Result = _Val;
			_Common_extract_with_num_get(_Result);
			_Val = _Result;
			return *this;
		}

		basic_istream& operator>>(unsigned int& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(long& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(unsigned long& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(long long& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(unsigned long long& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(float& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(double& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(long double& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(void*& _Val) {
			return _Common_extract_with_num_get(_Val);
		}

		basic_istream& operator>>(_Mysb* _Strbuf) {
			_Chcount = 0;
			const sentry _Ok(*this, true);
			ios_base::iostate _State = ios_base::goodbit;
			if (_Ok && _Strbuf != nullptr) {
				try {
					for (int_type _Meta = _Myios::rdbuf()->sgetc();; _Meta = _Myios::rdbuf()->snextc()) {
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_State |= ios_base::eofbit;
							break;
						}

						try {
							if (_Traits::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Traits::to_char_type(_Meta)))) {
								break;
							}

						}
						catch (...) {
							break;
						}

						++_Chcount;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			if (_Chcount == 0) {
				_State |= ios_base::failbit;
			}

			_Myios::setstate(_State);
			return *this;
		}

		int_type  get() {
			int_type _Meta = 0;
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (!_Ok) {
				_Meta = _Traits::eof();
			}
			else {
				try {
					_Meta = _Myios::rdbuf()->sgetc();

					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State |= ios_base::eofbit | ios_base::failbit;
					}
					else {
						_Myios::rdbuf()->sbumpc();
						++_Chcount;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return _Meta;
		}

		basic_istream& get(_Elem* _Str, streamsize _Count) {
			return get(_Str, _Count, _Myios::widen('\n'));
		}

		basic_istream& get(
			_Elem* _Str, streamsize _Count, _Elem _Delim) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (_Ok && 0 < _Count) {
				try {
					int_type _Meta = _Myios::rdbuf()->sgetc();

					for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc()) {
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_State |= ios_base::eofbit;
							break;
						}
						else if (_Traits::to_char_type(_Meta) == _Delim) {
							break;
						}
						else {
							*_Str++ = _Traits::to_char_type(_Meta);
							++_Chcount;
						}
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
			*_Str = _Elem();
			return *this;
		}

		basic_istream& get(_Elem& _Ch) {
			int_type _Meta = get();
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {
				_Ch = _Traits::to_char_type(_Meta);
			}

			return *this;
		}

		basic_istream& get(_Mysb& _Strbuf) {
			return get(_Strbuf, _Myios::widen('\n'));
		}

		basic_istream& get(
			_Mysb& _Strbuf, _Elem _Delim) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (_Ok) {
				try {
					int_type _Meta = _Myios::rdbuf()->sgetc();

					for (;; _Meta = _Myios::rdbuf()->snextc()) {
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_State |= ios_base::eofbit;
							break;
						}
						else {
							try {
								_Elem _Ch = _Traits::to_char_type(_Meta);
								if (_Ch == _Delim || _Traits::eq_int_type(_Traits::eof(), _Strbuf.sputc(_Ch))) {
									break;
								}
							}
							catch (...) {
								break;
							}
							++_Chcount;
						}
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			if (_Chcount == 0) {
				_State |= ios_base::failbit;
			}
			_Myios::setstate(_State);
			return *this;
		}

		basic_istream& getline(
			_Elem* _Str, streamsize _Count) {
			return getline(_Str, _Count, _Myios::widen('\n'));
		}

		basic_istream& getline(
			_Elem* _Str, streamsize _Count, _Elem _Delim) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (_Ok && 0 < _Count) {
				int_type _Metadelim = _Traits::to_int_type(_Delim);

				try {
					int_type _Meta = _Myios::rdbuf()->sgetc();

					for (;; _Meta = _Myios::rdbuf()->snextc()) {
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_State |= ios_base::eofbit;
							break;
						}
						else if (_Meta == _Metadelim) {
							++_Chcount;
							_Myios::rdbuf()->sbumpc();
							break;
						}
						else if (--_Count <= 0) {
							_State |= ios_base::failbit;
							break;
						}
						else {
							*_Str++ = _Traits::to_char_type(_Meta);
							++_Chcount;
						}
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			*_Str = _Elem();
			_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
			return *this;
		}

		basic_istream& ignore(streamsize _Count = 1,
			int_type _Metadelim = _Traits::eof()) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (_Ok && 0 < _Count) {
				try {
					for (;;) {
						int_type _Meta;
						if (_Count != (numeric_limits<streamsize>::max)() && --_Count < 0) {
							break;
						}
						else if (_Traits::eq_int_type(_Traits::eof(),
							_Meta = _Myios::rdbuf()->sbumpc())) {
							_State |= ios_base::eofbit;
							break;
						}
						else {
							++_Chcount;
							if (_Meta == _Metadelim) {
								break;
							}
						}
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_istream& read(_Elem* _Str, streamsize _Count) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);

			if (_Ok && 0 < _Count) {
				try {
					const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
					_Chcount += _Num;
					if (_Num != _Count) {
						_State |= ios_base::eofbit | ios_base::failbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		streamsize  readsome(_Elem* _Str,
			streamsize _Count) {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			const sentry _Ok(*this, true);
			streamsize _Num;

			if (!_Ok) {
				_State |= ios_base::failbit;
			}
			else if ((_Num = _Myios::rdbuf()->in_avail()) < 0) {
				_State |= ios_base::eofbit;
			}
			else if (0 < _Count && 0 < _Num) {
				read(_Str, _Num < _Count ? _Num : _Count);
			}

			_Myios::setstate(_State);
			return gcount();
		}

		int_type  peek() {
			ios_base::iostate _State = ios_base::goodbit;
			_Chcount = 0;
			int_type _Meta = 0;
			const sentry _Ok(*this, true);

			if (!_Ok) {
				_Meta = _Traits::eof();
			}
			else {
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Myios::rdbuf()->sgetc())) {
						_State |= ios_base::eofbit;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return _Meta;
		}

		basic_istream& putback(_Elem _Ch) {
			_Chcount = 0;
			ios_base::iostate _State = ios_base::goodbit;
			ios_base::iostate _Oldstate = _Myios::rdstate();
			_Myios::clear(_Oldstate & ~ios_base::eofbit);
			const sentry _Ok(*this, true);

			if (_Ok) {
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sputbackc(_Ch))) {
						_State |= ios_base::badbit | _Oldstate;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		basic_istream& unget() {
			_Chcount = 0;
			ios_base::iostate _State = ios_base::goodbit;
			ios_base::iostate _Oldstate = _Myios::rdstate();
			_Myios::clear(_Oldstate & ~ios_base::eofbit);
			const sentry _Ok(*this, true);

			if (_Ok) {
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sungetc())) {
						_State |= ios_base::badbit | _Oldstate;
					}
				}
				catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

			_Myios::setstate(_State);
			return *this;
		}

		streamsize  gcount() const {
			return _Chcount;
		}

		int  sync() {
			const sentry _Ok(*this, true);

			if (_Myios::rdbuf() == nullptr) {
				return -1;
			}

			bool _Sync_failed = true;
			try {
				_Sync_failed = _Myios::rdbuf()->pubsync() == -1;
			}
			catch (...) { _Myios::setstate(ios_base::badbit, true); }
			if (_Sync_failed) {
				_Myios::setstate(ios_base::badbit);
				return -1;
			}

			return 0;
		}

		basic_istream& seekg(pos_type _Pos) {
			ios_base::iostate _State = ios_base::goodbit;
			ios_base::iostate _Oldstate = _Myios::rdstate();
			_Myios::clear(_Oldstate & ~ios_base::eofbit);
			const sentry _Ok(*this, true);

			if (!this->fail() && (off_type)_Myios::rdbuf()->pubseekpos(_Pos, ios_base::in) == -1) {
				_Myios::setstate(_State | ios_base::failbit);
			}

			return *this;
		}

		basic_istream& seekg(
			off_type _Off, ios_base::seekdir _Way) {
			ios_base::iostate _State = ios_base::goodbit;
			ios_base::iostate _Oldstate = _Myios::rdstate();
			_Myios::clear(_Oldstate & ~ios_base::eofbit);
			const sentry _Ok(*this, true);

			if (!this->fail() && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way, ios_base::in) == -1) {
				_Myios::setstate(_State | ios_base::failbit);
			}

			return *this;
		}

		pos_type  tellg() {
			const sentry _Ok(*this, true);

			if (!this->fail()) {
				return _Myios::rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);
			}
			else {
				return pos_type(-1);
			}
		}

	private:
		streamsize _Chcount;
	};

#pragma vtordisp(pop) 























	template class __declspec(dllimport) basic_istream<char, char_traits<char>>;
	template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t>>;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"




#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"


	template <class _Elem, class _Traits>
	class basic_iostream : public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits> {
	public:
		using _Myis       = basic_istream<_Elem, _Traits>;
		using _Myos       = basic_ostream<_Elem, _Traits>;
		using _Myios      = basic_ios<_Elem, _Traits>;
		using char_type   = _Elem;
		using traits_type = _Traits;
		using int_type    = typename _Traits::int_type;
		using pos_type    = typename _Traits::pos_type;
		using off_type    = typename _Traits::off_type;

		explicit  basic_iostream(basic_streambuf<_Elem, _Traits>* _Strbuf)
			: _Myis(_Strbuf, false), _Myos(_Noinit, false) {
		}

	protected:
		basic_iostream(basic_iostream&& _Right)
			: _Myis(_Right.rdbuf(), false), _Myos(_Noinit, false) {
			_Myios::init();
			_Myios::move(::std::move(_Right));
		}

		basic_iostream& operator=(basic_iostream&& _Right) {
			this->swap(_Right);
			return *this;
		}

		void  swap(basic_iostream& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Myios::swap(_Right);
			}
		}

	public:
		basic_iostream(const basic_iostream&) = delete;
		basic_iostream& operator=(const basic_iostream&) = delete;

		virtual  ~basic_iostream() noexcept {}
	};




	template class __declspec(dllimport) basic_iostream<char, char_traits<char>>;
	template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t>>;
#line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"




#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"



	template <class _Elem, class _Traits>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr, _Elem* _Str) {
		using _Myis  = basic_istream<_Elem, _Traits>;
		using _Ctype = ctype<_Elem>;

		ios_base::iostate _State = ios_base::goodbit;
		_Elem* _Str0 = _Str;
		const typename _Myis::sentry _Ok(_Istr);

		if (_Ok) {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Istr.getloc());

			try {
				streamsize _Count = 0 < _Istr.width() ? _Istr.width() : (numeric_limits<streamsize>::max)();
				typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
				_Elem _Ch;
				for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc()) {
					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State |= ios_base::eofbit;
						break;
					}
					else if (_Ctype_fac.is(_Ctype::space, _Ch = _Traits::to_char_type(_Meta)) || _Ch == _Elem()) {
						break;
					}
					else {
						*_Str++ = _Traits::to_char_type(_Meta);
					}
				}
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

		*_Str = _Elem();
		_Istr.width(0);
		_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
		return _Istr;
	}

	template <class _Elem, class _Traits>
	inline basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch) {
		using _Myis = basic_istream<_Elem, _Traits>;

		typename _Myis::int_type _Meta;
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr);

		if (_Ok) {
			try {
				_Meta = _Istr.rdbuf()->sbumpc();
				if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
					_State |= ios_base::eofbit | ios_base::failbit;
				}
				else {
					_Ch = _Traits::to_char_type(_Meta);
				}
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

		_Istr.setstate(_State);
		return _Istr;
	}

	template <class _Traits>
	inline basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char* _Str) {
		return _Istr >> reinterpret_cast<char*>(_Str);
	}

	template <class _Traits>
	inline basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch) {
		return _Istr >> reinterpret_cast<char&>(_Ch);
	}

	template <class _Traits>
	inline basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char* _Str) {
		return _Istr >> reinterpret_cast<char*>(_Str);
	}

	template <class _Traits>
	inline basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch) {
		return _Istr >> reinterpret_cast<char&>(_Ch);
	}

	template <class _Istr, class _Ty, class = void>
	struct _Can_stream_in : false_type {};

	template <class _Istr, class _Ty>
	struct _Can_stream_in<_Istr, _Ty, void_t<decltype(::std::declval<_Istr&>() >> ::std::declval<_Ty>())>> : true_type {};

	template <class _Istr, class _Ty,
		enable_if_t<conjunction_v<
		negation<is_lvalue_reference<_Istr>>, is_base_of<ios_base, _Istr>, _Can_stream_in<_Istr, _Ty>>,
		int> = 0>
		inline _Istr && operator>>(_Istr && _Is, _Ty && _Val) {
		_Is >> ::std::forward<_Ty>(_Val);
		return ::std::move(_Is);
	}


	template <class _Elem, class _Traits>
	inline basic_istream<_Elem, _Traits>& __cdecl ws(
		basic_istream<_Elem, _Traits>& _Istr) {
		const typename basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok) {
			ios_base::iostate _State = ios_base::goodbit;
			const auto& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Istr.getloc());

			try {
				for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();; _Meta = _Istr.rdbuf()->snextc()) {
					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State |= ios_base::eofbit;
						break;
					}
					else if (!_Ctype_fac.is(ctype<_Elem>::space, _Traits::to_char_type(_Meta))) {
						break;
					}
				}
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			_Istr.setstate(_State);
		}

		return _Istr;
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"
#line 882 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\istream"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iostream"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )



namespace std {













	extern __declspec(dllimport) istream cin, * _Ptr_cin;
	extern __declspec(dllimport) ostream cout, * _Ptr_cout;
	extern __declspec(dllimport) ostream cerr, * _Ptr_cerr;
	extern __declspec(dllimport) ostream clog, * _Ptr_clog;

	extern __declspec(dllimport) wistream wcin, * _Ptr_wcin;
	extern __declspec(dllimport) wostream wcout, * _Ptr_wcout;
	extern __declspec(dllimport) wostream wcerr, * _Ptr_wcerr;
	extern __declspec(dllimport) wostream wclog, * _Ptr_wclog;


	class __declspec(dllimport) _Winit {
	public:
		__thiscall _Winit();
		__thiscall ~_Winit() noexcept;

	private:
		static int _Init_cnt;
	};
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iostream"
}


#pragma warning(pop)
#pragma pack(pop)
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iostream"
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iostream"





#line 266 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sstream"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\string"

#pragma once







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cctype"

#pragma once








#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




















namespace std {
	using ::isalnum;
	using ::isalpha;
	using ::iscntrl;
	using ::isdigit;
	using ::isgraph;
	using ::islower;
	using ::isprint;
	using ::ispunct;
	using ::isspace;
	using ::isupper;
	using ::isxdigit;
	using ::tolower;
	using ::toupper;

	using ::isblank;
}



#pragma warning(pop)
#pragma pack(pop)

#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cctype"
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cctype"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\string"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& getline(basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim) {
		using _Myis = basic_istream<_Elem, _Traits>;

		typename _Myis::iostate _State = _Myis::goodbit;
		bool _Changed = false;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok) {
			try {
				_Str.erase();
				const typename _Traits::int_type _Metadelim = _Traits::to_int_type(_Delim);
				typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

				for (;; _Meta = _Istr.rdbuf()->snextc()) {
					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State |= _Myis::eofbit;
						break;
					}
					else if (_Traits::eq_int_type(_Meta, _Metadelim)) {
						_Changed = true;
						_Istr.rdbuf()->sbumpc();
						break;
					}
					else if (_Str.max_size() <= _Str.size()) {
						_State |= _Myis::failbit;
						break;
					}
					else {
						_Str += _Traits::to_char_type(_Meta);
						_Changed = true;
					}
				}
			}
			catch (...) { (_Istr).setstate(_Myis::badbit, true); }
		}

		if (!_Changed) {
			_State |= _Myis::failbit;
		}

		_Istr.setstate(_State);
		return _Istr;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& getline(basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str) {
		return getline(_Istr, _Str, _Istr.widen('\n'));
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& getline(basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim) {
		return getline(::std::move(_Istr), _Str, _Delim);
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& getline(basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str) {
		return getline(::std::move(_Istr), _Str, _Istr.widen('\n'));
	}



	inline int stoi(const string& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const long _Ans = ::strtol(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoi argument");
		}

		if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans) {
			_Xout_of_range("stoi argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return static_cast<int>(_Ans);
	}

	inline long stol(const string& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const long _Ans = ::strtol(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stol argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stol argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline unsigned long stoul(const string& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoul argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoul argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline long long stoll(const string& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const long long _Ans = ::strtoll(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoll argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoll argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline unsigned long long stoull(const string& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const unsigned long long _Ans = ::strtoull(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoull argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoull argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline float stof(const string& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const float _Ans = ::strtof(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stof argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stof argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline double stod(const string& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const double _Ans = ::strtod(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stod argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stod argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline long double stold(const string& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const char* _Ptr = _Str.c_str();
		char* _Eptr;
		_Errno_ref = 0;
		const long double _Ans = ::strtold(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stold argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stold argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}


	inline int stoi(const wstring& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoi argument");
		}

		if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans) {
			_Xout_of_range("stoi argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return static_cast<int>(_Ans);
	}

	inline long stol(const wstring& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stol argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stol argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline unsigned long stoul(const wstring& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoul argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoul argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline long long stoll(const wstring& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const long long _Ans = ::wcstoll(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoll argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoll argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline unsigned long long stoull(const wstring& _Str, size_t* _Idx = nullptr,
		int _Base = 10) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const unsigned long long _Ans = ::wcstoull(_Ptr, &_Eptr, _Base);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stoull argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stoull argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline float stof(const wstring& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const float _Ans = ::wcstof(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stof argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stof argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline double stod(const wstring& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const double _Ans = ::wcstod(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stod argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stod argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}

	inline long double stold(const wstring& _Str, size_t* _Idx = nullptr) {
		int& _Errno_ref = (*_errno());
		const wchar_t* _Ptr = _Str.c_str();
		wchar_t* _Eptr;
		_Errno_ref = 0;
		const long double _Ans = ::wcstold(_Ptr, &_Eptr);

		if (_Ptr == _Eptr) {
			_Xinvalid_argument("invalid stold argument");
		}

		if (_Errno_ref == 34) {
			_Xout_of_range("stold argument out of range");
		}

		if (_Idx != nullptr) {
			*_Idx = (size_t)(_Eptr - _Ptr);
		}

		return _Ans;
	}


	template <class _Elem, class _UTy>
	inline _Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal) {
		static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");


		auto _UVal_trunc = _UVal;

















#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\string"

		do {
			*--_RNext = static_cast<_Elem>('0' + _UVal_trunc % 10);
			_UVal_trunc /= 10;
		} while (_UVal_trunc != 0);
		return _RNext;
	}

	template <class _Elem,
		class _Ty>
		inline basic_string<_Elem> _Integral_to_string(const _Ty _Val) {
		static_assert(is_integral_v<_Ty>, "_Ty must be integral");
		using _UTy = make_unsigned_t<_Ty>;
		_Elem _Buff[21];
		_Elem* const _Buff_end = ::std::end(_Buff);
		_Elem* _RNext = _Buff_end;
		const auto _UVal = static_cast<_UTy>(_Val);
		if (_Val < 0) {
			_RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
			*--_RNext = '-';
		}
		else {
			_RNext = _UIntegral_to_buff(_RNext, _UVal);
		}

		return basic_string<_Elem>(_RNext, _Buff_end);
	}

	template <class _Ty>
	inline string _Floating_to_string(const char* _Fmt, _Ty _Val) {
		static_assert(is_floating_point_v<_Ty>, "_Ty must be floating point");

		const auto _Len = static_cast<size_t>(::_scprintf(_Fmt, _Val));
		string _Str(_Len, '\0');
		::sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
		return _Str;
	}

	template <class _Ty>
	inline wstring _Floating_to_wstring(const wchar_t* _Fmt, _Ty _Val) {
		static_assert(is_floating_point_v<_Ty>, "_Ty must be floating point");

		const auto _Len = static_cast<size_t>(::_scwprintf(_Fmt, _Val));
		wstring _Str(_Len, L'\0');
		::swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
		return _Str;
	}




	inline string to_string(int _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(unsigned int _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(long _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(unsigned long _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(long long _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(unsigned long long _Val) {
		return _Integral_to_string<char>(_Val);
	}

	inline string to_string(float _Val) {
		return _Floating_to_string("%f", _Val);
	}

	inline string to_string(double _Val) {
		return _Floating_to_string("%f", _Val);
	}

	inline string to_string(long double _Val) {
		return _Floating_to_string("%Lf", _Val);
	}


	inline wstring to_wstring(int _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(unsigned int _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(long _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(unsigned long _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(long long _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(unsigned long long _Val) {
		return _Integral_to_string<wchar_t>(_Val);
	}

	inline wstring to_wstring(float _Val) {
		return _Floating_to_wstring(L"%f", _Val);
	}

	inline wstring to_wstring(double _Val) {
		return _Floating_to_wstring(L"%f", _Val);
	}

	inline wstring to_wstring(long double _Val) {
		return _Floating_to_wstring(L"%Lf", _Val);
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\string"
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\string"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sstream"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )



namespace std {


	template <class _Elem, class _Traits, class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits> {
	public:
		using allocator_type = _Alloc;
		using _Mysb          = basic_streambuf<_Elem, _Traits>;
		using _Mystr         = basic_string<_Elem, _Traits, _Alloc>;
		using _Mysize_type   = typename _Mystr::size_type;

		explicit basic_stringbuf(ios_base::openmode _Mode = ios_base::in | ios_base::out)
			: _Seekhigh(nullptr), _Mystate(_Getstate(_Mode)), _Al() {
		}

		explicit basic_stringbuf(const _Mystr& _Str, ios_base::openmode _Mode = ios_base::in | ios_base::out)
			: _Al(_Str.get_allocator()) {
			_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

		basic_stringbuf(basic_stringbuf&& _Right) {
			_Assign_rv(::std::move(_Right));
		}

		basic_stringbuf& operator=(basic_stringbuf&& _Right) {
			_Assign_rv(::std::move(_Right));
			return *this;
		}

		void _Assign_rv(basic_stringbuf&& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Tidy();
				this->swap(_Right);
			}
		}

		void swap(basic_stringbuf& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Mysb::swap(_Right);
				::std::swap(_Seekhigh, _Right._Seekhigh);
				::std::swap(_Mystate, _Right._Mystate);
				_Swap_adl(_Al, _Right._Al);
			}
		}

		basic_stringbuf(const basic_stringbuf&) = delete;
		basic_stringbuf& operator=(const basic_stringbuf&) = delete;

		virtual ~basic_stringbuf() noexcept {
			_Tidy();
		}

		enum {
			_Allocated = 1,
			_Constant = 2,
			_Noread = 4,
			_Append = 8,
			_Atend = 16
		};

		using int_type = typename _Traits::int_type;
		using pos_type = typename _Traits::pos_type;
		using off_type = typename _Traits::off_type;

		_Mystr str() const {
			_Mystr _Result(_Al);
			if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr) {
				const auto _Base = _Mysb::pbase();
				_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));
			}
			else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr) {
				const auto _Base = _Mysb::eback();
				_Result.assign(_Base, static_cast<_Mysize_type>(_Mysb::egptr() - _Base));
			}

			return _Result;
		}

		void str(const _Mystr& _Newstr) {
			_Tidy();
			_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

	protected:
		virtual int_type overflow(int_type _Meta = _Traits::eof()) {
			if (_Mystate & _Constant) {
				return _Traits::eof();
			}

			if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
				return _Traits::not_eof(_Meta);
			}

			const auto _Pptr = _Mysb::pptr();
			const auto _Epptr = _Mysb::epptr();
			if (_Pptr != nullptr && _Pptr < _Epptr) {
				*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
				_Seekhigh = _Pptr + 1;
				return _Meta;
			}


			size_t _Oldsize = 0;
			const auto _Oldptr = _Mysb::eback();
			if (_Pptr != nullptr) {
				_Oldsize = static_cast<size_t>(_Epptr - _Oldptr);
			}

			size_t _Newsize;
			if (_Oldsize < _MINSIZE) {
				_Newsize = _MINSIZE;
			}
			else if (_Oldsize < 2147483647 / 2) {
				_Newsize = _Oldsize << 1;
			}
			else if (_Oldsize < 2147483647) {
				_Newsize = 2147483647;
			}
			else {
				return _Traits::eof();
			}

			const auto _Newptr = _Unfancy(_Al.allocate(_Newsize));
			_Traits::copy(_Newptr, _Oldptr, _Oldsize);

			const auto _New_pnext = _Newptr + _Oldsize;
			_Seekhigh = _New_pnext + 1;

			_Mysb::setp(_Newptr, _New_pnext, _Newptr + _Newsize);
			if (_Mystate & _Noread) {
				_Mysb::setg(_Newptr, nullptr, _Newptr);
			}
			else {
				_Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);
			}

			if (_Mystate & _Allocated) {
				_Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);
			}

			_Mystate |= _Allocated;
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return _Meta;
		}

		virtual int_type pbackfail(int_type _Meta = _Traits::eof()) {
			const auto _Gptr = _Mysb::gptr();
			if (_Gptr == nullptr || _Gptr <= _Mysb::eback()
				|| (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])
					&& (_Mystate & _Constant))) {
				return _Traits::eof();
			}


			_Mysb::gbump(-1);
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {
				*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			}

			return _Traits::not_eof(_Meta);
		}

		virtual int_type underflow() {
			const auto _Gptr = _Mysb::gptr();
			if (_Gptr == nullptr) {
				return _Traits::eof();
			}

			if (_Gptr < _Mysb::egptr()) {
				return _Traits::to_int_type(*_Gptr);
			}


			const auto _Pptr = _Mysb::pptr();
			if (!_Pptr || (_Mystate & _Noread)) {
				return _Traits::eof();
			}

			const auto _Local_highwater = _Max_value(_Seekhigh, _Pptr);
			if (_Local_highwater <= _Gptr) {
				return _Traits::eof();
			}

			_Seekhigh = _Local_highwater;
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Local_highwater);
			return _Traits::to_int_type(*_Mysb::gptr());
		}

		virtual pos_type seekoff(off_type _Off, ios_base::seekdir _Way,
			ios_base::openmode _Mode = ios_base::in | ios_base::out) {
			const auto _Gptr_old = _Mysb::gptr();
			const auto _Pptr_old = _Mysb::pptr();
			if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old) {
				_Seekhigh = _Pptr_old;
			}

			const auto _Seeklow = _Mysb::eback();
			const auto _Seekdist = _Seekhigh - _Seeklow;
			off_type _Newoff;
			switch (_Way) {
			case ios_base::beg:
				_Newoff = 0;
				break;
			case ios_base::end:
				_Newoff = _Seekdist;
				break;
			case ios_base::cur: {
				constexpr auto _Both = ios_base::in | ios_base::out;
				if ((_Mode & _Both) != _Both) {
					if (_Mode & ios_base::in) {
						if (_Gptr_old != nullptr || _Seeklow == nullptr) {
							_Newoff = _Gptr_old - _Seeklow;
							break;
						}
					}
					else if ((_Mode & ios_base::out) && (_Pptr_old != nullptr || _Seeklow == nullptr)) {
						_Newoff = _Pptr_old - _Seeklow;
						break;
					}
				}
			}


			default:
				return pos_type(off_type(-1));
			}

			if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist)) {
				return pos_type(off_type(-1));
			}

			_Off += _Newoff;
			if (_Off != 0
				&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)
					|| ((_Mode & ios_base::out) && _Pptr_old == nullptr))) {
				return pos_type(off_type(-1));
			}

			const auto _Newptr = _Seeklow + _Off;
			if ((_Mode & ios_base::in) && _Gptr_old != nullptr) {
				_Mysb::setg(_Seeklow, _Newptr, _Seekhigh);
			}

			if ((_Mode & ios_base::out) && _Pptr_old != nullptr) {
				_Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());
			}

			return pos_type(_Off);
		}

		virtual pos_type seekpos(pos_type _Pos,
			ios_base::openmode _Mode = ios_base::in | ios_base::out) {
			const auto _Off = static_cast<streamoff>(_Pos);
			const auto _Gptr_old = _Mysb::gptr();
			const auto _Pptr_old = _Mysb::pptr();
			if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old) {
				_Seekhigh = _Pptr_old;
			}

			const auto _Seeklow = _Mysb::eback();
			const auto _Seekdist = _Seekhigh - _Seeklow;
			if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist)) {
				return pos_type(off_type(-1));
			}

			if (_Off != 0
				&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)
					|| ((_Mode & ios_base::out) && _Pptr_old == nullptr))) {
				return pos_type(off_type(-1));
			}

			const auto _Newptr = _Seeklow + _Off;
			if ((_Mode & ios_base::in) && _Gptr_old != nullptr) {
				_Mysb::setg(_Seeklow, _Newptr, _Seekhigh);
			}

			if ((_Mode & ios_base::out) && _Pptr_old != nullptr) {
				_Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());
			}

			return pos_type(_Off);
		}

		void _Init(
			const _Elem* _Ptr, _Mysize_type _Count, int _State) {
			if (_Count > 2147483647) {
				_Xbad_alloc();
			}

			if (_Count != 0
				&& (_State & (_Noread | _Constant))
				!= (_Noread | _Constant)) {
				const auto _Pnew = _Unfancy(_Al.allocate(_Count));
				_Traits::copy(_Pnew, _Ptr, _Count);
				_Seekhigh = _Pnew + _Count;

				if (!(_State & _Noread)) {
					_Mysb::setg(_Pnew, _Pnew, _Seekhigh);
				}

				if (!(_State & _Constant)) {
					_Mysb::setp(_Pnew, (_State & (_Atend | _Append)) ? _Seekhigh : _Pnew, _Seekhigh);

					if (_State & _Noread) {
						_Mysb::setg(_Pnew, nullptr, _Pnew);
					}
				}

				_State |= _Allocated;
			}
			else {
				_Seekhigh = nullptr;
			}

			_Mystate = _State;
		}

		void _Tidy() noexcept {
			if (_Mystate & _Allocated) {
				_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),
					static_cast<typename allocator_traits<allocator_type>::size_type>(
					(_Mysb::pptr() != nullptr ? _Mysb::epptr() : _Mysb::egptr()) - _Mysb::eback()));
			}

			_Mysb::setg(nullptr, nullptr, nullptr);
			_Mysb::setp(nullptr, nullptr);
			_Seekhigh = nullptr;
			_Mystate &= ~_Allocated;
		}

	private:
		using _Ptr_traits = pointer_traits<typename allocator_traits<allocator_type>::pointer>;

		enum {
			_MINSIZE = 32
		};

		static int _Getstate(ios_base::openmode _Mode) {
			int _State = 0;
			if (!(_Mode & ios_base::in)) {
				_State |= _Noread;
			}

			if (!(_Mode & ios_base::out)) {
				_State |= _Constant;
			}

			if (_Mode & ios_base::app) {
				_State |= _Append;
			}

			if (_Mode & ios_base::ate) {
				_State |= _Atend;
			}

			return _State;
		}

		_Elem* _Seekhigh;
		int _Mystate;
		allocator_type _Al;
	};

	template <class _Elem, class _Traits, class _Alloc>
	inline void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right) {
		_Left.swap(_Right);
	}


	template <class _Elem, class _Traits, class _Alloc>
	class basic_istringstream : public basic_istream<_Elem, _Traits> {
	public:
		using _Mybase        = basic_istream<_Elem, _Traits>;
		using allocator_type = _Alloc;
		using _Mysb          = basic_stringbuf<_Elem, _Traits, _Alloc>;
		using _Mystr         = basic_string<_Elem, _Traits, _Alloc>;

		explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
			: _Mybase(&_Stringbuffer), _Stringbuffer(_Mode | ios_base::in) {
		}

		explicit basic_istringstream(const _Mystr& _Str, ios_base::openmode _Mode = ios_base::in)
			: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in) {
		}

		basic_istringstream(basic_istringstream&& _Right) : _Mybase(&_Stringbuffer) {
			_Assign_rv(::std::move(_Right));
		}

		basic_istringstream& operator=(basic_istringstream&& _Right) {
			_Assign_rv(::std::move(_Right));
			return *this;
		}

		void _Assign_rv(basic_istringstream&& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Stringbuffer.str(_Mystr());
				this->swap(_Right);
			}
		}

		void swap(basic_istringstream& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Mybase::swap(_Right);
				_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

		basic_istringstream(const basic_istringstream&) = delete;
		basic_istringstream& operator=(const basic_istringstream&) = delete;

		virtual ~basic_istringstream() noexcept {}

		_Mysb* rdbuf() const {
			return (_Mysb*)& _Stringbuffer;
		}

		_Mystr str() const {
			return _Stringbuffer.str();
		}

		void str(const _Mystr& _Newstr) {
			_Stringbuffer.str(_Newstr);
		}

	private:
		_Mysb _Stringbuffer;
	};

	template <class _Elem, class _Traits, class _Alloc>
	inline void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right) {
		_Left.swap(_Right);
	}


	template <class _Elem, class _Traits, class _Alloc>
	class basic_ostringstream : public basic_ostream<_Elem, _Traits> {
	public:
		using _Mybase        = basic_ostream<_Elem, _Traits>;
		using allocator_type = _Alloc;
		using _Mysb          = basic_stringbuf<_Elem, _Traits, _Alloc>;
		using _Mystr         = basic_string<_Elem, _Traits, _Alloc>;

		explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
			: _Mybase(&_Stringbuffer), _Stringbuffer(_Mode | ios_base::out) {
		}

		explicit basic_ostringstream(const _Mystr& _Str, ios_base::openmode _Mode = ios_base::out)
			: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out) {
		}

		basic_ostringstream(basic_ostringstream&& _Right) : _Mybase(&_Stringbuffer) {
			_Assign_rv(::std::move(_Right));
		}

		basic_ostringstream& operator=(basic_ostringstream&& _Right) {
			_Assign_rv(::std::move(_Right));
			return *this;
		}

		void _Assign_rv(basic_ostringstream&& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Stringbuffer.str(_Mystr());
				this->swap(_Right);
			}
		}

		void swap(basic_ostringstream& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Mybase::swap(_Right);
				_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

		basic_ostringstream(const basic_ostringstream&) = delete;
		basic_ostringstream& operator=(const basic_ostringstream&) = delete;

		virtual ~basic_ostringstream() noexcept {}

		_Mysb* rdbuf() const {
			return (_Mysb*)& _Stringbuffer;
		}

		_Mystr str() const {
			return _Stringbuffer.str();
		}

		void str(const _Mystr& _Newstr) {
			_Stringbuffer.str(_Newstr);
		}

	private:
		_Mysb _Stringbuffer;
	};

	template <class _Elem, class _Traits, class _Alloc>
	inline void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right) {
		_Left.swap(_Right);
	}


	template <class _Elem, class _Traits, class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits> {
	public:
		using _Mybase        = basic_iostream<_Elem, _Traits>;
		using char_type      = _Elem;
		using traits_type    = _Traits;
		using allocator_type = _Alloc;
		using int_type       = typename _Traits::int_type;
		using pos_type       = typename _Traits::pos_type;
		using off_type       = typename _Traits::off_type;
		using _Mysb          = basic_stringbuf<_Elem, _Traits, _Alloc>;
		using _Mystr         = basic_string<_Elem, _Traits, _Alloc>;

		explicit basic_stringstream(ios_base::openmode _Mode = ios_base::in | ios_base::out)
			: _Mybase(&_Stringbuffer), _Stringbuffer(_Mode) {
		}

		explicit basic_stringstream(const _Mystr& _Str, ios_base::openmode _Mode = ios_base::in | ios_base::out)
			: _Mybase(&_Stringbuffer), _Stringbuffer(_Str, _Mode) {
		}

		basic_stringstream(basic_stringstream&& _Right) : _Mybase(&_Stringbuffer) {
			_Assign_rv(::std::move(_Right));
		}

		basic_stringstream& operator=(basic_stringstream&& _Right) {
			_Assign_rv(::std::move(_Right));
			return *this;
		}

		void _Assign_rv(basic_stringstream&& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Stringbuffer.str(_Mystr());
				this->swap(_Right);
			}
		}

		void swap(basic_stringstream& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Mybase::swap(_Right);
				_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

		basic_stringstream(const basic_stringstream&) = delete;
		basic_stringstream& operator=(const basic_stringstream&) = delete;

		virtual ~basic_stringstream() noexcept {}

		_Mysb* rdbuf() const {
			return (_Mysb*)& _Stringbuffer;
		}

		_Mystr str() const {
			return _Stringbuffer.str();
		}

		void str(const _Mystr& _Newstr) {
			_Stringbuffer.str(_Newstr);
		}

	private:
		_Mysb _Stringbuffer;
	};

	template <class _Elem, class _Traits, class _Alloc>
	inline void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right) {
		_Left.swap(_Right);
	}
}


#pragma warning(pop)
#pragma pack(pop)
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sstream"
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\sstream"





#line 267 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"

#pragma once







#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <bool _Same, class _Dest,
		class... _Srcs>
		struct _Tuple_implicit_val0 : false_type {
	};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_constructible<_Dests, _Srcs>...,
		is_convertible<_Srcs, _Dests>...>> {
	};

	template <class _Dest, class... _Srcs>
	struct _Tuple_implicit_val : _Tuple_implicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest,
		_Srcs...>::type {
	};


	template <bool _Same, class _Dest,
		class... _Srcs>
		struct _Tuple_explicit_val0 : false_type {
	};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_constructible<_Dests, _Srcs>...,
		negation<conjunction<is_convertible<_Srcs, _Dests>...>>>> {
	};

	template <class _Dest, class... _Srcs>
	struct _Tuple_explicit_val : _Tuple_explicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest,
		_Srcs...>::type {
	};


	template <bool _Same, class _Dest, class... _Srcs>
	struct _Tuple_constructible_val0 : false_type {};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_constructible_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_constructible<_Dests, _Srcs>...>> {};

	template <class _Dest, class... _Srcs>
	constexpr bool _Tuple_constructible_v =
		_Tuple_constructible_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;


	template <bool _Same, class _Dest, class... _Srcs>
	struct _Tuple_nothrow_constructible_val0 : false_type {};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_nothrow_constructible_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_nothrow_constructible<_Dests, _Srcs>...>> {};

	template <class _Dest, class... _Srcs>
	constexpr bool _Tuple_nothrow_constructible_v =
		_Tuple_nothrow_constructible_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;


	template <bool _Same, class _Dest, class... _Srcs>
	struct _Tuple_assignable_val0 : false_type {};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_assignable_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_assignable<_Dests&, _Srcs>...>>
	{};

	template <class _Dest, class... _Srcs>
	constexpr bool _Tuple_assignable_v =
		_Tuple_assignable_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;

	template <class _Dest, class... _Srcs>
	struct _Tuple_assignable_val : bool_constant<_Tuple_assignable_v<_Dest, _Srcs...>> {};


	template <bool _Same, class _Dest, class... _Srcs>
	struct _Tuple_nothrow_assignable_val0 : false_type {};

	template <class... _Dests, class... _Srcs>
	struct _Tuple_nothrow_assignable_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_nothrow_assignable<_Dests&, _Srcs>...>>
	{};

	template <class _Dest, class... _Srcs>
	constexpr bool _Tuple_nothrow_assignable_v =
		_Tuple_nothrow_assignable_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;


	template <class _Myself,
		class... _Other>
		struct _Tuple_convert_copy_val : true_type {
	};

	template <class _This, class _Uty>
	struct _Tuple_convert_copy_val<tuple<_This>, _Uty>
		: bool_constant<!disjunction_v<is_same<_This, _Uty>, is_constructible<_This, const tuple<_Uty>&>,
		is_convertible<const tuple<_Uty>&, _This>>> {
	};


	template <class _Myself,
		class... _Other>
		struct _Tuple_convert_move_val : true_type {
	};

	template <class _This, class _Uty>
	struct _Tuple_convert_move_val<tuple<_This>, _Uty>
		: bool_constant<!disjunction_v<is_same<_This, _Uty>, is_constructible<_This, tuple<_Uty>>,
		is_convertible<tuple<_Uty>, _This>>> {
	};


	template <class _Myself, class _This2,
		class... _Rest2>
		struct _Tuple_perfect_val : true_type {
	};

	template <class _Myself, class _This2>
	struct _Tuple_perfect_val<_Myself, _This2>
		: bool_constant<!is_same_v<_Myself, remove_const_t<remove_reference_t<_This2>>>> {


	};


	struct _Ignore {
		template <class _Ty>
		constexpr const _Ignore& operator=(const _Ty&) const noexcept {

			return *this;
		}
	};

	constexpr _Ignore ignore{};


	template <class _Ty>
	struct _Tuple_val {
		constexpr _Tuple_val() : _Val() {}

		template <class _Other>
		constexpr _Tuple_val(_Other&& _Arg) : _Val(::std::forward<_Other>(_Arg)) {
		}

		template <class _Alloc, class... _Other, enable_if_t<!uses_allocator_v<_Ty, _Alloc>, int> = 0>
		_Tuple_val(const _Alloc&, allocator_arg_t, _Other && ... _Arg)
			: _Val(::std::forward<_Other>(_Arg)...) {
		}

		template <class _Alloc, class... _Other,
			enable_if_t<conjunction_v<uses_allocator<_Ty, _Alloc>,
			is_constructible<_Ty, allocator_arg_t, const _Alloc&, _Other...>>,
			int> = 0>
			_Tuple_val(const _Alloc & _Al, allocator_arg_t, _Other && ... _Arg)
			: _Val(allocator_arg, _Al,
				::std::forward<_Other>(_Arg)...) {
		}

		template <class _Alloc, class... _Other,
			enable_if_t<conjunction_v<uses_allocator<_Ty, _Alloc>,
			negation<is_constructible<_Ty, allocator_arg_t, const _Alloc&, _Other...>>>,
			int> = 0>
			_Tuple_val(const _Alloc & _Al, allocator_arg_t, _Other && ... _Arg)
			: _Val(::std::forward<_Other>(_Arg)..., _Al) {
		}

		_Ty _Val;
	};


	struct _Exact_args_t {
	};

	struct _Unpack_tuple_t {
	};

	struct _Alloc_exact_args_t {
	};

	struct _Alloc_unpack_tuple_t {
	};

	template <class... _Types>
	class tuple;

	template <>
	class tuple<> {
	public:
		constexpr tuple() noexcept {}

		constexpr tuple(const tuple&) noexcept {}

		template <class _Alloc>
		tuple(allocator_arg_t, const _Alloc&) noexcept {}

		template <class _Alloc>
		tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept {
		}

		template <class _Tag, enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
		constexpr tuple(_Tag) noexcept {
		}

		template <class _Tag, class _Alloc, enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
		tuple(_Tag, const _Alloc&) noexcept {
		}

		void swap(tuple&) noexcept {
		}

		constexpr bool _Equals(const tuple&) const noexcept {
			return true;
		}

		constexpr bool _Less(const tuple&) const noexcept {
			return false;
		}
	};

	template <class _This, class... _Rest>
	class tuple<_This, _Rest...> : private tuple<_Rest...> {
	public:
		using _This_type = _This;
		using _Mybase    = tuple<_Rest...>;

		template <class _Tag, class _This2, class... _Rest2, enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
		constexpr tuple(_Tag, _This2 && _This_arg, _Rest2 && ... _Rest_arg)
			: _Mybase(_Exact_args_t{}, ::std::forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std::forward<_This2>(_This_arg)) {
		}

		template <class _Tag, class _Tpl, size_t... _Indices, enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
		constexpr tuple(_Tag, _Tpl && _Right, index_sequence<_Indices...>);

		template <class _Tag, class _Tpl, enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
		constexpr tuple(_Tag, _Tpl && _Right)
			: tuple(_Unpack_tuple_t{}, ::std::forward<_Tpl>(_Right),
				make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{}) {
		}

		template <class _Tag, class _Alloc, class _This2, class... _Rest2,
			enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
			tuple(_Tag, const _Alloc & _Al, _This2 && _This_arg, _Rest2 && ... _Rest_arg)
			: _Mybase(_Alloc_exact_args_t{}, _Al, ::std::forward<_Rest2>(_Rest_arg)...),
			_Myfirst(_Al, allocator_arg,
				::std::forward<_This2>(_This_arg)) {
		}

		template <class _Tag, class _Alloc, class _Tpl, size_t... _Indices,
			enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0>
			inline tuple(_Tag, const _Alloc & _Al, _Tpl && _Right, index_sequence<_Indices...>);

		template <class _Tag, class _Alloc, class _Tpl, enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0>
		tuple(_Tag, const _Alloc & _Al, _Tpl && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::forward<_Tpl>(_Right),
				make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{}) {

		}

		template <class _This2 = _This,
			enable_if_t<conjunction_v<is_default_constructible<_This2>, is_default_constructible<_Rest>...,
			_Is_implicitly_default_constructible<_This2>, _Is_implicitly_default_constructible<_Rest>...>,
			int> = 0>
			constexpr tuple() noexcept(conjunction_v<is_nothrow_default_constructible<_This2>, is_nothrow_default_constructible<_Rest>...>)
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
			: _Mybase(), _Myfirst() {}

		template <class _This2 = _This,
			enable_if_t<conjunction_v<is_default_constructible<_This2>, is_default_constructible<_Rest>...,
			negation<conjunction<_Is_implicitly_default_constructible<_This2>,
			_Is_implicitly_default_constructible<_Rest>...>>>,
			int> = 0>
			constexpr explicit tuple() noexcept(conjunction_v<is_nothrow_default_constructible<_This2>, is_nothrow_default_constructible<_Rest>...>)
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
			: _Mybase(), _Myfirst() {}

		template <class _This2 = _This,
			enable_if_t<_Tuple_implicit_val<tuple, const _This2&, const _Rest& ...>::value, int> = 0>
			constexpr tuple(const _This & _This_arg, const _Rest & ... _Rest_arg)
			noexcept(conjunction_v<is_nothrow_copy_constructible<_This2>, is_nothrow_copy_constructible<_Rest>...>)
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

		template <class _This2 = _This,
			enable_if_t<_Tuple_explicit_val<tuple, const _This2&, const _Rest& ...>::value, int> = 0>
			constexpr explicit tuple(const _This & _This_arg, const _Rest & ... _Rest_arg)
			noexcept(conjunction_v<is_nothrow_copy_constructible<_This2>, is_nothrow_copy_constructible<_Rest>...>)
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

		template <class _This2, class... _Rest2,
			enable_if_t<
			conjunction_v<_Tuple_perfect_val<tuple, _This2, _Rest2...>, _Tuple_implicit_val<tuple, _This2, _Rest2...>>,
			int> = 0>
			constexpr tuple(_This2 && _This_arg, _Rest2 && ... _Rest_arg)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _This2, _Rest2...>)
			: tuple(_Exact_args_t{}, ::std::forward<_This2>(_This_arg), ::std::forward<_Rest2>(_Rest_arg)...) {}

		template <class _This2, class... _Rest2,
			enable_if_t<
			conjunction_v<_Tuple_perfect_val<tuple, _This2, _Rest2...>, _Tuple_explicit_val<tuple, _This2, _Rest2...>>,
			int> = 0>
			constexpr explicit tuple(_This2 && _This_arg, _Rest2 && ... _Rest_arg)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _This2, _Rest2...>)
			: tuple(_Exact_args_t{}, ::std::forward<_This2>(_This_arg), ::std::forward<_Rest2>(_Rest_arg)...) {}

		tuple(const tuple&) = default;
		tuple(tuple&&) = default;

		template <class... _Other, enable_if_t<conjunction_v<_Tuple_implicit_val<tuple, const _Other& ...>,
			_Tuple_convert_copy_val<tuple, _Other...>>,
			int> = 0>
			constexpr tuple(const tuple<_Other...> & _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _Other & ...>)
			: tuple(_Unpack_tuple_t{}, _Right) {}

		template <class... _Other, enable_if_t<conjunction_v<_Tuple_explicit_val<tuple, const _Other& ...>,
			_Tuple_convert_copy_val<tuple, _Other...>>,
			int> = 0>
			constexpr explicit tuple(const tuple<_Other...> & _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _Other & ...>)
			: tuple(_Unpack_tuple_t{}, _Right) {}

		template <class... _Other,
			enable_if_t<conjunction_v<_Tuple_implicit_val<tuple, _Other...>, _Tuple_convert_move_val<tuple, _Other...>>,
			int> = 0>
			constexpr tuple(tuple<_Other...> && _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _Other...>)
			: tuple(_Unpack_tuple_t{}, ::std::move(_Right)) {}

		template <class... _Other,
			enable_if_t<conjunction_v<_Tuple_explicit_val<tuple, _Other...>, _Tuple_convert_move_val<tuple, _Other...>>,
			int> = 0>
			constexpr explicit tuple(tuple<_Other...> && _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _Other...>)
			: tuple(_Unpack_tuple_t{}, ::std::move(_Right)) {}

		template <class _First, class _Second,
			enable_if_t<_Tuple_implicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
			constexpr tuple(const pair<_First, _Second> & _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _First&, const _Second&>)
			: tuple(_Unpack_tuple_t{}, _Right) {}

		template <class _First, class _Second,
			enable_if_t<_Tuple_explicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
			constexpr explicit tuple(const pair<_First, _Second> & _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _First&, const _Second&>)
			: tuple(_Unpack_tuple_t{}, _Right) {}

		template <class _First, class _Second, enable_if_t<_Tuple_implicit_val<tuple, _First, _Second>::value, int> = 0>
		constexpr tuple(pair<_First, _Second> && _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _First, _Second>)
			: tuple(_Unpack_tuple_t{}, ::std::move(_Right)) {}

		template <class _First, class _Second, enable_if_t<_Tuple_explicit_val<tuple, _First, _Second>::value, int> = 0>
		constexpr explicit tuple(pair<_First, _Second> && _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _First, _Second>)
			: tuple(_Unpack_tuple_t{}, ::std::move(_Right)) {}

		template <class _Alloc, class _This2 = _This,
			enable_if_t<conjunction_v<is_default_constructible<_This2>, is_default_constructible<_Rest>...>, int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al) : _Mybase(allocator_arg, _Al), _Myfirst(_Al, allocator_arg) {}

		template <class _Alloc, class _This2 = _This,
			enable_if_t<_Tuple_implicit_val<tuple, const _This2&, const _Rest& ...>::value, int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, const _This & _This_arg, const _Rest & ... _Rest_arg)
			: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...) {}

		template <class _Alloc, class _This2 = _This,
			enable_if_t<_Tuple_explicit_val<tuple, const _This2&, const _Rest& ...>::value, int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, const _This & _This_arg, const _Rest & ... _Rest_arg)
			: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...) {}

		template <class _Alloc, class _This2, class... _Rest2,
			enable_if_t<
			conjunction_v<_Tuple_perfect_val<tuple, _This2, _Rest2...>, _Tuple_implicit_val<tuple, _This2, _Rest2...>>,
			int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, _This2 && _This_arg, _Rest2 && ... _Rest_arg)
			: tuple(_Alloc_exact_args_t{}, _Al, ::std::forward<_This2>(_This_arg), ::std::forward<_Rest2>(_Rest_arg)...) {}

		template <class _Alloc, class _This2, class... _Rest2,
			enable_if_t<
			conjunction_v<_Tuple_perfect_val<tuple, _This2, _Rest2...>, _Tuple_explicit_val<tuple, _This2, _Rest2...>>,
			int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, _This2 && _This_arg, _Rest2 && ... _Rest_arg)
			: tuple(_Alloc_exact_args_t{}, _Al, ::std::forward<_This2>(_This_arg), ::std::forward<_Rest2>(_Rest_arg)...) {}

		template <class _Alloc, class _This2 = _This,
			enable_if_t<_Tuple_constructible_v<tuple, const _This2&, const _Rest& ...>, int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, const tuple & _Right) : tuple(_Alloc_unpack_tuple_t{}, _Al, _Right) {}

		template <class _Alloc, class _This2 = _This, enable_if_t<_Tuple_constructible_v<tuple, _This2, _Rest...>, int> = 0>
		tuple(allocator_arg_t, const _Alloc & _Al, tuple && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::move(_Right)) {}

		template <class _Alloc, class... _Other,
			enable_if_t<
			conjunction_v<_Tuple_implicit_val<tuple, const _Other& ...>, _Tuple_convert_copy_val<tuple, _Other...>>,
			int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, const tuple<_Other...> & _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right) {}

		template <class _Alloc, class... _Other,
			enable_if_t<
			conjunction_v<_Tuple_explicit_val<tuple, const _Other& ...>, _Tuple_convert_copy_val<tuple, _Other...>>,
			int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, const tuple<_Other...> & _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right) {}

		template <class _Alloc, class... _Other,
			enable_if_t<conjunction_v<_Tuple_implicit_val<tuple, _Other...>, _Tuple_convert_move_val<tuple, _Other...>>,
			int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, tuple<_Other...> && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::move(_Right)) {}

		template <class _Alloc, class... _Other,
			enable_if_t<conjunction_v<_Tuple_explicit_val<tuple, _Other...>, _Tuple_convert_move_val<tuple, _Other...>>,
			int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, tuple<_Other...> && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::move(_Right)) {}

		template <class _Alloc, class _First, class _Second,
			enable_if_t<_Tuple_implicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, const pair<_First, _Second> & _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right) {}

		template <class _Alloc, class _First, class _Second,
			enable_if_t<_Tuple_explicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, const pair<_First, _Second> & _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right) {}

		template <class _Alloc, class _First, class _Second,
			enable_if_t<_Tuple_implicit_val<tuple, _First, _Second>::value, int> = 0>
			tuple(allocator_arg_t, const _Alloc & _Al, pair<_First, _Second> && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::move(_Right)) {}

		template <class _Alloc, class _First, class _Second,
			enable_if_t<_Tuple_explicit_val<tuple, _First, _Second>::value, int> = 0>
			explicit tuple(allocator_arg_t, const _Alloc & _Al, pair<_First, _Second> && _Right)
			: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std::move(_Right)) {}

		tuple& operator=(const volatile tuple&) = delete;

		template <class _Myself = tuple, class _This2 = _This,
			enable_if_t<conjunction_v<_Is_copy_assignable_no_precondition_check<_This2>,
			_Is_copy_assignable_no_precondition_check<_Rest>...>,
			int> = 0>
			tuple & operator=(_Identity_t<const _Myself&> _Right)
			noexcept(conjunction_v<is_nothrow_copy_assignable<_This2>, is_nothrow_copy_assignable<_Rest>...>) {
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
			_Myfirst._Val = _Right._Myfirst._Val;
			_Get_rest() = _Right._Get_rest();
			return *this;
		}

		template <class _Myself = tuple, class _This2 = _This,
			enable_if_t<conjunction_v<_Is_move_assignable_no_precondition_check<_This2>,
			_Is_move_assignable_no_precondition_check<_Rest>...>,
			int> = 0>
			tuple & operator=(_Identity_t<_Myself&&> _Right)
			noexcept(conjunction_v<is_nothrow_move_assignable<_This2>, is_nothrow_move_assignable<_Rest>...>) {
			_Myfirst._Val = ::std::forward<_This>(_Right._Myfirst._Val);
			_Get_rest() = ::std::forward<_Mybase>(_Right._Get_rest());
			return *this;
		}

		template <class... _Other, enable_if_t<conjunction_v<negation<is_same<tuple, tuple<_Other...>>>,
			_Tuple_assignable_val<tuple, const _Other& ...>>,
			int> = 0>
			tuple & operator=(const tuple<_Other...> & _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, const _Other & ...>) {
			_Myfirst._Val = _Right._Myfirst._Val;
			_Get_rest() = _Right._Get_rest();
			return *this;
		}

		template <class... _Other,
			enable_if_t<conjunction_v<negation<is_same<tuple, tuple<_Other...>>>, _Tuple_assignable_val<tuple, _Other...>>,
			int> = 0>
			tuple & operator=(tuple<_Other...> && _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, _Other...>) {
			_Myfirst._Val = ::std::forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val);
			_Get_rest() = ::std::forward<typename tuple<_Other...>::_Mybase>(_Right._Get_rest());
			return *this;
		}

		template <class _First, class _Second,
			enable_if_t<_Tuple_assignable_v<tuple, const _First&, const _Second&>, int> = 0>
			tuple & operator=(const pair<_First, _Second> & _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, const _First&, const _Second&>) {
			_Myfirst._Val = _Right.first;
			_Get_rest()._Myfirst._Val = _Right.second;
			return *this;
		}

		template <class _First, class _Second, enable_if_t<_Tuple_assignable_v<tuple, _First, _Second>, int> = 0>
		tuple & operator=(pair<_First, _Second> && _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, _First, _Second>) {
			_Myfirst._Val = ::std::forward<_First>(_Right.first);
			_Get_rest()._Myfirst._Val = ::std::forward<_Second>(_Right.second);
			return *this;
		}

		void swap(tuple& _Right)
			noexcept(conjunction_v<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>) {
			_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
			_Mybase::swap(_Right._Get_rest());
		}

		_Mybase& _Get_rest() noexcept {
			return *this;
		}

		constexpr const _Mybase& _Get_rest() const noexcept {
			return *this;
		}

		template <class... _Other>
		constexpr bool _Equals(const tuple<_Other...>& _Right) const {
			return _Myfirst._Val == _Right._Myfirst._Val && _Mybase::_Equals(_Right._Get_rest());
		}

		template <class... _Other>
		constexpr bool _Less(const tuple<_Other...>& _Right) const {
			return _Myfirst._Val < _Right._Myfirst._Val
				|| (!(_Right._Myfirst._Val < _Myfirst._Val) && _Mybase::_Less(_Right._Get_rest()));
		}

		_Tuple_val<_This> _Myfirst;
	};
















#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"


	template <class... _Types1, class... _Types2>
	constexpr bool operator==(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		static_assert(sizeof...(_Types1) == sizeof...(_Types2), "cannot compare tuples of different sizes");
		return _Left._Equals(_Right);
	}

	template <class... _Types1, class... _Types2>
	constexpr bool operator!=(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		return !(_Left == _Right);
	}

	template <class... _Types1, class... _Types2>
	constexpr bool operator<(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		static_assert(sizeof...(_Types1) == sizeof...(_Types2), "cannot compare tuples of different sizes");
		return _Left._Less(_Right);
	}

	template <class... _Types1, class... _Types2>
	constexpr bool operator>=(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		return !(_Left < _Right);
	}

	template <class... _Types1, class... _Types2>
	constexpr bool operator>(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		return _Right < _Left;
	}

	template <class... _Types1, class... _Types2>
	constexpr bool operator<=(
		const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right) {
		return !(_Right < _Left);
	}

	template <class... _Types, enable_if_t<conjunction_v<_Is_swappable<_Types>...>, int> = 0>
	inline void swap(tuple<_Types...> & _Left, tuple<_Types...> & _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		return _Left.swap(_Right);
	}



	template <class _Ty, class _Tuple>
	struct _Tuple_element;

	template <class _This, class... _Rest>
	struct _Tuple_element<_This, tuple<_This, _Rest...>> {
		using _Check_type = int;
		static_assert(
			is_void_v<typename _Tuple_element<_This, tuple<_Rest...>>::_Check_type>, "duplicate type T in get<T>(tuple)");

		using type   = _This;
		using _Ttype = tuple<_This, _Rest...>;
	};

	template <class _Ty, class _This, class... _Rest>
	struct _Tuple_element<_Ty, tuple<_This, _Rest...>>
		: _Tuple_element<_Ty, tuple<_Rest...>> {
	};

	template <class _Ty>
	struct _Tuple_element<_Ty, tuple<>> {
		using _Check_type = void;
	};


	template <size_t _Index, class... _Types>
	constexpr tuple_element_t<_Index, tuple<_Types...>>& get(
		tuple<_Types...>& _Tuple) noexcept {
		using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
		return ((_Ttype&)_Tuple)._Myfirst._Val;
	}

	template <size_t _Index, class... _Types>
	constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(
		const tuple<_Types...>& _Tuple) noexcept {
		using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
		return ((_Ttype&)_Tuple)._Myfirst._Val;
	}

	template <size_t _Index, class... _Types>
	constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(
		tuple<_Types...>&& _Tuple) noexcept {
		using _Ttype  = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
		using _RRtype = tuple_element_t<_Index, tuple<_Types...>> &&;
		return ::std::forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val);
	}

	template <size_t _Index, class... _Types>
	constexpr const tuple_element_t<_Index, tuple<_Types...>>&& get(
		const tuple<_Types...>&& _Tuple) noexcept {
		using _Ttype  = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
		using _RRtype = const tuple_element_t<_Index, tuple<_Types...>> &&;
		return ::std::forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val);
	}


	template <class _Ty,
		class... _Types>
		constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept {
		using _Ttype = typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype;
		return ((_Ttype&)_Tuple)._Myfirst._Val;
	}

	template <class _Ty,
		class... _Types>
		constexpr const _Ty& get(
			const tuple<_Types...>& _Tuple) noexcept {
		using _Ttype = typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype;
		return ((_Ttype&)_Tuple)._Myfirst._Val;
	}

	template <class _Ty,
		class... _Types>
		constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept {
		using _Ttype = typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype;
		return ::std::forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val);
	}

	template <class _Ty,
		class... _Types>
		constexpr const _Ty&& get(
			const tuple<_Types...>&& _Tuple) noexcept {
		using _Ttype = typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype;
		return ::std::forward<const _Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val);
	}


	template <class _This, class... _Rest>
	template <class _Tag, class _Tpl, size_t... _Indices, enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int>>
	constexpr tuple<_This, _Rest...>::tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>)
		: tuple(_Exact_args_t{},
			::std::get<_Indices>(::std::forward<_Tpl>(_Right))...) {
	}

	template <class _This, class... _Rest>
	template <class _Tag, class _Alloc, class _Tpl, size_t... _Indices,
		enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int>>
		inline tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>)
		: tuple(_Alloc_exact_args_t{}, _Al,
			::std::get<_Indices>(
				::std::forward<_Tpl>(_Right))...) {
	}


	template <class... _Types>
	constexpr tuple<_Unrefwrap_t<_Types>...> make_tuple(_Types&& ... _Args) {
		using _Ttype = tuple<_Unrefwrap_t<_Types>...>;
		return _Ttype(::std::forward<_Types>(_Args)...);
	}


	template <class... _Types>
	constexpr tuple<_Types& ...> tie(_Types& ... _Args) noexcept {
		using _Ttype = tuple<_Types& ...>;
		return _Ttype(_Args...);
	}


	template <class... _Types>
	constexpr tuple<_Types&& ...> forward_as_tuple(_Types&& ... _Args) noexcept {
		return tuple<_Types && ...>(::std::forward<_Types>(_Args)...);
	}


	template <class _Seq_type1, class _Seq_type2>
	struct _Cat_sequences;

	template <size_t... _Indexes1, size_t... _Indexes2>
	struct _Cat_sequences<index_sequence<_Indexes1...>,
		index_sequence<_Indexes2...>> {
		using type = index_sequence<_Indexes1..., _Indexes2...>;
	};


	template <class _Ty, size_t _Size>
	class array;

	template <size_t _Idx, class _Ty, size_t _Size>
	constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

	template <size_t _Idx, class _Ty, size_t _Size>
	constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

	template <size_t _Idx, class _Ty, size_t _Size>
	constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;

	template <size_t _Idx, class _Ty, size_t _Size>
	constexpr const _Ty&& get(const array<_Ty, _Size>&& _Arr) noexcept;


	template <class _Ty,
		class... _For_array>
		struct _View_as_tuple {
		static_assert(_Always_false<_Ty>, "Unsupported tuple_cat arguments.");
	};

	template <class... _Types>
	struct _View_as_tuple<tuple<_Types...>> {
		using type = tuple<_Types...>;
	};

	template <class _Ty1, class _Ty2>
	struct _View_as_tuple<pair<_Ty1, _Ty2>> {
		using type = tuple<_Ty1, _Ty2>;
	};

	template <class _Ty, class... _Types>
	struct _View_as_tuple<array<_Ty, 0>, _Types...> {
		using type = tuple<_Types...>;
	};

	template <class _Ty, size_t _Size, class... _Types>
	struct _View_as_tuple<array<_Ty, _Size>, _Types...>
		: _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...> {
	};


	template <size_t _Nx, class _Ty>
	struct _Repeat_for : integral_constant<size_t, _Nx> {
	};


	template <class _Ret, class _Kx_arg, class _Ix_arg, size_t _Ix_next,
		class... _Tuples>
		struct _Tuple_cat2 {
		static_assert(sizeof...(_Tuples) == 0, "Unsupported tuple_cat arguments.");
		using type        = _Ret;
		using _Kx_arg_seq = _Kx_arg;
		using _Ix_arg_seq = _Ix_arg;
	};

	template <class... _Types1, class _Kx_arg, size_t... _Ix, size_t _Ix_next, class... _Types2, class... _Rest>
	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, index_sequence<_Ix...>, _Ix_next, tuple<_Types2...>, _Rest...>
		: _Tuple_cat2<tuple<_Types1..., _Types2...>, typename _Cat_sequences<_Kx_arg, index_sequence_for<_Types2...>>::type,
		index_sequence<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>, _Ix_next + 1,
		_Rest...> {
	};

	template <class... _Tuples>
	struct _Tuple_cat1 : _Tuple_cat2<tuple<>, index_sequence<>, index_sequence<>, 0,
		typename _View_as_tuple<decay_t<_Tuples>>::type...> {

	};

#pragma warning(push)
#pragma warning(disable : 4100) 
	template <class _Ret, size_t... _Kx, size_t... _Ix, class _Ty>
	constexpr _Ret _Tuple_cat(index_sequence<_Kx...>, index_sequence<_Ix...>, _Ty&& _Arg) {
		return _Ret(::std::get<_Kx>(::std::get<_Ix>(::std::forward<_Ty>(_Arg)))...);
	}
#pragma warning(pop)

	template <class... _Tuples>
	constexpr typename _Tuple_cat1<_Tuples...>::type tuple_cat(_Tuples&& ... _Tpls) {
		using _Cat1 = _Tuple_cat1<_Tuples...>;
		return _Tuple_cat<typename _Cat1::type>(typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
			::std::forward_as_tuple(::std::forward<_Tuples>(_Tpls)...));
	}


































#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"


	template <class _Tpl, class _Fx, size_t... _Indices>
	inline void _For_each_tuple_element_impl(
		_Tpl&& _Tuple, _Fx _Func, index_sequence<_Indices...>) {
		int _Ignored[] = { (static_cast<void>(_Func(::std::get<_Indices>(::std::forward<_Tpl>(_Tuple)))), 0)... };
		(void)_Ignored;
	}

	template <class _Tpl, class _Fx>
	inline void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func) {
		_For_each_tuple_element_impl(
			::std::forward<_Tpl>(_Tuple), _Func, make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>());
	}


#pragma warning(push)
#pragma warning(disable : 4100) 

	template <class _Ty1, class _Ty2>
	template <class _Tuple1, class _Tuple2, size_t... _Indexes1, size_t... _Indexes2>
	inline pair<_Ty1, _Ty2>::pair(
		_Tuple1& _Val1, _Tuple2& _Val2, index_sequence<_Indexes1...>, index_sequence<_Indexes2...>)
		: first(::std::get<_Indexes1>(::std::move(_Val1))...),
		second(::std::get<_Indexes2>(::std::move(_Val2))...) {
	}
#pragma warning(pop)


	template <class _Ty1, class _Ty2>
	template <class... _Types1, class... _Types2>
	inline pair<_Ty1, _Ty2>::pair(piecewise_construct_t, tuple<_Types1...> _Val1, tuple<_Types2...> _Val2)
		: pair(_Val1, _Val2, index_sequence_for<_Types1...>(),
			index_sequence_for<_Types2...>()) {
	}


	template <class... _Types, class _Alloc>
	struct uses_allocator<tuple<_Types...>, _Alloc> : true_type {
	};


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::get;
		using ::std::ignore;
		using ::std::make_tuple;
		using ::std::ref;
		using ::std::tie;
		using ::std::tuple;
	}
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"

}



#pragma warning(pop)
#pragma pack(pop)
#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"
#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\tuple"





#line 269 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"











































#line 45 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"



















#line 65 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"

#line 67 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"






































#line 106 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"

#line 108 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port-arch.h"
#line 273 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\custom\\gtest-port.h"




































#line 38 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\custom\\gtest-port.h"
#line 274 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 283 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 287 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"























#line 311 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"















#line 327 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {







	struct _diskfree_t
	{
		unsigned total_clusters;
		unsigned avail_clusters;
		unsigned sectors_per_cluster;
		unsigned bytes_per_sector;
	};
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"





	__declspec(dllimport) unsigned __cdecl _getdiskfree(
		unsigned            _Drive,
		struct _diskfree_t* _DiskFree
	);

	__declspec(dllimport) int __cdecl _chdrive(int _Drive);

	__declspec(dllimport) int __cdecl _getdrive(void);

	__declspec(dllimport) unsigned long __cdecl _getdrives(void);

#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"










	__declspec(dllimport) __declspec(allocator) char* __cdecl _getcwd(
		char* _DstBuf,
		int   _SizeInBytes
	);



	__declspec(dllimport) __declspec(allocator) char* __cdecl _getdcwd(
		int   _Drive,
		char* _DstBuf,
		int   _SizeInBytes
	);






	__declspec(dllimport) int __cdecl _chdir(char const* _Path);

	__declspec(dllimport) int __cdecl _mkdir(char const* _Path);

	__declspec(dllimport) int __cdecl _rmdir(char const* _Path);











	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getcwd" ". See online help for details."))
		__declspec(dllimport) char* __cdecl getcwd(
			char* _DstBuf,
			int   _SizeInBytes
		);



	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_chdir" ". See online help for details."))
		__declspec(dllimport) int __cdecl chdir(
			char const* _Path
		);



#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_mkdir" ". See online help for details."))
		__declspec(dllimport) int __cdecl mkdir(
			char const* _Path
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmdir" ". See online help for details."))
		__declspec(dllimport) int __cdecl rmdir(
			char const* _Path
		);

#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"



} __pragma(pack(pop))
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\direct.h"
#line 334 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\io.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {














#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"

	struct _finddata32_t
	{
		unsigned    attrib;
		__time32_t  time_create;
		__time32_t  time_access;
		__time32_t  time_write;
		_fsize_t    size;
		char        name[260];
	};

	struct _finddata32i64_t
	{
		unsigned    attrib;
		__time32_t  time_create;
		__time32_t  time_access;
		__time32_t  time_write;
		__int64     size;
		char        name[260];
	};

	struct _finddata64i32_t
	{
		unsigned    attrib;
		__time64_t  time_create;
		__time64_t  time_access;
		__time64_t  time_write;
		_fsize_t    size;
		char        name[260];
	};

	struct __finddata64_t
	{
		unsigned    attrib;
		__time64_t  time_create;
		__time64_t  time_access;
		__time64_t  time_write;
		__int64     size;
		char        name[260];
	};

































#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"




	__declspec(dllimport) int __cdecl _access(
		char const* _FileName,
		int         _AccessMode
	);


	__declspec(dllimport) errno_t __cdecl _access_s(
		char const* _FileName,
		int         _AccessMode
	);


	__declspec(dllimport) int __cdecl _chmod(
		char const* _FileName,
		int         _Mode
	);


	__declspec(dllimport) int __cdecl _chsize(
		int  _FileHandle,
		long _Size
	);


	__declspec(dllimport) errno_t __cdecl _chsize_s(
		int     _FileHandle,
		__int64 _Size
	);


	__declspec(dllimport) int __cdecl _close(
		int _FileHandle
	);


	__declspec(dllimport) int __cdecl _commit(
		int _FileHandle
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl _creat(
			char const* _FileName,
			int         _PermissionMode
		);


	__declspec(dllimport) int __cdecl _dup(
		int _FileHandle
	);


	__declspec(dllimport) int __cdecl _dup2(
		int _FileHandleSrc,
		int _FileHandleDst
	);


	__declspec(dllimport) int __cdecl _eof(
		int _FileHandle
	);


	__declspec(dllimport) long __cdecl _filelength(
		int _FileHandle
	);



	__declspec(dllimport) intptr_t __cdecl _findfirst32(
		char const* _FileName,
		struct _finddata32_t* _FindData
	);



	__declspec(dllimport) int __cdecl _findnext32(
		intptr_t              _FindHandle,
		struct _finddata32_t* _FindData
	);


	__declspec(dllimport) int __cdecl _findclose(
		intptr_t _FindHandle
	);

	__declspec(dllimport) intptr_t __cdecl _get_osfhandle(
		int _FileHandle
	);


	__declspec(dllimport) int __cdecl _isatty(
		int _FileHandle
	);

	__declspec(dllimport) int __cdecl _locking(
		int  _FileHandle,
		int  _LockMode,
		long _NumOfBytes
	);


	__declspec(dllimport) long __cdecl _lseek(
		int  _FileHandle,
		long _Offset,
		int  _Origin
	);



	__declspec(dllimport) errno_t __cdecl _mktemp_s(
		char* _TemplateName,
		size_t _Size
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _mktemp_s(char(&_TemplateName)[_Size]) throw() { return _mktemp_s(_TemplateName, _Size); } }
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _mktemp(char* _TemplateName);
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"

	__declspec(dllimport) int __cdecl _open_osfhandle(
		intptr_t _OSFileHandle,
		int      _Flags
	);




	__declspec(dllimport) int __cdecl _pipe(
		int* _PtHandles,
		unsigned int _PipeSize,
		int          _TextMode
	);
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"



	__declspec(dllimport) int __cdecl _read(
		int          _FileHandle,
		void* _DstBuf,
		unsigned int _MaxCharCount
	);

	__declspec(dllimport) int __cdecl remove(
		char const* _FileName
	);


	__declspec(dllimport) int __cdecl rename(
		char const* _OldFilename,
		char const* _NewFilename
	);

	__declspec(dllimport) int __cdecl _unlink(
		char const* _FileName
	);


	__declspec(dllimport) int __cdecl _setmode(
		int _FileHandle,
		int _Mode
	);


	__declspec(dllimport) long __cdecl _tell(
		int _FileHandle
	);

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_umask_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl _umask(
			int _Mode
		);


	__declspec(dllimport) errno_t __cdecl _umask_s(
		int  _NewMode,
		int* _OldMode
	);

	__declspec(dllimport) int __cdecl _write(
		int          _FileHandle,
		void const* _Buf,
		unsigned int _MaxCharCount
	);


	__declspec(dllimport) __int64 __cdecl _filelengthi64(
		int _FileHandle
	);



	__declspec(dllimport) intptr_t __cdecl _findfirst32i64(
		char const* _FileName,
		struct _finddata32i64_t* _FindData
	);



	__declspec(dllimport) intptr_t __cdecl _findfirst64i32(
		char const* _FileName,
		struct _finddata64i32_t* _FindData
	);



	__declspec(dllimport) intptr_t __cdecl _findfirst64(
		char const* _FileName,
		struct __finddata64_t* _FindData
	);



	__declspec(dllimport) int __cdecl _findnext32i64(
		intptr_t                 _FindHandle,
		struct _finddata32i64_t* _FindData
	);



	__declspec(dllimport) int __cdecl _findnext64i32(
		intptr_t                 _FindHandle,
		struct _finddata64i32_t* _FindData
	);



	__declspec(dllimport) int __cdecl _findnext64(
		intptr_t               _FindHandle,
		struct __finddata64_t* _FindData
	);


	__declspec(dllimport) __int64 __cdecl _lseeki64(
		int     _FileHandle,
		__int64 _Offset,
		int     _Origin
	);


	__declspec(dllimport) __int64 __cdecl _telli64(
		int _FileHandle
	);


	__declspec(dllimport) errno_t __cdecl _sopen_s(
		int* _FileHandle,
		char const* _FileName,
		int         _OpenFlag,
		int         _ShareFlag,
		int         _PermissionMode
	);


	__declspec(dllimport) errno_t __cdecl _sopen_s_nolock(
		int* _FileHandle,
		char const* _FileName,
		int         _OpenFlag,
		int         _ShareFlag,
		int         _PermissionMode
	);

	__declspec(dllimport) errno_t __cdecl _sopen_dispatch(
		char const* _FileName,
		int         _OFlag,
		int         _ShFlag,
		int         _PMode,
		int* _PFileHandle,
		int         _BSecure
	);






	extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl _open(
			char const* const _FileName,
			int         const _OFlag,
			int         const _PMode = 0
		)
	{
		int _FileHandle;

		errno_t const _Result = _sopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
		return _Result ? -1 : _FileHandle;
	}

	extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		inline int __cdecl _sopen(
			char const* const _FileName,
			int         const _OFlag,
			int         const _ShFlag,
			int         const _PMode = 0
		)
	{
		int _FileHandle;

		errno_t const _Result = _sopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
		return _Result ? -1 : _FileHandle;
	}
















#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"





#pragma warning(push)
#pragma warning(disable: 4141)

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_access" ". See online help for details."))
		__declspec(dllimport) int __cdecl access(
			char const* _FileName,
			int         _AccessMode
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_chmod" ". See online help for details."))
		__declspec(dllimport) int __cdecl chmod(
			char const* _FileName,
			int         _AccessMode
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_chsize" ". See online help for details."))
		__declspec(dllimport) int __cdecl chsize(
			int  _FileHandle,
			long _Size
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_close" ". See online help for details."))
		__declspec(dllimport) int __cdecl close(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_creat" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl creat(
			char const* _FileName,
			int         _PermissionMode
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_dup" ". See online help for details."))
		__declspec(dllimport) int __cdecl dup(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_dup2" ". See online help for details."))
		__declspec(dllimport) int __cdecl dup2(
			int _FileHandleSrc,
			int _FileHandleDst
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_eof" ". See online help for details."))
		__declspec(dllimport) int __cdecl eof(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_filelength" ". See online help for details."))
		__declspec(dllimport) long __cdecl filelength(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_isatty" ". See online help for details."))
		__declspec(dllimport) int __cdecl isatty(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_locking" ". See online help for details."))
		__declspec(dllimport) int __cdecl locking(
			int  _FileHandle,
			int  _LockMode,
			long _NumOfBytes
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lseek" ". See online help for details."))
		__declspec(dllimport) long __cdecl lseek(
			int  _FileHandle,
			long _Offset,
			int  _Origin
		);


	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_mktemp" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_mktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl mktemp(
			char* _TemplateName
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_open" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl open(
			char const* _FileName,
			int         _OpenFlag,
			...);


	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_read" ". See online help for details."))
		__declspec(dllimport) int __cdecl read(
			int          _FileHandle,
			void* _DstBuf,
			unsigned int _MaxCharCount
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_setmode" ". See online help for details."))
		__declspec(dllimport) int __cdecl setmode(
			int _FileHandle,
			int _Mode
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_sopen" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl sopen(
			char const* _FileName,
			int         _OpenFlag,
			int         _ShareFlag,
			...);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tell" ". See online help for details."))
		__declspec(dllimport) long __cdecl tell(
			int _FileHandle
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_umask" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_umask_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int __cdecl umask(
			int _Mode
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
		__declspec(dllimport) int __cdecl unlink(
			char const* _FileName
		);

	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_write" ". See online help for details."))
		__declspec(dllimport) int __cdecl write(
			int          _FileHandle,
			void const* _Buf,
			unsigned int _MaxCharCount
		);

#pragma warning(pop)
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\corecrt_io.h"

} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\io.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\io.h"
#line 335 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 336 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 342 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;
#line 347 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






#line 354 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




#line 359 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"







#line 367 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 369 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 370 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




#line 375 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"









#line 385 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"











#line 397 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"












































#line 442 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 443 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 452 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"











#line 464 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"












#line 477 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"










































#line 520 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 522 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 528 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"













#line 542 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 551 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"























#line 575 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 577 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 579 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 588 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 590 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 591 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 602 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 612 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 622 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"















#line 638 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"














#line 653 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 657 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"


#line 660 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"














#line 675 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 677 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




















#line 698 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 700 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"


























#line 727 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 729 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








#line 738 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"









#line 748 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 750 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"


#line 753 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 755 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 759 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 763 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






#line 770 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 776 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 778 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 779 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"










#line 790 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 792 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"









#line 802 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 804 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"









#line 814 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 816 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"









#line 826 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 828 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

namespace testing {

	class Message;



	using std::get;
	using std::make_tuple;
	using std::tuple;
	using std::tuple_element;
	using std::tuple_size;

	namespace internal {




		class Secret;

















		bool IsTrue(bool condition);





#line 871 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



		class  RE {
		public:


			RE(const RE& other) { Init(other.pattern()); }


			RE(const ::std::string& regex) { Init(regex.c_str()); }

			RE(const char* regex) { Init(regex); }
			~RE();


			const char* pattern() const { return pattern_; }





			static bool FullMatch(const ::std::string& str, const RE& re) {
				return FullMatch(str.c_str(), re);
			}
			static bool PartialMatch(const ::std::string& str, const RE& re) {
				return PartialMatch(str.c_str(), re);
			}

			static bool FullMatch(const char* str, const RE& re);
			static bool PartialMatch(const char* str, const RE& re);

		private:
			void Init(const char* regex);
			const char* pattern_;
			bool is_valid_;






#line 914 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

			const char* full_pattern_;

#line 918 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

			void operator=(RE const&) = delete;
		};

#line 923 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



		::std::string FormatFileLocation(const char* file, int line);




		::std::string FormatCompilerIndependentFileLocation(const char* file,
			int line);







		enum GTestLogSeverity {
			GTEST_INFO,
			GTEST_WARNING,
			GTEST_ERROR,
			GTEST_FATAL
		};




		class  GTestLog {
		public:
			GTestLog(GTestLogSeverity severity, const char* file, int line);


			~GTestLog();

			::std::ostream& GetStream() { return ::std::cerr; }

		private:
			const GTestLogSeverity severity_;

			GTestLog(GTestLog const&) = delete; void operator=(GTestLog const&) = delete;
		};







		inline void LogToStderr() {}
		inline void FlushInfoLog() { fflush(nullptr); }

#line 975 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






















#line 998 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






















		template <typename T>
		struct ConstRef { typedef const T& type; };
		template <typename T>
		struct ConstRef<T&> { typedef T& type; };

























		template<typename To>
		inline To ImplicitCast_(To x) { return x; }






















		template<typename To, typename From>
		inline To DownCast_(From* f) {




			__pragma(warning(push)) __pragma(warning(disable: 4127))
				if (false) {
					__pragma(warning(pop))
						const To to = nullptr;
					::testing::internal::ImplicitCast_<From*>(to);
				}



  switch (0) case 0: default: if (::testing::internal::IsTrue(f == nullptr || dynamic_cast<To>(f) != nullptr)); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h", 1088).GetStream() << "Condition " "f == nullptr || dynamic_cast<To>(f) != nullptr" " failed. ";
#line 1090 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
  return static_cast<To>(f);
		}






		template <class Derived, class Base>
		Derived* CheckedDowncastToActualType(Base* base) {

  switch (0) case 0: default: if (::testing::internal::IsTrue(typeid(*base) == typeid(Derived))); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h", 1101).GetStream() << "Condition " "typeid(*base) == typeid(Derived)" " failed. ";
#line 1103 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 1107 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
  return dynamic_cast<Derived*>(base);


#line 1111 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
		}









		void CaptureStdout();
		std::string GetCapturedStdout();
		void CaptureStderr();
		std::string GetCapturedStderr();

#line 1127 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

		size_t GetFileSize(FILE * file);


		std::string ReadEntireFile(FILE* file);


		std::vector<std::string> GetArgvs();



		std::vector<std::string> GetInjectableArgvs();

		void SetInjectableArgvs(const std::vector<std::string>* new_argvs);
		void SetInjectableArgvs(const std::vector<std::string>& new_argvs);
		void ClearInjectableArgvs();

#line 1145 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"














#line 1160 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 1166 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"











































#line 1210 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

		void SleepMilliseconds(int n);



		class  AutoHandle {
		public:





			typedef void* Handle;
			AutoHandle();
			explicit AutoHandle(Handle handle);

			~AutoHandle();

			Handle Get() const;
			void Reset();
			void Reset(Handle handle);

		private:


			bool IsCloseable() const;

			Handle handle_;

			AutoHandle(AutoHandle const&) = delete; void operator=(AutoHandle const&) = delete;
		};







		class  Notification {
		public:
			Notification();
			void Notify();
			void WaitForNotification();

		private:
			AutoHandle event_;

			Notification(Notification const&) = delete; void operator=(Notification const&) = delete;
		};
#line 1260 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"


















































































#line 1343 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"






#line 1350 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"















		class  Mutex {
		public:
			enum MutexType { kStatic = 0, kDynamic = 1 };



			enum StaticConstructorSelector { kStaticMutex = 0 };




			explicit Mutex(StaticConstructorSelector) {}

			Mutex();
			~Mutex();

			void Lock();

			void Unlock();



			void AssertHeld();

		private:

			void ThreadSafeLazyInit();



			unsigned int owner_thread_id_;



			MutexType type_;
			long critical_section_init_phase_;
			GTEST_CRITICAL_SECTION* critical_section_;

			Mutex(Mutex const&) = delete; void operator=(Mutex const&) = delete;
		};












		class GTestMutexLock {
		public:
			explicit GTestMutexLock(Mutex* mutex)
				: mutex_(mutex) {
				mutex_->Lock();
			}

			~GTestMutexLock() { mutex_->Unlock(); }

		private:
			Mutex* const mutex_;

			GTestMutexLock(GTestMutexLock const&) = delete; void operator=(GTestMutexLock const&) = delete;
		};

		typedef GTestMutexLock MutexLock;



		class ThreadLocalValueHolderBase {
		public:
			virtual ~ThreadLocalValueHolderBase() {}
		};



		class ThreadLocalBase {
		public:




			virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const = 0;

		protected:
			ThreadLocalBase() {}
			virtual ~ThreadLocalBase() {}

		private:
			ThreadLocalBase(ThreadLocalBase const&) = delete; void operator=(ThreadLocalBase const&) = delete;
		};




		class  ThreadLocalRegistry {
		public:


			static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
				const ThreadLocalBase* thread_local_instance);


			static void OnThreadLocalDestroyed(
				const ThreadLocalBase* thread_local_instance);
		};

		class  ThreadWithParamBase {
		public:
			void Join();

		protected:
			class Runnable {
			public:
				virtual ~Runnable() {}
				virtual void Run() = 0;
			};

			ThreadWithParamBase(Runnable* runnable, Notification* thread_can_start);
			virtual ~ThreadWithParamBase();

		private:
			AutoHandle thread_;
		};


		template <typename T>
		class ThreadWithParam : public ThreadWithParamBase {
		public:
			typedef void UserThreadFunc(T);

			ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)
				: ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) {
			}
			virtual ~ThreadWithParam() {}

		private:
			class RunnableImpl : public Runnable {
			public:
				RunnableImpl(UserThreadFunc* func, T param)
					: func_(func),
					param_(param) {
				}
				virtual ~RunnableImpl() {}
				virtual void Run() {
					func_(param_);
				}

			private:
				UserThreadFunc* const func_;
				const T param_;

				RunnableImpl(RunnableImpl const&) = delete; void operator=(RunnableImpl const&) = delete;
			};

			ThreadWithParam(ThreadWithParam const&) = delete; void operator=(ThreadWithParam const&) = delete;
		};




























		template <typename T>
		class ThreadLocal : public ThreadLocalBase {
		public:
			ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}
			explicit ThreadLocal(const T& value)
				: default_factory_(new InstanceValueHolderFactory(value)) {}

			~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }

			T* pointer() { return GetOrCreateValue(); }
			const T* pointer() const { return GetOrCreateValue(); }
			const T& get() const { return *pointer(); }
			void set(const T& value) { *pointer() = value; }

		private:


			class ValueHolder : public ThreadLocalValueHolderBase {
			public:
				ValueHolder() : value_() {}
				explicit ValueHolder(const T& value) : value_(value) {}

				T* pointer() { return &value_; }

			private:
				T value_;
				ValueHolder(ValueHolder const&) = delete; void operator=(ValueHolder const&) = delete;
			};


			T* GetOrCreateValue() const {
				return static_cast<ValueHolder*>(
					ThreadLocalRegistry::GetValueOnCurrentThread(this))->pointer();
			}

			virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {
				return default_factory_->MakeNewHolder();
			}

			class ValueHolderFactory {
			public:
				ValueHolderFactory() {}
				virtual ~ValueHolderFactory() {}
				virtual ValueHolder* MakeNewHolder() const = 0;

			private:
				ValueHolderFactory(ValueHolderFactory const&) = delete; void operator=(ValueHolderFactory const&) = delete;
			};

			class DefaultValueHolderFactory : public ValueHolderFactory {
			public:
				DefaultValueHolderFactory() {}
				virtual ValueHolder* MakeNewHolder() const { return new ValueHolder(); }

			private:
				DefaultValueHolderFactory(DefaultValueHolderFactory const&) = delete; void operator=(DefaultValueHolderFactory const&) = delete;
			};

			class InstanceValueHolderFactory : public ValueHolderFactory {
			public:
				explicit InstanceValueHolderFactory(const T& value) : value_(value) {}
				virtual ValueHolder* MakeNewHolder() const {
					return new ValueHolder(value_);
				}

			private:
				const T value_;

				InstanceValueHolderFactory(InstanceValueHolderFactory const&) = delete; void operator=(InstanceValueHolderFactory const&) = delete;
			};

			std::unique_ptr<ValueHolderFactory> default_factory_;

			ThreadLocal(ThreadLocal const&) = delete; void operator=(ThreadLocal const&) = delete;
		};




















































































































































































































#line 1838 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"














































#line 1885 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



		size_t GetThreadCount();

		template <bool B>
		using bool_constant = std::integral_constant<bool, B>;





		typedef __int64 BiggestInt;




#line 1903 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








		inline bool IsAlpha(char ch) {
			return isalpha(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsAlNum(char ch) {
			return isalnum(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsDigit(char ch) {
			return isdigit(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsLower(char ch) {
			return islower(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsSpace(char ch) {
			return isspace(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsUpper(char ch) {
			return isupper(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsXDigit(char ch) {
			return isxdigit(static_cast<unsigned char>(ch)) != 0;
		}
		inline bool IsXDigit(wchar_t ch) {
			const unsigned char low_byte = static_cast<unsigned char>(ch);
			return ch == low_byte && isxdigit(low_byte) != 0;
		}

		inline char ToLower(char ch) {
			return static_cast<char>(tolower(static_cast<unsigned char>(ch)));
		}
		inline char ToUpper(char ch) {
			return static_cast<char>(toupper(static_cast<unsigned char>(ch)));
		}

		inline std::string StripTrailingSpaces(std::string str) {
			std::string::iterator it = str.end();
			while (it != str.begin() && IsSpace(*--it))
				it = str.erase(it);
			return str;
		}







		namespace posix {





			typedef struct _stat64i32 StatStruct;










#line 1975 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline int IsATTY(int fd) { return _isatty(fd); }
#line 1977 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline int StrCaseCmp(const char* s1, const char* s2) {
				return _stricmp(s1, s2);
			}
			inline char* StrDup(const char* src) { return _strdup(src); }
#line 1982 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 1988 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline int FileNo(FILE * file) { return _fileno(file); }
			inline int Stat(const char* path, StatStruct* buf) { return _stat64i32(path, buf); }
			inline int RmDir(const char* dir) { return _rmdir(dir); }
			inline bool IsDir(const StatStruct& st) {
				return (0x4000 & st.st_mode) != 0;
			}
#line 1995 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"















#line 2011 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



			__pragma(warning(push)) __pragma(warning(disable: 4996))

				inline const char* StrNCpy(char* dest, const char* src, size_t n) {
				return strncpy(dest, src, n);
			}






			inline int ChDir(const char* dir) { return chdir(dir); }
#line 2027 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline FILE * FOpen(const char* path, const char* mode) {
				return fopen(path, mode);
			}

			inline FILE* FReopen(const char* path, const char* mode, FILE* stream) {
				return freopen(path, mode, stream);
			}
			inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
#line 2036 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline int FClose(FILE * fp) { return fclose(fp); }

			inline int Read(int fd, void* buf, unsigned int count) {
				return static_cast<int>(read(fd, buf, count));
			}
			inline int Write(int fd, const void* buf, unsigned int count) {
				return static_cast<int>(write(fd, buf, count));
			}
			inline int Close(int fd) { return close(fd); }
			inline const char* StrError(int errnum) { return strerror(errnum); }
#line 2047 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			inline const char* GetEnv(const char* name) {




#line 2053 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




#line 2058 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
				return getenv(name);
#line 2060 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
			}

			__pragma(warning(pop))






#line 2070 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
				[[noreturn]] inline void Abort() { abort(); }
#line 2072 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

		}















#line 2090 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"








		const BiggestInt kMaxBiggestInt =
			~(static_cast<BiggestInt>(1) << (8 * sizeof(BiggestInt) - 1));



















		template <size_t size>
		class TypeWithSize {
		public:


			typedef void UInt;
		};


		template <>
		class TypeWithSize<4> {
		public:




			typedef int Int;
			typedef unsigned int UInt;
		};


		template <>
		class TypeWithSize<8> {
		public:

			typedef __int64 Int;
			typedef unsigned __int64 UInt;



#line 2150 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
		};


		typedef TypeWithSize<4>::Int Int32;
		typedef TypeWithSize<4>::UInt UInt32;
		typedef TypeWithSize<8>::Int Int64;
		typedef TypeWithSize<8>::UInt UInt64;
		typedef TypeWithSize<8>::Int TimeInMillis;






#line 2165 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



#line 2169 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"



















#line 2189 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"





#line 2195 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"




		bool ParseInt32(const Message & src_text, const char* str, Int32 * value);



		bool BoolFromGTestEnv(const char* flag, bool default_val);
		Int32 Int32FromGTestEnv(const char* flag, Int32 default_val);
		std::string OutputFlagAlsoCheckEnvVar();
		const char* StringFromGTestEnv(const char* flag, const char* default_val);

	}
}

















#line 2228 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 2230 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"

#line 2232 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-port.h"
#line 41 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"






#line 48 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"



#line 52 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocmon"

#pragma once





#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	struct money_base : public locale::facet {
		enum {
			symbol = '$',
			sign = '+',
			space = ' ',
			value = 'v',
			none = 'x'
		};
		using part = int;

		struct pattern {
			char field[4];
		};

		money_base(size_t _Refs = 0) : locale::facet(_Refs) {}
	};


	template <class _Elem>
	class _Mpunct : public money_base {
	public:
		friend _Tidy_guard<_Mpunct>;

	public:
		using char_type   = _Elem;
		using string_type = basic_string<_Elem, char_traits<_Elem>, allocator<_Elem>>;

		_Elem decimal_point() const {
			return do_decimal_point();
		}

		_Elem thousands_sep() const {
			return do_thousands_sep();
		}

		string grouping() const {
			return do_grouping();
		}

		string_type curr_symbol() const {
			return do_curr_symbol();
		}

		string_type positive_sign() const {
			return do_positive_sign();
		}

		string_type negative_sign() const {
			return do_negative_sign();
		}

		int frac_digits() const {
			return do_frac_digits();
		}

		pattern pos_format() const {
			return do_pos_format();
		}

		pattern neg_format() const {
			return do_neg_format();
		}

		explicit _Mpunct(size_t _Refs, bool _Intl)
			: money_base(_Refs), _International(_Intl) {
				{ _Locinfo _Lobj;
				_Init(_Lobj);
				}
		}

		_Mpunct(const _Locinfo& _Lobj, size_t _Refs, bool _Intl, bool _Isdef = false)
			: money_base(_Refs), _International(_Intl) {
			_Init(_Lobj, _Isdef);
		}

	protected:
		_Mpunct(const char* _Locname, size_t _Refs, bool _Intl, bool _Isdef = false)
			: money_base(_Refs), _International(_Intl) {
				{ _Locinfo _Lobj(_Locname);
				_Init(_Lobj, _Isdef);
				}
		}

		virtual  ~_Mpunct() noexcept {
			_Tidy();
		}

		template <class _Elem2>
		void _Getvals(_Elem2, const lconv* _Ptr) {
			_Currencysign = _Maklocstr(
				_International ? _Ptr->int_curr_symbol : _Ptr->currency_symbol, static_cast<_Elem2*>(nullptr), _Cvt);
			_Plussign = _Maklocstr(
				4 < (unsigned int)_Ptr->p_sign_posn ? "" : _Ptr->positive_sign, static_cast<_Elem2*>(nullptr), _Cvt);
			_Minussign = _Maklocstr(
				4 < (unsigned int)_Ptr->n_sign_posn ? "-" : _Ptr->negative_sign, static_cast<_Elem2*>(nullptr), _Cvt);
			_Decimalpoint = _Maklocchr(_Ptr->mon_decimal_point[0], static_cast<_Elem2*>(nullptr), _Cvt);
			_Kseparator = _Maklocchr(_Ptr->mon_thousands_sep[0], static_cast<_Elem2*>(nullptr), _Cvt);
		}

		void _Getvals(wchar_t, const lconv* _Ptr) {
			_Currencysign = (const _Elem*)_Maklocwcs(_International ? _Ptr->_W_int_curr_symbol : _Ptr->_W_currency_symbol);
			_Plussign = (const _Elem*)_Maklocwcs(4 < (unsigned int)_Ptr->p_sign_posn ? L"" : _Ptr->_W_positive_sign);
			_Minussign = (const _Elem*)_Maklocwcs(4 < (unsigned int)_Ptr->n_sign_posn ? L"-" : _Ptr->_W_negative_sign);
			_Decimalpoint = (_Elem)_Ptr->_W_mon_decimal_point[0];
			_Kseparator = (_Elem)_Ptr->_W_mon_thousands_sep[0];
		}

		void _Init(const _Locinfo& _Lobj, bool _Isdef = false) {
			_Cvt = _Lobj._Getcvt();
			const lconv* _Ptr = _Lobj._Getlconv();

			_Grouping = nullptr;
			_Currencysign = nullptr;
			_Plussign = nullptr;
			_Minussign = nullptr;

			_Tidy_guard<_Mpunct> _Guard{ this };
			_Grouping = _Maklocstr(_Ptr->mon_grouping, static_cast<char*>(nullptr), _Cvt);
			_Getvals((_Elem)0, _Ptr);
			_Guard._Target = nullptr;

			_Fracdigits = _International ? _Ptr->int_frac_digits : _Ptr->frac_digits;
			if (_Fracdigits < 0 || 127 <= _Fracdigits) {
				_Fracdigits = 0;
			}

			_Makpat(_Plusformat, static_cast<unsigned int>(_Ptr->p_sep_by_space),
				static_cast<unsigned int>(_Ptr->p_cs_precedes), static_cast<unsigned int>(_Ptr->p_sign_posn));
			_Makpat(_Minusformat, static_cast<unsigned int>(_Ptr->n_sep_by_space),
				static_cast<unsigned int>(_Ptr->n_cs_precedes), static_cast<unsigned int>(_Ptr->n_sign_posn));

			if (_Isdef) {
				::memcpy(&_Plusformat, "$+xv", 4);
				::memcpy(&_Minusformat, "$+xv", 4);
			}
		}

		virtual _Elem  do_decimal_point() const {
			return _Decimalpoint;
		}

		virtual _Elem  do_thousands_sep() const {
			return _Kseparator;
		}

		virtual string  do_grouping() const {
			return string(_Grouping);
		}

		virtual string_type  do_curr_symbol() const {
			return string_type(_Currencysign);
		}

		virtual string_type  do_positive_sign() const {
			return string_type(_Plussign);
		}

		virtual string_type  do_negative_sign() const {
			return string_type(_Minussign);
		}

		virtual int  do_frac_digits() const {
			return _Fracdigits;
		}

		virtual pattern  do_pos_format() const {
			return _Plusformat;
		}

		virtual pattern  do_neg_format() const {
			return _Minusformat;
		}

	private:
		void _Makpat(pattern& _Pattern, unsigned int _Sepbyspace, unsigned int _Symbolprecedes,
			unsigned int _Signposition) {
			const char* _Ptr = _International || 2 < _Sepbyspace || 1 < _Symbolprecedes || 4 < _Signposition
				? "$+xv"
				: &("+v$x"
					"+v$x"
					"v$+x"
					"v+$x"
					"v$+x"
					"+$vx"
					"+$vx"
					"$v+x"
					"+$vx"
					"$+vx"
					"+v $"
					"+v $"
					"v $+"
					"v +$"
					"v $+"
					"+$ v"
					"+$ v"
					"$ v+"
					"+$ v"
					"$+ v"
					"+xv$"
					"+ v$"
					"v$ +"
					"v+ $"
					"v$ +"
					"+x$v"
					"+ $v"
					"$v +"
					"+ $v"
					"$ +v")[_Signposition * 4
				+ _Symbolprecedes * 20
				+ _Sepbyspace * 40];

			::memcpy(_Pattern.field, _Ptr, sizeof(_Pattern.field));
		}

		void _Tidy() noexcept {
			::free((void*)_Grouping);
			::free((void*)_Currencysign);
			::free((void*)_Plussign);
			::free((void*)_Minussign);
		}

		const char* _Grouping;
		_Elem _Decimalpoint;
		_Elem _Kseparator;
		const _Elem* _Currencysign;
		const _Elem* _Plussign;
		const _Elem* _Minussign;
		int _Fracdigits;
		pattern _Plusformat;
		pattern _Minusformat;
		bool _International;

		_Locinfo::_Cvtvec _Cvt;
	};


	template <class _Elem,
		bool _Intl = false>
		class moneypunct : public _Mpunct<_Elem> {
		public:
			static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
				"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

			__declspec(dllimport) static const bool intl;
			__declspec(dllimport) static locale::id id;

			explicit moneypunct(size_t _Refs = 0) : _Mpunct<_Elem>(_Refs, _Intl) {
			}

			moneypunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
				: _Mpunct<_Elem>(_Lobj, _Refs, _Intl, _Isdef) {
			}

			static size_t _Getcat(const locale::facet** _Ppf = nullptr,
				const locale* _Ploc = nullptr) {
				if (_Ppf != nullptr && *_Ppf == nullptr) {
					*_Ppf = new moneypunct<_Elem, _Intl>(_Locinfo(_Ploc->c_str()), 0, true);
				}

				return 3;
			}

		protected:
			moneypunct(const char* _Locname, size_t _Refs = 0)
				: _Mpunct<_Elem>(_Locname, _Refs, _Intl) {
			}

			virtual  ~moneypunct() noexcept {}
	};







	template <class _Elem, bool _Intl>
	const bool moneypunct<_Elem, _Intl>::intl = _Intl;


	template <class _Elem, bool _Intl>
	locale::id moneypunct<_Elem, _Intl>::id;






	template <class _Elem, bool _Intl = false>
	class moneypunct_byname : public moneypunct<_Elem, _Intl> {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit moneypunct_byname(const char* _Locname, size_t _Refs = 0)
			: moneypunct<_Elem, _Intl>(_Locname, _Refs) {
		}

		explicit moneypunct_byname(const string& _Str, size_t _Refs = 0)
			: moneypunct<_Elem, _Intl>(_Str.c_str(), _Refs) {
		}

	protected:
		virtual  ~moneypunct_byname() noexcept {}
	};


	template <class _Elem, class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem>>>
	class money_get : public locale::facet {
		using _Mypunct0 = moneypunct<_Elem, false>;
		using _Mypunct1 = moneypunct<_Elem, true>;

	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using char_type   = _Elem;
		using iter_type   = _InIt;
		using string_type = basic_string<_Elem, char_traits<_Elem>, allocator<_Elem>>;

		_InIt get(_InIt _First, _InIt _Last, bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const {
			return do_get(_First, _Last, _Intl, _Iosbase, _State, _Val);
		}

		_InIt get(_InIt _First, _InIt _Last, bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			string_type& _Val) const {
			return do_get(_First, _Last, _Intl, _Iosbase, _State, _Val);
		}

		__declspec(dllimport) static locale::id id;

		explicit money_get(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		money_get(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {
			_Init(_Lobj);
		}

		static size_t _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new money_get<_Elem, _InIt>(_Locinfo(_Ploc->c_str()));
			}

			return 3;
		}

	protected:
		virtual  ~money_get() noexcept {}

		void _Init(const _Locinfo&) {
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, bool _Intl, ios_base& _Iosbase,
			ios_base::iostate& _State,
			long double& _Val) const {
			_Elem _Atoms[sizeof("0123456789-")];
			string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			if (_Str.size() == 0) {
				_State |= ios_base::failbit;
			}
			else {
				const char* _Eb = _Str.c_str();
				char* _Ep;
				int _Errno = 0;
				const long double _Ans = _Stodx_v2(_Eb, &_Ep, 0, &_Errno);

				if (_Ep == _Eb || _Errno != 0) {
					_State |= ios_base::failbit;
				}
				else {
					_Val = _Ans;
				}
			}
			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, bool _Intl, ios_base& _Iosbase,
			ios_base::iostate& _State,
			string_type& _Val) const {
			_Elem _Atoms[sizeof("0123456789-")];
			string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);
			size_t _Len = _Str.size();

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			if (_Len == 0) {
				_State |= ios_base::failbit;
			}
			else {
				size_t _Idx = 0;
				_Val.resize(_Len);
				if (_Str[0] == '-') {
					_Val[_Idx++] = _Atoms[10];
				}

				for (; _Idx < _Len; ++_Idx) {
					_Val[_Idx] = _Atoms[_Str[_Idx] - '0'];
				}
			}
			return _First;
		}

	private:
		string _Getmfld(_InIt& _First, _InIt& _Last, bool _Intl, ios_base& _Iosbase,
			_Elem(&_Atoms)[12]) const {
			_Adl_verify_range(_First, _Last);
			const _Mpunct<_Elem>* _Ppunct_fac;
			if (_Intl) {
				_Ppunct_fac = ::std::addressof(::std::use_facet<_Mypunct1>(_Iosbase.getloc()));
			}
			else {
				_Ppunct_fac = ::std::addressof(::std::use_facet<_Mypunct0>(_Iosbase.getloc()));
			}

			bool _Bad = false, _Neg = false;
			string_type _Sign;
			const money_base::pattern _Pattern = _Ppunct_fac->neg_format();
			string _Val;
			size_t _Idx;
			static constexpr char _Src[] = { "0123456789-" };
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			_Ctype_fac.widen(&_Src[0], &_Src[sizeof(_Src)], _Atoms);

			for (size_t _Off = 0; !_Bad && _Off < 4; ++_Off) {
				switch (_Pattern.field[_Off]) {
				case money_base::symbol: {
					string_type _Symbol = _Ppunct_fac->curr_symbol();
					typename string_type::const_iterator _Source;

					if ((!(_Iosbase.flags() & ios_base::showbase) && _First != _Last && *_First != *_Symbol.c_str())
						|| (_Off == 3 && _Sign.size() <= 1
							&& (_First == _Last || *_First != *_Symbol.c_str()))) {


						_Symbol.erase();
					}

					_Source = _Symbol.begin();
					while (_First != _Last && _Source != _Symbol.end()
						&& *_First == *_Source) {
						++_Source;
						++_First;
					}

					if (_Source != _Symbol.end()) {
						_Bad = true;
					}
					break;
				}

				case money_base::sign:
					if (_First != _Last) {
						if (0 < _Ppunct_fac->positive_sign().size()
							&& _Ppunct_fac->positive_sign()[0] == *_First) {
							++_First;
							_Sign = _Ppunct_fac->positive_sign();
						}
						else if (0 < _Ppunct_fac->negative_sign().size()
							&& _Ppunct_fac->negative_sign()[0] == *_First) {
							++_First;
							_Sign = _Ppunct_fac->negative_sign();
							_Neg = true;
						}
						else if (0 != _Ppunct_fac->positive_sign().size() && 0 == _Ppunct_fac->negative_sign().size()) {
							_Neg = true;
						}
					}

					break;

				case money_base::value: {
					int _Fracdigseen = 0;
					int _Fracdigits = _Ppunct_fac->frac_digits();
					const string _Grouping = _Ppunct_fac->grouping();
					const _Elem _Kseparator = _Grouping.size() == 0 ? (_Elem)0 : _Ppunct_fac->thousands_sep();

					if (_Kseparator == (_Elem)0 || 127 <= (unsigned char)* _Grouping.c_str()) {
						for (; _First != _Last && (_Idx = _Find_elem(_Atoms, *_First)) < 10; ++_First) {
							_Val += _Src[_Idx];
						}
					}
					else {
						string _Groups;
						_Groups.push_back('\0');
						size_t _Group = 0;

						for (; _First != _Last; ++_First) {
							if ((_Idx = _Find_elem(_Atoms, *_First)) < 10) {
								_Val += _Src[_Idx];
								if (_Groups[_Group] != 127) {
									++_Groups[_Group];
								}
							}
							else if (_Groups[_Group] == '\0' || *_First != _Kseparator) {
								break;
							}
							else {
								_Groups.push_back('\0');
								++_Group;
							}
						}

						if (_Group != 0) {
							if ('\0' < _Groups[_Group]) {
								++_Group;
							}
							else {
								_Bad = true;
							}
						}

						for (const char* _Pg = _Grouping.c_str(); !_Bad && 0 < _Group;) {
							if (*_Pg == 127) {
								break;
							}

							if ((0 < --_Group && *_Pg != _Groups[_Group]) || (0 == _Group && *_Pg < _Groups[_Group])) {
								_Bad = true;
							}
							else if ('\0' < _Pg[1]) {
								++_Pg;
							}
						}

						if (_Bad) {
							break;
						}
					}

					const _Elem _Point = _Ppunct_fac->decimal_point();
					if (_First != _Last && _Point != (_Elem)0
						&& *_First == _Point) {
						while (
							++_First != _Last && _Fracdigseen < _Fracdigits && (_Idx = _Find_elem(_Atoms, *_First)) < 10) {
							_Val += _Src[_Idx];
							++_Fracdigseen;
						}

						if (_Fracdigseen < _Fracdigits) {
							_Bad = true;
						}
					}

					if (_Val.size() == 0) {
						_Bad = true;
					}
					else {
						for (; _Fracdigseen < _Fracdigits; ++_Fracdigseen) {
							_Val += '0';
						}
					}

					break;
				}

				case money_base::space:
				case money_base::none: {
					if (_Off == 3) {
						break;
					}

					bool _Seen = false;

					for (; _First != _Last && _Ctype_fac.is(ctype_base::space, *_First); ++_First) {
						_Seen = true;
					}

					if (_Pattern.field[_Off] == money_base::space && !_Seen) {
						_Bad = true;
					}
				}
				}
			}

			if (!_Bad && 1 < _Sign.size()) {
				auto _Source = _Sign.begin();

				while (++_Source != _Sign.end() && _First != _Last && *_First == *_Source) {
					++_First;
				}

				if (_Source != _Sign.end()) {
					_Bad = true;
				}
			}

			if (_Bad) {
				_Val.erase();
			}
			else if (_Neg) {
				_Val.insert((size_t)0, (size_t)1, '-');
			}

			return _Val;
		}
	};







	template <class _Elem, class _InIt>
	locale::id money_get<_Elem, _InIt>::id;






	template <class _Elem, class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem>>>
	class money_put : public locale::facet {
		using _Mypunct0 = moneypunct<_Elem, false>;
		using _Mypunct1 = moneypunct<_Elem, true>;

	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using char_type   = _Elem;
		using iter_type   = _OutIt;
		using string_type = basic_string<_Elem, char_traits<_Elem>, allocator<_Elem>>;

		_OutIt put(_OutIt _Dest, bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const {
			return do_put(_Dest, _Intl, _Iosbase, _Fill, _Val);
		}

		_OutIt put(_OutIt _Dest, bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const {
			return do_put(_Dest, _Intl, _Iosbase, _Fill, _Val);
		}

		__declspec(dllimport) static locale::id id;

		explicit money_put(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		money_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {
			_Init(_Lobj);
		}

		static size_t _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new money_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));
			}

			return 3;
		}

	protected:
		virtual  ~money_put() noexcept {}

		void _Init(const _Locinfo&) {
		}

		virtual _OutIt  do_put(_OutIt _Dest, bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const {
			bool _Negative = false;
			if (_Val < 0) {
				_Negative = true;
				_Val = -_Val;
			}

			size_t _Exp;
			for (_Exp = 0; 1e35 <= _Val && _Exp < 5000; _Exp += 10) {
				_Val /= 1e10;
			}

			char _Buf[40];


			const auto _Count = static_cast<size_t>(::sprintf_s(_Buf, sizeof(_Buf), "%.0Lf", _Val));

			if (_Count < 0) {
				return _Dest;
			}

			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			const _Elem _E0 = _Ctype_fac.widen('0');

			string_type _Val2(_Count, (_Elem)0);
			_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Val2[0]);
			_Val2.append(_Exp, _E0);
			return _Putmfld(_Dest, _Intl, _Iosbase, _Fill, _Negative, _Val2, _E0);
		}

		virtual _OutIt  do_put(_OutIt _Dest, bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const {
			static constexpr char _Src[] = { "0123456789-" };
			_Elem _Atoms[sizeof(_Src)];
			const ctype<_Elem>& _Ctype_fac = ::std::use_facet<ctype<_Elem>>(_Iosbase.getloc());
			_Ctype_fac.widen(&_Src[0], &_Src[sizeof(_Src)], _Atoms);

			bool _Negative = false;
			size_t _Idx0 = 0;
			if (!_Val.empty() && _Val[0] == _Atoms[10]) {
				_Negative = true;
				++_Idx0;
			}

			size_t _Size = _Val.size();
			size_t _Idx = _Idx0;
			for (; _Idx < _Size && _Find_elem(_Atoms, _Val[_Idx]) < 10; ++_Idx) {
			}

			string_type _Val2(&_Val[_Idx0], (size_t)(_Idx - _Idx0));
			if (_Val2.empty()) {
				_Val2.push_back(_Atoms[0]);
			}

			return _Putmfld(_Dest, _Intl, _Iosbase, _Fill, _Negative, _Val2, _Atoms[0]);
		}

	private:
		_OutIt _Putmfld(_OutIt _Dest, bool _Intl, ios_base& _Iosbase, _Elem _Fill, bool _Neg, string_type _Val,
			_Elem _E0) const {
			const _Mpunct<_Elem>* _Ppunct_fac;
			if (_Intl) {
				_Ppunct_fac = ::std::addressof(::std::use_facet<_Mypunct1>(_Iosbase.getloc()));
			}
			else {
				_Ppunct_fac = ::std::addressof(::std::use_facet<_Mypunct0>(_Iosbase.getloc()));
			}

			const string _Grouping = _Ppunct_fac->grouping();
			int _Ifracdigits = _Ppunct_fac->frac_digits();
			const auto _Fracdigits = static_cast<unsigned int>(_Ifracdigits < 0 ? -_Ifracdigits : _Ifracdigits);

			if (_Val.size() <= _Fracdigits) {
				_Val.insert((size_t)0, _Fracdigits - _Val.size() + 1, _E0);
			}
			else if (*_Grouping.c_str() != 127
				&& '\0' < *_Grouping.c_str()) {
				const _Elem _Kseparator = _Ppunct_fac->thousands_sep();
				const char* _Pg = _Grouping.c_str();
				size_t _Off = _Val.size() - _Fracdigits;

				while (
					*_Pg != 127 && '\0' < *_Pg && (size_t)* _Pg < _Off) {
					_Val.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
					if ('\0' < _Pg[1]) {
						++_Pg;
					}
				}
			}

			money_base::pattern _Pattern;
			string_type _Sign;
			if (_Neg) {
				_Pattern = _Ppunct_fac->neg_format();
				_Sign = _Ppunct_fac->negative_sign();
			}
			else {
				_Pattern = _Ppunct_fac->pos_format();
				_Sign = _Ppunct_fac->positive_sign();
			}

			string_type _Symbol;
			if (_Iosbase.flags() & ios_base::showbase) {
				_Symbol = _Ppunct_fac->curr_symbol();
			}

			bool _Intern = false;
			size_t _Fillcount, _Off;
			for (_Fillcount = 0, _Off = 0; _Off < 4; ++_Off) {
				switch (_Pattern.field[_Off]) {
				case money_base::symbol:
					_Fillcount += _Symbol.size();
					break;

				case money_base::sign:
					_Fillcount += _Sign.size();
					break;

				case money_base::value:
					_Fillcount += _Val.size() + (0 < _Fracdigits ? 1 : 0)
						+ (_Val.size() <= _Fracdigits ? _Fracdigits - _Val.size() + 1 : 0);
					break;

				case money_base::space:
					++_Fillcount;


				case money_base::none:
					if (_Off != 3) {
						_Intern = true;
					}

					break;
				}
			}

			_Fillcount = _Iosbase.width() <= 0 || (size_t)_Iosbase.width() <= _Fillcount
				? 0
				: (size_t)_Iosbase.width() - _Fillcount;

			ios_base::fmtflags _Afl = _Iosbase.flags() & ios_base::adjustfield;
			if (_Afl != ios_base::left && (_Afl != ios_base::internal || !_Intern)) {
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
			}

			for (_Off = 0; _Off < 4; ++_Off) {
				switch (_Pattern.field[_Off]) {
				case money_base::symbol:
					_Dest = _Put(_Dest, _Symbol.begin(), _Symbol.size());
					break;

				case money_base::sign:
					if (0 < _Sign.size()) {
						_Dest = _Put(_Dest, _Sign.begin(), 1);
					}

					break;

				case money_base::value:
					if (_Fracdigits == 0) {
						_Dest = _Put(_Dest, _Val.begin(),
							_Val.size());
					}
					else if (_Val.size() <= _Fracdigits) {
						*_Dest++ = _E0;
						*_Dest++ = _Ppunct_fac->decimal_point();
						_Dest = _Rep(_Dest, _E0,
							_Fracdigits - _Val.size());
						_Dest = _Put(_Dest, _Val.begin(), _Val.size());
					}
					else {
						_Dest = _Put(_Dest, _Val.begin(),
							_Val.size() - _Fracdigits);
						*_Dest++ = _Ppunct_fac->decimal_point();
						_Dest = _Put(_Dest, _Val.end() - static_cast<ptrdiff_t>(_Fracdigits),
							_Fracdigits);
					}
					break;

				case money_base::space:
					_Dest = _Rep(_Dest, _Fill, 1);


				case money_base::none:
					if (_Afl == ios_base::internal) {
						_Dest = _Rep(_Dest, _Fill, _Fillcount);
						_Fillcount = 0;
					}
				}
			}

			if (1 < _Sign.size()) {
				_Dest = _Put(_Dest, _Sign.begin() + 1,
					_Sign.size() - 1);
			}

			_Iosbase.width(0);
			return _Rep(_Dest, _Fill, _Fillcount);
		}

		static _OutIt _Put(_OutIt _Dest, typename string_type::const_iterator _Source,
			size_t _Count) {
			for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Source) {
				*_Dest = *_Source;
			}

			return _Dest;
		}

		static _OutIt _Rep(_OutIt _Dest, _Elem _Ch, size_t _Count) {
			for (; 0 < _Count; --_Count, (void) ++_Dest) {
				*_Dest = _Ch;
			}

			return _Dest;
		}
	};







	template <class _Elem, class _OutIt>
	locale::id money_put<_Elem, _OutIt>::id;




	template  const bool moneypunct<char, true>::intl;
	template  const bool moneypunct<char, false>::intl;
	template  locale::id moneypunct<char, true>::id;
	template  locale::id moneypunct<char, false>::id;
	template  locale::id money_get<char, istreambuf_iterator<char, char_traits<char>>>::id;
	template  locale::id money_put<char, ostreambuf_iterator<char, char_traits<char>>>::id;

	template  const bool moneypunct<wchar_t, true>::intl;
	template  const bool moneypunct<wchar_t, false>::intl;
	template  locale::id moneypunct<wchar_t, true>::id;
	template  locale::id moneypunct<wchar_t, false>::id;
	template  locale::id money_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t>>>::id;
	template  locale::id money_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t>>>::id;
#line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocmon"











#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocmon"





}



#pragma warning(pop)
#pragma pack(pop)
#line 941 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocmon"
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xlocmon"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ctime"

#pragma once






#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {








	typedef long clock_t;

	struct _timespec32
	{
		__time32_t tv_sec;
		long       tv_nsec;
	};

	struct _timespec64
	{
		__time64_t tv_sec;
		long       tv_nsec;
	};


	struct timespec
	{
		time_t tv_sec;
		long   tv_nsec;
	};
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"
















	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) int* __cdecl __daylight(void);




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) long* __cdecl __dstbias(void);




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) long* __cdecl __timezone(void);




	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char** __cdecl __tzname(void);




	__declspec(dllimport) errno_t __cdecl _get_daylight(
		int* _Daylight
	);


	__declspec(dllimport) errno_t __cdecl _get_dstbias(
		long* _DaylightSavingsBias
	);


	__declspec(dllimport) errno_t __cdecl _get_timezone(
		long* _TimeZone
	);


	__declspec(dllimport) errno_t __cdecl _get_tzname(
		size_t* _ReturnValue,
		char* _Buffer,
		size_t  _SizeInBytes,
		int     _Index
	);










	__declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl asctime(
			struct tm const* _Tm
		);




	__declspec(dllimport) errno_t __cdecl asctime_s(
		char* _Buffer,
		size_t           _SizeInBytes,
		struct tm const* _Tm
	);
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

	extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char(&_Buffer)[_Size], struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"


	__declspec(dllimport) clock_t __cdecl clock(void);



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _ctime32(
			__time32_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _ctime32_s(
		char* _Buffer,
		size_t            _SizeInBytes,
		__time32_t const* _Time
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char(&_Buffer)[_Size], __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"



	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) char* __cdecl _ctime64(
			__time64_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _ctime64_s(
		char* _Buffer,
		size_t            _SizeInBytes,
		__time64_t const* _Time
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char(&_Buffer)[_Size], __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"


	__declspec(dllimport) double __cdecl _difftime32(
		__time32_t _Time1,
		__time32_t _Time2
	);


	__declspec(dllimport) double __cdecl _difftime64(
		__time64_t _Time1,
		__time64_t _Time2
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) struct tm* __cdecl _gmtime32(
			__time32_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _gmtime32_s(
		struct tm* _Tm,
		__time32_t const* _Time
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) struct tm* __cdecl _gmtime64(
			__time64_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _gmtime64_s(
		struct tm* _Tm,
		__time64_t const* _Time
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) struct tm* __cdecl _localtime32(
			__time32_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _localtime32_s(
		struct tm* _Tm,
		__time32_t const* _Time
	);


	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		__declspec(dllimport) struct tm* __cdecl _localtime64(
			__time64_t const* _Time
		);


	__declspec(dllimport) errno_t __cdecl _localtime64_s(
		struct tm* _Tm,
		__time64_t const* _Time
	);


	__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
		struct tm* _Tm
	);


	__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
		struct tm* _Tm
	);


	__declspec(dllimport) __time32_t __cdecl _mktime32(
		struct tm* _Tm
	);


	__declspec(dllimport) __time64_t __cdecl _mktime64(
		struct tm* _Tm
	);



	__declspec(dllimport) size_t __cdecl strftime(
		char* _Buffer,
		size_t           _SizeInBytes,
		char const* _Format,
		struct tm const* _Tm
	);



	__declspec(dllimport) size_t __cdecl _strftime_l(
		char* _Buffer,
		size_t           _MaxSize,
		char const* _Format,
		struct tm const* _Tm,
		_locale_t        _Locale
	);


	__declspec(dllimport) errno_t __cdecl _strdate_s(
		char* _Buffer,
		size_t _SizeInBytes
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char(&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl _strdate(char* _Buffer);
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"


	__declspec(dllimport) errno_t __cdecl _strtime_s(
		char* _Buffer,
		size_t _SizeInBytes
	);

	extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char(&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime(char* _Buffer);
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

	__declspec(dllimport) __time32_t __cdecl _time32(
		__time32_t * _Time
	);

	__declspec(dllimport) __time64_t __cdecl _time64(
		__time64_t* _Time
	);



	__declspec(dllimport) int __cdecl _timespec32_get(
		struct _timespec32* _Ts,
		int                 _Base
	);



	__declspec(dllimport) int __cdecl _timespec64_get(
		struct _timespec64* _Ts,
		int                 _Base
	);










	__declspec(dllimport) void __cdecl _tzset(void);


	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
		__declspec(dllimport) unsigned __cdecl _getsystime(
			struct tm* _Tm
		);

	__declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
		__declspec(dllimport) unsigned __cdecl _setsystime(
			struct tm* _Tm,
			unsigned   _Milliseconds
		);

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"






















































































































	__declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		static __inline char* __cdecl ctime(
			time_t const* const _Time
		)
	{
#pragma warning(push)
#pragma warning(disable: 4996)
		return _ctime64(_Time);
#pragma warning(pop)
	}


	static __inline double __cdecl difftime(
		time_t const _Time1,
		time_t const _Time2
	)
	{
		return _difftime64(_Time1, _Time2);
	}

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		static __inline struct tm* __cdecl gmtime(
			time_t const* const _Time)
	{
#pragma warning(push)
#pragma warning(disable: 4996)
		return _gmtime64(_Time);
#pragma warning(pop)
	}

	__declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
		static __inline struct tm* __cdecl localtime(
			time_t const* const _Time
		)
	{
#pragma warning(push)
#pragma warning(disable: 4996)
		return _localtime64(_Time);
#pragma warning(pop)
	}


	static __inline time_t __cdecl _mkgmtime(
		struct tm* const _Tm
	)
	{
		return _mkgmtime64(_Tm);
	}


	static __inline time_t __cdecl mktime(
		struct tm* const _Tm
	)
	{
		return _mktime64(_Tm);
	}

	static __inline time_t __cdecl time(
		time_t* const _Time
	)
	{
		return _time64(_Time);
	}


	static __inline int __cdecl timespec_get(
		struct timespec* const _Ts,
		int              const _Base
	)
	{
		return _timespec64_get((struct _timespec64*)_Ts, _Base);
	}



	static __inline errno_t __cdecl ctime_s(
		char* const _Buffer,
		size_t        const _SizeInBytes,
		time_t const* const _Time
	)
	{
		return _ctime64_s(_Buffer, _SizeInBytes, _Time);
	}


	static __inline errno_t __cdecl gmtime_s(
		struct tm* const _Tm,
		time_t const* const _Time
	)
	{
		return _gmtime64_s(_Tm, _Time);
	}


	static __inline errno_t __cdecl localtime_s(
		struct tm* const _Tm,
		time_t const* const _Time
	)
	{
		return _localtime64_s(_Tm, _Time);
	}
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"













	__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"

#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\time.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ctime"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {
	using ::clock_t;
	using ::size_t;
	using ::time_t;
	using ::tm;
	using ::asctime;
	using ::clock;
	using ::ctime;
	using ::difftime;
	using ::gmtime;
	using ::localtime;
	using ::mktime;
	using ::strftime;
	using ::time;



#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ctime"
}



#pragma warning(pop)
#pragma pack(pop)

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ctime"
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\ctime"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"


#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	struct __declspec(dllimport) time_base : public locale::facet {
		enum dateorder {
			no_order,
			dmy,
			mdy,
			ymd,
			ydm
		};

		time_base(size_t _Refs = 0) : locale::facet(_Refs) {}

		~time_base() noexcept {}
	};


	template <class _Elem, class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem>>>
	class time_get : public time_base {
	private:
		friend _Tidy_guard<time_get>;

	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using char_type = _Elem;
		using iter_type = _InIt;
		using _Ctype    = ctype<_Elem>;

		static locale::id id;

		dateorder  date_order() const {
			return do_date_order();
		}

		_InIt  get_time(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt) const {
			return do_get_time(_First, _Last, _Iosbase, _State, _Pt);
		}

		_InIt  get_date(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt) const {
			return do_get_date(_First, _Last, _Iosbase, _State, _Pt);
		}

		_InIt  get_weekday(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt) const {
			return do_get_weekday(_First, _Last, _Iosbase, _State, _Pt);
		}

		_InIt  get_monthname(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt) const {
			return do_get_monthname(_First, _Last, _Iosbase, _State, _Pt);
		}

		_InIt  get_year(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt) const {
			return do_get_year(_First, _Last, _Iosbase, _State, _Pt);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State, tm* _Pt,
			char _Specifier, char _Modifier = '\0') const {
			return do_get(_First, _Last, _Iosbase, _State, _Pt, _Specifier, _Modifier);
		}

		_InIt  get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State, tm* _Pt,
			const _Elem* _Fmtfirst, const _Elem* _Fmtlast) const {
			_Adl_verify_range(_Fmtfirst, _Fmtlast);
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			_State = ios_base::goodbit;

			for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {
				if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {
					if (_Ctype_fac.is(_Ctype::space, *_Fmtfirst)) {
						while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
							++_First;
						}
					}
					else if (*_First != *_Fmtfirst) {
						_State |= ios_base::failbit;
						break;
					}
					else {
						++_First;
					}
				}
				else if (++_Fmtfirst == _Fmtlast) {
					if (*_First != _Fmtfirst[-1]) {
						_State |= ios_base::failbit;
					}
					else {
						++_First;
					}
					break;
				}
				else {
					char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					char _Modifier = '\0';
					_Elem _Percent = _Fmtfirst[-1];

					if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {
						if (++_Fmtfirst == _Fmtlast) {
							if (*_First != _Percent || ++_First == _Last || _Ctype_fac.narrow(*_First) != _Specifier) {
								_State |= ios_base::failbit;
							}
							else {
								++_First;
							}

							break;
						}
						else {
							_Modifier = _Specifier;
							_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
						}
					}

					_First = do_get(_First, _Last, _Iosbase, _State, _Pt, _Specifier, _Modifier);
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		explicit  time_get(size_t _Refs = 0) : time_base(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		time_get(const _Locinfo& _Lobj, size_t _Refs = 0)
			: time_base(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new time_get<_Elem, _InIt>(_Locinfo(_Ploc->c_str()));
			}

			return 5;
		}

	protected:
		virtual  ~time_get() noexcept {
			_Tidy();
		}

		time_get(const char* _Locname, size_t _Refs = 0)
			: time_base(_Refs) {
				{ _Locinfo _Lobj(_Locname);
				_Init(_Lobj);
				}
		}

		template <class _Elem2>
		void  _Getvals(_Elem2, const _Locinfo& _Lobj) {
			_Cvt = _Lobj._Getcvt();

			if (is_same_v<_Elem2, wchar_t>) {
				_Days = (const _Elem*)_Maklocwcs((const wchar_t*)_Lobj._W_Getdays());
				_Months = (const _Elem*)_Maklocwcs((const wchar_t*)_Lobj._W_Getmonths());
				_Ampm = (const _Elem*)_Maklocwcs(L":AM:am:PM:pm");
			}
			else {
				_Days = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);
				_Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);
				_Ampm = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);
			}
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Days = nullptr;
			_Months = nullptr;
			_Ampm = nullptr;

			_Tidy_guard<time_get> _Guard{ this };
			_Getvals((_Elem)0, _Lobj);
			_Dateorder = (dateorder)_Lobj._Getdateorder();
			_Guard._Target = nullptr;
		}

		virtual dateorder  do_date_order() const {
			return _Dateorder;
		}

		virtual _InIt  do_get_time(_InIt _First, _InIt _Last, ios_base& _Iosbase,
			ios_base::iostate& _State, tm* _Pt) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			_State |= _Getint(_First, _Last, 0, 23, _Pt->tm_hour, _Ctype_fac);

			if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':') {
				_State |= ios_base::failbit;
			}
			else {
				_State |= _Getint(++_First, _Last, 0, 59, _Pt->tm_min, _Ctype_fac);
			}

			if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':') {
				_State |= ios_base::failbit;
			}
			else {
				_State |= _Getint(++_First, _Last, 0, 59, _Pt->tm_sec, _Ctype_fac);
			}

			return _First;
		}

		virtual _InIt  do_get_date(_InIt _First, _InIt _Last, ios_base& _Iosbase,
			ios_base::iostate& _State, tm* _Pt) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			dateorder _Dorder = date_order();
			if (_Dorder == no_order) {
				_Dorder = mdy;
			}

			if (_First != _Last) {
				if (!_Ctype_fac.is(_Ctype::digit, *_First)) {
					_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
					_Dorder = mdy;
				}
				else if (_Dorder == mdy) {
					_State |= _Getint(_First, _Last, 1, 12, _Pt->tm_mon, _Ctype_fac);
					--_Pt->tm_mon;
				}
				else if (_Dorder == dmy) {
					_State |= _Getint(_First, _Last, 1, 31, _Pt->tm_mday, _Ctype_fac);
				}
				else {
					_First = get_year(_First, _Last, _Iosbase, _State, _Pt);
				}
			}

			while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
				++_First;
			}

			if (_First != _Last) {
				char _Ch = _Ctype_fac.narrow(*_First);
				if (_Ch == ':' || _Ch == ',' || _Ch == '/') {
					++_First;
				}
			}

			while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
				++_First;
			}

			if (_First != _Last) {
				if (!_Ctype_fac.is(_Ctype::digit, *_First)) {
					if (_Dorder == mdy) {
						_State |= ios_base::failbit;
					}
					else {
						_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
						if (_Dorder == ydm) {
							_Dorder = ymd;
						}
					}
				}
				else if (_Dorder == dmy || _Dorder == ymd) {
					_State |= _Getint(_First, _Last, 1, 12, _Pt->tm_mon, _Ctype_fac);
					--_Pt->tm_mon;
				}
				else {
					_State |= _Getint(_First, _Last, 1, 31, _Pt->tm_mday, _Ctype_fac);
				}
			}

			while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
				++_First;
			}

			if (_First != _Last) {
				char _Ch = _Ctype_fac.narrow(*_First);
				if (_Ch == ':' || _Ch == ',' || _Ch == '/') {
					++_First;
				}
			}

			while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
				++_First;
			}

			if (_First == _Last) {
				_State |= ios_base::failbit;
			}
			else if (!_Ctype_fac.is(_Ctype::digit, *_First)) {
				if (_Dorder != ydm) {
					_State |= ios_base::failbit;
				}
				else {
					_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
				}
			}
			else if (_Dorder == ydm) {
				_State |= _Getint(_First, _Last, 1, 12, _Pt->tm_mon, _Ctype_fac);
				--_Pt->tm_mon;
			}
			else if (_Dorder == ymd) {
				_State |= _Getint(_First, _Last, 1, 31, _Pt->tm_mday, _Ctype_fac);
			}
			else {
				_First = get_year(_First, _Last, _Iosbase, _State, _Pt);
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		virtual _InIt  do_get_weekday(_InIt _First, _InIt _Last, ios_base&, ios_base::iostate& _State,
			tm* _Pt) const {
			int _Num = _Getloctxt(_First, _Last, (size_t)0, _Days);
			if (_Num < 0) {
				_State |= ios_base::failbit;
			}
			else {
				_Pt->tm_wday = _Num >> 1;
			}

			return _First;
		}

		virtual _InIt  do_get_monthname(_InIt _First, _InIt _Last, ios_base&, ios_base::iostate& _State,
			tm* _Pt) const {
			int _Num = _Getloctxt(_First, _Last, (size_t)0, _Months);

			if (_Num < 0) {
				_State |= ios_base::failbit;
			}
			else {
				_Pt->tm_mon = _Num >> 1;
			}

			return _First;
		}

		virtual _InIt  do_get_year(_InIt _First, _InIt _Last, ios_base& _Iosbase,
			ios_base::iostate& _State, tm* _Pt) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			int _Ans = 0;
			ios_base::iostate _Res = _Getint(_First, _Last, 0, 9999, _Ans, _Ctype_fac);

			_State |= _Res;
			if (!(_Res & ios_base::failbit)) {
				if (_Ans < 69) {
					_Pt->tm_year = _Ans + 100;
				}
				else if (_Ans < 100) {
					_Pt->tm_year = _Ans;
				}
				else {
					_Pt->tm_year = _Ans - 1900;
				}
			}

			return _First;
		}

		virtual _InIt  do_get(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State,
			tm* _Pt, char _Specifier, char = 0) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());
			int _Ans = 0;

			_State = ios_base::goodbit;

			switch (_Specifier) {
			case 'a':
			case 'A':
				_First = get_weekday(_First, _Last, _Iosbase, _State, _Pt);
				break;

			case 'b':
			case 'B':
			case 'h':
				_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
				break;

			case 'c':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%b %d %H : %M : %S %Y");
				break;

			case 'C':
				_State |= _Getint(_First, _Last, 0, 99, _Ans, _Ctype_fac);
				if (!(_State & ios_base::failbit)) {
					_Pt->tm_year = _Ans * 100 - 1900;
				}

				break;

			case 'd':
			case 'e':
				_State |= _Getint(_First, _Last, 1, 31, _Pt->tm_mday, _Ctype_fac);
				break;

			case 'D':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%m / %d / %y");
				break;

			case 'H':
				_State |= _Getint(_First, _Last, 0, 23, _Pt->tm_hour, _Ctype_fac);
				break;

			case 'I':
				_State |= _Getint(_First, _Last, 1, 12, _Ans, _Ctype_fac);
				if (!(_State & ios_base::failbit)) {
					_Pt->tm_hour = _Ans == 12 ? 0 : _Ans;
				}

				break;

			case 'j':
				_State |= _Getint(_First, _Last, 1, 366, _Pt->tm_yday, _Ctype_fac);
				break;

			case 'm':
				_State |= _Getint(_First, _Last, 1, 12, _Ans, _Ctype_fac);
				if (!(_State & ios_base::failbit)) {
					_Pt->tm_mon = _Ans - 1;
				}

				break;

			case 'M':
				_State |= _Getint(_First, _Last, 0, 59, _Pt->tm_min, _Ctype_fac);
				break;

			case 'n':
			case 't':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, " ");
				break;

			case 'p':
				_Ans = _Getloctxt(_First, _Last, (size_t)0, ":AM:am:PM:pm");
				if (_Ans < 0) {
					_State |= ios_base::failbit;
				}
				else if (1 < _Ans) {
					_Pt->tm_hour += 12;
				}

				break;

			case 'r':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%I : %M : %S %p");
				break;

			case 'R':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%H : %M");
				break;

			case 'S':
				_State |= _Getint(_First, _Last, 0, 60, _Pt->tm_sec, _Ctype_fac);
				break;

			case 'T':
			case 'X':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%H : %M : %S");
				break;

			case 'U':
				_State |= _Getint(_First, _Last, 0, 53, _Pt->tm_yday, _Ctype_fac);
				break;

			case 'w':
				_State |= _Getint(_First, _Last, 0, 6, _Pt->tm_wday, _Ctype_fac);
				break;

			case 'W':
				_State |= _Getint(_First, _Last, 0, 53, _Pt->tm_yday, _Ctype_fac);
				break;

			case 'x':
				_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt, "%d / %m / %y");
				break;

			case 'y':
				_State |= _Getint(_First, _Last, 0, 99, _Ans, _Ctype_fac);
				if (!(_State & ios_base::failbit)) {
					_Pt->tm_year = _Ans < 69 ? _Ans + 100 : _Ans;
				}

				break;

			case 'Y':
				_First = get_year(_First, _Last, _Iosbase, _State, _Pt);
				break;

			default:
				_State |= ios_base::failbit;
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

		_InIt  _Getfmt(_InIt _First, _InIt _Last, ios_base& _Iosbase, ios_base::iostate& _State, tm* _Pt,
			const char* _Fmtfirst) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			for (; *_Fmtfirst != '\0'; ++_Fmtfirst) {
				if (*_Fmtfirst == '%') {
					_First = do_get(_First, _Last, _Iosbase, _State, _Pt,
						*++_Fmtfirst);
				}
				else if (*_Fmtfirst == ' ') {
					while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First)) {
						++_First;
					}
				}
				else if (_Ctype_fac.narrow(*_First) != *_Fmtfirst) {
					_State |= ios_base::failbit;
					break;
				}
				else {
					++_First;
				}
			}

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			return _First;
		}

	private:
		ios_base::iostate __cdecl _Getint(_InIt& _First, _InIt& _Last, int _Lo, int _Hi, int& _Val,
			const _Ctype& _Ctype_fac) const {
			char _Ac[32], * _Ep;
			char* _Ptr = _Ac;
			char _Ch;

			if (_First != _Last) {
				if ((_Ch = _Ctype_fac.narrow(*_First)) == '+') {
					*_Ptr++ = '+';
					++_First;
				}
				else if (_Ch == '-') {
					*_Ptr++ = '-';
					++_First;
				}
			}

			bool _Seendigit = false;

			for (; _First != _Last && _Ctype_fac.narrow(*_First) == '0'; ++_First) {
				_Seendigit = true;
			}

			if (_Seendigit) {
				*_Ptr++ = '0';
			}

			for (char* const _Pe = &_Ac[32 - 1];
				_First != _Last && '0' <= (_Ch = _Ctype_fac.narrow(*_First)) && _Ch <= '9';
				_Seendigit = true, (void) ++_First) {
				*_Ptr = _Ch;
				if (_Ptr < _Pe) {
					++_Ptr;
				}
			}

			if (!_Seendigit) {
				_Ptr = _Ac;
			}

			*_Ptr = '\0';
			int _Errno = 0;
			const long _Ans = ::_Stolx(_Ac, &_Ep, 10, &_Errno);
			ios_base::iostate _State = ios_base::goodbit;

			if (_First == _Last) {
				_State |= ios_base::eofbit;
			}

			if (_Ep == _Ac || _Errno != 0 || _Ans < _Lo || _Hi < _Ans) {
				_State |= ios_base::failbit;
			}
			else {
				_Val = _Ans;
			}

			return _State;
		}

		void  _Tidy() noexcept {
			::free((void*)_Days);
			::free((void*)_Months);
			::free((void*)_Ampm);
		}

		const _Elem* _Days;
		const _Elem* _Months;
		const _Elem* _Ampm;
		dateorder _Dateorder;
		_Locinfo::_Cvtvec _Cvt;
	};







	template <class _Elem, class _InIt>
	locale::id time_get<_Elem, _InIt>::id;






	template <class _Elem, class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem>>>
	class time_get_byname : public time_get<_Elem, _InIt> {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit time_get_byname(const char* _Locname, size_t _Refs = 0)
			: time_get<_Elem, _InIt>(_Locname, _Refs) {
		}

		explicit time_get_byname(const string& _Str, size_t _Refs = 0)
			: time_get<_Elem, _InIt>(_Locinfo(_Str.c_str()), _Refs) {
		}

	protected:
		virtual  ~time_get_byname() noexcept {}
	};


	template <class _Elem, class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem>>>
	class time_put : public locale::facet {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t, unsigned short>,
			"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		using char_type = _Elem;
		using iter_type = _OutIt;
		using _Ctype    = ctype<_Elem>;

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const tm* _Pt, const _Elem* _Fmtfirst,
			const _Elem* _Fmtlast) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {
				if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {
					*_Dest++ = *_Fmtfirst;
				}
				else if (++_Fmtfirst == _Fmtlast) {
					*_Dest++ = _Fmtfirst[-1];
					break;
				}
				else {
					char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					char _Modifier = '\0';
					_Elem _Percent = _Fmtfirst[-1];

					if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {
						if (++_Fmtfirst == _Fmtlast) {
							*_Dest++ = _Percent;
							*_Dest++ = _Specifier;
							break;
						}


						_Modifier = _Specifier;
						_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

					_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier);
				}
			}

			return _Dest;
		}

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const tm* _Pt, char _Specifier,
			char _Modifier = '\0') const {
			return do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier);
		}

		static locale::id id;

		explicit  time_put(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
			: locale::facet(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));
			}

			return 5;
		}

	protected:
		virtual  ~time_put() noexcept {}

		void  _Init(const _Locinfo& _Lobj) {
			_Tnames = _Lobj._Gettnames();
		}

		virtual _OutIt  do_put(_OutIt _Dest, ios_base&, _Elem, const tm* _Pt, char _Specifier,
			char _Modifier = '\0') const {
			char _Fmt[5] = "!%x\0";
			size_t _Count, _Num;
			string _Str;

			if (_Modifier == '\0') {
				_Fmt[2] = _Specifier;
			}
			else {
				_Fmt[2] = _Modifier;
				_Fmt[3] = _Specifier;
			}

			for (_Num = 16;; _Num *= 2) {
				_Str.append(_Num, '\0');
				if (0 < (_Count = _Strftime(&*_Str.begin(), _Str.size(), _Fmt, _Pt, _Tnames._Getptr()))) {
					break;
				}
			}

			return ::std::copy(&_Str[1], &_Str[_Count], _Dest);
		}

	private:
		_Locinfo::_Timevec _Tnames;
	};







	template <class _Elem, class _OutIt>
	locale::id time_put<_Elem, _OutIt>::id;






	template <class _OutIt>
	class __declspec(dllimport) time_put<wchar_t, _OutIt>
		: public locale::facet {
	public:
		using _Elem     = wchar_t;
		using char_type = _Elem;
		using iter_type = _OutIt;
		using _Ctype    = ctype<_Elem>;

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const tm* _Pt, const _Elem* _Fmtfirst,
			const _Elem* _Fmtlast) const {
			const _Ctype& _Ctype_fac = ::std::use_facet<_Ctype>(_Iosbase.getloc());

			for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst) {
				if (_Ctype_fac.narrow(*_Fmtfirst) != '%') {
					*_Dest++ = *_Fmtfirst;
				}
				else if (++_Fmtfirst == _Fmtlast) {
					*_Dest++ = _Fmtfirst[-1];
					break;
				}
				else {
					_Elem _Raw = *_Fmtfirst;
					char _Specifier = _Ctype_fac.narrow(_Raw);
					char _Modifier = '\0';
					_Elem _Percent = _Fmtfirst[-1];

					if (_Specifier == 'E' || _Specifier == 'O' || _Specifier == 'Q' || _Specifier == '#') {
						if (++_Fmtfirst == _Fmtlast) {
							*_Dest++ = _Percent;
							*_Dest++ = _Raw;
							break;
						}


						_Modifier = _Specifier;
						_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

					_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier);
				}
			}

			return _Dest;
		}

		_OutIt  put(_OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const tm* _Pt, char _Specifier,
			char _Modifier = '\0') const {
			return do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier);
		}

		static locale::id id;

		explicit  time_put(size_t _Refs = 0) : locale::facet(_Refs) {
			{ _Locinfo _Lobj;
			_Init(_Lobj);
			}
		}

		time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
			: locale::facet(_Refs) {
			_Init(_Lobj);
		}

		static size_t __cdecl _Getcat(const locale::facet** _Ppf = nullptr,
			const locale* _Ploc = nullptr) {
			if (_Ppf != nullptr && *_Ppf == nullptr) {
				*_Ppf = new time_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));
			}

			return 5;
		}

	protected:
		virtual  ~time_put() noexcept {}

		time_put(const char* _Locname, size_t _Refs = 0)
			: locale::facet(_Refs) {
				{ _Locinfo _Lobj(_Locname);
				_Init(_Lobj);
				}
		}

		void  _Init(const _Locinfo& _Lobj) {
			_Tnames = _Lobj._W_Gettnames();
		}

		virtual _OutIt  do_put(_OutIt _Dest, ios_base&, _Elem, const tm* _Pt, char _Specifier,
			char _Modifier = '\0') const {
			wchar_t _Fmt[5] = L"!%x\0";
			size_t _Count, _Num;
			wstring _Str;

			if (_Modifier == '\0') {
				_Fmt[2] = (_Elem)_Specifier;
			}
			else {
				_Fmt[2] = (_Elem)_Modifier;
				_Fmt[3] = (_Elem)_Specifier;
			}

			for (_Num = 16;; _Num *= 2) {
				_Str.append(_Num, '\0');
				if (0 < (_Count = _Wcsftime(&*_Str.begin(), _Str.size(), _Fmt, _Pt, _Tnames._Getptr()))) {
					break;
				}
			}
			return ::std::copy(&_Str[1], &_Str[_Count], _Dest);
		}

	private:
		_Locinfo::_Timevec _Tnames;
	};







	template <class _OutIt>
	locale::id time_put<wchar_t, _OutIt>::id;



































































































































#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"


	template <class _Elem, class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem>>>
	class time_put_byname : public time_put<_Elem, _OutIt> {
	public:
		static_assert(!0 || _Is_any_of_v<_Elem, char, wchar_t>, "Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. " "Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 " "to suppress this diagnostic.");

		explicit time_put_byname(const char* _Locname, size_t _Refs = 0)
			: time_put<_Elem, _OutIt>(_Locname, _Refs) {
		}

		explicit time_put_byname(const string& _Str, size_t _Refs = 0)
			: time_put<_Elem, _OutIt>(_Str.c_str(), _Refs) {
		}

	protected:
		virtual  ~time_put_byname() noexcept {}
	};




	template class __declspec(dllimport) time_get<char, istreambuf_iterator<char, char_traits<char>>>;
	template class __declspec(dllimport) time_put<char, ostreambuf_iterator<char, char_traits<char>>>;
	template  void  time_get<char, istreambuf_iterator<char, char_traits<char>>>::_Getvals(
		wchar_t, const _Locinfo&);

	template class __declspec(dllimport) time_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t>>>;
	template class __declspec(dllimport) time_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t>>>;
	template  void
		time_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t>>>::_Getvals(wchar_t, const _Locinfo&);
#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"










#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"
}



#pragma warning(pop)
#pragma pack(pop)
#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"
#line 1053 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xloctime"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Elem>
	struct _Fillobj {
		_Fillobj(_Elem _Ch) : _Fill(_Ch) {
		}

		_Elem _Fill;
	};


	template <class _Elem>
	inline _Fillobj<_Elem> setfill(_Elem _Ch) {
		return _Fillobj<_Elem>(_Ch);
	}

	template <class _Elem, class _Traits, class _Elem2>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr,
		const _Fillobj<_Elem2>& _Manip) {
		static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for setfill");

		_Istr.fill(_Manip._Fill);
		return _Istr;
	}

	template <class _Elem, class _Traits, class _Elem2>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Fillobj<_Elem2>& _Manip) {
		static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for setfill");

		_Ostr.fill(_Manip._Fill);
		return _Ostr;
	}


	template <class _Money>
	struct _Monobj {
		_Monobj(_Money& _Val_arg, bool _Intl_arg)
			: _Val(_Val_arg), _Intl(_Intl_arg) {
		}

		_Money& _Val;
		bool _Intl;

		_Monobj& operator=(const _Monobj&) = delete;
	};


	template <class _Money>
	inline _Monobj<_Money> get_money(_Money& _Val_arg, bool _Intl_arg = false) {
		return _Monobj<_Money>(_Val_arg, _Intl_arg);
	}

	template <class _Elem, class _Traits, class _Money>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr,
		const _Monobj<_Money>& _Manip) {
		using _Myis   = basic_istream<_Elem, _Traits>;
		using _Iter   = istreambuf_iterator<_Elem, _Traits>;
		using _Mymget = money_get<_Elem, _Iter>;

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr);

		if (_Ok) {
			const _Mymget& _Mget_fac = ::std::use_facet<_Mymget>(_Istr.getloc());
			try {
				_Mget_fac.get(_Iter(_Istr.rdbuf()), _Iter(nullptr), _Manip._Intl, _Istr, _State, _Manip._Val);
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

		_Istr.setstate(_State);
		return _Istr;
	}


	template <class _Money>
	inline _Monobj<const _Money> put_money(
		const _Money& _Val_arg, bool _Intl_arg = false) {
		return _Monobj<const _Money>(_Val_arg, _Intl_arg);
	}

	template <class _Elem, class _Traits, class _Money>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Monobj<_Money>& _Manip) {
		using _Myos   = basic_ostream<_Elem, _Traits>;
		using _Iter   = ostreambuf_iterator<_Elem, _Traits>;
		using _Mymput = money_put<_Elem, _Iter>;

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myos::sentry _Ok(_Ostr);

		if (_Ok) {
			const _Mymput& _Mput_fac = ::std::use_facet<_Mymput>(_Ostr.getloc());
			try {
				if (_Mput_fac.put(_Iter(_Ostr.rdbuf()), _Manip._Intl, _Ostr, _Ostr.fill(), _Manip._Val).failed()) {
					_State |= ios_base::badbit;
				}
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}


	template <class _Elem,
		class _Ptr>
		struct _Timeobj {
		_Timeobj(_Ptr _Tptr_arg, const _Elem* _Fmt_arg)
			: _Tptr(_Tptr_arg), _Fmtfirst(_Fmt_arg) {
			for (_Fmtlast = _Fmtfirst; *_Fmtlast != 0; ++_Fmtlast) {
			}
		}

		_Ptr _Tptr;
		const _Elem* _Fmtfirst;
		const _Elem* _Fmtlast;
	};


	template <class _Elem>
	_Timeobj<_Elem, struct tm*> get_time(
		struct tm* _Tptr_arg, const _Elem* _Fmt_arg) {
		return _Timeobj<_Elem, struct tm*>(_Tptr_arg, _Fmt_arg);
	}

	template <class _Elem, class _Traits, class _Elem2>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr,
		const _Timeobj<_Elem2, struct tm*>& _Manip) {
		using _Myis   = basic_istream<_Elem, _Traits>;
		using _Iter   = istreambuf_iterator<_Elem, _Traits>;
		using _Mytget = time_get<_Elem2, _Iter>;

		static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for get_time");

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr);

		if (_Ok) {
			const _Mytget& _Tget_fac = ::std::use_facet<_Mytget>(_Istr.getloc());
			try {
				_Tget_fac.get(
					_Iter(_Istr.rdbuf()), _Iter(nullptr), _Istr, _State, _Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast);
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

		_Istr.setstate(_State);
		return _Istr;
	}


	template <class _Elem>
	inline _Timeobj<_Elem, const struct tm*> put_time(
		const struct tm* _Tptr_arg, const _Elem* _Fmt_arg) {
		return _Timeobj<_Elem, const struct tm*>(_Tptr_arg, _Fmt_arg);
	}

	template <class _Elem, class _Traits, class _Elem2>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Timeobj<_Elem2, const struct tm*>& _Manip) {
		using _Myos   = basic_ostream<_Elem, _Traits>;
		using _Iter   = ostreambuf_iterator<_Elem, _Traits>;
		using _Mytput = time_put<_Elem2, _Iter>;

		static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for put_time");

		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myos::sentry _Ok(_Ostr);

		if (_Ok) {
			const _Mytput& _Tput_fac = ::std::use_facet<_Mytput>(_Ostr.getloc());
			try {
				if (_Tput_fac.put(_Iter(_Ostr.rdbuf()), _Ostr, _Ostr.fill(), _Manip._Tptr, _Manip._Fmtfirst, _Manip._Fmtlast)
					.failed()) {
					_State |= ios_base::badbit;
				}
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}


	template <class _Elem, class _Traits,
		class _Alloc>
		struct _Quote_in {
		using _Mystr = basic_string<_Elem, _Traits, _Alloc>;

		_Quote_in(_Mystr& _Str_obj, _Elem _Delim_obj, _Elem _Escape_obj)
			: _Str(_Str_obj), _Delim(_Delim_obj), _Escape(_Escape_obj) {
		}

		_Mystr& _Str;
		_Elem _Delim;
		_Elem _Escape;

		_Quote_in& operator=(const _Quote_in&) = delete;
	};


	template <class _Elem, class _Traits,
		class _Sizet>
		struct _Quote_out {
		_Quote_out(const _Elem* _Ptr_obj, _Sizet _Size_obj, _Elem _Delim_obj, _Elem _Escape_obj)
			: _Ptr(_Ptr_obj), _Size(_Size_obj), _Delim(_Delim_obj),
			_Escape(_Escape_obj) {
		}

		const _Elem* _Ptr;
		_Sizet _Size;
		_Elem _Delim;
		_Elem _Escape;

		_Quote_out& operator=(const _Quote_out&) = delete;
	};


	template <class _Elem>
	inline _Quote_out<_Elem, void, size_t> quoted(const _Elem* _Ptr, _Elem _Delim = _Elem('"'),
		_Elem _Escape = _Elem('\\')) {
		size_t _Size = 0;
		while (_Ptr[_Size] != _Elem(0)) {
			++_Size;
		}

		return _Quote_out<_Elem, void, size_t>(_Ptr, _Size, _Delim, _Escape);
	}

	template <class _Elem, class _Traits, class _Alloc>
	_Quote_out<_Elem, _Traits, typename basic_string<_Elem, _Traits, _Alloc>::size_type> quoted(
		const basic_string<_Elem, _Traits, _Alloc>& _Str, _Elem _Delim = _Elem('"'),
		_Elem _Escape = _Elem('\\')) {
		using _Qobj = _Quote_out<_Elem, _Traits, typename basic_string<_Elem, _Traits, _Alloc>::size_type>;
		return _Qobj(_Str.c_str(), _Str.size(), _Delim, _Escape);
	}









#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"

	template <class _Elem, class _Traits, class _Alloc>
	_Quote_in<_Elem, _Traits, _Alloc> quoted(basic_string<_Elem, _Traits, _Alloc>& _Str,
		_Elem _Delim = _Elem('"'),
		_Elem _Escape = _Elem('\\')) {
		return _Quote_in<_Elem, _Traits, _Alloc>(_Str, _Delim, _Escape);
	}


	template <class _Elem, class _Traits, class _QuTraits, class _Sizet>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Quote_out<_Elem, _QuTraits, _Sizet>& _Manip) {
		static_assert(
			is_void_v<_QuTraits> || is_same_v<_QuTraits, _Traits>, "quoted() traits must match basic_ostream traits");

		using _Myos = basic_ostream<_Elem, _Traits>;

		const _Elem* const _Last = _Manip._Ptr + _Manip._Size;

		_Sizet _Size = _Manip._Size + 2;
		for (const _Elem* _Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr) {
			if (_Traits::eq(*_Ptr, _Manip._Delim) || _Traits::eq(*_Ptr, _Manip._Escape)) {
				++_Size;
			}
		}

		ios_base::iostate _State = ios_base::goodbit;
		_Sizet _Pad = _Ostr.width() <= 0 || (_Sizet)_Ostr.width() <= _Size ? 0 : (_Sizet)_Ostr.width() - _Size;
		const typename _Myos::sentry _Ok(_Ostr);

		if (!_Ok) {
			_State |= ios_base::badbit;
		}
		else {
			try {
				if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				if (_State == ios_base::goodbit
					&& _Traits::eq_int_type(_Traits::eof(),
						_Ostr.rdbuf()->sputc(_Manip._Delim))) {
					_State |= ios_base::badbit;
				}

				for (const _Elem* _Ptr = _Manip._Ptr; _Ptr != _Last; ++_Ptr) {
					if ((_Traits::eq(*_Ptr, _Manip._Delim) || _Traits::eq(*_Ptr, _Manip._Escape)) && _State == ios_base::goodbit
						&& _Traits::eq_int_type(_Traits::eof(),
							_Ostr.rdbuf()->sputc(_Manip._Escape))) {
						_State |= ios_base::badbit;
						break;
					}

					if (_State == ios_base::goodbit
						&& _Traits::eq_int_type(_Traits::eof(),
							_Ostr.rdbuf()->sputc(*_Ptr))) {
						_State |= ios_base::badbit;
						break;
					}
				}

				if (_State == ios_base::goodbit
					&& _Traits::eq_int_type(_Traits::eof(),
						_Ostr.rdbuf()->sputc(_Manip._Delim))) {
					_State |= ios_base::badbit;
				}

				if (_State == ios_base::goodbit) {
					for (; 0 < _Pad; --_Pad) {
						if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {
							_State |= ios_base::badbit;
							break;
						}
					}
				}

				_Ostr.width(0);
			}
			catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

		_Ostr.setstate(_State);
		return _Ostr;
	}

	template <class _Elem, class _Traits, class _Alloc>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Quote_in<_Elem, _Traits, _Alloc>& _Manip) {
		using _Mystr = basic_string<_Elem, _Traits, _Alloc>;

		const _Mystr& _Ref = _Manip._Str;
		return _Ostr << ::std::quoted(_Ref, _Manip._Delim, _Manip._Escape);
	}


	template <class _Elem, class _Traits, class _Alloc>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr,
		const _Quote_in<_Elem, _Traits, _Alloc>& _Manip) {
		ios_base::iostate _State = ios_base::goodbit;
		const typename basic_istream<_Elem, _Traits>::sentry _Ok(_Istr);

		if (_Ok) {
			try {
				const auto _Buf = _Istr.rdbuf();
				auto& _Str = _Manip._Str;
				const auto _Delim = _Traits::to_int_type(_Manip._Delim);
				auto _Meta = _Buf->sgetc();

				if (!_Traits::eq_int_type(_Meta, _Delim)) {
					return _Istr >> _Str;
				}

				const auto _Escape = _Traits::to_int_type(_Manip._Escape);
				_Str.clear();
				for (;;) {
					_Meta = _Buf->snextc();
					if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
						_State = ios_base::eofbit | ios_base::failbit;
						break;
					}
					else if (_Traits::eq_int_type(_Meta, _Escape)) {
						_Meta = _Buf->snextc();
						if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {
							_State = ios_base::eofbit | ios_base::failbit;
							break;
						}
					}
					else if (_Traits::eq_int_type(_Meta, _Delim)) {
						if (_Traits::eq_int_type(_Traits::eof(), _Buf->sbumpc())) {
							_State = ios_base::eofbit;
						}

						break;
					}

					_Str.push_back(_Traits::to_char_type(_Meta));
				}
			}
			catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

		_Istr.setstate(_State);
		return _Istr;
	}


	template <class _Arg>
	struct _Smanip {
		_Smanip(void(__cdecl* _Left)(ios_base&, _Arg), _Arg _Val)
			: _Pfun(_Left), _Manarg(_Val) {
		}

		void(__cdecl* _Pfun)(ios_base&, _Arg);
		_Arg _Manarg;
	};

	template <class _Elem, class _Traits, class _Arg>
	inline basic_istream<_Elem, _Traits>& operator>>(basic_istream<_Elem, _Traits>& _Istr,
		const _Smanip<_Arg>& _Manip) {
		(*_Manip._Pfun)(_Istr, _Manip._Manarg);
		return _Istr;
	}

	template <class _Elem, class _Traits, class _Arg>
	inline basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
		const _Smanip<_Arg>& _Manip) {
		(*_Manip._Pfun)(_Ostr, _Manip._Manarg);
		return _Ostr;
	}


	_Smanip<ios_base::fmtflags> __cdecl resetiosflags(ios_base::fmtflags);
	_Smanip<ios_base::fmtflags> __cdecl setiosflags(ios_base::fmtflags);
	_Smanip<int> __cdecl setbase(int);
	_Smanip<streamsize> __cdecl setprecision(streamsize);
	_Smanip<streamsize> __cdecl setw(streamsize);
}


#pragma warning(pop)
#pragma pack(pop)
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iomanip"





#line 57 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

#pragma once







#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Mytree, class _Base = _Iterator_base0>
	class _Tree_unchecked_const_iterator : public _Base {
	public:
		using iterator_category = bidirectional_iterator_tag;

		using _Nodeptr        = typename _Mytree::_Nodeptr;
		using value_type      = typename _Mytree::value_type;
		using difference_type = typename _Mytree::difference_type;
		using pointer         = typename _Mytree::const_pointer;
		using reference       = const value_type &;

		_Tree_unchecked_const_iterator() : _Ptr() {}

		_Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) : _Ptr(_Pnode) {
			this->_Adopt(_Plist);
		}

		reference operator*() const {
			return _Ptr->_Myval;
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_Tree_unchecked_const_iterator& operator++() {
			if (_Ptr->_Right->_Isnil) {
				_Nodeptr _Pnode;
				while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {
					_Ptr = _Pnode;
				}

				_Ptr = _Pnode;
			}
			else {
				_Ptr = _Mytree::_Min(_Ptr->_Right);
			}

			return *this;
		}

		_Tree_unchecked_const_iterator operator++(int) {
			_Tree_unchecked_const_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		_Tree_unchecked_const_iterator& operator--() {
			if (_Ptr->_Isnil) {
				_Ptr = _Ptr->_Right;
			}
			else if (_Ptr->_Left->_Isnil) {
				_Nodeptr _Pnode;
				while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {
					_Ptr = _Pnode;
				}

				if (!_Ptr->_Isnil) {
					_Ptr = _Pnode;
				}
			}
			else {
				_Ptr = _Mytree::_Max(_Ptr->_Left);
			}

			return *this;
		}

		_Tree_unchecked_const_iterator operator--(int) {
			_Tree_unchecked_const_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		bool operator==(const _Tree_unchecked_const_iterator& _Right) const {
			return _Ptr == _Right._Ptr;
		}

		bool operator!=(const _Tree_unchecked_const_iterator& _Right) const {
			return !(*this == _Right);
		}

		bool operator==(_Default_sentinel) const noexcept {
			return _Ptr->_Isnil;
		}

		bool operator!=(_Default_sentinel) const noexcept {
			return !_Ptr->_Isnil;
		}

		_Nodeptr _Ptr;
	};


	template <class _Mytree>
	class _Tree_unchecked_iterator : public _Tree_unchecked_const_iterator<_Mytree> {
	public:
		using _Mybase           = _Tree_unchecked_const_iterator<_Mytree>;
		using iterator_category = bidirectional_iterator_tag;

		using _Nodeptr        = typename _Mytree::_Nodeptr;
		using value_type      = typename _Mytree::value_type;
		using difference_type = typename _Mytree::difference_type;
		using pointer         = typename _Mytree::pointer;
		using reference       = value_type &;

		_Tree_unchecked_iterator() {}

		_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) : _Mybase(_Pnode, _Plist) {}

		reference operator*() const {
			return const_cast<reference>(_Mybase::operator*());
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_Tree_unchecked_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		_Tree_unchecked_iterator operator++(int) {
			_Tree_unchecked_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		_Tree_unchecked_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		_Tree_unchecked_iterator operator--(int) {
			_Tree_unchecked_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}
	};


	template <class _Mytree>
	class _Tree_const_iterator : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> {
	public:
		using _Mybase           = _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>;
		using iterator_category = bidirectional_iterator_tag;

		using _Nodeptr        = typename _Mytree::_Nodeptr;
		using value_type      = typename _Mytree::value_type;
		using difference_type = typename _Mytree::difference_type;
		using pointer         = typename _Mytree::const_pointer;
		using reference       = const value_type &;

		_Tree_const_iterator() : _Mybase() {}

		_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) : _Mybase(_Pnode, _Plist) {}

		reference operator*() const {

			const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
			do { if (_Mycont) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 179, 0, "%s", "cannot dereference value-initialized map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 179, 0); } while (false); }; } while (false);
			do { if (this->_Ptr != _Mycont->_Myhead) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 180, 0, "%s", "cannot dereference end map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference end map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 180, 0); } while (false); }; } while (false);
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

			return this->_Ptr->_Myval;
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_Tree_const_iterator& operator++() {

			do { if (this->_Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 192, 0, "%s", "cannot increment value-initialized map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 192, 0); } while (false); }; } while (false);
			do { if (!this->_Ptr->_Isnil) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 193, 0, "%s", "cannot increment end map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment end map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 193, 0); } while (false); }; } while (false);
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

			_Mybase::operator++();
			return *this;
		}

		_Tree_const_iterator operator++(int) {
			_Tree_const_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		_Tree_const_iterator& operator--() {

			do { if (this->_Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 208, 0, "%s", "cannot decrement value-initialized map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 208, 0); } while (false); }; } while (false);
			_Nodeptr _Ptrsav = this->_Ptr;
			_Mybase::operator--();
			do { if (_Ptrsav != this->_Ptr) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 211, 0, "%s", "cannot decrement begin map/set iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement begin map/set iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 211, 0); } while (false); }; } while (false);


#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

			return *this;
		}

		_Tree_const_iterator operator--(int) {
			_Tree_const_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		bool operator==(const _Tree_const_iterator& _Right) const {

			do { if (this->_Getcont() == _Right._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 227, 0, "%s", "map/set iterators incompatible")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set iterators incompatible\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 227, 0); } while (false); }; } while (false);
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

			return this->_Ptr == _Right._Ptr;
		}

		bool operator!=(const _Tree_const_iterator& _Right) const {
			return !(*this == _Right);
		}


		friend void _Verify_range(const _Tree_const_iterator& _First, const _Tree_const_iterator& _Last) {
			do { if (_First._Getcont() == _Last._Getcont()) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 239, 0, "%s", "map/set iterators in range are from different containers")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set iterators in range are from different containers\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 239, 0); } while (false); }; } while (false);
		}
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

		using _Prevent_inheriting_unwrap = _Tree_const_iterator;

		_Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const {
			return _Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
		}

		void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It) {
			this->_Ptr = _It._Ptr;
		}
	};


	template <class _Mytree>
	class _Tree_iterator : public _Tree_const_iterator<_Mytree> {
	public:
		using _Mybase           = _Tree_const_iterator<_Mytree>;
		using iterator_category = bidirectional_iterator_tag;

		using _Nodeptr        = typename _Mytree::_Nodeptr;
		using value_type      = typename _Mytree::value_type;
		using difference_type = typename _Mytree::difference_type;

		using pointer   = typename _Mytree::pointer;
		using reference = value_type &;

		_Tree_iterator() {}

		_Tree_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) : _Mybase(_Pnode, _Plist) {}

		reference operator*() const {
			return const_cast<reference>(_Mybase::operator*());
		}

		pointer operator->() const {
			return pointer_traits<pointer>::pointer_to(**this);
		}

		_Tree_iterator& operator++() {
			_Mybase::operator++();
			return *this;
		}

		_Tree_iterator operator++(int) {
			_Tree_iterator _Tmp = *this;
			_Mybase::operator++();
			return _Tmp;
		}

		_Tree_iterator& operator--() {
			_Mybase::operator--();
			return *this;
		}

		_Tree_iterator operator--(int) {
			_Tree_iterator _Tmp = *this;
			_Mybase::operator--();
			return _Tmp;
		}

		using _Prevent_inheriting_unwrap = _Tree_iterator;

		_Tree_unchecked_iterator<_Mytree> _Unwrapped() const {
			return _Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
		}
	};


	template <class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer,
		class _Reference, class _Const_reference, class _Nodeptr_type>
		struct _Tree_iter_types {
		using value_type      = _Value_type;
		using size_type       = _Size_type;
		using difference_type = _Difference_type;
		using pointer         = _Pointer;
		using const_pointer   = _Const_pointer;
		using _Nodeptr        = _Nodeptr_type;
	};

	template <class _Value_type, class _Voidptr>
	struct _Tree_node {
		using _Nodeptr   = _Rebind_pointer_t<_Voidptr, _Tree_node>;
		using value_type = _Value_type;
		_Nodeptr _Left;
		_Nodeptr _Parent;
		_Nodeptr _Right;
		char _Color;
		char _Isnil;
		value_type _Myval;

		enum _Redbl {
			_Red,
			_Black
		};

		_Tree_node(const _Tree_node&) = delete;
		_Tree_node& operator=(const _Tree_node&) = delete;

		template <class _Alloc>
		static _Nodeptr _Buyheadnode(_Alloc& _Al) {
			static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
			using _Alnode_traits = allocator_traits<_Alloc>;
			auto _Pnode = _Al.allocate(1);
			_Alnode_traits::construct(_Al, ::std::addressof(_Pnode->_Left), _Pnode);
			_Alnode_traits::construct(_Al, ::std::addressof(_Pnode->_Parent), _Pnode);
			_Alnode_traits::construct(_Al, ::std::addressof(_Pnode->_Right), _Pnode);
			_Pnode->_Color = _Black;
			_Pnode->_Isnil = true;
			return _Pnode;
		}

		template <class _Alloc, class... _Valty>
		static _Nodeptr _Buynode(_Alloc& _Al, _Nodeptr _Myhead, _Valty&& ... _Val) {

			static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buynode call");
			using _Alnode_traits = allocator_traits<_Alloc>;
			_Alloc_construct_ptr<_Alloc> _Newnode(_Al);
			_Newnode._Allocate();
			_Alnode_traits::construct(_Al, ::std::addressof(_Newnode._Ptr->_Myval), ::std::forward<_Valty>(_Val)...);

			_Alnode_traits::construct(_Newnode._Al, ::std::addressof(_Newnode._Ptr->_Left), _Myhead);
			_Alnode_traits::construct(_Newnode._Al, ::std::addressof(_Newnode._Ptr->_Parent), _Myhead);
			_Alnode_traits::construct(_Newnode._Al, ::std::addressof(_Newnode._Ptr->_Right), _Myhead);
			_Newnode._Ptr->_Color = _Red;
			_Newnode._Ptr->_Isnil = false;
			return _Newnode._Release();
		}

		template <class _Alloc>
		static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {
			static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
			using _Alnode_traits = allocator_traits<_Alloc>;
			_Alnode_traits::destroy(_Al, ::std::addressof(_Ptr->_Left));
			_Alnode_traits::destroy(_Al, ::std::addressof(_Ptr->_Parent));
			_Alnode_traits::destroy(_Al, ::std::addressof(_Ptr->_Right));
			_Alnode_traits::deallocate(_Al, _Ptr, 1);
		}

		template <class _Alloc>
		static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {
			static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
			using _Alnode_traits = allocator_traits<_Alloc>;
			_Alnode_traits::destroy(_Al, ::std::addressof(_Ptr->_Myval));
			_Freenode0(_Al, _Ptr);
		}
	};

	template <class _Ty>
	struct _Tree_simple_types : public _Simple_types<_Ty> {
		using _Node    = _Tree_node<_Ty, void*>;
		using _Nodeptr = _Node *;
	};

	enum class _Tree_child {
		_Right,
		_Left,
		_Unused
	};

	template <class _Nodeptr>
	struct _Tree_id {
		_Nodeptr _Parent;
		_Tree_child _Child;
	};

	template <class _Nodeptr>
	struct _Tree_find_result {
		_Tree_id<_Nodeptr> _Location;
		_Nodeptr _Bound;
	};

	template <class _Nodeptr>
	struct _Tree_find_hint_result {
		_Tree_id<_Nodeptr> _Location;
		bool _Duplicate;
	};

	[[noreturn]] inline void _Throw_tree_length_error() {
		_Xlength_error("map/set too long");
	}


	template <class _Val_types>
	class _Tree_val : public _Container_base {
	public:
		using _Nodeptr = typename _Val_types::_Nodeptr;

		using value_type      = typename _Val_types::value_type;
		using size_type       = typename _Val_types::size_type;
		using difference_type = typename _Val_types::difference_type;
		using pointer         = typename _Val_types::pointer;
		using const_pointer   = typename _Val_types::const_pointer;
		using reference       = value_type &;
		using const_reference = const value_type &;

		using _Unchecked_const_iterator = _Tree_unchecked_const_iterator<_Tree_val>;
		using const_iterator            = _Tree_const_iterator<_Tree_val>;

		_Tree_val() : _Myhead(), _Mysize(0) {}

		enum _Redbl {
			_Red,
			_Black
		};

		static _Nodeptr _Max(_Nodeptr _Pnode) {
			while (!_Pnode->_Right->_Isnil) {
				_Pnode = _Pnode->_Right;
			}

			return _Pnode;
		}

		static _Nodeptr _Min(_Nodeptr _Pnode) {
			while (!_Pnode->_Left->_Isnil) {
				_Pnode = _Pnode->_Left;
			}

			return _Pnode;
		}

		void _Lrotate(_Nodeptr _Wherenode) {
			_Nodeptr _Pnode = _Wherenode->_Right;
			_Wherenode->_Right = _Pnode->_Left;

			if (!_Pnode->_Left->_Isnil) {
				_Pnode->_Left->_Parent = _Wherenode;
			}

			_Pnode->_Parent = _Wherenode->_Parent;

			if (_Wherenode == _Myhead->_Parent) {
				_Myhead->_Parent = _Pnode;
			}
			else if (_Wherenode == _Wherenode->_Parent->_Left) {
				_Wherenode->_Parent->_Left = _Pnode;
			}
			else {
				_Wherenode->_Parent->_Right = _Pnode;
			}

			_Pnode->_Left = _Wherenode;
			_Wherenode->_Parent = _Pnode;
		}

		void _Rrotate(_Nodeptr _Wherenode) {
			_Nodeptr _Pnode = _Wherenode->_Left;
			_Wherenode->_Left = _Pnode->_Right;

			if (!_Pnode->_Right->_Isnil) {
				_Pnode->_Right->_Parent = _Wherenode;
			}

			_Pnode->_Parent = _Wherenode->_Parent;

			if (_Wherenode == _Myhead->_Parent) {
				_Myhead->_Parent = _Pnode;
			}
			else if (_Wherenode == _Wherenode->_Parent->_Right) {
				_Wherenode->_Parent->_Right = _Pnode;
			}
			else {
				_Wherenode->_Parent->_Left = _Pnode;
			}

			_Pnode->_Right = _Wherenode;
			_Wherenode->_Parent = _Pnode;
		}

		_Nodeptr _Extract(_Unchecked_const_iterator _Where) {
			_Nodeptr _Erasednode = _Where._Ptr;
			++_Where;

			_Nodeptr _Fixnode;
			_Nodeptr _Fixnodeparent;
			_Nodeptr _Pnode = _Erasednode;

			if (_Pnode->_Left->_Isnil) {
				_Fixnode = _Pnode->_Right;
			}
			else if (_Pnode->_Right->_Isnil) {
				_Fixnode = _Pnode->_Left;
			}
			else {
				_Pnode = _Where._Ptr;
				_Fixnode = _Pnode->_Right;
			}

			if (_Pnode == _Erasednode) {
				_Fixnodeparent = _Erasednode->_Parent;
				if (!_Fixnode->_Isnil) {
					_Fixnode->_Parent = _Fixnodeparent;
				}

				if (_Myhead->_Parent == _Erasednode) {
					_Myhead->_Parent = _Fixnode;
				}
				else if (_Fixnodeparent->_Left == _Erasednode) {
					_Fixnodeparent->_Left = _Fixnode;
				}
				else {
					_Fixnodeparent->_Right = _Fixnode;
				}

				if (_Myhead->_Left == _Erasednode) {
					_Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent
						: _Min(_Fixnode);
				}

				if (_Myhead->_Right == _Erasednode) {
					_Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent
						: _Max(_Fixnode);
				}
			}
			else {
				_Erasednode->_Left->_Parent = _Pnode;
				_Pnode->_Left = _Erasednode->_Left;

				if (_Pnode == _Erasednode->_Right) {
					_Fixnodeparent = _Pnode;
				}
				else {
					_Fixnodeparent = _Pnode->_Parent;
					if (!_Fixnode->_Isnil) {
						_Fixnode->_Parent = _Fixnodeparent;
					}

					_Fixnodeparent->_Left = _Fixnode;
					_Pnode->_Right = _Erasednode->_Right;
					_Erasednode->_Right->_Parent = _Pnode;
				}

				if (_Myhead->_Parent == _Erasednode) {
					_Myhead->_Parent = _Pnode;
				}
				else if (_Erasednode->_Parent->_Left == _Erasednode) {
					_Erasednode->_Parent->_Left = _Pnode;
				}
				else {
					_Erasednode->_Parent->_Right = _Pnode;
				}

				_Pnode->_Parent = _Erasednode->_Parent;
				::std::swap(_Pnode->_Color, _Erasednode->_Color);
			}

			if (_Erasednode->_Color == _Black) {
				for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {
					if (_Fixnode == _Fixnodeparent->_Left) {
						_Pnode = _Fixnodeparent->_Right;
						if (_Pnode->_Color == _Red) {
							_Pnode->_Color = _Black;
							_Fixnodeparent->_Color = _Red;
							_Lrotate(_Fixnodeparent);
							_Pnode = _Fixnodeparent->_Right;
						}

						if (_Pnode->_Isnil) {
							_Fixnode = _Fixnodeparent;
						}
						else if (_Pnode->_Left->_Color == _Black
							&& _Pnode->_Right->_Color == _Black) {
							_Pnode->_Color = _Red;
							_Fixnode = _Fixnodeparent;
						}
						else {
							if (_Pnode->_Right->_Color == _Black) {
								_Pnode->_Left->_Color = _Black;
								_Pnode->_Color = _Red;
								_Rrotate(_Pnode);
								_Pnode = _Fixnodeparent->_Right;
							}

							_Pnode->_Color = _Fixnodeparent->_Color;
							_Fixnodeparent->_Color = _Black;
							_Pnode->_Right->_Color = _Black;
							_Lrotate(_Fixnodeparent);
							break;
						}
					}
					else {
						_Pnode = _Fixnodeparent->_Left;
						if (_Pnode->_Color == _Red) {
							_Pnode->_Color = _Black;
							_Fixnodeparent->_Color = _Red;
							_Rrotate(_Fixnodeparent);
							_Pnode = _Fixnodeparent->_Left;
						}

						if (_Pnode->_Isnil) {
							_Fixnode = _Fixnodeparent;
						}
						else if (_Pnode->_Right->_Color == _Black
							&& _Pnode->_Left->_Color == _Black) {
							_Pnode->_Color = _Red;
							_Fixnode = _Fixnodeparent;
						}
						else {
							if (_Pnode->_Left->_Color == _Black) {
								_Pnode->_Right->_Color = _Black;
								_Pnode->_Color = _Red;
								_Lrotate(_Pnode);
								_Pnode = _Fixnodeparent->_Left;
							}

							_Pnode->_Color = _Fixnodeparent->_Color;
							_Fixnodeparent->_Color = _Black;
							_Pnode->_Left->_Color = _Black;
							_Rrotate(_Fixnodeparent);
							break;
						}
					}
				}

				_Fixnode->_Color = _Black;
			}

			if (0 < _Mysize) {
				--_Mysize;
			}

			return _Erasednode;
		}

		_Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {
			++_Mysize;
			const auto _Head = _Myhead;
			_Newnode->_Parent = _Loc._Parent;
			if (_Loc._Parent == _Head) {
				_Head->_Left = _Newnode;
				_Head->_Parent = _Newnode;
				_Head->_Right = _Newnode;
				_Newnode->_Color = _Black;
				return _Newnode;
			}

			;
			if (_Loc._Child == _Tree_child::_Right) {
				;
				_Loc._Parent->_Right = _Newnode;
				if (_Loc._Parent == _Head->_Right) {
					_Head->_Right = _Newnode;
				}
			}
			else {
				;
				_Loc._Parent->_Left = _Newnode;
				if (_Loc._Parent == _Head->_Left) {
					_Head->_Left = _Newnode;
				}
			}

			for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {
				if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) {
					const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;
					if (_Parent_sibling->_Color == _Red) {
						_Pnode->_Parent->_Color = _Black;
						_Parent_sibling->_Color = _Black;
						_Pnode->_Parent->_Parent->_Color = _Red;
						_Pnode = _Pnode->_Parent->_Parent;
					}
					else {
						if (_Pnode == _Pnode->_Parent->_Right) {
							_Pnode = _Pnode->_Parent;
							_Lrotate(_Pnode);
						}

						_Pnode->_Parent->_Color = _Black;
						_Pnode->_Parent->_Parent->_Color = _Red;
						_Rrotate(_Pnode->_Parent->_Parent);
					}
				}
				else {
					const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
					if (_Parent_sibling->_Color == _Red) {
						_Pnode->_Parent->_Color = _Black;
						_Parent_sibling->_Color = _Black;
						_Pnode->_Parent->_Parent->_Color = _Red;
						_Pnode = _Pnode->_Parent->_Parent;
					}
					else {
						if (_Pnode == _Pnode->_Parent->_Left) {
							_Pnode = _Pnode->_Parent;
							_Rrotate(_Pnode);
						}

						_Pnode->_Parent->_Color = _Black;
						_Pnode->_Parent->_Parent->_Color = _Red;
						_Lrotate(_Pnode->_Parent->_Parent);
					}
				}
			}

			_Head->_Parent->_Color = _Black;
			return _Newnode;
		}

		void _Orphan_ptr(const _Nodeptr _Ptr) {

			_Lockit _Lock(3);
			_Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
			while (*_Pnext != nullptr) {
				const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
				if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
					_Pnext = &(*_Pnext)->_Mynextiter;
				}
				else {
					(*_Pnext)->_Myproxy = nullptr;
					*_Pnext = (*_Pnext)->_Mynextiter;
				}
			}


#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
		}

		template <class _Alnode>
		void _Erase_tree_and_orphan(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {
			while (!_Rootnode->_Isnil) {
				_Erase_tree_and_orphan(_Al, _Rootnode->_Right);
				auto _To_delete = ::std::exchange(_Rootnode, _Rootnode->_Left);
				_Orphan_ptr(_To_delete);
				_Alnode::value_type::_Freenode(_Al, _To_delete);
			}
		}

		template <class _Alnode>
		void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {
			while (!_Rootnode->_Isnil) {
				_Erase_tree(_Al, _Rootnode->_Right);
				_Alnode::value_type::_Freenode(_Al, ::std::exchange(_Rootnode, _Rootnode->_Left));
			}
		}

		template <class _Alnode>
		void _Erase_head(_Alnode& _Al) noexcept {
			this->_Orphan_all();
			_Erase_tree(_Al, _Myhead->_Parent);
			_Alnode::value_type::_Freenode0(_Al, _Myhead);
		}

		_Nodeptr _Myhead;
		size_type _Mysize;
	};


	template <class _Alnode, class _Scary_val>
	struct _Tree_head_scoped_ptr {
		_Alnode& _Al;
		_Scary_val* _Mycont;

		_Tree_head_scoped_ptr(_Alnode& _Al_, _Scary_val& _Mycont_) : _Al(_Al_), _Mycont(::std::addressof(_Mycont_)) {
			_Mycont->_Myhead = _Alnode::value_type::_Buyheadnode(_Al);
		}

		void _Release() noexcept {
			_Mycont = nullptr;
		}

		~_Tree_head_scoped_ptr() {
			if (_Mycont) {
				_Mycont->_Erase_head(_Al);
			}
		}
	};

	template <class _Alnode>
	struct _Tree_temp_node_alloc : _Alloc_construct_ptr<_Alnode> {

		explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {
			_Alloc_construct_ptr<_Alnode>::_Allocate();
		}

		_Tree_temp_node_alloc(const _Tree_temp_node_alloc&) = delete;
		_Tree_temp_node_alloc& operator=(const _Tree_temp_node_alloc&) = delete;
	};

	template <class _Alnode>
	struct _Tree_temp_node : _Tree_temp_node_alloc<_Alnode> {

		using _Alnode_traits = allocator_traits<_Alnode>;
		using _Nodeptr       = typename _Alnode_traits::pointer;

		enum _Redbl {
			_Red,
			_Black
		};

		template <class... _Valtys>
		explicit _Tree_temp_node(_Alnode& _Al_, _Nodeptr _Myhead, _Valtys&& ... _Vals)
			: _Tree_temp_node_alloc<_Alnode>(_Al_) {
			_Alnode_traits::construct(this->_Al, ::std::addressof(this->_Ptr->_Myval), ::std::forward<_Valtys>(_Vals)...);

			_Alnode_traits::construct(this->_Al, ::std::addressof(this->_Ptr->_Left), _Myhead);
			_Alnode_traits::construct(this->_Al, ::std::addressof(this->_Ptr->_Parent), _Myhead);
			_Alnode_traits::construct(this->_Al, ::std::addressof(this->_Ptr->_Right), _Myhead);
			this->_Ptr->_Color = _Red;
			this->_Ptr->_Isnil = false;
		}

		_Tree_temp_node(const _Tree_temp_node&) = delete;
		_Tree_temp_node& operator=(const _Tree_temp_node&) = delete;

		~_Tree_temp_node() {
			if (this->_Ptr) {
				_Alnode_traits::destroy(this->_Al, ::std::addressof(this->_Ptr->_Left));
				_Alnode_traits::destroy(this->_Al, ::std::addressof(this->_Ptr->_Parent));
				_Alnode_traits::destroy(this->_Al, ::std::addressof(this->_Ptr->_Right));
				_Alnode_traits::destroy(this->_Al, ::std::addressof(this->_Ptr->_Myval));
			}
		}
	};


	template <class _Traits>
	class _Tree {
	public:
		using value_type     = typename _Traits::value_type;
		using allocator_type = typename _Traits::allocator_type;

	protected:
		using _Alty          = _Rebind_alloc_t<allocator_type, value_type>;
		using _Alty_traits   = allocator_traits<_Alty>;
		using _Node          = _Tree_node<value_type, typename _Alty_traits::void_pointer>;
		using _Alnode        = _Rebind_alloc_t<allocator_type, _Node>;
		using _Alnode_traits = allocator_traits<_Alnode>;
		using _Nodeptr       = typename _Alnode_traits::pointer;

		using _Scary_val = _Tree_val<conditional_t<_Is_simple_alloc_v<_Alnode>, _Tree_simple_types<value_type>,
			_Tree_iter_types<value_type, typename _Alty_traits::size_type, typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer, typename _Alty_traits::const_pointer, value_type&, const value_type&,
			_Nodeptr>>>;

		static constexpr bool _Multi = _Traits::_Multi;

		enum _Redbl {
			_Red,
			_Black
		};

	public:
		using key_type      = typename _Traits::key_type;
		using value_compare = typename _Traits::value_compare;

		using key_compare = typename _Traits::key_compare;

		using size_type       = typename _Alty_traits::size_type;
		using difference_type = typename _Alty_traits::difference_type;
		using pointer         = typename _Alty_traits::pointer;
		using const_pointer   = typename _Alty_traits::const_pointer;
		using reference       = value_type &;
		using const_reference = const value_type &;

		using iterator =
			conditional_t<is_same_v<key_type, value_type>, _Tree_const_iterator<_Scary_val>, _Tree_iterator<_Scary_val>>;
		using const_iterator            = _Tree_const_iterator<_Scary_val>;
		using _Unchecked_iterator       = conditional_t<is_same_v<key_type, value_type>,
			_Tree_unchecked_const_iterator<_Scary_val>, _Tree_unchecked_iterator<_Scary_val>>;
		using _Unchecked_const_iterator = _Tree_unchecked_const_iterator<_Scary_val>;

		using reverse_iterator       = ::std::reverse_iterator<iterator>;
		using const_reverse_iterator = ::std::reverse_iterator<const_iterator>;

		struct _Copy_tag {};
		struct _Move_tag {};

		_Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t(), _Parg, _Zero_then_variadic_args_t()) {
			_Alloc_sentinel_and_proxy();
		}

		_Tree(const key_compare& _Parg, const allocator_type& _Al)
			: _Mypair(_One_then_variadic_args_t(), _Parg, _One_then_variadic_args_t(), _Al) {
			_Alloc_sentinel_and_proxy();
		}

		template <class _Any_alloc>
		_Tree(const _Tree& _Right, _Any_alloc&& _Al)
			: _Mypair(_One_then_variadic_args_t(), _Right.key_comp(), _One_then_variadic_args_t(),
				::std::forward<_Any_alloc>(_Al)) {
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Getal());
			const auto _Scary = _Get_scary();
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, *_Scary);
			_Tree_head_scoped_ptr<_Alnode, _Scary_val> _Sentinel(_Getal(), *_Scary);
			_Copy(_Right, _Copy_tag());
			_Sentinel._Release();
			_Proxy._Release();
		}

		_Tree(_Tree&& _Right)
			: _Mypair(
				_One_then_variadic_args_t(), _Right.key_comp(), _One_then_variadic_args_t(), ::std::move(_Right._Getal())) {
			_Alloc_sentinel_and_proxy();
			_Swap_val(_Right);
		}

	private:
		void _Different_allocator_move_construct(_Tree&& _Right) {

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Getal());
			const auto _Scary = _Get_scary();
			_Container_proxy_ptr<_Alty> _Proxy(_Alproxy, *_Scary);
			_Tree_head_scoped_ptr<_Alnode, _Scary_val> _Sentinel(_Getal(), *_Scary);
			_Copy(_Right, _Move_tag());
			_Sentinel._Release();
			_Proxy._Release();
		}

	public:
		_Tree(_Tree&& _Right, const allocator_type& _Al)
			: _Mypair(_One_then_variadic_args_t(), _Right.key_comp(), _One_then_variadic_args_t(), _Al) {
			if
				constexpr (!_Alnode_traits::is_always_equal::value) {
				if (_Getal() != _Right._Getal()) {
					_Different_allocator_move_construct(::std::move(_Right));
					return;
				}
			}

			_Alloc_sentinel_and_proxy();
			_Swap_val(_Right);
		}

	private:
		void _Move_assign(_Tree& _Right, _Equal_allocators) noexcept(is_nothrow_move_assignable_v<key_compare>) {
			clear();
			_Getcomp() = _Right._Getcomp();
			_Pocma(_Getal(), _Right._Getal());
			_Swap_val(_Right);
		}

		void _Move_assign(_Tree& _Right, _Propagate_allocators) {
			if (_Getal() == _Right._Getal()) {
				_Move_assign(_Right, _Equal_allocators{});
			}
			else {
				clear();
				_Getcomp() = _Right._Getcomp();
				auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Getal());
				auto&& _Right_alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Right._Getal());
				_Container_proxy_ptr<_Alty> _Proxy(_Right_alproxy, _Leave_proxy_unbound{});
				const auto _Scary = _Get_scary();
				auto _Right_scary = _Right._Get_scary();
				const auto _Newhead = ::std::exchange(_Right_scary->_Myhead, _Node::_Buyheadnode(_Right._Getal()));
				const auto _Newsize = ::std::exchange(_Right_scary->_Mysize, size_type{ 0 });
				_Scary->_Erase_head(_Getal());
				_Pocma(_Getal(), _Right._Getal());
				_Scary->_Myhead = _Newhead;
				_Scary->_Mysize = _Newsize;
				_Proxy._Bind(_Alproxy, _Scary);
				_Scary->_Swap_proxy_and_iterators(*_Right_scary);
			}
		}

		void _Move_assign(_Tree& _Right, _No_propagate_allocators) {
			if (_Getal() == _Right._Getal()) {
				_Move_assign(_Right, _Equal_allocators{});
			}
			else {
				clear();
				_Getcomp() = _Right._Getcomp();
				_Copy(_Right, _Move_tag());
			}
		}

	public:
		_Tree& operator=(_Tree&& _Right) noexcept(noexcept(_Move_assign(_Right, _Choose_pocma<_Alnode>{}))) {
			if (this != ::std::addressof(_Right)) {
				_Move_assign(_Right, _Choose_pocma<_Alnode>{});
			}

			return *this;
		}

	private:
		void _Swap_val(_Tree& _Right) {
			const auto _Scary = _Get_scary();
			auto _Right_scary = _Right._Get_scary();
			_Scary->_Swap_proxy_and_iterators(*_Right_scary);
			_Swap_adl(_Getcomp(), _Right._Getcomp());
			_Swap_adl(_Scary->_Myhead, _Right_scary->_Myhead);
			::std::swap(_Scary->_Mysize, _Right_scary->_Mysize);
		}

	protected:

		template <class... _Valtys>
		pair<_Nodeptr, bool> _Emplace(_Valtys&& ... _Vals) {
			using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
			const auto _Scary = _Get_scary();
			_Tree_find_result<_Nodeptr> _Loc;
			_Nodeptr _Inserted;
			if constexpr (_In_place_key_extractor::_Extractable) {
				const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
				if constexpr (_Multi) {
					_Loc = _Find_upper_bound(_Keyval);
					_Check_grow_by_1();
					_Inserted =
						_Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, ::std::forward<_Valtys>(_Vals)...)._Release();
				}
				else {
					_Loc = _Find_lower_bound(_Keyval);
					if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
						return { _Loc._Bound, false };
					}

					_Check_grow_by_1();
					_Inserted =
						_Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, ::std::forward<_Valtys>(_Vals)...)._Release();

				}
			}
			else {
				_Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, ::std::forward<_Valtys>(_Vals)...);
				const auto& _Keyval = _Traits::_Kfn(_Newnode._Ptr->_Myval);
				if constexpr (_Multi) {
					_Loc = _Find_upper_bound(_Keyval);
				}
				else {
					_Loc = _Find_lower_bound(_Keyval);
					if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
						return { _Loc._Bound, false };
					}
				}

				_Check_grow_by_1();

				_Inserted = _Newnode._Release();
			}

			return { _Scary->_Insert_node(_Loc._Location, _Inserted), true };
		}
































































#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

	public:
		template <class... _Valtys>
		pair<iterator, bool> emplace(_Valtys&& ... _Vals) {
			const auto _Result = _Emplace(::std::forward<_Valtys>(_Vals)...);
			return { iterator(_Result.first, _Get_scary()), _Result.second };
		}

	protected:

		template <class... _Valtys>
		_Nodeptr _Emplace_hint(const _Nodeptr _Hint, _Valtys&& ... _Vals) {
			using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
			const auto _Scary = _Get_scary();
			_Tree_find_hint_result<_Nodeptr> _Loc;
			_Nodeptr _Inserted;
			if constexpr (_In_place_key_extractor::_Extractable) {
				_Loc = _Find_hint(_Hint, _In_place_key_extractor::_Extract(_Vals...));
				if constexpr (!_Multi) {
					if (_Loc._Duplicate) {
						return _Loc._Location._Parent;
					}
				}

				_Check_grow_by_1();
				_Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, ::std::forward<_Valtys>(_Vals)...)._Release();

			}
			else {
				_Tree_temp_node<_Alnode> _Newnode(_Getal(), _Scary->_Myhead, ::std::forward<_Valtys>(_Vals)...);
				_Loc = _Find_hint(_Hint, _Traits::_Kfn(_Newnode._Ptr->_Myval));
				if constexpr (!_Multi) {
					if (_Loc._Duplicate) {
						return _Loc._Location._Parent;
					}
				}

				_Check_grow_by_1();

				_Inserted = _Newnode._Release();
			}

			return _Scary->_Insert_node(_Loc._Location, _Inserted);
		}












































#line 1199 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

	public:
		template <class... _Valtys>
		iterator emplace_hint(const_iterator _Where, _Valtys && ... _Vals) {
			const auto _Scary = _Get_scary();

			do { if (_Where._Getcont() == _Scary) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1205, 0, "%s", "map/set insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1205, 0); } while (false); }; } while (false);
#line 1207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
			return iterator(_Emplace_hint(_Where._Ptr, ::std::forward<_Valtys>(_Vals)...), _Scary);
		}

		~_Tree() noexcept {
			const auto _Scary = _Get_scary();
			_Scary->_Erase_head(_Getal());

			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Getal());
			_Delete_plain(_Alproxy, _Scary->_Myproxy);
#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
		}

	private:
		void _Copy_assign(const _Tree& _Right, false_type) {
			clear();
			_Getcomp() = _Right._Getcomp();
			_Pocca(_Getal(), _Right._Getal());
			_Copy(_Right, _Copy_tag());
		}

		void _Copy_assign(const _Tree& _Right, true_type) {
			if (_Getal() == _Right._Getal()) {
				_Copy_assign(_Right, false_type{});
			}
			else {
				clear();
				const auto _Scary = _Get_scary();
				_Scary->_Orphan_all();
				auto& _Al = _Getal();
				auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Al);
				const auto& _Right_al = _Right._Getal();
				auto&& _Right_alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Right_al);
				_Container_proxy_ptr<_Alty> _Proxy(_Right_alproxy, _Leave_proxy_unbound{});
				auto _Right_al_non_const = _Right_al;
				auto _Newhead = _Node::_Buyheadnode(_Right_al_non_const);
				_Node::_Freenode0(_Al, _Scary->_Myhead);
				_Pocca(_Al, _Right_al);
				_Scary->_Myhead = _Newhead;
				_Proxy._Bind(_Alproxy, _Scary);
				_Getcomp() = _Right._Getcomp();
				_Copy(_Right, _Copy_tag());
			}
		}

	public:
		_Tree& operator=(const _Tree& _Right) {
			if (this != ::std::addressof(_Right)) {
				_Copy_assign(_Right, _Choose_pocca<_Alnode>{});
			}

			return *this;
		}

		iterator begin() noexcept {
			const auto _Scary = _Get_scary();
			return iterator(_Scary->_Myhead->_Left, _Scary);
		}

		const_iterator begin() const noexcept {
			const auto _Scary = _Get_scary();
			return const_iterator(_Scary->_Myhead->_Left, _Scary);
		}

		iterator end() noexcept {
			const auto _Scary = _Get_scary();
			return iterator(_Scary->_Myhead, _Scary);
		}

		const_iterator end() const noexcept {
			const auto _Scary = _Get_scary();
			return const_iterator(_Scary->_Myhead, _Scary);
		}

		_Unchecked_iterator _Unchecked_begin() noexcept {
			return _Unchecked_iterator(_Get_scary()->_Myhead->_Left, nullptr);
		}

		_Unchecked_const_iterator _Unchecked_begin() const noexcept {
			return _Unchecked_const_iterator(_Get_scary()->_Myhead->_Left, nullptr);
		}

		_Default_sentinel _Unchecked_end() const noexcept {
			return {};
		}

		_Unchecked_const_iterator _Unchecked_end_iter() const noexcept {
			return _Unchecked_const_iterator(_Get_scary()->_Myhead, nullptr);
		}

		reverse_iterator rbegin() noexcept {
			return reverse_iterator(end());
		}

		const_reverse_iterator rbegin() const noexcept {
			return const_reverse_iterator(end());
		}

		reverse_iterator rend() noexcept {
			return reverse_iterator(begin());
		}

		const_reverse_iterator rend() const noexcept {
			return const_reverse_iterator(begin());
		}

		const_iterator cbegin() const noexcept {
			return begin();
		}

		const_iterator cend() const noexcept {
			return end();
		}

		const_reverse_iterator crbegin() const noexcept {
			return rbegin();
		}

		const_reverse_iterator crend() const noexcept {
			return rend();
		}

		size_type size() const noexcept {
			return _Get_scary()->_Mysize;
		}

		size_type max_size() const noexcept {
			return _Alnode_traits::max_size(_Getal());
		}

		bool empty() const noexcept {
			return size() == 0;
		}

		allocator_type get_allocator() const noexcept {
			return static_cast<allocator_type>(_Getal());
		}

		key_compare key_comp() const {
			return _Getcomp();
		}

		value_compare value_comp() const {
			return value_compare(key_comp());
		}

		template <bool _Multi2 = _Multi, enable_if_t<!_Multi2, int> = 0>
		pair<iterator, bool> insert(const value_type & _Val) {
			const auto _Result = _Emplace(_Val);
			return { iterator(_Result.first, _Get_scary()), _Result.second };
		}

		template <bool _Multi2 = _Multi, enable_if_t<_Multi2, int> = 0>
		iterator insert(const value_type & _Val) {
			return iterator(_Emplace(_Val).first, _Get_scary());
		}

		template <bool _Multi2 = _Multi, enable_if_t<!_Multi2, int> = 0>
		pair<iterator, bool> insert(value_type && _Val) {
			const auto _Result = _Emplace(::std::move(_Val));
			return { iterator(_Result.first, _Get_scary()), _Result.second };
		}

		template <bool _Multi2 = _Multi, enable_if_t<_Multi2, int> = 0>
		iterator insert(value_type && _Val) {
			return iterator(_Emplace(::std::move(_Val)).first, _Get_scary());
		}

		iterator insert(const_iterator _Where, const value_type& _Val) {
			const auto _Scary = _Get_scary();

			do { if (_Where._Getcont() == _Scary) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1376, 0, "%s", "map/set insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1376, 0); } while (false); }; } while (false);
#line 1378 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
			return iterator(_Emplace_hint(_Where._Ptr, _Val), _Scary);
		}

		iterator insert(const_iterator _Where, value_type&& _Val) {
			const auto _Scary = _Get_scary();

			do { if (_Where._Getcont() == _Scary) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1384, 0, "%s", "map/set insert iterator outside range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set insert iterator outside range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1384, 0); } while (false); }; } while (false);
#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
			return iterator(_Emplace_hint(_Where._Ptr, ::std::move(_Val)), _Scary);
		}

		template <class _Iter>
		void insert(_Iter _First, _Iter _Last) {
			_Adl_verify_range(_First, _Last);
			auto _UFirst = _Get_unwrapped(_First);
			const auto _ULast = _Get_unwrapped(_Last);
			const auto _Myhead = _Get_scary()->_Myhead;
			for (; _UFirst != _ULast; ++_UFirst) {
				_Emplace_hint(_Myhead, *_UFirst);
			}
		}

		void insert(initializer_list<value_type> _Ilist) {
			insert(_Ilist.begin(), _Ilist.end());
		}

	private:
		_Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) {
			const auto _Scary = _Get_scary();
			_Unchecked_const_iterator _Successor = _Where;
			++_Successor;
			_Nodeptr _Erasednode = _Scary->_Extract(_Where);
			_Scary->_Orphan_ptr(_Erasednode);
			_Node::_Freenode(_Getal(), _Erasednode);
			return _Successor._Ptr;
		}

		_Nodeptr _Erase_unchecked(_Unchecked_const_iterator _First, _Unchecked_const_iterator _Last) {
			const auto _Begin = _Unchecked_begin();
			if (_First == _Begin && _Last._Ptr->_Isnil) {

				clear();
				return _Last._Ptr;
			}


			while (_First != _Last) {
				_Erase_unchecked(_First++);
			}

			return _Last._Ptr;
		}

	public:
		template <class _Iter = iterator, class = enable_if_t<!is_same_v<_Iter, const_iterator>>>
		iterator erase(iterator _Where) {
			const auto _Scary = _Get_scary();

			do { if (_Where._Getcont() == _Scary) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1436, 0, "%s", "map/set erase iterator from incorrect container")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set erase iterator from incorrect container\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1436, 0); } while (false); }; } while (false);
			do { if (!_Where._Ptr->_Isnil) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1437, 0, "%s", "cannot erase map/set end() iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot erase map/set end() iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1437, 0); } while (false); }; } while (false);
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
			return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);
		}

		iterator erase(const_iterator _Where) {
			const auto _Scary = _Get_scary();

			do { if (_Where._Getcont() == _Scary) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1445, 0, "%s", "map/set erase iterator from incorrect container")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"map/set erase iterator from incorrect container\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1445, 0); } while (false); }; } while (false);
			do { if (!_Where._Ptr->_Isnil) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1446, 0, "%s", "cannot erase map/set end() iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot erase map/set end() iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree", 1446, 0); } while (false); }; } while (false);
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
			return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);
		}

		iterator erase(const_iterator _First, const_iterator _Last) {
			return iterator(_Erase_unchecked(_First._Unwrapped(), _Last._Unwrapped()), _Get_scary());
		}

		size_type erase(const key_type& _Keyval) {
			const auto _Where = _Eqrange(_Keyval);
			const _Unchecked_const_iterator _First(_Where.first, nullptr);
			const _Unchecked_const_iterator _Last(_Where.second, nullptr);
			const auto _Num = static_cast<size_type>(::std::distance(_First, _Last));
			_Erase_unchecked(_First, _Last);
			return _Num;
		}

		void clear() noexcept {
			const auto _Scary = _Get_scary();
			_Scary->_Orphan_ptr(nullptr);
			auto _Head = _Scary->_Myhead;
			_Scary->_Erase_tree(_Getal(), _Head->_Parent);
			_Head->_Parent = _Head;
			_Head->_Left = _Head;
			_Head->_Right = _Head;
			_Scary->_Mysize = 0;
		}

	private:
		template <class _Other>
		_Nodeptr _Find(const _Other& _Keyval) const {
			const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);
			if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
				return _Loc._Bound;
			}

			return _Get_scary()->_Myhead;
		}

	public:
		iterator find(const key_type& _Keyval) {
			return iterator(_Find(_Keyval), _Get_scary());
		}

		const_iterator find(const key_type& _Keyval) const {
			return const_iterator(_Find(_Keyval), _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		iterator find(const _Other & _Keyval) {
			return iterator(_Find(_Keyval), _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		const_iterator find(const _Other & _Keyval) const {
			return const_iterator(_Find(_Keyval), _Get_scary());
		}










#line 1515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

		size_type count(const key_type & _Keyval) const {
			if
				constexpr (_Multi) {
				const auto _Ans = _Eqrange(_Keyval);
				return static_cast<size_type>(::std::distance(
					_Unchecked_const_iterator(_Ans.first, nullptr), _Unchecked_const_iterator(_Ans.second, nullptr)));
			}
			else {
				return _Lower_bound_duplicate(_Find_lower_bound(_Keyval)._Bound, _Keyval);
			}
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		size_type count(const _Other & _Keyval) const {
			const auto _Ans = _Eqrange(_Keyval);
			return static_cast<size_type>(::std::distance(
				_Unchecked_const_iterator(_Ans.first, nullptr), _Unchecked_const_iterator(_Ans.second, nullptr)));
		}

		iterator lower_bound(const key_type& _Keyval) {
			return iterator(_Find_lower_bound(_Keyval)._Bound, _Get_scary());
		}

		const_iterator lower_bound(const key_type& _Keyval) const {
			return const_iterator(_Find_lower_bound(_Keyval)._Bound, _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		iterator lower_bound(const _Other & _Keyval) {
			return iterator(_Find_lower_bound(_Keyval)._Bound, _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		const_iterator lower_bound(const _Other & _Keyval) const {
			return const_iterator(_Find_lower_bound(_Keyval)._Bound, _Get_scary());
		}

		iterator upper_bound(const key_type& _Keyval) {
			return iterator(_Find_upper_bound(_Keyval)._Bound, _Get_scary());
		}

		const_iterator upper_bound(const key_type& _Keyval) const {
			return const_iterator(_Find_upper_bound(_Keyval)._Bound, _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		iterator upper_bound(const _Other & _Keyval) {
			return iterator(_Find_upper_bound(_Keyval)._Bound, _Get_scary());
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		const_iterator upper_bound(const _Other & _Keyval) const {
			return const_iterator(_Find_upper_bound(_Keyval)._Bound, _Get_scary());
		}

		pair<iterator, iterator> equal_range(const key_type& _Keyval) {
			const auto _Result = _Eqrange(_Keyval);
			const auto _Scary = _Get_scary();
			return { iterator(_Result.first, _Scary), iterator(_Result.second, _Scary) };
		}

		pair<const_iterator, const_iterator> equal_range(const key_type& _Keyval) const {
			const auto _Result = _Eqrange(_Keyval);
			const auto _Scary = _Get_scary();
			return { const_iterator(_Result.first, _Scary), const_iterator(_Result.second, _Scary) };
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		pair<iterator, iterator> equal_range(const _Other& _Keyval) {
			const auto _Result = _Eqrange(_Keyval);
			const auto _Scary = _Get_scary();
			return { iterator(_Result.first, _Scary), iterator(_Result.second, _Scary) };
		}

		template <class _Other, class _Mycomp = key_compare, class = typename _Mycomp::is_transparent>
		pair<const_iterator, const_iterator> equal_range(const _Other& _Keyval) const {
			const auto _Result = _Eqrange(_Keyval);
			const auto _Scary = _Get_scary();
			return { const_iterator(_Result.first, _Scary), const_iterator(_Result.second, _Scary) };
		}

		void swap(_Tree& _Right) noexcept(_Is_nothrow_swappable<key_compare>::value) {
			if (this != ::std::addressof(_Right)) {
				_Pocs(_Getal(), _Right._Getal());
				_Swap_val(_Right);
			}
		}

	protected:
		template <class _Keyty>
		_Tree_find_hint_result<_Nodeptr> _Find_hint(const _Nodeptr _Hint, const _Keyty& _Keyval) const {
			const auto& _Comp = _Getcomp();
			const auto _Head = _Get_scary()->_Myhead;
			if
				constexpr (_Multi) {
				if (_Hint->_Isnil) {

					if (_Head->_Parent->_Isnil
						|| !_Debug_lt_pred(_Comp, _Keyval, _Traits::_Kfn(_Head->_Right->_Myval))) {
						return { {_Head->_Right, _Tree_child::_Right}, false };
					}


					return { _Find_upper_bound(_Keyval)._Location, false };
				}

				if (_Hint == _Head->_Left) {

					if (!_Debug_lt_pred(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {
						return { {_Hint, _Tree_child::_Left}, false };
					}


					return { _Find_lower_bound(_Keyval)._Location, false };
				}

				if (!_Debug_lt_pred(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {

					const auto _Prev = (--(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
					if (!_Debug_lt_pred(_Comp, _Keyval, _Traits::_Kfn(_Prev->_Myval))) {

						if (_Prev->_Right->_Isnil) {
							return { {_Prev, _Tree_child::_Right}, false };
						}
						else {
							return { {_Hint, _Tree_child::_Left}, false };
						}
					}


					return { _Find_upper_bound(_Keyval)._Location, false };
				}


				return { _Find_lower_bound(_Keyval)._Location, false };
			}
			else {
				if (_Hint->_Isnil) {

					if (_Head->_Parent->_Isnil || _Debug_lt_pred(_Comp, _Traits::_Kfn(_Head->_Right->_Myval), _Keyval)) {
						return { {_Head->_Right, _Tree_child::_Right}, false };
					}
				}
				else if (_Hint == _Head->_Left) {

					if (_Debug_lt_pred(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {
						return { {_Hint, _Tree_child::_Left}, false };
					}
				}
				else if (_Debug_lt_pred(_Comp, _Keyval, _Traits::_Kfn(_Hint->_Myval))) {

					const auto _Prev = (--(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
					if (_Debug_lt_pred(_Comp, _Traits::_Kfn(_Prev->_Myval), _Keyval)) {

						if (_Prev->_Right->_Isnil) {
							return { {_Prev, _Tree_child::_Right}, false };
						}
						else {
							return { {_Hint, _Tree_child::_Left}, false };
						}
					}
				}
				else if (_Debug_lt_pred(_Comp, _Traits::_Kfn(_Hint->_Myval), _Keyval)) {

					const auto _Next = (++(_Unchecked_const_iterator(_Hint, nullptr)))._Ptr;
					if (_Next->_Isnil || _Debug_lt_pred(_Comp, _Keyval, _Traits::_Kfn(_Next->_Myval))) {

						if (_Hint->_Right->_Isnil) {
							return { {_Hint, _Tree_child::_Right}, false };
						}

						return { {_Next, _Tree_child::_Left}, false };
					}
				}
				else {

					return { {_Hint, _Tree_child::_Right}, true };
				}

				const auto _Loc = _Find_lower_bound(_Keyval);
				if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
					return { {_Loc._Bound, _Tree_child::_Unused}, true };
				}

				return { _Loc._Location, false };
			}
		}

		template <class _Keyty>
		_Tree_find_result<_Nodeptr> _Find_upper_bound(const _Keyty& _Keyval) const {
			const auto _Scary = _Get_scary();
			_Tree_find_result<_Nodeptr> _Result{ _Scary->_Myhead->_Parent, _Tree_child::_Right, _Scary->_Myhead };
			_Nodeptr _Trynode = _Result._Location._Parent;
			while (!_Trynode->_Isnil) {
				_Result._Location._Parent = _Trynode;
				if (_Debug_lt_pred(_Getcomp(), _Keyval, _Traits::_Kfn(_Trynode->_Myval))) {
					_Result._Location._Child = _Tree_child::_Left;
					_Result._Bound = _Trynode;
					_Trynode = _Trynode->_Left;
				}
				else {
					_Result._Location._Child = _Tree_child::_Right;
					_Trynode = _Trynode->_Right;
				}
			}

			return _Result;
		}

		template <class _Keyty>
		bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {
			return !_Bound->_Isnil && !_Debug_lt_pred(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));
		}

		template <class _Keyty>
		_Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {
			const auto _Scary = _Get_scary();
			_Tree_find_result<_Nodeptr> _Result{ _Scary->_Myhead->_Parent, _Tree_child::_Right, _Scary->_Myhead };
			_Nodeptr _Trynode = _Result._Location._Parent;
			while (!_Trynode->_Isnil) {
				_Result._Location._Parent = _Trynode;
				if (_Debug_lt_pred(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {
					_Result._Location._Child = _Tree_child::_Right;
					_Trynode = _Trynode->_Right;
				}
				else {
					_Result._Location._Child = _Tree_child::_Left;
					_Result._Bound = _Trynode;
					_Trynode = _Trynode->_Left;
				}
			}

			return _Result;
		}

		void _Check_grow_by_1() {
			if (max_size() == _Get_scary()->_Mysize) {
				_Throw_tree_length_error();
			}
		}

		template <class _Moveit>
		void _Copy(const _Tree& _Right, _Moveit _Movefl) {
			const auto _Scary = _Get_scary();
			const auto _Right_scary = _Right._Get_scary();
			_Scary->_Myhead->_Parent = _Copy_nodes(_Right_scary->_Myhead->_Parent, _Scary->_Myhead, _Movefl);
			_Scary->_Mysize = _Right_scary->_Mysize;
			if (!_Scary->_Myhead->_Parent->_Isnil) {
				_Scary->_Myhead->_Left = _Scary_val::_Min(_Scary->_Myhead->_Parent);
				_Scary->_Myhead->_Right = _Scary_val::_Max(_Scary->_Myhead->_Parent);
			}
			else {
				_Scary->_Myhead->_Left = _Scary->_Myhead;
				_Scary->_Myhead->_Right = _Scary->_Myhead;
			}
		}

		template <class _Ty, class _Is_set>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set) {
			return _Buynode(_Val);
		}

		template <class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type) {
			return _Buynode(::std::move(_Val));
		}

		template <class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type) {
			return _Buynode(::std::move(const_cast<key_type&>(_Val.first)), ::std::move(_Val.second));
		}

		template <class _Moveit>
		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode, _Moveit _Movefl) {

			const auto _Scary = _Get_scary();
			_Nodeptr _Newroot = _Scary->_Myhead;

			if (!_Rootnode->_Isnil) {
				typename is_same<key_type, value_type>::type _Is_set;
				_Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
				_Pnode->_Parent = _Wherenode;
				_Pnode->_Color = _Rootnode->_Color;
				if (_Newroot->_Isnil) {
					_Newroot = _Pnode;
				}

				try {
					_Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);
					_Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);
				}
				catch (...) {
					_Scary->_Erase_tree_and_orphan(_Getal(), _Newroot);
					throw;
				}
			}

			return _Newroot;
		}

		template <class _Other>
		pair<_Nodeptr, _Nodeptr> _Eqrange(const _Other& _Keyval) const {
			const auto _Scary = _Get_scary();
			const auto& _Comp = _Getcomp();
			_Nodeptr _Pnode = _Scary->_Myhead->_Parent;
			_Nodeptr _Lonode = _Scary->_Myhead;
			_Nodeptr _Hinode = _Scary->_Myhead;

			while (!_Pnode->_Isnil) {
				const auto& _Nodekey = _Traits::_Kfn(_Pnode->_Myval);
				if (_Debug_lt_pred(_Comp, _Nodekey, _Keyval)) {
					_Pnode = _Pnode->_Right;
				}
				else {
					if (_Hinode->_Isnil && _Debug_lt_pred(_Comp, _Keyval, _Nodekey)) {
						_Hinode = _Pnode;
					}

					_Lonode = _Pnode;
					_Pnode = _Pnode->_Left;
				}
			}

			_Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left;
			while (!_Pnode->_Isnil) {
				if (_Debug_lt_pred(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

					_Hinode = _Pnode;
					_Pnode = _Pnode->_Left;
				}
				else {
					_Pnode = _Pnode->_Right;
				}
			}

			return { _Lonode, _Hinode };
		}





































































































































































































#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"

		void _Alloc_sentinel_and_proxy() {
			const auto _Scary = _Get_scary();
			auto&& _Alproxy = static_cast<_Rebind_alloc_t<_Alnode, _Container_proxy>>(_Getal());
			_Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
			_Scary->_Myhead = _Node::_Buyheadnode(_Getal());
			_Proxy._Release();
		}

		template <class... _Valty>
		_Nodeptr _Buynode(_Valty&& ... _Val) {
			return _Node::_Buynode(_Getal(), _Get_scary()->_Myhead, ::std::forward<_Valty>(_Val)...);
		}

		key_compare& _Getcomp() noexcept {
			return _Mypair._Get_first();
		}

		const key_compare& _Getcomp() const noexcept {
			return _Mypair._Get_first();
		}

		_Alnode& _Getal() noexcept {
			return _Mypair._Myval2._Get_first();
		}

		const _Alnode& _Getal() const noexcept {
			return _Mypair._Myval2._Get_first();
		}

		_Scary_val* _Get_scary() noexcept {
			return ::std::addressof(_Mypair._Myval2._Myval2);
		}

		const _Scary_val* _Get_scary() const noexcept {
			return ::std::addressof(_Mypair._Myval2._Myval2);
		}

	private:
		_Compressed_pair<key_compare, _Compressed_pair<_Alnode, _Scary_val>> _Mypair;
	};

	template <class _Traits>
	inline bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return _Left.size() == _Right.size()
			&& ::std::equal(_Left._Unchecked_begin(), _Left._Unchecked_end_iter(), _Right._Unchecked_begin());
	}

	template <class _Traits>
	inline bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return !(_Left == _Right);
	}

	template <class _Traits>
	inline bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return ::std::lexicographical_compare(
			_Left._Unchecked_begin(), _Left._Unchecked_end_iter(), _Right._Unchecked_begin(), _Right._Unchecked_end_iter());
	}

	template <class _Traits>
	inline bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return _Right < _Left;
	}

	template <class _Traits>
	inline bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return !(_Right < _Left);
	}

	template <class _Traits>
	inline bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right) {
		return !(_Left < _Right);
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 2119 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"
#line 2120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\xtree"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"



#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )



namespace std {

	template <class _Kty,
		class _Ty,
		class _Pr,
		class _Alloc,
		bool _Mfl>
		class _Tmap_traits {
		public:
			using key_type       = _Kty;
			using value_type     = pair<const _Kty, _Ty>;
			using key_compare    = _Pr;
			using allocator_type = _Alloc;



#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

			static constexpr bool _Multi = _Mfl;

			template <class... _Args>
			using _In_place_key_extractor = _In_place_key_extract_map<_Kty, _Args...>;

			class value_compare {
			public:
				typedef value_type first_argument_type;
				typedef value_type second_argument_type;
				typedef bool result_type;

				bool operator()(const value_type& _Left, const value_type& _Right) const {

					return comp(_Left.first, _Right.first);
				}

			protected:
				friend _Tree<_Tmap_traits>;

				value_compare(key_compare _Pred) : comp(_Pred) {}

				key_compare comp;
			};

			template <class _Ty1, class _Ty2>
			static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) {
				return _Val.first;
			}
	};


	template <class _Kty, class _Ty, class _Pr = less<_Kty>, class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class map : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>> {

	public:
		static_assert(!0 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
			"map<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using _Mybase                = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>;
		using _Nodeptr               = typename _Mybase::_Nodeptr;
		using key_type               = _Kty;
		using mapped_type            = _Ty;
		using key_compare            = _Pr;
		using value_compare          = typename _Mybase::value_compare;
		using value_type             = pair<const _Kty, _Ty>;
		using allocator_type         = typename _Mybase::allocator_type;
		using size_type              = typename _Mybase::size_type;
		using difference_type        = typename _Mybase::difference_type;
		using pointer                = typename _Mybase::pointer;
		using const_pointer          = typename _Mybase::const_pointer;
		using reference              = value_type &;
		using const_reference        = const value_type &;
		using iterator               = typename _Mybase::iterator;
		using const_iterator         = typename _Mybase::const_iterator;
		using reverse_iterator       = typename _Mybase::reverse_iterator;
		using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

		using _Alnode        = typename _Mybase::_Alnode;
		using _Alnode_traits = typename _Mybase::_Alnode_traits;



#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

		map() : _Mybase(key_compare()) {}

		explicit map(const allocator_type& _Al) : _Mybase(key_compare(), _Al) {}

		map(const map& _Right) : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

		map(const map& _Right, const allocator_type& _Al) : _Mybase(_Right, _Al) {}

		explicit map(const key_compare& _Pred) : _Mybase(_Pred) {}

		map(const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {}

		template <class _Iter>
		map(_Iter _First, _Iter _Last) : _Mybase(key_compare()) {
			insert(_First, _Last);
		}

		template <class _Iter>
		map(_Iter _First, _Iter _Last, const key_compare& _Pred) : _Mybase(_Pred) {
			insert(_First, _Last);
		}

		template <class _Iter>
		map(_Iter _First, _Iter _Last, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			insert(_First, _Last);
		}

		template <class _Iter>
		map(_Iter _First, _Iter _Last, const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {
			insert(_First, _Last);
		}

		map& operator=(const map& _Right) {
			_Mybase::operator=(_Right);
			return *this;
		}

		map(map&& _Right) : _Mybase(::std::move(_Right)) {}

		map(map&& _Right, const allocator_type& _Al) : _Mybase(::std::move(_Right), _Al) {}

		map& operator=(map&& _Right)
			noexcept(_Alnode_traits::is_always_equal::value&& is_nothrow_move_assignable_v<_Pr>) {
			_Mybase::operator=(::std::move(_Right));
			return *this;
		}

		mapped_type& operator[](key_type&& _Keyval) {
			return _Try_emplace(::std::move(_Keyval)).first->_Myval.second;
		}

		void swap(map& _Right) noexcept(noexcept(_Mybase::swap(_Right))) {
			_Mybase::swap(_Right);
		}

		using _Mybase::insert;

		template <class _Valty, class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		pair<iterator, bool> insert(_Valty&& _Val) {
			return this->emplace(::std::forward<_Valty>(_Val));
		}

		template <class _Valty, class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val) {
			return this->emplace_hint(_Where, ::std::forward<_Valty>(_Val));
		}

	private:
		template <class _Keyty, class... _Mappedty>
		pair<_Nodeptr, bool> _Try_emplace(_Keyty&& _Keyval, _Mappedty&& ... _Mapval) {
			const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);
			if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
				return { _Loc._Bound, false };
			}

			_Mybase::_Check_grow_by_1();

			const auto _Scary = _Mybase::_Get_scary();
			const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,
				::std::forward_as_tuple(::std::forward<_Keyty>(_Keyval)),
				::std::forward_as_tuple(::std::forward<_Mappedty>(_Mapval)...))
				._Release();


			return { _Scary->_Insert_node(_Loc._Location, _Inserted), true };
		}

		template <class _Keyty, class... _Mappedty>
		_Nodeptr _Try_emplace_hint(const _Nodeptr _Hint, _Keyty&& _Keyval, _Mappedty&& ... _Mapval) {
			const auto _Loc = _Mybase::_Find_hint(_Hint, _Keyval);
			if (_Loc._Duplicate) {
				return _Loc._Location._Parent;
			}

			_Mybase::_Check_grow_by_1();

			const auto _Scary = _Mybase::_Get_scary();
			const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,
				::std::forward_as_tuple(::std::forward<_Keyty>(_Keyval)),
				::std::forward_as_tuple(::std::forward<_Mappedty>(_Mapval)...))
				._Release();


			return _Scary->_Insert_node(_Loc._Location, _Inserted);
		}

	public:
		template <class... _Mappedty>
		pair<iterator, bool> try_emplace(const key_type& _Keyval, _Mappedty&& ... _Mapval) {
			const auto _Result = _Try_emplace(_Keyval, ::std::forward<_Mappedty>(_Mapval)...);
			return { iterator(_Result.first, _Mybase::_Get_scary()), _Result.second };
		}

		template <class... _Mappedty>
		iterator try_emplace(const const_iterator _Hint, const key_type& _Keyval, _Mappedty&& ... _Mapval) {
			return iterator(
				_Try_emplace_hint(_Hint._Ptr, _Keyval, ::std::forward<_Mappedty>(_Mapval)...), _Mybase::_Get_scary());
		}

		template <class... _Mappedty>
		pair<iterator, bool> try_emplace(key_type&& _Keyval, _Mappedty&& ... _Mapval) {
			const auto _Result = _Try_emplace(::std::move(_Keyval), ::std::forward<_Mappedty>(_Mapval)...);
			return { iterator(_Result.first, _Mybase::_Get_scary()), _Result.second };
		}

		template <class... _Mappedty>
		iterator try_emplace(const const_iterator _Hint, key_type&& _Keyval, _Mappedty&& ... _Mapval) {
			return iterator(_Try_emplace_hint(_Hint._Ptr, ::std::move(_Keyval), ::std::forward<_Mappedty>(_Mapval)...),
				_Mybase::_Get_scary());
		}

	private:
		template <class _Keyty, class _Mappedty>
		pair<_Nodeptr, bool> _Insert_or_assign(_Keyty&& _Keyval, _Mappedty&& _Mapval) {
			const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);
			if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
				_Loc._Bound->_Myval.second = ::std::forward<_Mappedty>(_Mapval);
				return { _Loc._Bound, false };
			}

			_Mybase::_Check_grow_by_1();

			const auto _Scary = _Mybase::_Get_scary();
			const auto _Inserted = _Tree_temp_node<_Alnode>(
				_Mybase::_Getal(), _Scary->_Myhead, ::std::forward<_Keyty>(_Keyval), ::std::forward<_Mappedty>(_Mapval))
				._Release();


			return { _Scary->_Insert_node(_Loc._Location, _Inserted), true };
		}

		template <class _Keyty, class _Mappedty>
		_Nodeptr _Insert_or_assign_hint(const _Nodeptr _Hint, _Keyty&& _Keyval, _Mappedty&& _Mapval) {
			const auto _Loc = _Mybase::_Find_hint(_Hint, _Keyval);
			if (_Loc._Duplicate) {
				_Loc._Location._Parent->_Myval.second = ::std::forward<_Mappedty>(_Mapval);
				return _Loc._Location._Parent;
			}

			_Mybase::_Check_grow_by_1();

			const auto _Scary = _Mybase::_Get_scary();
			const auto _Inserted = _Tree_temp_node<_Alnode>(
				_Mybase::_Getal(), _Scary->_Myhead, ::std::forward<_Keyty>(_Keyval), ::std::forward<_Mappedty>(_Mapval))
				._Release();


			return _Scary->_Insert_node(_Loc._Location, _Inserted);
		}

	public:
		template <class _Mappedty>
		pair<iterator, bool> insert_or_assign(const key_type& _Keyval, _Mappedty&& _Mapval) {
			const auto _Result = _Insert_or_assign(_Keyval, ::std::forward<_Mappedty>(_Mapval));
			return { iterator(_Result.first, _Mybase::_Get_scary()), _Result.second };
		}

		template <class _Mappedty>
		iterator insert_or_assign(const const_iterator _Hint, const key_type& _Keyval, _Mappedty&& _Mapval) {
			return iterator(
				_Insert_or_assign_hint(_Hint._Ptr, _Keyval, ::std::forward<_Mappedty>(_Mapval)), _Mybase::_Get_scary());
		}

		template <class _Mappedty>
		pair<iterator, bool> insert_or_assign(key_type&& _Keyval, _Mappedty&& _Mapval) {
			const auto _Result = _Insert_or_assign(::std::move(_Keyval), ::std::forward<_Mappedty>(_Mapval));
			return { iterator(_Result.first, _Mybase::_Get_scary()), _Result.second };
		}

		template <class _Mappedty>
		iterator insert_or_assign(const const_iterator _Hint, key_type&& _Keyval, _Mappedty&& _Mapval) {
			return iterator(_Insert_or_assign_hint(_Hint._Ptr, ::std::move(_Keyval), ::std::forward<_Mappedty>(_Mapval)),
				_Mybase::_Get_scary());
		}

		map(initializer_list<value_type> _Ilist) : _Mybase(key_compare()) {
			insert(_Ilist);
		}

		map(initializer_list<value_type> _Ilist, const key_compare& _Pred) : _Mybase(_Pred) {
			insert(_Ilist);
		}

		map(initializer_list<value_type> _Ilist, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			insert(_Ilist);
		}

		map(initializer_list<value_type> _Ilist, const key_compare& _Pred, const allocator_type& _Al)
			: _Mybase(_Pred, _Al) {
			insert(_Ilist);
		}

		map& operator=(initializer_list<value_type> _Ilist) {
			_Mybase::clear();
			insert(_Ilist);
			return *this;
		}

		mapped_type& operator[](const key_type& _Keyval) {
			return _Try_emplace(_Keyval).first->_Myval.second;
		}

		mapped_type& at(const key_type& _Keyval) {
			const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);
			if (!_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
				_Xout_of_range("invalid map<K, T> key");
			}

			return _Loc._Bound->_Myval.second;
		}

		const mapped_type& at(const key_type& _Keyval) const {
			const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);
			if (!_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
				_Xout_of_range("invalid map<K, T> key");
			}

			return _Loc._Bound->_Myval.second;
		}

		using _Mybase::_Unchecked_begin;
		using _Mybase::_Unchecked_end;
	};















#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

	template <class _Kty, class _Ty, class _Pr, class _Alloc>
	inline void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left, map<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		_Left.swap(_Right);
	}


	template <class _Kty, class _Ty, class _Pr = less<_Kty>, class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class multimap : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>> {

	public:
		static_assert(!0 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
			"multimap<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using _Mybase                = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>>;
		using key_type               = _Kty;
		using mapped_type            = _Ty;
		using key_compare            = _Pr;
		using value_compare          = typename _Mybase::value_compare;
		using value_type             = pair<const _Kty, _Ty>;
		using allocator_type         = typename _Mybase::allocator_type;
		using size_type              = typename _Mybase::size_type;
		using difference_type        = typename _Mybase::difference_type;
		using pointer                = typename _Mybase::pointer;
		using const_pointer          = typename _Mybase::const_pointer;
		using reference              = value_type &;
		using const_reference        = const value_type &;
		using iterator               = typename _Mybase::iterator;
		using const_iterator         = typename _Mybase::const_iterator;
		using reverse_iterator       = typename _Mybase::reverse_iterator;
		using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

		using _Alnode        = typename _Mybase::_Alnode;
		using _Alnode_traits = typename _Mybase::_Alnode_traits;

		multimap() : _Mybase(key_compare()) {}

		explicit multimap(const allocator_type& _Al) : _Mybase(key_compare(), _Al) {}

		multimap(const multimap& _Right)
			: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

		multimap(const multimap& _Right, const allocator_type& _Al) : _Mybase(_Right, _Al) {}

		explicit multimap(const key_compare& _Pred) : _Mybase(_Pred) {}

		multimap(const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {}

		template <class _Iter>
		multimap(_Iter _First, _Iter _Last) : _Mybase(key_compare()) {
			insert(_First, _Last);
		}

		template <class _Iter>
		multimap(_Iter _First, _Iter _Last, const key_compare& _Pred) : _Mybase(_Pred) {
			insert(_First, _Last);
		}

		template <class _Iter>
		multimap(_Iter _First, _Iter _Last, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			insert(_First, _Last);
		}

		template <class _Iter>
		multimap(_Iter _First, _Iter _Last, const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {
			insert(_First, _Last);
		}

		multimap& operator=(const multimap& _Right) {
			_Mybase::operator=(_Right);
			return *this;
		}

		multimap(multimap&& _Right) : _Mybase(::std::move(_Right)) {}

		multimap(multimap&& _Right, const allocator_type& _Al) : _Mybase(::std::move(_Right), _Al) {}

		multimap& operator=(multimap&& _Right)
			noexcept(_Alnode_traits::is_always_equal::value&& is_nothrow_move_assignable_v<_Pr>) {
			_Mybase::operator=(::std::move(_Right));
			return *this;
		}

		template <class... _Valty>
		iterator emplace(_Valty&& ... _Val) {
			return _Mybase::emplace(::std::forward<_Valty>(_Val)...).first;
		}

		void swap(multimap& _Right) noexcept(noexcept(_Mybase::swap(_Right))) {
			_Mybase::swap(_Right);
		}

		using _Mybase::insert;

		template <class _Valty, class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(_Valty&& _Val) {
			return this->emplace(::std::forward<_Valty>(_Val));
		}

		template <class _Valty, class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val) {
			return this->emplace_hint(_Where, ::std::forward<_Valty>(_Val));
		}

		multimap(initializer_list<value_type> _Ilist) : _Mybase(key_compare()) {
			insert(_Ilist);
		}

		multimap(initializer_list<value_type> _Ilist, const key_compare& _Pred) : _Mybase(_Pred) {
			insert(_Ilist);
		}

		multimap(initializer_list<value_type> _Ilist, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			insert(_Ilist);
		}

		multimap(initializer_list<value_type> _Ilist, const key_compare& _Pred, const allocator_type& _Al)
			: _Mybase(_Pred, _Al) {
			insert(_Ilist);
		}

		multimap& operator=(initializer_list<value_type> _Ilist) {
			_Mybase::clear();
			insert(_Ilist);
			return *this;
		}

		using _Mybase::_Unchecked_begin;
		using _Mybase::_Unchecked_end;
	};















#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"

	template <class _Kty, class _Ty, class _Pr, class _Alloc>
	inline void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left, multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		_Left.swap(_Right);
	}









#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"
}


#pragma warning(pop)
#pragma pack(pop)
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\map"





#line 59 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

#pragma once







#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )



namespace std {

	template <class _Kty,
		class _Pr,
		class _Alloc,
		bool _Mfl>
		class _Tset_traits {
		public:
			using key_type       = _Kty;
			using value_type     = _Kty;
			using key_compare    = _Pr;
			using allocator_type = _Alloc;



#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

			static constexpr bool _Multi = _Mfl;

			template <class... _Args>
			using _In_place_key_extractor = _In_place_key_extract_set<_Kty, _Args...>;

			using value_compare = key_compare;

			static const _Kty& _Kfn(const value_type& _Val) {
				return _Val;
			}
	};


	template <class _Kty, class _Pr = less<_Kty>, class _Alloc = allocator<_Kty>>
	class set : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false>> {

	public:
		static_assert(!0 || is_same_v<_Kty, typename _Alloc::value_type>,
			"set<T, Compare, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using _Mybase                = _Tree<_Tset_traits<_Kty, _Pr, _Alloc, false>>;
		using key_type               = _Kty;
		using key_compare            = _Pr;
		using value_compare          = typename _Mybase::value_compare;
		using value_type             = typename _Mybase::value_type;
		using allocator_type         = typename _Mybase::allocator_type;
		using size_type              = typename _Mybase::size_type;
		using difference_type        = typename _Mybase::difference_type;
		using pointer                = typename _Mybase::pointer;
		using const_pointer          = typename _Mybase::const_pointer;
		using reference              = value_type &;
		using const_reference        = const value_type &;
		using iterator               = typename _Mybase::iterator;
		using const_iterator         = typename _Mybase::const_iterator;
		using reverse_iterator       = typename _Mybase::reverse_iterator;
		using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

		using _Alnode        = typename _Mybase::_Alnode;
		using _Alnode_traits = typename _Mybase::_Alnode_traits;



#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

		set() : _Mybase(key_compare()) {}

		explicit set(const allocator_type& _Al) : _Mybase(key_compare(), _Al) {}

		set(const set& _Right) : _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

		set(const set& _Right, const allocator_type& _Al) : _Mybase(_Right, _Al) {}

		explicit set(const key_compare& _Pred) : _Mybase(_Pred) {}

		set(const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {}

		template <class _Iter>
		set(_Iter _First, _Iter _Last) : _Mybase(key_compare()) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		set(_Iter _First, _Iter _Last, const key_compare& _Pred) : _Mybase(_Pred) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		set(_Iter _First, _Iter _Last, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		set(_Iter _First, _Iter _Last, const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {
			this->insert(_First, _Last);
		}

		set& operator=(const set& _Right) {
			_Mybase::operator=(_Right);
			return *this;
		}

		set(set&& _Right) : _Mybase(::std::move(_Right)) {}

		set(set&& _Right, const allocator_type& _Al) : _Mybase(::std::move(_Right), _Al) {}

		set& operator=(set&& _Right)
			noexcept(_Alnode_traits::is_always_equal::value&& is_nothrow_move_assignable_v<_Pr>) {
			_Mybase::operator=(::std::move(_Right));
			return *this;
		}

		void swap(set& _Right) noexcept(noexcept(_Mybase::swap(_Right))) {
			_Mybase::swap(_Right);
		}

		set(initializer_list<value_type> _Ilist) : _Mybase(key_compare()) {
			this->insert(_Ilist);
		}

		set(initializer_list<value_type> _Ilist, const key_compare& _Pred) : _Mybase(_Pred) {
			this->insert(_Ilist);
		}

		set(initializer_list<value_type> _Ilist, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			this->insert(_Ilist);
		}

		set(initializer_list<value_type> _Ilist, const key_compare& _Pred, const allocator_type& _Al)
			: _Mybase(_Pred, _Al) {
			this->insert(_Ilist);
		}

		set& operator=(initializer_list<value_type> _Ilist) {
			this->clear();
			this->insert(_Ilist);
			return *this;
		}

		using _Mybase::_Unchecked_begin;
		using _Mybase::_Unchecked_end;
	};















#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

	template <class _Kty, class _Pr, class _Alloc>
	inline void swap(set<_Kty, _Pr, _Alloc>& _Left, set<_Kty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		_Left.swap(_Right);
	}


	template <class _Kty, class _Pr = less<_Kty>, class _Alloc = allocator<_Kty>>
	class multiset : public _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true>> {

	public:
		static_assert(!0 || is_same_v<_Kty, typename _Alloc::value_type>,
			"multiset<T, Compare, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

		using _Mybase                = _Tree<_Tset_traits<_Kty, _Pr, _Alloc, true>>;
		using key_type               = _Kty;
		using key_compare            = _Pr;
		using value_compare          = typename _Mybase::value_compare;
		using value_type             = typename _Mybase::value_type;
		using allocator_type         = typename _Mybase::allocator_type;
		using size_type              = typename _Mybase::size_type;
		using difference_type        = typename _Mybase::difference_type;
		using pointer                = typename _Mybase::pointer;
		using const_pointer          = typename _Mybase::const_pointer;
		using reference              = value_type &;
		using const_reference        = const value_type &;
		using iterator               = typename _Mybase::iterator;
		using const_iterator         = typename _Mybase::const_iterator;
		using reverse_iterator       = typename _Mybase::reverse_iterator;
		using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

		using _Alnode        = typename _Mybase::_Alnode;
		using _Alnode_traits = typename _Mybase::_Alnode_traits;

		multiset() : _Mybase(key_compare()) {}

		explicit multiset(const allocator_type& _Al) : _Mybase(key_compare(), _Al) {}

		multiset(const multiset& _Right)
			: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal())) {}

		multiset(const multiset& _Right, const allocator_type& _Al) : _Mybase(_Right, _Al) {}

		explicit multiset(const key_compare& _Pred) : _Mybase(_Pred) {}

		multiset(const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {}

		template <class _Iter>
		multiset(_Iter _First, _Iter _Last) : _Mybase(key_compare()) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		multiset(_Iter _First, _Iter _Last, const key_compare& _Pred) : _Mybase(_Pred) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		multiset(_Iter _First, _Iter _Last, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			this->insert(_First, _Last);
		}

		template <class _Iter>
		multiset(_Iter _First, _Iter _Last, const key_compare& _Pred, const allocator_type& _Al) : _Mybase(_Pred, _Al) {
			this->insert(_First, _Last);
		}

		multiset& operator=(const multiset& _Right) {
			_Mybase::operator=(_Right);
			return *this;
		}

		multiset(multiset&& _Right) : _Mybase(::std::move(_Right)) {}

		multiset(multiset&& _Right, const allocator_type& _Al) : _Mybase(::std::move(_Right), _Al) {}

		multiset& operator=(multiset&& _Right)
			noexcept(_Alnode_traits::is_always_equal::value&& is_nothrow_move_assignable_v<_Pr>) {
			_Mybase::operator=(::std::move(_Right));
			return *this;
		}

		template <class... _Valty>
		iterator emplace(_Valty&& ... _Val) {
			return _Mybase::emplace(::std::forward<_Valty>(_Val)...).first;
		}

		void swap(multiset& _Right) noexcept(noexcept(_Mybase::swap(_Right))) {
			_Mybase::swap(_Right);
		}

		multiset(initializer_list<value_type> _Ilist) : _Mybase(key_compare()) {
			this->insert(_Ilist);
		}

		multiset(initializer_list<value_type> _Ilist, const key_compare& _Pred) : _Mybase(_Pred) {
			this->insert(_Ilist);
		}

		multiset(initializer_list<value_type> _Ilist, const allocator_type& _Al) : _Mybase(key_compare(), _Al) {
			this->insert(_Ilist);
		}

		multiset(initializer_list<value_type> _Ilist, const key_compare& _Pred, const allocator_type& _Al)
			: _Mybase(_Pred, _Al) {
			this->insert(_Ilist);
		}

		multiset& operator=(initializer_list<value_type> _Ilist) {
			this->clear();
			this->insert(_Ilist);
			return *this;
		}

		using _Mybase::_Unchecked_begin;
		using _Mybase::_Unchecked_end;
	};















#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"

	template <class _Kty, class _Pr, class _Alloc>
	inline void swap(multiset<_Kty, _Pr, _Alloc>& _Left, multiset<_Kty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right))) {
		_Left.swap(_Right);
	}









#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"
}


#pragma warning(pop)
#pragma pack(pop)
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\set"





#line 60 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"




#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-message.h"























































__pragma(warning(push)) __pragma(warning(disable: 4251))



void operator<<(const testing::internal::Secret&, int);

namespace testing {



























	class  Message {
	private:


		typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);

	public:

		Message();


		Message(const Message& msg) : ss_(new ::std::stringstream) {
			*ss_ << msg.GetString();
		}


		explicit Message(const char* str) : ss_(new ::std::stringstream) {
			*ss_ << str;
		}


		template <typename T>
		inline Message& operator <<(const T& val) {














			using ::operator <<;
			*ss_ << val;
			return *this;
		}














		template <typename T>
		inline Message& operator <<(T* const& pointer) {
			if (pointer == nullptr) {
				*ss_ << "(null)";
			}
			else {
				*ss_ << pointer;
			}
			return *this;
		}







		Message& operator <<(BasicNarrowIoManip val) {
			*ss_ << val;
			return *this;
		}


		Message& operator <<(bool b) {
			return *this << (b ? "true" : "false");
		}



		Message& operator <<(const wchar_t* wide_c_str);
		Message& operator <<(wchar_t* wide_c_str);




		Message& operator <<(const ::std::wstring& wstr);
#line 181 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-message.h"





		std::string GetString() const;

	private:

		const std::unique_ptr< ::std::stringstream> ss_;



		void operator=(const Message&);
	};


	inline std::ostream& operator <<(std::ostream& os, const Message& sb) {
		return os << sb.GetString();
	}

	namespace internal {





		template <typename T>
		std::string StreamableToString(const T& streamable) {
			return (Message() << streamable).GetString();
		}

	}
}

__pragma(warning(pop))

#line 219 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-message.h"
#line 65 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-filepath.h"










































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-string.h"





















































namespace testing {
	namespace internal {


		class  String {
		public:









			static const char* CloneCString(const char* c_str);

























#line 96 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-string.h"







			static bool CStringEquals(const char* lhs, const char* rhs);





			static std::string ShowWideCString(const wchar_t* wide_c_str);







			static bool WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs);







			static bool CaseInsensitiveCStringEquals(const char* lhs,
				const char* rhs);













			static bool CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
				const wchar_t* rhs);



			static bool EndsWithCaseInsensitive(
				const std::string& str, const std::string& suffix);


			static std::string FormatIntWidth2(int value);


			static std::string FormatHexInt(int value);


			static std::string FormatHexUInt32(UInt32 value);


			static std::string FormatByte(unsigned char value);

		private:
			String();
		};



		std::string StringStreamToString(::std::stringstream* stream);

	}
}

#line 172 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-string.h"
#line 44 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-filepath.h"


__pragma(warning(push)) __pragma(warning(disable: 4251))

namespace testing {
	namespace internal {












		class  FilePath {
		public:
			FilePath() : pathname_("") { }
			FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }

			explicit FilePath(const std::string& pathname) : pathname_(pathname) {
				Normalize();
			}

			FilePath& operator=(const FilePath& rhs) {
				Set(rhs);
				return *this;
			}

			void Set(const FilePath& rhs) {
				pathname_ = rhs.pathname_;
			}

			const std::string& string() const { return pathname_; }
			const char* c_str() const { return pathname_.c_str(); }


			static FilePath GetCurrentDir();





			static FilePath MakeFileName(const FilePath& directory,
				const FilePath& base_name,
				int number,
				const char* extension);




			static FilePath ConcatPaths(const FilePath& directory,
				const FilePath& relative_path);









			static FilePath GenerateUniqueFileName(const FilePath& directory,
				const FilePath& base_name,
				const char* extension);


			bool IsEmpty() const { return pathname_.empty(); }




			FilePath RemoveTrailingPathSeparator() const;







			FilePath RemoveDirectoryName() const;







			FilePath RemoveFileName() const;





			FilePath RemoveExtension(const char* extension) const;





			bool CreateDirectoriesRecursively() const;





			bool CreateFolder() const;



			bool FileOrDirectoryExists() const;



			bool DirectoryExists() const;




			bool IsDirectory() const;



			bool IsRootDirectory() const;


			bool IsAbsolutePath() const;

		private:




















			void Normalize();




			const char* FindLastPathSeparator() const;

			std::string pathname_;
		};

	}
}

__pragma(warning(pop))

#line 212 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-filepath.h"
#line 66 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"

#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"




















































#line 54 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"

#line 56 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"

namespace testing {
	namespace internal {





		inline std::string CanonicalizeForStdLibVersioning(std::string s) {
			static const char prefix[] = "std::__";
			if (s.compare(0, strlen(prefix), prefix) == 0) {
				std::string::size_type end = s.find("::", strlen(prefix));
				if (end != s.npos) {

					s.erase(strlen("std"), end - strlen("std"));
				}
			}
			return s;
		}




		template <typename T>
		std::string GetTypeName() {


			const char* const name = typeid(T).name();











#line 96 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"
			return name;
#line 98 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"





#line 104 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"
		}







		struct None {};









		struct Types0 {};



		template <typename T1>
		struct Types1 {
			typedef T1 Head;
			typedef Types0 Tail;
		};
		template <typename T1, typename T2>
		struct Types2 {
			typedef T1 Head;
			typedef Types1<T2> Tail;
		};

		template <typename T1, typename T2, typename T3>
		struct Types3 {
			typedef T1 Head;
			typedef Types2<T2, T3> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4>
		struct Types4 {
			typedef T1 Head;
			typedef Types3<T2, T3, T4> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5>
		struct Types5 {
			typedef T1 Head;
			typedef Types4<T2, T3, T4, T5> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6>
			struct Types6 {
			typedef T1 Head;
			typedef Types5<T2, T3, T4, T5, T6> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7>
			struct Types7 {
			typedef T1 Head;
			typedef Types6<T2, T3, T4, T5, T6, T7> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8>
			struct Types8 {
			typedef T1 Head;
			typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9>
			struct Types9 {
			typedef T1 Head;
			typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10>
			struct Types10 {
			typedef T1 Head;
			typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11>
			struct Types11 {
			typedef T1 Head;
			typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12>
			struct Types12 {
			typedef T1 Head;
			typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13>
			struct Types13 {
			typedef T1 Head;
			typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14>
			struct Types14 {
			typedef T1 Head;
			typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15>
			struct Types15 {
			typedef T1 Head;
			typedef Types14<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16>
			struct Types16 {
			typedef T1 Head;
			typedef Types15<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17>
			struct Types17 {
			typedef T1 Head;
			typedef Types16<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18>
			struct Types18 {
			typedef T1 Head;
			typedef Types17<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19>
			struct Types19 {
			typedef T1 Head;
			typedef Types18<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20>
			struct Types20 {
			typedef T1 Head;
			typedef Types19<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21>
			struct Types21 {
			typedef T1 Head;
			typedef Types20<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22>
			struct Types22 {
			typedef T1 Head;
			typedef Types21<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23>
			struct Types23 {
			typedef T1 Head;
			typedef Types22<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24>
			struct Types24 {
			typedef T1 Head;
			typedef Types23<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25>
			struct Types25 {
			typedef T1 Head;
			typedef Types24<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26>
			struct Types26 {
			typedef T1 Head;
			typedef Types25<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27>
			struct Types27 {
			typedef T1 Head;
			typedef Types26<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28>
			struct Types28 {
			typedef T1 Head;
			typedef Types27<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29>
			struct Types29 {
			typedef T1 Head;
			typedef Types28<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30>
			struct Types30 {
			typedef T1 Head;
			typedef Types29<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31>
			struct Types31 {
			typedef T1 Head;
			typedef Types30<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32>
			struct Types32 {
			typedef T1 Head;
			typedef Types31<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33>
			struct Types33 {
			typedef T1 Head;
			typedef Types32<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34>
			struct Types34 {
			typedef T1 Head;
			typedef Types33<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35>
			struct Types35 {
			typedef T1 Head;
			typedef Types34<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36>
			struct Types36 {
			typedef T1 Head;
			typedef Types35<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37>
			struct Types37 {
			typedef T1 Head;
			typedef Types36<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38>
			struct Types38 {
			typedef T1 Head;
			typedef Types37<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39>
			struct Types39 {
			typedef T1 Head;
			typedef Types38<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40>
			struct Types40 {
			typedef T1 Head;
			typedef Types39<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41>
			struct Types41 {
			typedef T1 Head;
			typedef Types40<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42>
			struct Types42 {
			typedef T1 Head;
			typedef Types41<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43>
			struct Types43 {
			typedef T1 Head;
			typedef Types42<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44>
			struct Types44 {
			typedef T1 Head;
			typedef Types43<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45>
			struct Types45 {
			typedef T1 Head;
			typedef Types44<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46>
			struct Types46 {
			typedef T1 Head;
			typedef Types45<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45, T46> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46, typename T47>
			struct Types47 {
			typedef T1 Head;
			typedef Types46<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45, T46, T47> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46, typename T47, typename T48>
			struct Types48 {
			typedef T1 Head;
			typedef Types47<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45, T46, T47, T48> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46, typename T47, typename T48, typename T49>
			struct Types49 {
			typedef T1 Head;
			typedef Types48<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45, T46, T47, T48, T49> Tail;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46, typename T47, typename T48, typename T49, typename T50>
			struct Types50 {
			typedef T1 Head;
			typedef Types49<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
				T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
				T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
				T44, T45, T46, T47, T48, T49, T50> Tail;
		};


	}














	template <typename T1 = internal::None, typename T2 = internal::None,
		typename T3 = internal::None, typename T4 = internal::None,
		typename T5 = internal::None, typename T6 = internal::None,
		typename T7 = internal::None, typename T8 = internal::None,
		typename T9 = internal::None, typename T10 = internal::None,
		typename T11 = internal::None, typename T12 = internal::None,
		typename T13 = internal::None, typename T14 = internal::None,
		typename T15 = internal::None, typename T16 = internal::None,
		typename T17 = internal::None, typename T18 = internal::None,
		typename T19 = internal::None, typename T20 = internal::None,
		typename T21 = internal::None, typename T22 = internal::None,
		typename T23 = internal::None, typename T24 = internal::None,
		typename T25 = internal::None, typename T26 = internal::None,
		typename T27 = internal::None, typename T28 = internal::None,
		typename T29 = internal::None, typename T30 = internal::None,
		typename T31 = internal::None, typename T32 = internal::None,
		typename T33 = internal::None, typename T34 = internal::None,
		typename T35 = internal::None, typename T36 = internal::None,
		typename T37 = internal::None, typename T38 = internal::None,
		typename T39 = internal::None, typename T40 = internal::None,
		typename T41 = internal::None, typename T42 = internal::None,
		typename T43 = internal::None, typename T44 = internal::None,
		typename T45 = internal::None, typename T46 = internal::None,
		typename T47 = internal::None, typename T48 = internal::None,
		typename T49 = internal::None, typename T50 = internal::None >
		struct Types {
		typedef internal::Types50<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;
	};

	template <>
	struct Types<internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types0 type;
	};
	template <typename T1>
	struct Types<T1, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types1<T1> type;
	};
	template <typename T1, typename T2>
	struct Types<T1, T2, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types2<T1, T2> type;
	};
	template <typename T1, typename T2, typename T3>
	struct Types<T1, T2, T3, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types3<T1, T2, T3> type;
	};
	template <typename T1, typename T2, typename T3, typename T4>
	struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types4<T1, T2, T3, T4> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5>
	struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types5<T1, T2, T3, T4, T5> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6>
		struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7>
		struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11,
			T12> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types24<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types25<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types26<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25,
			T26> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types27<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types28<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types29<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types30<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types31<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types32<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types33<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types34<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types35<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types36<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types37<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types38<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types39<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types40<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39,
			T40> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types41<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, internal::None,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types42<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None, internal::None> {
		typedef internal::Types43<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
		internal::None, internal::None, internal::None, internal::None,
		internal::None, internal::None> {
		typedef internal::Types44<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44, typename T45>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45,
		internal::None, internal::None, internal::None, internal::None,
		internal::None> {
		typedef internal::Types45<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44, typename T45,
		typename T46>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45,
		T46, internal::None, internal::None, internal::None, internal::None> {
		typedef internal::Types46<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45, T46> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44, typename T45,
		typename T46, typename T47>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45,
		T46, T47, internal::None, internal::None, internal::None> {
		typedef internal::Types47<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45, T46, T47> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44, typename T45,
		typename T46, typename T47, typename T48>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45,
		T46, T47, T48, internal::None, internal::None> {
		typedef internal::Types48<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45, T46, T47, T48> type;
	};
	template <typename T1, typename T2, typename T3, typename T4, typename T5,
		typename T6, typename T7, typename T8, typename T9, typename T10,
		typename T11, typename T12, typename T13, typename T14, typename T15,
		typename T16, typename T17, typename T18, typename T19, typename T20,
		typename T21, typename T22, typename T23, typename T24, typename T25,
		typename T26, typename T27, typename T28, typename T29, typename T30,
		typename T31, typename T32, typename T33, typename T34, typename T35,
		typename T36, typename T37, typename T38, typename T39, typename T40,
		typename T41, typename T42, typename T43, typename T44, typename T45,
		typename T46, typename T47, typename T48, typename T49>
		struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,
		T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30,
		T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45,
		T46, T47, T48, T49, internal::None> {
		typedef internal::Types49<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
			T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
			T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
			T41, T42, T43, T44, T45, T46, T47, T48, T49> type;
	};

	namespace internal {











		template <template <typename T> class Tmpl>
		struct TemplateSel {
			template <typename T>
			struct Bind {
				typedef Tmpl<T> type;
			};
		};








		template <typename T>
		struct NoneT {};









		struct Templates0 {};



		template <template <typename T> class T1>
		struct Templates1 {
			typedef TemplateSel<T1> Head;
			typedef Templates0 Tail;
		};
		template <template <typename T> class T1, template <typename T> class T2>
		struct Templates2 {
			typedef TemplateSel<T1> Head;
			typedef Templates1<T2> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3>
		struct Templates3 {
			typedef TemplateSel<T1> Head;
			typedef Templates2<T2, T3> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4>
		struct Templates4 {
			typedef TemplateSel<T1> Head;
			typedef Templates3<T2, T3, T4> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5>
		struct Templates5 {
			typedef TemplateSel<T1> Head;
			typedef Templates4<T2, T3, T4, T5> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6>
		struct Templates6 {
			typedef TemplateSel<T1> Head;
			typedef Templates5<T2, T3, T4, T5, T6> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7>
		struct Templates7 {
			typedef TemplateSel<T1> Head;
			typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8>
		struct Templates8 {
			typedef TemplateSel<T1> Head;
			typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9>
		struct Templates9 {
			typedef TemplateSel<T1> Head;
			typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10>
		struct Templates10 {
			typedef TemplateSel<T1> Head;
			typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11>
		struct Templates11 {
			typedef TemplateSel<T1> Head;
			typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12>
		struct Templates12 {
			typedef TemplateSel<T1> Head;
			typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13>
		struct Templates13 {
			typedef TemplateSel<T1> Head;
			typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14>
		struct Templates14 {
			typedef TemplateSel<T1> Head;
			typedef Templates13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15>
		struct Templates15 {
			typedef TemplateSel<T1> Head;
			typedef Templates14<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16>
		struct Templates16 {
			typedef TemplateSel<T1> Head;
			typedef Templates15<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17>
		struct Templates17 {
			typedef TemplateSel<T1> Head;
			typedef Templates16<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18>
		struct Templates18 {
			typedef TemplateSel<T1> Head;
			typedef Templates17<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19>
		struct Templates19 {
			typedef TemplateSel<T1> Head;
			typedef Templates18<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20>
		struct Templates20 {
			typedef TemplateSel<T1> Head;
			typedef Templates19<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21>
		struct Templates21 {
			typedef TemplateSel<T1> Head;
			typedef Templates20<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22>
		struct Templates22 {
			typedef TemplateSel<T1> Head;
			typedef Templates21<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23>
		struct Templates23 {
			typedef TemplateSel<T1> Head;
			typedef Templates22<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24>
		struct Templates24 {
			typedef TemplateSel<T1> Head;
			typedef Templates23<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25>
		struct Templates25 {
			typedef TemplateSel<T1> Head;
			typedef Templates24<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26>
		struct Templates26 {
			typedef TemplateSel<T1> Head;
			typedef Templates25<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27>
		struct Templates27 {
			typedef TemplateSel<T1> Head;
			typedef Templates26<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28>
		struct Templates28 {
			typedef TemplateSel<T1> Head;
			typedef Templates27<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29>
		struct Templates29 {
			typedef TemplateSel<T1> Head;
			typedef Templates28<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30>
		struct Templates30 {
			typedef TemplateSel<T1> Head;
			typedef Templates29<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31>
		struct Templates31 {
			typedef TemplateSel<T1> Head;
			typedef Templates30<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32>
		struct Templates32 {
			typedef TemplateSel<T1> Head;
			typedef Templates31<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33>
		struct Templates33 {
			typedef TemplateSel<T1> Head;
			typedef Templates32<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34>
		struct Templates34 {
			typedef TemplateSel<T1> Head;
			typedef Templates33<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35>
		struct Templates35 {
			typedef TemplateSel<T1> Head;
			typedef Templates34<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36>
		struct Templates36 {
			typedef TemplateSel<T1> Head;
			typedef Templates35<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37>
		struct Templates37 {
			typedef TemplateSel<T1> Head;
			typedef Templates36<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38>
		struct Templates38 {
			typedef TemplateSel<T1> Head;
			typedef Templates37<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39>
		struct Templates39 {
			typedef TemplateSel<T1> Head;
			typedef Templates38<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40>
		struct Templates40 {
			typedef TemplateSel<T1> Head;
			typedef Templates39<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41>
		struct Templates41 {
			typedef TemplateSel<T1> Head;
			typedef Templates40<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42>
		struct Templates42 {
			typedef TemplateSel<T1> Head;
			typedef Templates41<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43>
		struct Templates43 {
			typedef TemplateSel<T1> Head;
			typedef Templates42<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44>
		struct Templates44 {
			typedef TemplateSel<T1> Head;
			typedef Templates43<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45>
		struct Templates45 {
			typedef TemplateSel<T1> Head;
			typedef Templates44<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46>
		struct Templates46 {
			typedef TemplateSel<T1> Head;
			typedef Templates45<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45, T46> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47>
		struct Templates47 {
			typedef TemplateSel<T1> Head;
			typedef Templates46<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45, T46, T47> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47, template <typename T> class T48>
		struct Templates48 {
			typedef TemplateSel<T1> Head;
			typedef Templates47<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45, T46, T47, T48> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47, template <typename T> class T48,
			template <typename T> class T49>
		struct Templates49 {
			typedef TemplateSel<T1> Head;
			typedef Templates48<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45, T46, T47, T48, T49> Tail;
		};

		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47, template <typename T> class T48,
			template <typename T> class T49, template <typename T> class T50>
		struct Templates50 {
			typedef TemplateSel<T1> Head;
			typedef Templates49<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
				T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
				T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42,
				T43, T44, T45, T46, T47, T48, T49, T50> Tail;
		};















		template <template <typename T> class T1 = NoneT, template <typename T> class T2 = NoneT,
			template <typename T> class T3 = NoneT, template <typename T> class T4 = NoneT,
			template <typename T> class T5 = NoneT, template <typename T> class T6 = NoneT,
			template <typename T> class T7 = NoneT, template <typename T> class T8 = NoneT,
			template <typename T> class T9 = NoneT, template <typename T> class T10 = NoneT,
			template <typename T> class T11 = NoneT, template <typename T> class T12 = NoneT,
			template <typename T> class T13 = NoneT, template <typename T> class T14 = NoneT,
			template <typename T> class T15 = NoneT, template <typename T> class T16 = NoneT,
			template <typename T> class T17 = NoneT, template <typename T> class T18 = NoneT,
			template <typename T> class T19 = NoneT, template <typename T> class T20 = NoneT,
			template <typename T> class T21 = NoneT, template <typename T> class T22 = NoneT,
			template <typename T> class T23 = NoneT, template <typename T> class T24 = NoneT,
			template <typename T> class T25 = NoneT, template <typename T> class T26 = NoneT,
			template <typename T> class T27 = NoneT, template <typename T> class T28 = NoneT,
			template <typename T> class T29 = NoneT, template <typename T> class T30 = NoneT,
			template <typename T> class T31 = NoneT, template <typename T> class T32 = NoneT,
			template <typename T> class T33 = NoneT, template <typename T> class T34 = NoneT,
			template <typename T> class T35 = NoneT, template <typename T> class T36 = NoneT,
			template <typename T> class T37 = NoneT, template <typename T> class T38 = NoneT,
			template <typename T> class T39 = NoneT, template <typename T> class T40 = NoneT,
			template <typename T> class T41 = NoneT, template <typename T> class T42 = NoneT,
			template <typename T> class T43 = NoneT, template <typename T> class T44 = NoneT,
			template <typename T> class T45 = NoneT, template <typename T> class T46 = NoneT,
			template <typename T> class T47 = NoneT, template <typename T> class T48 = NoneT,
			template <typename T> class T49 = NoneT, template <typename T> class T50 = NoneT >
		struct Templates {
			typedef Templates50<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45, T46, T47, T48, T49, T50> type;
		};

		template <>
		struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT> {
			typedef Templates0 type;
		};
		template <template <typename T> class T1>
		struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT> {
			typedef Templates1<T1> type;
		};
		template <template <typename T> class T1, template <typename T> class T2>
		struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT> {
			typedef Templates2<T1, T2> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3>
		struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates3<T1, T2, T3> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4>
		struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates4<T1, T2, T3, T4> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5>
		struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates5<T1, T2, T3, T4, T5> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6>
		struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates6<T1, T2, T3, T4, T5, T6> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
				T13> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT> {
			typedef Templates18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT> {
			typedef Templates19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT> {
			typedef Templates20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT> {
			typedef Templates21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT> {
			typedef Templates22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT> {
			typedef Templates23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT> {
			typedef Templates24<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT> {
			typedef Templates25<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT> {
			typedef Templates26<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT> {
			typedef Templates27<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
				T27> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT> {
			typedef Templates28<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT> {
			typedef Templates29<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates30<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates31<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates32<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates33<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates34<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates35<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates36<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, NoneT, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates37<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, NoneT, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates38<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates39<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, NoneT, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates40<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, NoneT, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates41<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
				T41> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, NoneT,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates42<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates43<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			NoneT, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates44<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			T45, NoneT, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates45<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			T45, T46, NoneT, NoneT, NoneT, NoneT> {
			typedef Templates46<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45, T46> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			T45, T46, T47, NoneT, NoneT, NoneT> {
			typedef Templates47<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45, T46, T47> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47, template <typename T> class T48>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			T45, T46, T47, T48, NoneT, NoneT> {
			typedef Templates48<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45, T46, T47, T48> type;
		};
		template <template <typename T> class T1, template <typename T> class T2, template <typename T> class T3,
			template <typename T> class T4, template <typename T> class T5, template <typename T> class T6,
			template <typename T> class T7, template <typename T> class T8, template <typename T> class T9,
			template <typename T> class T10, template <typename T> class T11, template <typename T> class T12,
			template <typename T> class T13, template <typename T> class T14, template <typename T> class T15,
			template <typename T> class T16, template <typename T> class T17, template <typename T> class T18,
			template <typename T> class T19, template <typename T> class T20, template <typename T> class T21,
			template <typename T> class T22, template <typename T> class T23, template <typename T> class T24,
			template <typename T> class T25, template <typename T> class T26, template <typename T> class T27,
			template <typename T> class T28, template <typename T> class T29, template <typename T> class T30,
			template <typename T> class T31, template <typename T> class T32, template <typename T> class T33,
			template <typename T> class T34, template <typename T> class T35, template <typename T> class T36,
			template <typename T> class T37, template <typename T> class T38, template <typename T> class T39,
			template <typename T> class T40, template <typename T> class T41, template <typename T> class T42,
			template <typename T> class T43, template <typename T> class T44, template <typename T> class T45,
			template <typename T> class T46, template <typename T> class T47, template <typename T> class T48,
			template <typename T> class T49>
		struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,
			T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29,
			T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44,
			T45, T46, T47, T48, T49, NoneT> {
			typedef Templates49<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
				T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27,
				T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41,
				T42, T43, T44, T45, T46, T47, T48, T49> type;
		};





		template <typename T>
		struct TypeList {
			typedef Types1<T> type;
		};

		template <typename T1, typename T2, typename T3, typename T4, typename T5,
			typename T6, typename T7, typename T8, typename T9, typename T10,
			typename T11, typename T12, typename T13, typename T14, typename T15,
			typename T16, typename T17, typename T18, typename T19, typename T20,
			typename T21, typename T22, typename T23, typename T24, typename T25,
			typename T26, typename T27, typename T28, typename T29, typename T30,
			typename T31, typename T32, typename T33, typename T34, typename T35,
			typename T36, typename T37, typename T38, typename T39, typename T40,
			typename T41, typename T42, typename T43, typename T44, typename T45,
			typename T46, typename T47, typename T48, typename T49, typename T50>
			struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,
			T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28,
			T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43,
			T44, T45, T46, T47, T48, T49, T50> > {
			typedef typename Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12,
				T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26,
				T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40,
				T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;
		};

#line 3331 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"

	}
}

#line 3336 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-type-util.h"
#line 68 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"















namespace proto2 { class Message; }

namespace testing {



	class AssertionResult;
	class Message;
	class Test;
	class TestInfo;
	class TestPartResult;
	class UnitTest;

	template <typename T>
	::std::string PrintToString(const T& value);

	namespace internal {

		struct TraceInfo;
		class TestInfoImpl;
		class UnitTestImpl;



		extern const char kStackTraceMarker[];


		class IgnoredValue {
			struct Sink {};
		public:







			template <typename T,
				typename std::enable_if<!std::is_convertible<T, Sink>::value,
				int>::type = 0>
				IgnoredValue(const T&) {}
		};


		std::string AppendUserMessage(
			const std::string& gtest_msg, const Message& user_msg);




		__pragma(warning(push)) __pragma(warning(disable: 4275))







			class  GoogleTestFailureException : public ::std::runtime_error {
			public:
				explicit GoogleTestFailureException(const TestPartResult& failure);
		};

		__pragma(warning(pop))

#line 149 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"

			namespace edit_distance {





			enum EditType { kMatch, kAdd, kRemove, kReplace };
			std::vector<EditType> CalculateOptimalEdits(
				const std::vector<size_t>& left, const std::vector<size_t>& right);


			std::vector<EditType> CalculateOptimalEdits(
				const std::vector<std::string>& left,
				const std::vector<std::string>& right);


			std::string CreateUnifiedDiff(const std::vector<std::string>& left,
				const std::vector<std::string>& right,
				size_t context = 2);

		}





		std::string DiffStrings(const std::string& left,
			const std::string& right,
			size_t* total_line_count);
















		AssertionResult EqFailure(const char* expected_expression,
			const char* actual_expression,
			const std::string& expected_value,
			const std::string& actual_value,
			bool ignoring_case);


		std::string GetBoolAssertionFailureMessage(
			const AssertionResult& assertion_result,
			const char* expression_text,
			const char* actual_predicate_value,
			const char* expected_predicate_value);






























		template <typename RawType>
		class FloatingPoint {
		public:


			typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;




			static const size_t kBitCount = 8 * sizeof(RawType);


			static const size_t kFractionBitCount =
				std::numeric_limits<RawType>::digits - 1;


			static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;


			static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);


			static const Bits kFractionBitMask =
				~static_cast<Bits>(0) >> (kExponentBitCount + 1);


			static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);













			static const size_t kMaxUlps = 4;







			explicit FloatingPoint(const RawType& x) { u_.value_ = x; }






			static RawType ReinterpretBits(const Bits bits) {
				FloatingPoint fp(0);
				fp.u_.bits_ = bits;
				return fp.u_.value_;
			}


			static RawType Infinity() {
				return ReinterpretBits(kExponentBitMask);
			}


			static RawType Max();




			const Bits& bits() const { return u_.bits_; }


			Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }


			Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }


			Bits sign_bit() const { return kSignBitMask & u_.bits_; }


			bool is_nan() const {


				return (exponent_bits() == kExponentBitMask) && (fraction_bits() != 0);
			}







			bool AlmostEquals(const FloatingPoint& rhs) const {


				if (is_nan() || rhs.is_nan()) return false;

				return DistanceBetweenSignAndMagnitudeNumbers(u_.bits_, rhs.u_.bits_)
					<= kMaxUlps;
			}

		private:

			union FloatingPointUnion {
				RawType value_;
				Bits bits_;
			};
















			static Bits SignAndMagnitudeToBiased(const Bits& sam) {
				if (kSignBitMask & sam) {

					return ~sam + 1;
				}
				else {

					return kSignBitMask | sam;
				}
			}



			static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits& sam1,
				const Bits& sam2) {
				const Bits biased1 = SignAndMagnitudeToBiased(sam1);
				const Bits biased2 = SignAndMagnitudeToBiased(sam2);
				return (biased1 >= biased2) ? (biased1 - biased2) : (biased2 - biased1);
			}

			FloatingPointUnion u_;
		};



		template <>
		inline float FloatingPoint<float>::Max() { return 3.402823466e+38F; }
		template <>
		inline double FloatingPoint<double>::Max() { return 1.7976931348623158e+308; }



		typedef FloatingPoint<float> Float;
		typedef FloatingPoint<double> Double;







		typedef const void* TypeId;

		template <typename T>
		class TypeIdHelper {
		public:



			static bool dummy_;
		};

		template <typename T>
		bool TypeIdHelper<T>::dummy_ = false;




		template <typename T>
		TypeId GetTypeId() {




			return &(TypeIdHelper<T>::dummy_);
		}






		TypeId GetTestTypeId();



		class TestFactoryBase {
		public:
			virtual ~TestFactoryBase() {}



			virtual Test* CreateTest() = 0;

		protected:
			TestFactoryBase() {}

		private:
			TestFactoryBase(TestFactoryBase const&) = delete; void operator=(TestFactoryBase const&) = delete;
		};



		template <class TestClass>
		class TestFactoryImpl : public TestFactoryBase {
		public:
			Test* CreateTest() override { return new TestClass; }
		};







		AssertionResult IsHRESULTSuccess(const char* expr,
			long hr);
		AssertionResult IsHRESULTFailure(const char* expr,
			long hr);

#line 475 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"


		using SetUpTestSuiteFunc = void (*)();
		using TearDownTestSuiteFunc = void (*)();

		struct CodeLocation {
			CodeLocation(const std::string& a_file, int a_line)
				: file(a_file), line(a_line) {}

			std::string file;
			int line;
		};





		using SetUpTearDownSuiteFuncType = void (*)();

		inline SetUpTearDownSuiteFuncType GetNotDefaultOrNull(
			SetUpTearDownSuiteFuncType a, SetUpTearDownSuiteFuncType def) {
			return a == def ? nullptr : a;
		}

		template <typename T>



		struct SuiteApiResolver : T {


			using Test =
				typename std::conditional<sizeof(T) != 0, ::testing::Test, void>::type;

			static SetUpTearDownSuiteFuncType GetSetUpCaseOrSuite(const char* filename,
				int line_num) {
				SetUpTearDownSuiteFuncType test_case_fp =
					GetNotDefaultOrNull(&T::SetUpTestCase, &Test::SetUpTestCase);
				SetUpTearDownSuiteFuncType test_suite_fp =
					GetNotDefaultOrNull(&T::SetUpTestSuite, &Test::SetUpTestSuite);

			switch (0) case 0: default: if (::testing::internal::IsTrue(!test_case_fp || !test_suite_fp)); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h", 516).GetStream() << "Condition " "!test_case_fp || !test_suite_fp" " failed. "
				<< "Test can not provide both SetUpTestSuite and SetUpTestCase, please "
				"make sure there is only one present at "
				<< filename << ":" << line_num;

			return test_case_fp != nullptr ? test_case_fp : test_suite_fp;
			}

			static SetUpTearDownSuiteFuncType GetTearDownCaseOrSuite(const char* filename,
				int line_num) {
				SetUpTearDownSuiteFuncType test_case_fp =
					GetNotDefaultOrNull(&T::TearDownTestCase, &Test::TearDownTestCase);
				SetUpTearDownSuiteFuncType test_suite_fp =
					GetNotDefaultOrNull(&T::TearDownTestSuite, &Test::TearDownTestSuite);

			switch (0) case 0: default: if (::testing::internal::IsTrue(!test_case_fp || !test_suite_fp)); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h", 531).GetStream() << "Condition " "!test_case_fp || !test_suite_fp" " failed. "
				<< "Test can not provide both TearDownTestSuite and TearDownTestCase,"
				" please make sure there is only one present at"
				<< filename << ":" << line_num;

			return test_case_fp != nullptr ? test_case_fp : test_suite_fp;
			}
		};



















		TestInfo* MakeAndRegisterTestInfo(
			const char* test_suite_name, const char* name, const char* type_param,
			const char* value_param, CodeLocation code_location,
			TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
			TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory);




		bool SkipPrefix(const char* prefix, const char** pstr);




		__pragma(warning(push)) __pragma(warning(disable: 4251))


			class  TypedTestSuitePState {
			public:
				TypedTestSuitePState() : registered_(false) {}




				bool AddTestName(const char* file, int line, const char* case_name,
					const char* test_name) {
					if (registered_) {
						fprintf((__acrt_iob_func(2)),
							"%s Test %s must be defined before "
							"REGISTER_TYPED_TEST_SUITE_P(%s, ...).\n",
							FormatFileLocation(file, line).c_str(), test_name, case_name);
						fflush((__acrt_iob_func(2)));
						posix::Abort();
					}
					registered_tests_.insert(
						::std::make_pair(test_name, CodeLocation(file, line)));
					return true;
				}

				bool TestExists(const std::string& test_name) const {
					return registered_tests_.count(test_name) > 0;
				}

				const CodeLocation& GetCodeLocation(const std::string& test_name) const {
					RegisteredTestsMap::const_iterator it = registered_tests_.find(test_name);
			switch (0) case 0: default: if (::testing::internal::IsTrue(it != registered_tests_.end())); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h", 603).GetStream() << "Condition " "it != registered_tests_.end()" " failed. ";
			return it->second;
				}




				const char* VerifyRegisteredTestNames(
					const char* file, int line, const char* registered_tests);

			private:
				typedef ::std::map<std::string, CodeLocation> RegisteredTestsMap;

				bool registered_;
				RegisteredTestsMap registered_tests_;
		};



		using TypedTestCasePState = TypedTestSuitePState;
#line 624 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"

		__pragma(warning(pop))



			inline const char* SkipComma(const char* str) {
			const char* comma = strchr(str, ',');
			if (comma == nullptr) {
				return nullptr;
			}
			while (IsSpace(*(++comma))) {}
			return comma;
		}



		inline std::string GetPrefixUntilComma(const char* str) {
			const char* comma = strchr(str, ',');
			return comma == nullptr ? str : std::string(str, comma);
		}



		void SplitString(const ::std::string& str, char delimiter,
			::std::vector< ::std::string>* dest);



		struct DefaultNameGenerator {
			template <typename T>
			static std::string GetName(int i) {
				return StreamableToString(i);
			}
		};

		template <typename Provided = DefaultNameGenerator>
		struct NameGeneratorSelector {
			typedef Provided type;
		};

		template <typename NameGenerator>
		void GenerateNamesRecursively(Types0, std::vector<std::string>*, int) {}

		template <typename NameGenerator, typename Types>
		void GenerateNamesRecursively(Types, std::vector<std::string>* result, int i) {
			result->push_back(NameGenerator::template GetName<typename Types::Head>(i));
			GenerateNamesRecursively<NameGenerator>(typename Types::Tail(), result,
				i + 1);
		}

		template <typename NameGenerator, typename Types>
		std::vector<std::string> GenerateNames() {
			std::vector<std::string> result;
			GenerateNamesRecursively<NameGenerator>(Types(), &result, 0);
			return result;
		}








		template <template <typename T> class Fixture, class TestSel, typename Types>
		class TypeParameterizedTest {
		public:




			static bool Register(const char* prefix, const CodeLocation& code_location,
				const char* case_name, const char* test_names, int index,
				const std::vector<std::string>& type_names =
				GenerateNames<DefaultNameGenerator, Types>()) {
				typedef typename Types::Head Type;
				typedef Fixture<Type> FixtureClass;
				typedef typename TestSel::template Bind<Type>::type TestClass;



				MakeAndRegisterTestInfo(
					(std::string(prefix) + (prefix[0] == '\0' ? "" : "/") + case_name +
						"/" + type_names[static_cast<size_t>(index)])
					.c_str(),
					StripTrailingSpaces(GetPrefixUntilComma(test_names)).c_str(),
					GetTypeName<Type>().c_str(),
					nullptr,
					code_location, GetTypeId<FixtureClass>(),
					SuiteApiResolver<TestClass>::GetSetUpCaseOrSuite(
						code_location.file.c_str(), code_location.line),
					SuiteApiResolver<TestClass>::GetTearDownCaseOrSuite(
						code_location.file.c_str(), code_location.line),
					new TestFactoryImpl<TestClass>);


				return TypeParameterizedTest<Fixture, TestSel,
					typename Types::Tail>::Register(prefix,
						code_location,
						case_name,
						test_names,
						index + 1,
						type_names);
			}
		};


		template <template <typename T> class Fixture, class TestSel>
		class TypeParameterizedTest<Fixture, TestSel, Types0> {
		public:
			static bool Register(const char*, const CodeLocation&,
				const char*, const char*,
				int,
				const std::vector<std::string> & =
				std::vector<std::string>()) {
				return true;
			}
		};





		template <template <typename T> class Fixture, typename Tests, typename Types>
		class TypeParameterizedTestSuite {
		public:
			static bool Register(const char* prefix, CodeLocation code_location,
				const TypedTestSuitePState* state, const char* case_name,
				const char* test_names,
				const std::vector<std::string>& type_names =
				GenerateNames<DefaultNameGenerator, Types>()) {
				std::string test_name = StripTrailingSpaces(
					GetPrefixUntilComma(test_names));
				if (!state->TestExists(test_name)) {
					fprintf((__acrt_iob_func(2)), "Failed to get code location for test %s.%s at %s.",
						case_name, test_name.c_str(),
						FormatFileLocation(code_location.file.c_str(),
							code_location.line).c_str());
					fflush((__acrt_iob_func(2)));
					posix::Abort();
				}
				const CodeLocation& test_location = state->GetCodeLocation(test_name);

				typedef typename Tests::Head Head;


				TypeParameterizedTest<Fixture, Head, Types>::Register(
					prefix, test_location, case_name, test_names, 0, type_names);


				return TypeParameterizedTestSuite<Fixture, typename Tests::Tail,
					Types>::Register(prefix, code_location,
						state, case_name,
						SkipComma(test_names),
						type_names);
			}
		};


		template <template <typename T> class Fixture, typename Types>
		class TypeParameterizedTestSuite<Fixture, Templates0, Types> {
		public:
			static bool Register(const char*, const CodeLocation&,
				const TypedTestSuitePState*,
				const char*, const char*,
				const std::vector<std::string> & =
				std::vector<std::string>()) {
				return true;
			}
		};

#line 796 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"











		std::string GetCurrentOsStackTraceExceptTop(
			UnitTest * unit_test, int skip_count);





		bool AlwaysTrue();


		inline bool AlwaysFalse() { return !AlwaysTrue(); }




		struct  ConstCharPtr {
			ConstCharPtr(const char* str) : value(str) {}
			operator bool() const { return true; }
			const char* value;
		};






		class  Random {
		public:
			static const UInt32 kMaxRange = 1u << 31;

			explicit Random(UInt32 seed) : state_(seed) {}

			void Reseed(UInt32 seed) { state_ = seed; }



			UInt32 Generate(UInt32 range);

		private:
			UInt32 state_;
			Random(Random const&) = delete; void operator=(Random const&) = delete;
		};







		template <typename T>
		struct IsAProtocolMessage
			: public bool_constant<
			std::is_convertible<const T*, const ::proto2::Message*>::value> {};

























		typedef int IsContainer;
		template <class C,
			class Iterator = decltype(::std::declval<const C&>().begin()),
			class = decltype(::std::declval<const C&>().end()),
			class = decltype(++::std::declval<Iterator&>()),
			class = decltype(*::std::declval<Iterator>()),
			class = typename C::const_iterator>
			IsContainer IsContainerTest(int) {
			return 0;
		}

		typedef char IsNotContainer;
		template <class C>
		IsNotContainer IsContainerTest(long) { return '\0'; }





		template <typename T>
		struct IsHashTable {
		private:
			template <typename U>
			static char test(typename U::hasher*, typename U::reverse_iterator*);
			template <typename U>
			static int test(typename U::hasher*, ...);
			template <typename U>
			static char test(...);

		public:
			static const bool value = sizeof(test<T>(nullptr, nullptr)) == sizeof(int);
		};

		template <typename T>
		const bool IsHashTable<T>::value;

		template <typename C,
			bool = sizeof(IsContainerTest<C>(0)) == sizeof(IsContainer)>
			struct IsRecursiveContainerImpl;

		template <typename C>
		struct IsRecursiveContainerImpl<C, false> : public std::false_type {};





		template <typename C>
		struct IsRecursiveContainerImpl<C, true> {
			using value_type = decltype(*std::declval<typename C::const_iterator>());
			using type =
				std::is_same<typename std::remove_const<
				typename std::remove_reference<value_type>::type>::type,
				C>;
		};







		template <typename C>
		struct IsRecursiveContainer : public IsRecursiveContainerImpl<C>::type {};







		template <typename T, typename U>
		bool ArrayEq(const T* lhs, size_t size, const U* rhs);


		template <typename T, typename U>
		inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }


		template <typename T, typename U, size_t N>
		inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {
			return internal::ArrayEq(lhs, N, rhs);
		}




		template <typename T, typename U>
		bool ArrayEq(const T* lhs, size_t size, const U* rhs) {
			for (size_t i = 0; i != size; i++) {
				if (!internal::ArrayEq(lhs[i], rhs[i]))
					return false;
			}
			return true;
		}



		template <typename Iter, typename Element>
		Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {
			for (Iter it = begin; it != end; ++it) {
				if (internal::ArrayEq(*it, elem))
					return it;
			}
			return end;
		}





		template <typename T, typename U>
		void CopyArray(const T* from, size_t size, U* to);


		template <typename T, typename U>
		inline void CopyArray(const T& from, U* to) { *to = from; }


		template <typename T, typename U, size_t N>
		inline void CopyArray(const T(&from)[N], U(*to)[N]) {
			internal::CopyArray(from, N, *to);
		}




		template <typename T, typename U>
		void CopyArray(const T* from, size_t size, U* to) {
			for (size_t i = 0; i != size; i++) {
				internal::CopyArray(from[i], to + i);
			}
		}





		struct RelationToSourceReference {};
		struct RelationToSourceCopy {};









		template <typename Element>
		class NativeArray {
		public:

			typedef Element value_type;
			typedef Element* iterator;
			typedef const Element* const_iterator;


			NativeArray(const Element* array, size_t count, RelationToSourceReference) {
				InitRef(array, count);
			}


			NativeArray(const Element* array, size_t count, RelationToSourceCopy) {
				InitCopy(array, count);
			}


			NativeArray(const NativeArray& rhs) {
				(this->*rhs.clone_)(rhs.array_, rhs.size_);
			}

			~NativeArray() {
				if (clone_ != &NativeArray::InitRef)
					delete[] array_;
			}


			size_t size() const { return size_; }
			const_iterator begin() const { return array_; }
			const_iterator end() const { return array_ + size_; }
			bool operator==(const NativeArray& rhs) const {
				return size() == rhs.size() &&
					ArrayEq(begin(), size(), rhs.begin());
			}

		private:
			static_assert(!std::is_const<Element>::value, "Type must not be const");
			static_assert(!std::is_reference<Element>::value,
				"Type must not be a reference");


			void InitCopy(const Element* array, size_t a_size) {
				Element* const copy = new Element[a_size];
				CopyArray(array, a_size, copy);
				array_ = copy;
				size_ = a_size;
				clone_ = &NativeArray::InitCopy;
			}


			void InitRef(const Element* array, size_t a_size) {
				array_ = array;
				size_ = a_size;
				clone_ = &NativeArray::InitRef;
			}

			const Element* array_;
			size_t size_;
			void (NativeArray::* clone_)(const Element*, size_t);

			void operator=(NativeArray const&) = delete;
		};


		template <size_t... Is>
		struct IndexSequence {
			using type = IndexSequence;
		};


		template <bool plus_one, typename T, size_t sizeofT>
		struct DoubleSequence;
		template <size_t... I, size_t sizeofT>
		struct DoubleSequence<true, IndexSequence<I...>, sizeofT> {
			using type = IndexSequence<I..., (sizeofT + I)..., 2 * sizeofT>;
		};
		template <size_t... I, size_t sizeofT>
		struct DoubleSequence<false, IndexSequence<I...>, sizeofT> {
			using type = IndexSequence<I..., (sizeofT + I)...>;
		};



		template <size_t N>
		struct MakeIndexSequence
			: DoubleSequence<N % 2 == 1, typename MakeIndexSequence<N / 2>::type,
			N / 2>::type {};

		template <>
		struct MakeIndexSequence<0> : IndexSequence<> {};




		template <typename T, size_t, size_t>
		struct ElemFromListImpl {};

		template <typename T, size_t I>
		struct ElemFromListImpl<T, I, I> {
			using type = T;
		};



		template <size_t N, typename I, typename... T>
		struct ElemFromList;

		template <size_t N, size_t... I, typename... T>
		struct ElemFromList<N, IndexSequence<I...>, T...>
			: ElemFromListImpl<T, N, I>... {};

		template <typename... T>
		class FlatTuple;

		template <typename Derived, size_t I>
		struct FlatTupleElemBase;

		template <typename... T, size_t I>
		struct FlatTupleElemBase<FlatTuple<T...>, I> {
			using value_type =
				typename ElemFromList<I, typename MakeIndexSequence<sizeof...(T)>::type,
				T...>::type;
			FlatTupleElemBase() = default;
			explicit FlatTupleElemBase(value_type t) : value(std::move(t)) {}
			value_type value;
		};

		template <typename Derived, typename Idx>
		struct FlatTupleBase;

		template <size_t... Idx, typename... T>
		struct FlatTupleBase<FlatTuple<T...>, IndexSequence<Idx...>>
			: FlatTupleElemBase<FlatTuple<T...>, Idx>... {
			using Indices = IndexSequence<Idx...>;
			FlatTupleBase() = default;
			explicit FlatTupleBase(T... t)
				: FlatTupleElemBase<FlatTuple<T...>, Idx>(std::move(t))... {}
		};










		template <typename... T>
		class FlatTuple
			: private FlatTupleBase<FlatTuple<T...>,
			typename MakeIndexSequence<sizeof...(T)>::type> {
			using Indices = typename FlatTuple::FlatTupleBase::Indices;

		public:
			FlatTuple() = default;
			explicit FlatTuple(T... t) : FlatTuple::FlatTupleBase(std::move(t)...) {}

			template <size_t I>
			const typename ElemFromList<I, Indices, T...>::type& Get() const {
				return static_cast<const FlatTupleElemBase<FlatTuple, I>*>(this)->value;
			}

			template <size_t I>
			typename ElemFromList<I, Indices, T...>::type& Get() {
				return static_cast<FlatTupleElemBase<FlatTuple, I>*>(this)->value;
			}
		};



		__declspec(deprecated("INSTANTIATE_TEST_CASE_P is deprecated, please use " "INSTANTIATE_TEST_SUITE_P"))
#line 1211 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
			constexpr bool InstantiateTestCase_P_IsDeprecated() { return true; }

		__declspec(deprecated("TYPED_TEST_CASE_P is deprecated, please use " "TYPED_TEST_SUITE_P"))
#line 1216 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
			constexpr bool TypedTestCase_P_IsDeprecated() { return true; }

		__declspec(deprecated("TYPED_TEST_CASE is deprecated, please use " "TYPED_TEST_SUITE"))
#line 1221 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
			constexpr bool TypedTestCaseIsDeprecated() { return true; }

		__declspec(deprecated("REGISTER_TYPED_TEST_CASE_P is deprecated, please use " "REGISTER_TYPED_TEST_SUITE_P"))
#line 1226 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
			constexpr bool RegisterTypedTestCase_P_IsDeprecated() { return true; }

		__declspec(deprecated("INSTANTIATE_TYPED_TEST_CASE_P is deprecated, please use " "INSTANTIATE_TYPED_TEST_SUITE_P"))
#line 1231 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
			constexpr bool InstantiateTypedTestCase_P_IsDeprecated() { return true; }

	}
}














































































































































#line 1377 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-internal.h"
#line 63 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"








































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-death-test-internal.h"






































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"














































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"






































































































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

#pragma once











#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {










	template <class _Ty = void>
	struct divides {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left / _Right;
		}
	};


	template <class _Ty = void>
	struct modulus {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left % _Right;
		}
	};


	template <class _Ty = void>
	struct negate {
		typedef _Ty argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left) const {
			return -_Left;
		}
	};




















	template <class _Ty = void>
	struct logical_and {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left && _Right;
		}
	};


	template <class _Ty = void>
	struct logical_or {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left || _Right;
		}
	};


	template <class _Ty = void>
	struct logical_not {
		typedef _Ty argument_type;
		typedef bool result_type;

		constexpr bool operator()(const _Ty& _Left) const {
			return !_Left;
		}
	};


	template <class _Ty = void>
	struct bit_and {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left & _Right;
		}
	};


	template <class _Ty = void>
	struct bit_or {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left | _Right;
		}
	};


	template <class _Ty = void>
	struct bit_xor {
		typedef _Ty first_argument_type;
		typedef _Ty second_argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
			return _Left ^ _Right;
		}
	};


	template <class _Ty = void>
	struct bit_not {
		typedef _Ty argument_type;
		typedef _Ty result_type;

		constexpr _Ty operator()(const _Ty& _Left) const {
			return ~_Left;
		}
	};











	template <>
	struct divides<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) / ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) / ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct modulus<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) % ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) % ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct negate<void> {
		using is_transparent = int;

		template <class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
			-> decltype(-::std::forward<_Ty>(_Left)) {
			return -::std::forward<_Ty>(_Left);
		}
	};




















	template <>
	struct logical_and<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) && ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) && ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct logical_or<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) || ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) || ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct logical_not<void> {
		using is_transparent = int;

		template <class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
			-> decltype(!::std::forward<_Ty>(_Left)) {
			return !::std::forward<_Ty>(_Left);
		}
	};


	template <>
	struct bit_and<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left)& ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) & ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct bit_or<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) | ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) | ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct bit_xor<void> {
		using is_transparent = int;

		template <class _Ty1, class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const -> decltype(
			::std::forward<_Ty1>(_Left) ^ ::std::forward<_Ty2>(_Right)) {
			return ::std::forward<_Ty1>(_Left) ^ ::std::forward<_Ty2>(_Right);
		}
	};


	template <>
	struct bit_not<void> {
		using is_transparent = int;

		template <class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
			-> decltype(~::std::forward<_Ty>(_Left)) {
			return ~::std::forward<_Ty>(_Left);
		}
	};

#pragma warning(push)
#pragma warning(disable : 4996) 

	template <class _Fn>
	class  unary_negate {
	public:
		using argument_type = typename _Fn::argument_type;
		using result_type   = bool;

		constexpr explicit unary_negate(const _Fn& _Func) : _Functor(_Func) {
		}

		constexpr bool operator()(const argument_type& _Left) const {
			return !_Functor(_Left);
		}

	private:
		_Fn _Functor;
	};


	template <class _Fn>
	constexpr unary_negate<_Fn> not1(
		const _Fn& _Func) {
		return unary_negate<_Fn>(_Func);
	}


	template <class _Fn>
	class  binary_negate {
	public:
		using first_argument_type  = typename _Fn::first_argument_type;
		using second_argument_type = typename _Fn::second_argument_type;
		using result_type          = bool;

		constexpr explicit binary_negate(const _Fn& _Func) : _Functor(_Func) {
		}

		constexpr bool operator()(const first_argument_type& _Left,
			const second_argument_type& _Right) const {
			return !_Functor(_Left, _Right);
		}

	private:
		_Fn _Functor;
	};


	template <class _Fn>
	constexpr binary_negate<_Fn> not2(
		const _Fn& _Func) {
		return binary_negate<_Fn>(_Func);
	}
#pragma warning(pop)


#pragma warning(push)
#pragma warning(disable : 4996) 

	template <class _Fn>
	class binder1st : public unary_function<typename _Fn::second_argument_type,
		typename _Fn::result_type> {
	public:
		using _Base         = unary_function<typename _Fn::second_argument_type, typename _Fn::result_type>;
		using argument_type = typename _Base::argument_type;
		using result_type   = typename _Base::result_type;

		binder1st(const _Fn& _Func, const typename _Fn::first_argument_type& _Left)
			: op(_Func), value(_Left) {
		}

		result_type operator()(const argument_type& _Right) const {
			return op(value, _Right);
		}

		result_type operator()(argument_type& _Right) const {
			return op(value, _Right);
		}

	protected:
		_Fn op;
		typename _Fn::first_argument_type value;
	};


	template <class _Fn, class _Ty>
	inline binder1st<_Fn> bind1st(const _Fn& _Func, const _Ty& _Left) {
		typename _Fn::first_argument_type _Val(_Left);
		return binder1st<_Fn>(_Func, _Val);
	}


	template <class _Fn>
	class binder2nd : public unary_function<typename _Fn::first_argument_type,
		typename _Fn::result_type> {
	public:
		using _Base         = unary_function<typename _Fn::first_argument_type, typename _Fn::result_type>;
		using argument_type = typename _Base::argument_type;
		using result_type   = typename _Base::result_type;

		binder2nd(const _Fn& _Func, const typename _Fn::second_argument_type& _Right)
			: op(_Func), value(_Right) {
		}

		result_type operator()(const argument_type& _Left) const {
			return op(_Left, value);
		}

		result_type operator()(argument_type& _Left) const {
			return op(_Left, value);
		}

	protected:
		_Fn op;
		typename _Fn::second_argument_type value;
	};


	template <class _Fn, class _Ty>
	inline binder2nd<_Fn> bind2nd(const _Fn& _Func, const _Ty& _Right) {
		typename _Fn::second_argument_type _Val(_Right);
		return binder2nd<_Fn>(_Func, _Val);
	}
#pragma warning(pop)


	template <class _Arg, class _Result, class _Fn = _Result(*)(_Arg)>
	class pointer_to_unary_function : public unary_function<_Arg, _Result> {
	public:
		explicit pointer_to_unary_function(_Fn _Left) : _Pfun(_Left) {
		}

		_Result operator()(_Arg _Left) const {
			return _Pfun(_Left);
		}

	protected:
		_Fn _Pfun;
	};


	template <class _Arg1, class _Arg2, class _Result, class _Fn = _Result(*)(_Arg1, _Arg2)>
	class pointer_to_binary_function
		: public binary_function<_Arg1, _Arg2, _Result> {
	public:
		explicit pointer_to_binary_function(_Fn _Left) : _Pfun(_Left) {
		}

		_Result operator()(_Arg1 _Left, _Arg2 _Right) const {
			return _Pfun(_Left, _Right);
		}

	protected:
		_Fn _Pfun;
	};














	template <class _Arg, class _Result>  inline pointer_to_unary_function<_Arg, _Result, _Result(__cdecl*)(_Arg)> ptr_fun(_Result(__cdecl* _Left)(_Arg)) { return pointer_to_unary_function<_Arg, _Result, _Result(__cdecl*)(_Arg)>(_Left); } template <class _Arg1, class _Arg2, class _Result>  inline pointer_to_binary_function<_Arg1, _Arg2, _Result, _Result(__cdecl*)(_Arg1, _Arg2)> ptr_fun(_Result(__cdecl* _Left)(_Arg1, _Arg2)) { return pointer_to_binary_function<_Arg1, _Arg2, _Result, _Result(__cdecl*)(_Arg1, _Arg2)>(_Left); }    template <class _Arg, class _Result>  inline pointer_to_unary_function<_Arg, _Result, _Result(__vectorcall*)(_Arg)> ptr_fun(_Result(__vectorcall* _Left)(_Arg)) { return pointer_to_unary_function<_Arg, _Result, _Result(__vectorcall*)(_Arg)>(_Left); } template <class _Arg1, class _Arg2, class _Result>  inline pointer_to_binary_function<_Arg1, _Arg2, _Result, _Result(__vectorcall*)(_Arg1, _Arg2)> ptr_fun(_Result(__vectorcall* _Left)(_Arg1, _Arg2)) { return pointer_to_binary_function<_Arg1, _Arg2, _Result, _Result(__vectorcall*)(_Arg1, _Arg2)>(_Left); }



	template <class _Result, class _Ty>
	class mem_fun_t : public unary_function<_Ty*, _Result> {
	public:
		explicit mem_fun_t(_Result(_Ty::* _Pm)()) : _Pmemfun(_Pm) {
		}

		_Result operator()(_Ty* _Pleft) const {
			return (_Pleft->*_Pmemfun)();
		}

	private:
		_Result(_Ty::* _Pmemfun)();
	};


	template <class _Result, class _Ty, class _Arg>
	class mem_fun1_t : public binary_function<_Ty*, _Arg, _Result> {
	public:
		explicit mem_fun1_t(_Result(_Ty::* _Pm)(_Arg)) : _Pmemfun(_Pm) {
		}

		_Result operator()(_Ty* _Pleft, _Arg _Right) const {
			return (_Pleft->*_Pmemfun)(_Right);
		}

	private:
		_Result(_Ty::* _Pmemfun)(_Arg);
	};


	template <class _Result, class _Ty>
	class const_mem_fun_t : public unary_function<const _Ty*, _Result> {
	public:
		explicit const_mem_fun_t(_Result(_Ty::* _Pm)() const) : _Pmemfun(_Pm) {
		}

		_Result operator()(const _Ty* _Pleft) const {
			return (_Pleft->*_Pmemfun)();
		}

	private:
		_Result(_Ty::* _Pmemfun)() const;
	};


	template <class _Result, class _Ty, class _Arg>
	class const_mem_fun1_t
		: public binary_function<const _Ty*, _Arg, _Result> {
	public:
		explicit const_mem_fun1_t(_Result(_Ty::* _Pm)(_Arg) const) : _Pmemfun(_Pm) {
		}

		_Result operator()(const _Ty* _Pleft, _Arg _Right) const {
			return (_Pleft->*_Pmemfun)(_Right);
		}

	private:
		_Result(_Ty::* _Pmemfun)(_Arg) const;
	};


	template <class _Result, class _Ty>
	inline mem_fun_t<_Result, _Ty> mem_fun(_Result(_Ty::* _Pm)()) {
		return mem_fun_t<_Result, _Ty>(_Pm);
	}

	template <class _Result, class _Ty, class _Arg>
	inline mem_fun1_t<_Result, _Ty, _Arg> mem_fun(
		_Result(_Ty::* _Pm)(_Arg)) {
		return mem_fun1_t<_Result, _Ty, _Arg>(_Pm);
	}

	template <class _Result, class _Ty>
	inline const_mem_fun_t<_Result, _Ty> mem_fun(
		_Result(_Ty::* _Pm)() const) {
		return const_mem_fun_t<_Result, _Ty>(_Pm);
	}

	template <class _Result, class _Ty, class _Arg>
	inline const_mem_fun1_t<_Result, _Ty, _Arg> mem_fun(
		_Result(_Ty::* _Pm)(_Arg) const) {
		return const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm);
	}


	template <class _Result, class _Ty>
	class mem_fun_ref_t : public unary_function<_Ty, _Result> {
	public:
		explicit mem_fun_ref_t(_Result(_Ty::* _Pm)()) : _Pmemfun(_Pm) {
		}

		_Result operator()(_Ty& _Left) const {
			return (_Left.*_Pmemfun)();
		}

	private:
		_Result(_Ty::* _Pmemfun)();
	};


	template <class _Result, class _Ty, class _Arg>
	class mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result> {
	public:
		explicit mem_fun1_ref_t(_Result(_Ty::* _Pm)(_Arg)) : _Pmemfun(_Pm) {
		}

		_Result operator()(_Ty& _Left, _Arg _Right) const {
			return (_Left.*_Pmemfun)(_Right);
		}

	private:
		_Result(_Ty::* _Pmemfun)(_Arg);
	};


	template <class _Result, class _Ty>
	class const_mem_fun_ref_t : public unary_function<_Ty, _Result> {
	public:
		explicit const_mem_fun_ref_t(_Result(_Ty::* _Pm)() const) : _Pmemfun(_Pm) {
		}

		_Result operator()(const _Ty& _Left) const {
			return (_Left.*_Pmemfun)();
		}

	private:
		_Result(_Ty::* _Pmemfun)() const;
	};


	template <class _Result, class _Ty, class _Arg>
	class const_mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result> {
	public:
		explicit const_mem_fun1_ref_t(_Result(_Ty::* _Pm)(_Arg) const) : _Pmemfun(_Pm) {
		}

		_Result operator()(const _Ty& _Left, _Arg _Right) const {
			return (_Left.*_Pmemfun)(_Right);
		}

	private:
		_Result(_Ty::* _Pmemfun)(_Arg) const;
	};


	template <class _Result, class _Ty>
	inline mem_fun_ref_t<_Result, _Ty> mem_fun_ref(
		_Result(_Ty::* _Pm)()) {
		return mem_fun_ref_t<_Result, _Ty>(_Pm);
	}

	template <class _Result, class _Ty, class _Arg>
	inline mem_fun1_ref_t<_Result, _Ty, _Arg> mem_fun_ref(
		_Result(_Ty::* _Pm)(_Arg)) {
		return mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm);
	}

	template <class _Result, class _Ty>
	inline const_mem_fun_ref_t<_Result, _Ty> mem_fun_ref(
		_Result(_Ty::* _Pm)() const) {
		return const_mem_fun_ref_t<_Result, _Ty>(_Pm);
	}

	template <class _Result, class _Ty, class _Arg>
	inline const_mem_fun1_ref_t<_Result, _Ty, _Arg> mem_fun_ref(
		_Result(_Ty::* _Pm)(_Arg) const) {
		return const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm);
	}
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"


	template <class _Memptr>
	class _Mem_fn : public _Weak_types<_Memptr>::type {
	private:
		_Memptr _Pm;

	public:
		explicit _Mem_fn(_Memptr _Val) noexcept : _Pm(_Val) {
		}

		template <class... _Types>
		auto operator()(_Types&& ... _Args) const
			noexcept(noexcept(::std::invoke(_Pm, ::std::forward<_Types>(_Args)...)))
			-> decltype(::std::invoke(_Pm, ::std::forward<_Types>(_Args)...)) {
			return ::std::invoke(_Pm, ::std::forward<_Types>(_Args)...);
		}
	};

	template <class _Rx,
		class _Ty>
		inline _Mem_fn<_Rx _Ty::*> mem_fn(_Rx _Ty::* _Pm) noexcept {
		return _Mem_fn<_Rx _Ty::*>(_Pm);
	}























































































































#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"




	class bad_function_call : public exception {
	public:
		bad_function_call() noexcept {}

		virtual const char* what() const noexcept override {

			return "bad function call";
		}
	};

	[[noreturn]] void __cdecl _Xbad_function_call();


	template <class _Fty>
	class function;

	template <class _Ty>
	constexpr bool _Testable_callable_v =
		disjunction_v<is_pointer<_Ty>, _Is_specialization<_Ty, function>, is_member_pointer<_Ty>>;


	template <class _Ty>
	inline bool _Test_callable(const _Ty& _Arg) noexcept {
		if constexpr (_Testable_callable_v<_Ty>) {
			return !!_Arg;
		}
		else {
			(void)_Arg;
			return true;
		}
	}
















#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

#pragma warning(push)
#pragma warning(disable : 4265) 

	template <class _Rx, class... _Types>
	class __declspec(novtable) _Func_base {
	public:
		virtual _Func_base* _Copy(void*) const = 0;
		virtual _Func_base* _Move(void*) noexcept = 0;
		virtual _Rx _Do_call(_Types&& ...) = 0;
		virtual const type_info& _Target_type() const noexcept = 0;
		virtual void _Delete_this(bool) noexcept = 0;


		const void* _Target(const type_info& _Info) const noexcept {
			return _Target_type() == _Info ? _Get() : nullptr;
		}
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

		_Func_base() = default;
		_Func_base(const _Func_base&) = delete;
		_Func_base& operator=(const _Func_base&) = delete;


	private:
		virtual const void* _Get() const noexcept = 0;
	};
#pragma warning(pop)


	constexpr size_t _Space_size = (_Small_object_num_ptrs - 1) * sizeof(void*);

	template <class _Impl>
	constexpr bool _Is_large = (_Space_size < sizeof(_Impl)) || !_Impl::_Nothrow_move::value;

#pragma warning(push)
#pragma warning(disable : 4265) 



	template <class _Callable, class _Alloc, class _Rx, class... _Types>
	class _Func_impl final : public _Func_base<_Rx, _Types...> {

	public:
		using _Mybase        = _Func_base<_Rx, _Types...>;
		using _Myalty        = _Rebind_alloc_t<_Alloc, _Func_impl>;
		using _Myalty_traits = allocator_traits<_Myalty>;
		using _Nothrow_move  = is_nothrow_move_constructible<_Callable>;

		template <class _Other1, class _Other2>
		_Func_impl(_Other1&& _Val, _Other2&& _Ax)
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Other2>(_Ax), ::std::forward<_Other1>(_Val)) {}



	private:
		virtual _Mybase* _Copy(void* _Where) const override {
			auto& _Myax = _Mypair._Get_first();
			if
				constexpr (_Is_large<_Func_impl>) {
				(void)_Where;
				return _Alloc_rebound<_Func_impl>(_Myax, _Mypair._Myval2, _Myax);
			}
			else {
				_Myalty _Al(_Myax);
				const auto _Ptr = static_cast<_Func_impl*>(_Where);
				_Myalty_traits::construct(_Al, _Ptr, _Mypair._Myval2, _Myax);
				return _Ptr;
			}
		}

		virtual _Mybase* _Move(void* _Where) noexcept override {
			if
				constexpr (_Is_large<_Func_impl>) {
				(void)_Where;
				return nullptr;
			}
			else {
				auto& _Myax = _Mypair._Get_first();
				_Myalty _Al(_Myax);
				const auto _Ptr = static_cast<_Func_impl*>(_Where);
				_Myalty_traits::construct(_Al, _Ptr, ::std::move(_Mypair._Myval2), ::std::move(_Myax));
				return _Ptr;
			}
		}

		virtual _Rx _Do_call(_Types&& ... _Args) override {
			return _Invoker_ret<_Rx>::_Call(_Mypair._Myval2, ::std::forward<_Types>(_Args)...);
		}

		virtual const type_info& _Target_type() const noexcept override {

			return typeid(_Callable);


#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"
		}

		virtual const void* _Get() const noexcept override {
			return ::std::addressof(_Mypair._Myval2);
		}

		virtual void _Delete_this(bool _Deallocate) noexcept override {
			auto& _Myax = _Mypair._Get_first();
			_Myalty _Al(_Myax);
			_Myalty_traits::destroy(_Al, this);
			if (_Deallocate) {
				_Deallocate_plain(_Al, this);
			}
		}

		_Compressed_pair<_Alloc, _Callable> _Mypair;
	};
#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"


	template <class _Callable, class _Rx, class... _Types>
	class _Func_impl_no_alloc final : public _Func_base<_Rx, _Types...> {

	public:
		using _Mybase       = _Func_base<_Rx, _Types...>;
		using _Nothrow_move = is_nothrow_move_constructible<_Callable>;

		template <class _Other, class = enable_if_t<!is_same_v<_Func_impl_no_alloc, decay_t<_Other>>>>
		explicit _Func_impl_no_alloc(_Other&& _Val) : _Callee(::std::forward<_Other>(_Val)) {}



	private:
		virtual _Mybase* _Copy(void* _Where) const override {
			if
				constexpr (_Is_large<_Func_impl_no_alloc>) {
				(void)_Where;
				return _Global_new<_Func_impl_no_alloc>(_Callee);
			}
			else {
				return ::new (_Where) _Func_impl_no_alloc(_Callee);
			}
		}

		virtual _Mybase* _Move(void* _Where) noexcept override {
			if
				constexpr (_Is_large<_Func_impl_no_alloc>) {
				(void)_Where;
				return nullptr;
			}
			else {
				return ::new (_Where) _Func_impl_no_alloc(::std::move(_Callee));
			}
		}

		virtual _Rx _Do_call(_Types&& ... _Args) override {
			return _Invoker_ret<_Rx>::_Call(_Callee, ::std::forward<_Types>(_Args)...);
		}

		virtual const type_info& _Target_type() const noexcept override {

			return typeid(_Callable);


#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"
		}

		virtual const void* _Get() const noexcept override {
			return ::std::addressof(_Callee);
		}

		virtual void _Delete_this(bool _Dealloc) noexcept override {
			this->~_Func_impl_no_alloc();
			if (_Dealloc) {
				_Deallocate<alignof(_Func_impl_no_alloc)>(this, sizeof(_Func_impl_no_alloc));
			}
		}

		_Callable _Callee;
	};
#pragma warning(pop)


	template <class _Ret, class... _Types>
	class _Func_class : public _Arg_types<_Types...> {
	public:
		using result_type = _Ret;

		using _Ptrt = _Func_base<_Ret, _Types...>;

		_Func_class() noexcept {
			_Set(nullptr);
		}

		_Ret operator()(_Types... _Args) const {
			if (_Empty()) {
				_Xbad_function_call();
			}
			const auto _Impl = _Getimpl();
			return _Impl->_Do_call(::std::forward<_Types>(_Args)...);
		}

		~_Func_class() noexcept {
			_Tidy();
		}

	protected:
		template <class _Fx, class _Function>
		using _Enable_if_callable_t =
			enable_if_t<conjunction_v<negation<is_same<decay_t<_Fx>, _Function>>, _Is_invocable_r<_Ret, _Fx, _Types...>>>;

		bool _Empty() const noexcept {
			return _Getimpl() == nullptr;
		}

		void _Reset_copy(const _Func_class& _Right) {
			if (!_Right._Empty()) {
				_Set(_Right._Getimpl()->_Copy(&_Mystorage));
			}
		}

		void _Reset_move(_Func_class&& _Right) noexcept {
			if (!_Right._Empty()) {
				if (_Right._Local()) {
					_Set(_Right._Getimpl()->_Move(&_Mystorage));
					_Right._Tidy();
				}
				else {
					_Set(_Right._Getimpl());
					_Right._Set(nullptr);
				}
			}
		}

		template <class _Fx>
		void _Reset(_Fx&& _Val) {
			if (!_Test_callable(_Val)) {
				return;
			}

			using _Impl = _Func_impl_no_alloc<decay_t<_Fx>, _Ret, _Types...>;
			if
				constexpr (_Is_large<_Impl>) {

				_Set(_Global_new<_Impl>(::std::forward<_Fx>(_Val)));
			}
			else {

				_Set(::new (static_cast<void*>(&_Mystorage)) _Impl(::std::forward<_Fx>(_Val)));
			}
		}


		template <class _Fx, class _Alloc>
		void _Reset_alloc(_Fx&& _Val, const _Alloc& _Ax) {
			if (!_Test_callable(_Val)) {
				return;
			}

			using _Myimpl = _Func_impl<decay_t<_Fx>, _Alloc, _Ret, _Types...>;
			using _Alimpl = _Rebind_alloc_t<_Alloc, _Myimpl>;
			_Alimpl _Al(_Ax);
			if
				constexpr (_Is_large<_Myimpl>) {

				_Set(_Unfancy(_Alloc_new(_Al, ::std::forward<_Fx>(_Val), _Ax)));
			}
			else {

				const auto _Ptr = reinterpret_cast<_Myimpl*>(&_Mystorage);
				allocator_traits<_Alimpl>::construct(_Al, _Ptr, ::std::forward<_Fx>(_Val), _Ax);
				_Set(_Ptr);
			}
		}
#line 1124 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

		void _Tidy() noexcept {
			if (!_Empty()) {
				_Getimpl()->_Delete_this(!_Local());
				_Set(nullptr);
			}
		}

		void _Swap(_Func_class& _Right) noexcept {
			if (!_Local() && !_Right._Local()) {
				_Ptrt* _Temp = _Getimpl();
				_Set(_Right._Getimpl());
				_Right._Set(_Temp);
			}
			else {
				_Func_class _Temp;
				_Temp._Reset_move(::std::move(*this));
				_Reset_move(::std::move(_Right));
				_Right._Reset_move(::std::move(_Temp));
			}
		}


		const type_info& _Target_type() const noexcept {
			return _Getimpl() ? _Getimpl()->_Target_type() : typeid(void);
		}

		const void* _Target(const type_info& _Info) const noexcept {
			return _Getimpl() ? _Getimpl()->_Target(_Info) : nullptr;
		}
#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

	private:
		bool _Local() const noexcept {
			return _Getimpl() == static_cast<const void*>(&_Mystorage);
		}

		union _Storage {
			max_align_t _Dummy1;
			char _Dummy2[_Space_size];
			_Ptrt* _Ptrs[_Small_object_num_ptrs];
		};

		_Storage _Mystorage;
		enum { _EEN_IMPL = _Small_object_num_ptrs - 1 };
		_Ptrt* _Getimpl() const noexcept {
			return _Mystorage._Ptrs[_Small_object_num_ptrs - 1];
		}

		void _Set(_Ptrt* _Ptr) noexcept {
			_Mystorage._Ptrs[_Small_object_num_ptrs - 1] = _Ptr;
		}
	};


	template <class _Tx>
	struct _Get_function_impl;







	template <class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl(_Types...)> { using type = _Func_class<_Ret, _Types...>; };    template <class _Ret, class... _Types> struct _Get_function_impl<_Ret __vectorcall(_Types...)> { using type = _Func_class<_Ret, _Types...>; };



	template <class _Fty>
	class function : public _Get_function_impl<_Fty>::type {
	private:
		using _Mybase = typename _Get_function_impl<_Fty>::type;

	public:
		function() noexcept {}

		function(nullptr_t) noexcept {}

		function(const function& _Right) {
			this->_Reset_copy(_Right);
		}

		template <class _Fx, class = typename _Mybase::template _Enable_if_callable_t<_Fx&, function>>
		function(_Fx _Func) {
			this->_Reset(::std::move(_Func));
		}


		template <class _Alloc>
		function(allocator_arg_t, const _Alloc&) noexcept {}

		template <class _Alloc>
		function(allocator_arg_t, const _Alloc&, nullptr_t) noexcept {

		}

		template <class _Alloc>
		function(allocator_arg_t, const _Alloc& _Ax, const function& _Right) {

			this->_Reset_alloc(_Right, _Ax);
		}

		template <class _Fx, class _Alloc, class = typename _Mybase::template _Enable_if_callable_t<_Fx&, function>>
		function(allocator_arg_t, const _Alloc& _Ax, _Fx _Func) {
			this->_Reset_alloc(::std::move(_Func), _Ax);
		}
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

		function & operator=(const function & _Right) {
			function(_Right).swap(*this);
			return *this;
		}

		function(function&& _Right) noexcept {
			this->_Reset_move(::std::move(_Right));
		}


		template <class _Alloc>
		function(allocator_arg_t, const _Alloc& _Al, function&& _Right) {

			this->_Reset_alloc(::std::move(_Right), _Al);
		}
#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

		function & operator=(function && _Right) noexcept {

			if (this != ::std::addressof(_Right)) {
				this->_Tidy();
				this->_Reset_move(::std::move(_Right));
			}
			return *this;
		}

		template <class _Fx, class = typename _Mybase::template _Enable_if_callable_t<decay_t<_Fx>&, function>>
		function& operator=(_Fx&& _Func) {
			function(::std::forward<_Fx>(_Func)).swap(*this);
			return *this;
		}


		template <class _Fx, class _Alloc>
		void assign(_Fx&& _Func, const _Alloc& _Ax) {
			function(allocator_arg, _Ax, ::std::forward<_Fx>(_Func)).swap(*this);
		}
#line 1269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

		function & operator=(nullptr_t) noexcept {
			this->_Tidy();
			return *this;
		}

		template <class _Fx>
		function& operator=(reference_wrapper<_Fx> _Func) noexcept {

			this->_Tidy();
			this->_Reset(_Func);
			return *this;
		}

		void swap(function& _Right) noexcept {
			this->_Swap(_Right);
		}

		explicit operator bool() const noexcept {
			return !this->_Empty();
		}


		const type_info& target_type() const noexcept {
			return this->_Target_type();
		}

		template <class _Fx>
		_Fx* target() noexcept {
			return reinterpret_cast<_Fx*>(const_cast<void*>(this->_Target(typeid(_Fx))));
		}

		template <class _Fx>
		const _Fx* target() const noexcept {
			return reinterpret_cast<const _Fx*>(this->_Target(typeid(_Fx)));
		}








#line 1314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"
	};



















#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"


	template <class _Fty>
	inline void swap(function<_Fty> & _Left, function<_Fty> & _Right) noexcept {

		_Left.swap(_Right);
	}


	template <class _Fty>
	inline bool operator==(const function<_Fty>& _Other, nullptr_t) noexcept {
		return !_Other;
	}

	template <class _Fty>
	inline bool operator==(nullptr_t, const function<_Fty>& _Other) noexcept {
		return !_Other;
	}

	template <class _Fty>
	inline bool operator!=(const function<_Fty>& _Other, nullptr_t) noexcept {
		return static_cast<bool>(_Other);
	}

	template <class _Fty>
	inline bool operator!=(nullptr_t, const function<_Fty>& _Other) noexcept {
		return static_cast<bool>(_Other);
	}


	template <int _Nx>
	struct _Ph {
	};

	template <class _Tx>
	struct is_placeholder : integral_constant<int, 0> {
	};

	template <int _Nx>
	struct is_placeholder<_Ph<_Nx>>
		: integral_constant<int, _Nx> {
	};

	template <class _Tx>
	struct is_placeholder<const _Tx> : is_placeholder<_Tx>::type {
	};

	template <class _Tx>
	struct is_placeholder<volatile _Tx> : is_placeholder<_Tx>::type {
	};

	template <class _Tx>
	struct is_placeholder<const volatile _Tx> : is_placeholder<_Tx>::type {
	};

	template <class _Ty>
	constexpr int is_placeholder_v = is_placeholder<_Ty>::value;


	template <class _Ret, class _Fx, class... _Types>
	class _Binder;


	template <class _Tx>
	struct is_bind_expression : false_type {
	};

	template <class _Ret, class _Fx, class... _Types>
	struct is_bind_expression<_Binder<_Ret, _Fx, _Types...>> : true_type {

	};

	template <class _Tx>
	struct is_bind_expression<const _Tx> : is_bind_expression<_Tx>::type {
	};

	template <class _Tx>
	struct is_bind_expression<volatile _Tx> : is_bind_expression<_Tx>::type {
	};

	template <class _Tx>
	struct is_bind_expression<const volatile _Tx> : is_bind_expression<_Tx>::type {
	};

	template <class _Ty>
	constexpr bool is_bind_expression_v = is_bind_expression<_Ty>::value;


	template <class _Cv_TiD, bool = _Is_specialization_v<remove_cv_t<_Cv_TiD>, reference_wrapper>,
		bool = is_bind_expression_v<_Cv_TiD>, int = is_placeholder_v<_Cv_TiD>>
		struct _Select_fixer;

	template <class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, true, false, 0> {
		template <class _Untuple>
		static auto _Fix(_Cv_TiD& _Tid, _Untuple&&) -> typename _Cv_TiD::type & {
			return _Tid.get();
		}
	};

	template <class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, false, true, 0> {
#pragma warning(push)
#pragma warning(disable : 4100) 
		template <class _Untuple, size_t... _Jx>
		static auto _Apply(_Cv_TiD& _Tid, _Untuple&& _Ut,
			index_sequence<_Jx...>) -> decltype(_Tid(::std::get<_Jx>(::std::move(_Ut))...)) {
			return _Tid(::std::get<_Jx>(::std::move(_Ut))...);
		}
#pragma warning(pop)

		template <class _Untuple>
		static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut) -> decltype(_Apply(_Tid, ::std::move(_Ut),
			make_index_sequence<tuple_size_v<_Untuple>>())) {
			return _Apply(_Tid, ::std::move(_Ut), make_index_sequence<tuple_size_v<_Untuple>>());
		}
	};

	template <class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, false, false, 0> {
		template <class _Untuple>
		static _Cv_TiD& _Fix(_Cv_TiD& _Tid, _Untuple&&) {
			return _Tid;
		}
	};

	template <class _Cv_TiD, int _Jx>
	struct _Select_fixer<_Cv_TiD, false, false, _Jx> {
		static_assert(_Jx > 0, "invalid is_placeholder value");

		template <class _Untuple>
		static auto _Fix(_Cv_TiD&, _Untuple&& _Ut)
			-> decltype(::std::get<_Jx - 1>(::std::move(_Ut))) {
			return ::std::get<_Jx - 1>(::std::move(_Ut));
		}
	};

	template <class _Cv_TiD, class _Untuple>
	inline auto _Fix_arg(_Cv_TiD& _Tid, _Untuple&& _Ut)
		-> decltype(_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std::move(_Ut))) {
		return _Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std::move(_Ut));
	}

#pragma warning(push)
#pragma warning(disable : 4100) 

	template <class _Ret, size_t... _Ix, class _Cv_FD, class _Cv_tuple_TiD, class _Untuple>
	inline auto _Call_binder(_Invoker_ret<_Ret>, index_sequence<_Ix...>, _Cv_FD& _Obj, _Cv_tuple_TiD& _Tpl, _Untuple&& _Ut)
		-> decltype(_Invoker_ret<_Ret>::_Call(
			_Obj, _Fix_arg(::std::get<_Ix>(_Tpl), ::std::move(_Ut))...)) {
		return _Invoker_ret<_Ret>::_Call(_Obj, _Fix_arg(::std::get<_Ix>(_Tpl), ::std::move(_Ut))...);
	}
#pragma warning(pop)


	template <class _Ret>
	struct _Forced_result_type {
		typedef _Ret result_type;
	};

	template <class _Ret,
		class _Fx>
		struct _Binder_result_type {
		using _Decayed = decay_t<_Fx>;

		using _All_weak_types = typename _Weak_types<_Decayed>::type;

		using type =
			conditional_t<is_same_v<_Ret, _Unforced>, _Weak_result_type<_All_weak_types>, _Forced_result_type<_Ret>>;
	};

	template <class _Ret, class _Fx, class... _Types>
	class _Binder : public _Binder_result_type<_Ret, _Fx>::type {
	private:
		using _Seq    = index_sequence_for<_Types...>;
		using _First  = decay_t<_Fx>;
		using _Second = tuple<decay_t<_Types>...>;

		_Compressed_pair<_First, _Second> _Mypair;

	public:
		explicit _Binder(_Fx&& _Func, _Types&& ... _Args)
			: _Mypair(_One_then_variadic_args_t(), ::std::forward<_Fx>(_Func),
				::std::forward<_Types>(_Args)...) {
		}











		template <class... _Unbound> auto operator()(_Unbound&& ... _Unbargs) ->decltype(_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Myval2, ::std::forward_as_tuple(::std::forward<_Unbound>(_Unbargs)...))) { return _Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Myval2, ::std::forward_as_tuple(::std::forward<_Unbound>(_Unbargs)...)); } template <class... _Unbound> auto operator()(_Unbound&& ... _Unbargs) const->decltype(_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Myval2, ::std::forward_as_tuple(::std::forward<_Unbound>(_Unbargs)...))) { return _Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Myval2, ::std::forward_as_tuple(::std::forward<_Unbound>(_Unbargs)...)); }

	};


	template <class _Fx, class... _Types>
	inline _Binder<_Unforced, _Fx, _Types...> bind(
		_Fx&& _Func, _Types&& ... _Args) {
		return _Binder<_Unforced, _Fx, _Types...>(::std::forward<_Fx>(_Func), ::std::forward<_Types>(_Args)...);
	}


	template <class _Ret, class _Fx, class... _Types>
	_Binder<_Ret, _Fx, _Types...> bind(
		_Fx&& _Func, _Types&& ... _Args) {
		return _Binder<_Ret, _Fx, _Types...>(::std::forward<_Fx>(_Func), ::std::forward<_Types>(_Args)...);
	}


	namespace placeholders {
		constexpr _Ph<1> _1{};
		constexpr _Ph<2> _2{};
		constexpr _Ph<3> _3{};
		constexpr _Ph<4> _4{};
		constexpr _Ph<5> _5{};
		constexpr _Ph<6> _6{};
		constexpr _Ph<7> _7{};
		constexpr _Ph<8> _8{};
		constexpr _Ph<9> _9{};
		constexpr _Ph<10> _10{};
		constexpr _Ph<11> _11{};
		constexpr _Ph<12> _12{};
		constexpr _Ph<13> _13{};
		constexpr _Ph<14> _14{};
		constexpr _Ph<15> _15{};
		constexpr _Ph<16> _16{};
		constexpr _Ph<17> _17{};
		constexpr _Ph<18> _18{};
		constexpr _Ph<19> _19{};
		constexpr _Ph<20> _20{};
	}



	template <class _Fty, class _Alloc>
	struct uses_allocator<function<_Fty>, _Alloc> : true_type {
	};
#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"































































































































































































































































































































































































































































































































































































































#line 2187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"


	namespace [[deprecated("warning STL4002: " "The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can " "define _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to acknowledge that you have received this warning.")]] tr1{
		using ::std::bad_function_call;
		using ::std::bind;
		using ::std::function;
		using ::std::is_bind_expression;
		using ::std::is_placeholder;
		using ::std::mem_fn;
		using ::std::swap;
		namespace placeholders {
			using namespace ::std::placeholders;
		}
	}
#line 2202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"

}



#pragma warning(pop)
#pragma pack(pop)
#line 2210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"
#line 2211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\functional"





#line 104 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"














#line 119 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

namespace testing {



	namespace internal2 {



		void PrintBytesInObjectTo(const unsigned char* obj_bytes,
			size_t count,
			::std::ostream* os);



		enum TypeKind {
			kProtobuf,
			kConvertibleToInteger,




#line 142 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"
			kOtherType
		};





		template <typename T, TypeKind kTypeKind>
		class TypeWithoutFormatter {
		public:

			static void PrintValue(const T& value, ::std::ostream* os) {
				PrintBytesInObjectTo(
					static_cast<const unsigned char*>(
						reinterpret_cast<const void*>(std::addressof(value))),
					sizeof(value), os);
			}
		};




		const size_t kProtobufOneLinerMaxLength = 50;

		template <typename T>
		class TypeWithoutFormatter<T, kProtobuf> {
		public:
			static void PrintValue(const T& value, ::std::ostream* os) {
				std::string pretty_str = value.ShortDebugString();
				if (pretty_str.length() > kProtobufOneLinerMaxLength) {
					pretty_str = "\n" + value.DebugString();
				}
				*os << ("<" + pretty_str + ">");
			}
		};

		template <typename T>
		class TypeWithoutFormatter<T, kConvertibleToInteger> {
		public:







			static void PrintValue(const T& value, ::std::ostream* os) {
				const internal::BiggestInt kBigInt = value;
				*os << kBigInt;
			}
		};












#line 206 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

























		template <typename Char, typename CharTraits, typename T>
		::std::basic_ostream<Char, CharTraits>& operator<<(
			::std::basic_ostream<Char, CharTraits>& os, const T& x) {
			TypeWithoutFormatter<T, (internal::IsAProtocolMessage<T>::value
				? kProtobuf
				: std::is_convertible<
				const T&, internal::BiggestInt>::value
				? kConvertibleToInteger
				:





#line 246 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"
				kOtherType)>::PrintValue(x, &os);
			return os;
		}

	}
}



namespace testing_internal {



	template <typename T>
	void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {











		using namespace ::testing::internal2;














		* os << value;
	}

}

namespace testing {
	namespace internal {
















		template <typename ToPrint, typename OtherOperand>
		class FormatForComparison {
		public:
			static ::std::string Format(const ToPrint& value) {
				return ::testing::PrintToString(value);
			}
		};


		template <typename ToPrint, size_t N, typename OtherOperand>
		class FormatForComparison<ToPrint[N], OtherOperand> {
		public:
			static ::std::string Format(const ToPrint* value) {
				return FormatForComparison<const ToPrint*, OtherOperand>::Format(value);
			}
		};













template <typename OtherOperand> class FormatForComparison<char*, OtherOperand> { public: static ::std::string Format(char* value) { return ::testing::PrintToString(static_cast<const void*>(value)); } };
template <typename OtherOperand> class FormatForComparison<const char*, OtherOperand> { public: static ::std::string Format(const char* value) { return ::testing::PrintToString(static_cast<const void*>(value)); } };
template <typename OtherOperand> class FormatForComparison<wchar_t*, OtherOperand> { public: static ::std::string Format(wchar_t* value) { return ::testing::PrintToString(static_cast<const void*>(value)); } };
template <typename OtherOperand> class FormatForComparison<const wchar_t*, OtherOperand> { public: static ::std::string Format(const wchar_t* value) { return ::testing::PrintToString(static_cast<const void*>(value)); } };















template <> class FormatForComparison<char*, ::std::string> { public: static ::std::string Format(char* value) { return ::testing::PrintToString(value); } };
template <> class FormatForComparison<const char*, ::std::string> { public: static ::std::string Format(const char* value) { return ::testing::PrintToString(value); } };


template <> class FormatForComparison<wchar_t*, ::std::wstring> { public: static ::std::string Format(wchar_t* value) { return ::testing::PrintToString(value); } };
template <> class FormatForComparison<const wchar_t*, ::std::wstring> { public: static ::std::string Format(const wchar_t* value) { return ::testing::PrintToString(value); } };
#line 365 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"











template <typename T1, typename T2>
std::string FormatForComparisonFailureMessage(
	const T1& value, const T2&) {
	return FormatForComparison<T1, T2>::Format(value);
}








template <typename T>
class UniversalPrinter;

template <typename T>
void UniversalPrint(const T& value, ::std::ostream* os);

enum DefaultPrinterType {
	kPrintContainer,
	kPrintPointer,
	kPrintFunctionPointer,
	kPrintOther,
};
template <DefaultPrinterType type> struct WrapPrinterType {};



template <typename C>
void DefaultPrintTo(WrapPrinterType<kPrintContainer>,
	const C& container, ::std::ostream* os) {
	const size_t kMaxCount = 32;
	*os << '{';
	size_t count = 0;
	for (typename C::const_iterator it = container.begin();
		it != container.end(); ++it, ++count) {
		if (count > 0) {
			*os << ',';
			if (count == kMaxCount) {
				*os << " ...";
				break;
			}
		}
		*os << ' ';


		internal::UniversalPrint(*it, os);
	}

	if (count > 0) {
		*os << ' ';
	}
	*os << '}';
}







template <typename T>
void DefaultPrintTo(WrapPrinterType<kPrintPointer>,
	T* p, ::std::ostream* os) {
	if (p == nullptr) {
		*os << "NULL";
	}
	else {



		*os << p;
	}
}
template <typename T>
void DefaultPrintTo(WrapPrinterType<kPrintFunctionPointer>,
	T* p, ::std::ostream* os) {
	if (p == nullptr) {
		*os << "NULL";
	}
	else {



		*os << reinterpret_cast<const void*>(p);
	}
}



template <typename T>
void DefaultPrintTo(WrapPrinterType<kPrintOther>,
	const T& value, ::std::ostream* os) {
	::testing_internal::DefaultPrintNonContainerTo(value, os);
}












template <typename T>
void PrintTo(const T& value, ::std::ostream* os) {



















	DefaultPrintTo(
		WrapPrinterType <
		(sizeof(IsContainerTest<T>(0)) == sizeof(IsContainer)) &&
		!IsRecursiveContainer<T>::value
		? kPrintContainer
		: !std::is_pointer<T>::value
		? kPrintOther
		: std::is_function<typename std::remove_pointer<T>::type>::value
		? kPrintFunctionPointer
		: kPrintPointer >(),
		value, os);
}






void PrintTo(unsigned char c, ::std::ostream* os);
void PrintTo(signed char c, ::std::ostream* os);
inline void PrintTo(char c, ::std::ostream* os) {



	PrintTo(static_cast<unsigned char>(c), os);
}


inline void PrintTo(bool x, ::std::ostream* os) {
	*os << (x ? "true" : "false");
}








void PrintTo(wchar_t wc, ::std::ostream* os);


void PrintTo(const char* s, ::std::ostream* os);
inline void PrintTo(char* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const char*>(s), os);
}



inline void PrintTo(const signed char* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const void*>(s), os);
}
inline void PrintTo(signed char* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const void*>(s), os);
}
inline void PrintTo(const unsigned char* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const void*>(s), os);
}
inline void PrintTo(unsigned char* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const void*>(s), os);
}








void PrintTo(const wchar_t* s, ::std::ostream* os);
inline void PrintTo(wchar_t* s, ::std::ostream* os) {
	PrintTo(ImplicitCast_<const wchar_t*>(s), os);
}
#line 577 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"






template <typename T>
void PrintRawArrayTo(const T a[], size_t count, ::std::ostream * os) {
	UniversalPrint(a[0], os);
	for (size_t i = 1; i != count; i++) {
		*os << ", ";
		UniversalPrint(a[i], os);
	}
}


void PrintStringTo(const ::std::string& s, ::std::ostream* os);
inline void PrintTo(const ::std::string& s, ::std::ostream* os) {
	PrintStringTo(s, os);
}



void PrintWideStringTo(const ::std::wstring& s, ::std::ostream* os);
inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {
	PrintWideStringTo(s, os);
}
#line 605 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"






#line 612 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

inline void PrintTo(std::nullptr_t, ::std::ostream * os) { *os << "(nullptr)"; }

template <typename T>
void PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {
	UniversalPrinter<T&>::Print(ref.get(), os);
}



template <typename T>
void PrintTupleTo(const T&, std::integral_constant<size_t, 0>,
	::std::ostream*) {}

template <typename T, size_t I>
void PrintTupleTo(const T& t, std::integral_constant<size_t, I>,
	::std::ostream* os) {
	PrintTupleTo(t, std::integral_constant<size_t, I - 1>(), os);
	__pragma(warning(push)) __pragma(warning(disable: 4127))
		if (I > 1) {
			__pragma(warning(pop))
				* os << ", ";
		}
	UniversalPrinter<typename std::tuple_element<I - 1, T>::type>::Print(
		std::get<I - 1>(t), os);
}

template <typename... Types>
void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {
	*os << "(";
	PrintTupleTo(t, std::integral_constant<size_t, sizeof...(Types)>(), os);
	*os << ")";
}


template <typename T1, typename T2>
void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {
	*os << '(';


	UniversalPrinter<T1>::Print(value.first, os);
	*os << ", ";
	UniversalPrinter<T2>::Print(value.second, os);
	*os << ')';
}



template <typename T>
class UniversalPrinter {
public:


	__pragma(warning(push)) __pragma(warning(disable: 4180))




		static void Print(const T& value, ::std::ostream* os) {








		PrintTo(value, os);
	}

	__pragma(warning(pop))
};









































#line 726 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"



template <typename T>
void UniversalPrintArray(const T * begin, size_t len, ::std::ostream * os) {
	if (len == 0) {
		*os << "{}";
	}
	else {
		*os << "{ ";
		const size_t kThreshold = 18;
		const size_t kChunkSize = 8;



		if (len <= kThreshold) {
			PrintRawArrayTo(begin, len, os);
		}
		else {
			PrintRawArrayTo(begin, kChunkSize, os);
			*os << ", ..., ";
			PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os);
		}
		*os << " }";
	}
}

void UniversalPrintArray(
	const char* begin, size_t len, ::std::ostream* os);


void UniversalPrintArray(
	const wchar_t* begin, size_t len, ::std::ostream* os);


template <typename T, size_t N>
class UniversalPrinter<T[N]> {
public:


	static void Print(const T(&a)[N], ::std::ostream* os) {
		UniversalPrintArray(a, N, os);
	}
};


template <typename T>
class UniversalPrinter<T&> {
public:


	__pragma(warning(push)) __pragma(warning(disable: 4180))

		static void Print(const T& value, ::std::ostream* os) {


		*os << "@" << reinterpret_cast<const void*>(&value) << " ";


		UniversalPrint(value, os);
	}

	__pragma(warning(pop))
};





template <typename T>
class UniversalTersePrinter {
public:
	static void Print(const T& value, ::std::ostream* os) {
		UniversalPrint(value, os);
	}
};
template <typename T>
class UniversalTersePrinter<T&> {
public:
	static void Print(const T& value, ::std::ostream* os) {
		UniversalPrint(value, os);
	}
};
template <typename T, size_t N>
class UniversalTersePrinter<T[N]> {
public:
	static void Print(const T(&value)[N], ::std::ostream* os) {
		UniversalPrinter<T[N]>::Print(value, os);
	}
};
template <>
class UniversalTersePrinter<const char*> {
public:
	static void Print(const char* str, ::std::ostream* os) {
		if (str == nullptr) {
			*os << "NULL";
		}
		else {
			UniversalPrint(std::string(str), os);
		}
	}
};
template <>
class UniversalTersePrinter<char*> {
public:
	static void Print(char* str, ::std::ostream* os) {
		UniversalTersePrinter<const char*>::Print(str, os);
	}
};


template <>
class UniversalTersePrinter<const wchar_t*> {
public:
	static void Print(const wchar_t* str, ::std::ostream* os) {
		if (str == nullptr) {
			*os << "NULL";
		}
		else {
			UniversalPrint(::std::wstring(str), os);
		}
	}
};
#line 846 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

template <>
class UniversalTersePrinter<wchar_t*> {
public:
	static void Print(wchar_t* str, ::std::ostream* os) {
		UniversalTersePrinter<const wchar_t*>::Print(str, os);
	}
};

template <typename T>
void UniversalTersePrint(const T& value, ::std::ostream* os) {
	UniversalTersePrinter<T>::Print(value, os);
}





template <typename T>
void UniversalPrint(const T& value, ::std::ostream* os) {


	typedef T T1;
	UniversalPrinter<T1>::Print(value, os);
}

typedef ::std::vector< ::std::string> Strings;



template <typename Tuple>
void TersePrintPrefixToStrings(const Tuple&, std::integral_constant<size_t, 0>,
	Strings*) {}
template <typename Tuple, size_t I>
void TersePrintPrefixToStrings(const Tuple& t,
	std::integral_constant<size_t, I>,
	Strings* strings) {
	TersePrintPrefixToStrings(t, std::integral_constant<size_t, I - 1>(),
		strings);
	::std::stringstream ss;
	UniversalTersePrint(std::get<I - 1>(t), &ss);
	strings->push_back(ss.str());
}




template <typename Tuple>
Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {
	Strings result;
	TersePrintPrefixToStrings(
		value, std::integral_constant<size_t, std::tuple_size<Tuple>::value>(),
		&result);
	return result;
}

	}









#line 913 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

	template <typename T>
	::std::string PrintToString(const T & value) {
		::std::stringstream ss;
		internal::UniversalTersePrinter<T>::Print(value, &ss);
		return ss.str();
	}

}




#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\custom\\gtest-printers.h"









































#line 43 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\custom\\gtest-printers.h"
#line 927 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"

#line 929 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-printers.h"
#line 48 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"








#line 57 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"


__pragma(warning(push)) __pragma(warning(disable: 4251 5046))
#line 63 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"

namespace testing {
















	class MatchResultListener {
	public:



		explicit MatchResultListener(::std::ostream* os) : stream_(os) {}
		virtual ~MatchResultListener() = 0;



		template <typename T>
		MatchResultListener& operator<<(const T& x) {
			if (stream_ != nullptr)* stream_ << x;
			return *this;
		}


		::std::ostream* stream() { return stream_; }





		bool IsInterested() const { return stream_ != nullptr; }

	private:
		::std::ostream* const stream_;

		MatchResultListener(MatchResultListener const&) = delete; void operator=(MatchResultListener const&) = delete;
	};

	inline MatchResultListener::~MatchResultListener() {
	}



	class MatcherDescriberInterface {
	public:
		virtual ~MatcherDescriberInterface() {}






		virtual void DescribeTo(::std::ostream* os) const = 0;







		virtual void DescribeNegationTo(::std::ostream* os) const {
			*os << "not (";
			DescribeTo(os);
			*os << ")";
		}
	};


	template <typename T>
	class MatcherInterface : public MatcherDescriberInterface {
	public:































		virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;




	};

	namespace internal {


		template <typename T>
		class MatcherInterfaceAdapter : public MatcherInterface<const T&> {
		public:
			explicit MatcherInterfaceAdapter(const MatcherInterface<T>* impl)
				: impl_(impl) {}
			~MatcherInterfaceAdapter() override { delete impl_; }

			void DescribeTo(::std::ostream* os) const override { impl_->DescribeTo(os); }

			void DescribeNegationTo(::std::ostream* os) const override {
				impl_->DescribeNegationTo(os);
			}

			bool MatchAndExplain(const T& x,
				MatchResultListener* listener) const override {
				return impl_->MatchAndExplain(x, listener);
			}

		private:
			const MatcherInterface<T>* const impl_;

			MatcherInterfaceAdapter(MatcherInterfaceAdapter const&) = delete; void operator=(MatcherInterfaceAdapter const&) = delete;
		};

		struct AnyEq {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a == b; }
		};
		struct AnyNe {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a != b; }
		};
		struct AnyLt {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a < b; }
		};
		struct AnyGt {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a > b; }
		};
		struct AnyLe {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a <= b; }
		};
		struct AnyGe {
			template <typename A, typename B>
			bool operator()(const A& a, const B& b) const { return a >= b; }
		};


		class DummyMatchResultListener : public MatchResultListener {
		public:
			DummyMatchResultListener() : MatchResultListener(nullptr) {}

		private:
			DummyMatchResultListener(DummyMatchResultListener const&) = delete; void operator=(DummyMatchResultListener const&) = delete;
		};




		class StreamMatchResultListener : public MatchResultListener {
		public:
			explicit StreamMatchResultListener(::std::ostream* os)
				: MatchResultListener(os) {}

		private:
			StreamMatchResultListener(StreamMatchResultListener const&) = delete; void operator=(StreamMatchResultListener const&) = delete;
		};




		template <typename T>
		class MatcherBase {
		public:


			bool MatchAndExplain(const T& x, MatchResultListener* listener) const {
				return impl_->MatchAndExplain(x, listener);
			}


			bool Matches(const T& x) const {
				DummyMatchResultListener dummy;
				return MatchAndExplain(x, &dummy);
			}


			void DescribeTo(::std::ostream* os) const { impl_->DescribeTo(os); }


			void DescribeNegationTo(::std::ostream* os) const {
				impl_->DescribeNegationTo(os);
			}


			void ExplainMatchResultTo(const T& x, ::std::ostream* os) const {
				StreamMatchResultListener listener(os);
				MatchAndExplain(x, &listener);
			}




			const MatcherDescriberInterface* GetDescriber() const {
				return impl_.get();
			}

		protected:
			MatcherBase() {}


			explicit MatcherBase(const MatcherInterface<const T&>* impl) : impl_(impl) {}

			template <typename U>
			explicit MatcherBase(
				const MatcherInterface<U>* impl,
				typename std::enable_if<!std::is_same<U, const U&>::value>::type* =
				nullptr)
				: impl_(new internal::MatcherInterfaceAdapter<U>(impl)) {}

			MatcherBase(const MatcherBase&) = default;
			MatcherBase& operator=(const MatcherBase&) = default;
			MatcherBase(MatcherBase&&) = default;
			MatcherBase& operator=(MatcherBase&&) = default;

			virtual ~MatcherBase() {}

		private:
			std::shared_ptr<const MatcherInterface<const T&>> impl_;
		};

	}





	template <typename T>
	class Matcher : public internal::MatcherBase<T> {
	public:



		explicit Matcher() {}


		explicit Matcher(const MatcherInterface<const T&>* impl)
			: internal::MatcherBase<T>(impl) {}

		template <typename U>
		explicit Matcher(
			const MatcherInterface<U>* impl,
			typename std::enable_if<!std::is_same<U, const U&>::value>::type* =
			nullptr)
			: internal::MatcherBase<T>(impl) {}



		Matcher(T value);
	};




	template <>
	class  Matcher<const std::string&>
		: public internal::MatcherBase<const std::string&> {
	public:
		Matcher() {}

		explicit Matcher(const MatcherInterface<const std::string&>* impl)
			: internal::MatcherBase<const std::string&>(impl) {}



		Matcher(const std::string& s);


		Matcher(const char* s);
	};

	template <>
	class  Matcher<std::string>
		: public internal::MatcherBase<std::string> {
	public:
		Matcher() {}

		explicit Matcher(const MatcherInterface<const std::string&>* impl)
			: internal::MatcherBase<std::string>(impl) {}
		explicit Matcher(const MatcherInterface<std::string>* impl)
			: internal::MatcherBase<std::string>(impl) {}



		Matcher(const std::string& s);


		Matcher(const char* s);
	};














































#line 433 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"


	template <typename T>
	std::ostream & operator<<(std::ostream & os, const Matcher<T> & matcher) {
		matcher.DescribeTo(&os);
		return os;
	}













	template <class Impl>
	class PolymorphicMatcher {
	public:
		explicit PolymorphicMatcher(const Impl& an_impl) : impl_(an_impl) {}



		Impl& mutable_impl() { return impl_; }



		const Impl& impl() const { return impl_; }

		template <typename T>
		operator Matcher<T>() const {
			return Matcher<T>(new MonomorphicImpl<const T&>(impl_));
		}

	private:
		template <typename T>
		class MonomorphicImpl : public MatcherInterface<T> {
		public:
			explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}

			virtual void DescribeTo(::std::ostream* os) const { impl_.DescribeTo(os); }

			virtual void DescribeNegationTo(::std::ostream* os) const {
				impl_.DescribeNegationTo(os);
			}

			virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {
				return impl_.MatchAndExplain(x, listener);
			}

		private:
			const Impl impl_;
		};

		Impl impl_;
	};







	template <typename T>
	inline Matcher<T> MakeMatcher(const MatcherInterface<T>* impl) {
		return Matcher<T>(impl);
	}








	template <class Impl>
	inline PolymorphicMatcher<Impl> MakePolymorphicMatcher(const Impl& impl) {
		return PolymorphicMatcher<Impl>(impl);
	}

	namespace internal {










		template <typename D, typename Rhs, typename Op>
		class ComparisonBase {
		public:
			explicit ComparisonBase(const Rhs& rhs) : rhs_(rhs) {}
			template <typename Lhs>
			operator Matcher<Lhs>() const {
				return Matcher<Lhs>(new Impl<const Lhs&>(rhs_));
			}

		private:
			template <typename T>
			static const T& Unwrap(const T& v) { return v; }
			template <typename T>
			static const T& Unwrap(std::reference_wrapper<T> v) { return v; }

			template <typename Lhs, typename = Rhs>
			class Impl : public MatcherInterface<Lhs> {
			public:
				explicit Impl(const Rhs& rhs) : rhs_(rhs) {}
				bool MatchAndExplain(Lhs lhs,
					MatchResultListener*) const override {
					return Op()(lhs, Unwrap(rhs_));
				}
				void DescribeTo(::std::ostream* os) const override {
					*os << D::Desc() << " ";
					UniversalPrint(Unwrap(rhs_), os);
				}
				void DescribeNegationTo(::std::ostream* os) const override {
					*os << D::NegatedDesc() << " ";
					UniversalPrint(Unwrap(rhs_), os);
				}

			private:
				Rhs rhs_;
			};
			Rhs rhs_;
		};

		template <typename Rhs>
		class EqMatcher : public ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq> {
		public:
			explicit EqMatcher(const Rhs& rhs)
				: ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq>(rhs) { }
			static const char* Desc() { return "is equal to"; }
			static const char* NegatedDesc() { return "isn't equal to"; }
		};
		template <typename Rhs>
		class NeMatcher : public ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe> {
		public:
			explicit NeMatcher(const Rhs& rhs)
				: ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe>(rhs) { }
			static const char* Desc() { return "isn't equal to"; }
			static const char* NegatedDesc() { return "is equal to"; }
		};
		template <typename Rhs>
		class LtMatcher : public ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt> {
		public:
			explicit LtMatcher(const Rhs& rhs)
				: ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt>(rhs) { }
			static const char* Desc() { return "is <"; }
			static const char* NegatedDesc() { return "isn't <"; }
		};
		template <typename Rhs>
		class GtMatcher : public ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt> {
		public:
			explicit GtMatcher(const Rhs& rhs)
				: ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt>(rhs) { }
			static const char* Desc() { return "is >"; }
			static const char* NegatedDesc() { return "isn't >"; }
		};
		template <typename Rhs>
		class LeMatcher : public ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe> {
		public:
			explicit LeMatcher(const Rhs& rhs)
				: ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe>(rhs) { }
			static const char* Desc() { return "is <="; }
			static const char* NegatedDesc() { return "isn't <="; }
		};
		template <typename Rhs>
		class GeMatcher : public ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe> {
		public:
			explicit GeMatcher(const Rhs& rhs)
				: ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe>(rhs) { }
			static const char* Desc() { return "is >="; }
			static const char* NegatedDesc() { return "isn't >="; }
		};




		class MatchesRegexMatcher {
		public:
			MatchesRegexMatcher(const RE* regex, bool full_match)
				: regex_(regex), full_match_(full_match) {}






#line 629 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"






			template <typename CharType>
			bool MatchAndExplain(CharType * s, MatchResultListener * listener) const {
				return s != nullptr && MatchAndExplain(std::string(s), listener);
			}





			template <class MatcheeStringType>
			bool MatchAndExplain(const MatcheeStringType& s,
				MatchResultListener*) const {
				const std::string& s2(s);
				return full_match_ ? RE::FullMatch(s2, *regex_)
					: RE::PartialMatch(s2, *regex_);
			}

			void DescribeTo(::std::ostream* os) const {
				*os << (full_match_ ? "matches" : "contains") << " regular expression ";
				UniversalPrinter<std::string>::Print(regex_->pattern(), os);
			}

			void DescribeNegationTo(::std::ostream* os) const {
				*os << "doesn't " << (full_match_ ? "match" : "contain")
					<< " regular expression ";
				UniversalPrinter<std::string>::Print(regex_->pattern(), os);
			}

		private:
			const std::shared_ptr<const RE> regex_;
			const bool full_match_;
		};
	}



	inline PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(
		const internal::RE* regex) {
		return MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, true));
	}
	inline PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex(
		const std::string& regex) {
		return MatchesRegex(new internal::RE(regex));
	}



	inline PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(
		const internal::RE* regex) {
		return MakePolymorphicMatcher(internal::MatchesRegexMatcher(regex, false));
	}
	inline PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex(
		const std::string& regex) {
		return ContainsRegex(new internal::RE(regex));
	}




	template <typename T>
	inline internal::EqMatcher<T> Eq(T x) { return internal::EqMatcher<T>(x); }



	template <typename T>
	Matcher<T>::Matcher(T value) { *this = Eq(value); }













	template <typename Lhs, typename Rhs>
	inline Matcher<Lhs> TypedEq(const Rhs& rhs) { return Eq(rhs); }


	template <typename Rhs>
	inline internal::GeMatcher<Rhs> Ge(Rhs x) {
		return internal::GeMatcher<Rhs>(x);
	}


	template <typename Rhs>
	inline internal::GtMatcher<Rhs> Gt(Rhs x) {
		return internal::GtMatcher<Rhs>(x);
	}


	template <typename Rhs>
	inline internal::LeMatcher<Rhs> Le(Rhs x) {
		return internal::LeMatcher<Rhs>(x);
	}


	template <typename Rhs>
	inline internal::LtMatcher<Rhs> Lt(Rhs x) {
		return internal::LtMatcher<Rhs>(x);
	}


	template <typename Rhs>
	inline internal::NeMatcher<Rhs> Ne(Rhs x) {
		return internal::NeMatcher<Rhs>(x);
	}
}

__pragma(warning(pop))

#line 751 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-matchers.h"
#line 40 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-death-test-internal.h"





namespace testing {
	namespace internal {

		extern ::std::string FLAGS_gtest_internal_run_death_test;


		const char kDeathTestStyleFlag[] = "death_test_style";
		const char kDeathTestUseFork[] = "death_test_use_fork";
		const char kInternalRunDeathTestFlag[] = "internal_run_death_test";




		__pragma(warning(push)) __pragma(warning(disable: 4251))














			class  DeathTest {
			public:








				static bool Create(const char* statement, Matcher<const std::string&> matcher,
					const char* file, int line, DeathTest** test);
				DeathTest();
				virtual ~DeathTest() { }


				class ReturnSentinel {
				public:
					explicit ReturnSentinel(DeathTest* test) : test_(test) { }
					~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }
				private:
					DeathTest* const test_;
					ReturnSentinel(ReturnSentinel const&) = delete; void operator=(ReturnSentinel const&) = delete;
				};






				enum TestRole { OVERSEE_TEST, EXECUTE_TEST };


				enum AbortReason {
					TEST_ENCOUNTERED_RETURN_STATEMENT,
					TEST_THREW_EXCEPTION,
					TEST_DID_NOT_DIE
				};


				virtual TestRole AssumeRole() = 0;


				virtual int Wait() = 0;








				virtual bool Passed(bool exit_status_ok) = 0;


				virtual void Abort(AbortReason reason) = 0;



				static const char* LastMessage();

				static void set_last_death_test_message(const std::string& message);

			private:

				static std::string last_death_test_message_;

				DeathTest(DeathTest const&) = delete; void operator=(DeathTest const&) = delete;
		};

		__pragma(warning(pop))


			class DeathTestFactory {
			public:
				virtual ~DeathTestFactory() { }
				virtual bool Create(const char* statement,
					Matcher<const std::string&> matcher, const char* file,
					int line, DeathTest** test) = 0;
		};


		class DefaultDeathTestFactory : public DeathTestFactory {
		public:
			bool Create(const char* statement, Matcher<const std::string&> matcher,
				const char* file, int line, DeathTest** test) override;
		};



		bool ExitedUnsuccessfully(int exit_status);




		inline Matcher<const ::std::string&> MakeDeathTestMatcher(
			::testing::internal::RE regex) {
			return ContainsRegex(regex.pattern());
		}
		inline Matcher<const ::std::string&> MakeDeathTestMatcher(const char* regex) {
			return ContainsRegex(regex);
		}
		inline Matcher<const ::std::string&> MakeDeathTestMatcher(
			const ::std::string& regex) {
			return ContainsRegex(regex);
		}



		inline Matcher<const ::std::string&> MakeDeathTestMatcher(
			Matcher<const ::std::string&> matcher) {
			return matcher;
		}
























#line 211 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-death-test-internal.h"























































		class InternalRunDeathTestFlag {
		public:
			InternalRunDeathTestFlag(const std::string& a_file,
				int a_line,
				int an_index,
				int a_write_fd)
				: file_(a_file), line_(a_line), index_(an_index),
				write_fd_(a_write_fd) {}

			~InternalRunDeathTestFlag() {
				if (write_fd_ >= 0)
					posix::Close(write_fd_);
			}

			const std::string& file() const { return file_; }
			int line() const { return line_; }
			int index() const { return index_; }
			int write_fd() const { return write_fd_; }

		private:
			std::string file_;
			int line_;
			int index_;
			int write_fd_;

			InternalRunDeathTestFlag(InternalRunDeathTestFlag const&) = delete; void operator=(InternalRunDeathTestFlag const&) = delete;
		};




		InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag();

#line 300 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-death-test-internal.h"

	}
}

#line 305 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-death-test-internal.h"
#line 42 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"

namespace testing {






	extern ::std::string FLAGS_gtest_death_test_style;



	namespace internal {






		bool InDeathTestChild();

	}






























































































































	class  ExitedWithCode {
	public:
		explicit ExitedWithCode(int exit_code);
		bool operator()(int exit_status) const;
	private:

		void operator=(const ExitedWithCode& other);

		const int exit_code_;
	};












#line 213 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"




























































#line 274 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"
#line 275 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"
































































#line 340 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"

}

#line 344 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-death-test.h"
#line 65 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"














































































































































































#line 176 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"

#pragma once






#pragma pack(push, 8)
#pragma warning(push, 3)
#pragma warning(disable : 4455 4494 4583 4619 4643 4702 4793 4988  4984 )




namespace std {

	template <class _Container>
	class front_insert_iterator {
	public:
		using iterator_category = output_iterator_tag;
		using value_type        = void;
		using difference_type   = void;
		using pointer           = void;
		using reference         = void;

		using container_type = _Container;

		explicit front_insert_iterator(_Container& _Cont) : container(::std::addressof(_Cont)) {
		}

		front_insert_iterator& operator=(const typename _Container::value_type& _Val) {
			container->push_front(_Val);
			return *this;
		}

		front_insert_iterator& operator=(typename _Container::value_type&& _Val) {
			container->push_front(::std::move(_Val));
			return *this;
		}

		front_insert_iterator& operator*() {
			return *this;
		}

		front_insert_iterator& operator++() {
			return *this;
		}

		front_insert_iterator operator++(int) {
			return *this;
		}

	protected:
		_Container* container;
	};


	template <class _Container>
	inline front_insert_iterator<_Container> front_inserter(_Container& _Cont) {
		return front_insert_iterator<_Container>(_Cont);
	}



	template <class _Container>
	class insert_iterator {
	public:
		using iterator_category = output_iterator_tag;
		using value_type        = void;
		using difference_type   = void;
		using pointer           = void;
		using reference         = void;

		using container_type = _Container;

		insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
			: container(::std::addressof(_Cont)), iter(_Where) {
		}

		insert_iterator& operator=(
			const typename _Container::value_type& _Val) {
			iter = container->insert(iter, _Val);
			++iter;
			return *this;
		}

		insert_iterator& operator=(typename _Container::value_type&& _Val) {

			iter = container->insert(iter, ::std::move(_Val));
			++iter;
			return *this;
		}

		insert_iterator& operator*() {
			return *this;
		}

		insert_iterator& operator++() {
			return *this;
		}

		insert_iterator& operator++(int) {
			return *this;
		}

	protected:
		_Container* container;
		typename _Container::iterator iter;
	};


	template <class _Container>
	inline insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where) {
		return insert_iterator<_Container>(_Cont, _Where);
	}



	template <class _Ty, class _Elem = char, class _Traits = char_traits<_Elem>,
		class _Diff = ptrdiff_t>
		class istream_iterator {
		public:
			using iterator_category = input_iterator_tag;
			using value_type        = _Ty;
			using difference_type   = _Diff;
			using pointer           = const _Ty*;
			using reference         = const _Ty &;

			using char_type    = _Elem;
			using traits_type  = _Traits;
			using istream_type = basic_istream<_Elem, _Traits>;

			constexpr istream_iterator() : _Myistr(nullptr), _Myval() {
			}

			istream_iterator(istream_type& _Istr) : _Myistr(::std::addressof(_Istr)) {
				_Getval();
			}

			const _Ty& operator*() const {
				return _Myval;
			}

			const _Ty* operator->() const {
				return ::std::addressof(_Myval);
			}

			istream_iterator& operator++() {
				_Getval();
				return *this;
			}

			istream_iterator operator++(int) {
				istream_iterator _Tmp = *this;
				_Getval();
				return _Tmp;
			}

			bool _Equal(const istream_iterator& _Right) const {
				return _Myistr == _Right._Myistr;
			}

		protected:
			void _Getval() {
				if (_Myistr != nullptr && !(*_Myistr >> _Myval)) {
					_Myistr = nullptr;
				}
			}

			istream_type* _Myistr;
			_Ty _Myval;
	};

	template <class _Ty, class _Elem, class _Traits, class _Diff>
	inline bool operator==(const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right) {
		return _Left._Equal(_Right);
	}

	template <class _Ty, class _Elem, class _Traits, class _Diff>
	inline bool operator!=(const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right) {
		return !(_Left == _Right);
	}



	template <class _Ty, class _Elem = char,
		class _Traits = char_traits<_Elem>>
		class ostream_iterator {
		public:
			using iterator_category = output_iterator_tag;
			using value_type        = void;
			using difference_type   = void;
			using pointer           = void;
			using reference         = void;

			using char_type    = _Elem;
			using traits_type  = _Traits;
			using ostream_type = basic_ostream<_Elem, _Traits>;

			ostream_iterator(ostream_type& _Ostr, const _Elem* const _Delim = nullptr)
				: _Mydelim(_Delim), _Myostr(::std::addressof(_Ostr)) {
			}

			ostream_iterator& operator=(const _Ty& _Val) {
				*_Myostr << _Val;
				if (_Mydelim != nullptr) {
					*_Myostr << _Mydelim;
				}

				return *this;
			}

			ostream_iterator& operator*() {
				return *this;
			}

			ostream_iterator& operator++() {
				return *this;
			}

			ostream_iterator& operator++(int) {
				return *this;
			}

		protected:
			const _Elem* _Mydelim;
			ostream_type* _Myostr;
	};
}

namespace stdext {
	using ::std::iterator_traits;
	using ::std::size_t;


	template <class _Ptr>
	class checked_array_iterator {
		static_assert(::std::is_pointer_v<_Ptr>, "checked_array_iterator requires pointers");

	public:
		using iterator_category = typename iterator_traits<_Ptr>::iterator_category;
		using value_type        = typename iterator_traits<_Ptr>::value_type;
		using difference_type   = typename iterator_traits<_Ptr>::difference_type;
		using pointer           = typename iterator_traits<_Ptr>::pointer;
		using reference         = typename iterator_traits<_Ptr>::reference;

		constexpr checked_array_iterator() noexcept : _Myarray(nullptr), _Mysize(0), _Myindex(0) {}

		constexpr checked_array_iterator(const _Ptr _Array, const size_t _Size, const size_t _Index = 0) noexcept
			: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index) {
			do { if (_Index <= _Size) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 255, 0, "%s", "checked_array_iterator construction index out of range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"checked_array_iterator construction index out of range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 255, 0); } while (false); }; } while (false);
		}

		constexpr _Ptr base() const noexcept {
			return _Myarray + _Myindex;
		}

		constexpr reference operator*() const noexcept {
			return *operator->();
		}

		constexpr pointer operator->() const noexcept {
			do { if (_Myarray) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 267, 0, "%s", "cannot dereference value-initialized or null checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference value-initialized or null checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 267, 0); } while (false); }; } while (false);
			do { if (_Myindex < _Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 268, 0, "%s", "cannot dereference end checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot dereference end checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 268, 0); } while (false); }; } while (false);
			return _Myarray + _Myindex;
		}

		constexpr checked_array_iterator& operator++() noexcept {
			do { if (_Myarray) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 273, 0, "%s", "cannot increment value-initialized or null checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment value-initialized or null checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 273, 0); } while (false); }; } while (false);
			do { if (_Myindex < _Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 274, 0, "%s", "cannot increment checked_array_iterator past end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot increment checked_array_iterator past end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 274, 0); } while (false); }; } while (false);
			++_Myindex;
			return *this;
		}

		constexpr checked_array_iterator operator++(int) noexcept {
			checked_array_iterator _Tmp = *this;
			++* this;
			return _Tmp;
		}

		constexpr checked_array_iterator& operator--() noexcept {
			do { if (_Myarray) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 286, 0, "%s", "cannot decrement value-initialized or null checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement value-initialized or null checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 286, 0); } while (false); }; } while (false);
			do { if (_Myindex != 0) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 287, 0, "%s", "cannot decrement checked_array_iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot decrement checked_array_iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 287, 0); } while (false); }; } while (false);
			--_Myindex;
			return *this;
		}

		constexpr checked_array_iterator operator--(int) noexcept {
			checked_array_iterator _Tmp = *this;
			--* this;
			return _Tmp;
		}

		constexpr checked_array_iterator& operator+=(const difference_type _Off) noexcept {
			if (_Off != 0) {
				do { if (_Myarray) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 300, 0, "%s", "cannot seek value-initialized or null checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized or null checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 300, 0); } while (false); }; } while (false);
			}

			if (_Off < 0) {
#pragma warning(suppress : 4146) 
				do { if (_Myindex >= -static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 305, 0, "%s", "cannot seek checked_array_iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 305, 0); } while (false); }; } while (false);
			}

			if (_Off > 0) {
				do { if (_Mysize - _Myindex >= static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 310, 0, "%s", "cannot seek checked_array_iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 310, 0); } while (false); }; } while (false);
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			}

			_Myindex += _Off;
			return *this;
		}

		constexpr checked_array_iterator operator+(const difference_type _Off) const noexcept {
			checked_array_iterator _Tmp = *this;
			_Tmp += _Off;
			return _Tmp;
		}

		friend constexpr checked_array_iterator operator+(const difference_type _Off,
			const checked_array_iterator<_Ptr>& _Next) noexcept {
			return _Next + _Off;
		}

		constexpr checked_array_iterator& operator-=(const difference_type _Off) noexcept {
			if (_Off != 0) {
				do { if (_Myarray) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 330, 0, "%s", "cannot seek value-initialized or null checked_array_iterator")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek value-initialized or null checked_array_iterator\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 330, 0); } while (false); }; } while (false);
			}

			if (_Off > 0) {
				do { if (_Myindex >= static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 334, 0, "%s", "cannot seek checked_array_iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 334, 0); } while (false); }; } while (false);
			}

			if (_Off < 0) {
#pragma warning(suppress : 4146) 
				do { if (_Mysize - _Myindex >= -static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 340, 0, "%s", "cannot seek checked_array_iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 340, 0); } while (false); }; } while (false);
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			}

			_Myindex -= _Off;
			return *this;
		}

		constexpr checked_array_iterator operator-(const difference_type _Off) const noexcept {
			checked_array_iterator _Tmp = *this;
			_Tmp -= _Off;
			return _Tmp;
		}

		constexpr difference_type operator-(const checked_array_iterator& _Right) const noexcept {
			do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 355, 0, "%s", "cannot subtract incompatible checked_array_iterators")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot subtract incompatible checked_array_iterators\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 355, 0); } while (false); }; } while (false);
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			return static_cast<difference_type>(_Myindex - _Right._Myindex);
		}

		constexpr reference operator[](const difference_type _Off) const noexcept {
			return *(*this + _Off);
		}

		constexpr bool operator==(const checked_array_iterator& _Right) const noexcept {
			do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 365, 0, "%s", "cannot compare incompatible checked_array_iterators for equality")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot compare incompatible checked_array_iterators for equality\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 365, 0); } while (false); }; } while (false);
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			return _Myindex == _Right._Myindex;
		}

		constexpr bool operator!=(const checked_array_iterator& _Right) const noexcept {
			return !(*this == _Right);
		}

		constexpr bool operator<(const checked_array_iterator& _Right) const noexcept {
			do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 375, 0, "%s", "cannot compare incompatible checked_array_iterators")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot compare incompatible checked_array_iterators\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 375, 0); } while (false); }; } while (false);
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			return _Myindex < _Right._Myindex;
		}

		constexpr bool operator>(const checked_array_iterator& _Right) const noexcept {
			return _Right < *this;
		}

		constexpr bool operator<=(const checked_array_iterator& _Right) const noexcept {
			return !(_Right < *this);
		}

		constexpr bool operator>=(const checked_array_iterator& _Right) const noexcept {
			return !(*this < _Right);
		}

		friend constexpr void _Verify_range(
			const checked_array_iterator& _First, const checked_array_iterator& _Last) noexcept {
			do { if (_First._Myarray == _Last._Myarray && _First._Mysize == _Last._Mysize) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 394, 0, "%s", "mismatching checked_array_iterators")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"mismatching checked_array_iterators\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 394, 0); } while (false); }; } while (false);
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			do { if (_First._Myindex <= _Last._Myindex) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 395, 0, "%s", "transposed checked_array_iterator range")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"transposed checked_array_iterator range\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 395, 0); } while (false); }; } while (false);
		}

		constexpr void _Verify_offset(const difference_type _Off) const noexcept {
			if (_Off < 0) {
#pragma warning(suppress : 4146) 
				do { if (_Myindex >= -static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 402, 0, "%s", "cannot seek checked_array_iterator iterator before begin")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator iterator before begin\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 402, 0); } while (false); }; } while (false);
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			}

			if (_Off > 0) {
				do { if (_Mysize - _Myindex >= static_cast<size_t>(_Off)) {} else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 407, 0, "%s", "cannot seek checked_array_iterator iterator after end")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"cannot seek checked_array_iterator iterator after end\"", __LPREFIX(__FUNCTION__), L"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator", 407, 0); } while (false); }; } while (false);
#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
			}
		}

		using _Prevent_inheriting_unwrap = checked_array_iterator;

		constexpr _Ptr _Unwrapped() const noexcept {
			return _Myarray + _Myindex;
		}

		constexpr void _Seek_to(_Ptr _It) noexcept {
			_Myindex = static_cast<size_t>(_It - _Myarray);
		}

	private:
		_Ptr _Myarray;
		size_t _Mysize;
		size_t _Myindex;
	};

	template <class _Ptr>
	constexpr checked_array_iterator<_Ptr> make_checked_array_iterator(
		const _Ptr _Array, const size_t _Size, const size_t _Index = 0) {
		return checked_array_iterator<_Ptr>(_Array, _Size, _Index);
	}


	template <class _Ptr>
	class unchecked_array_iterator {
		static_assert(::std::is_pointer_v<_Ptr>, "unchecked_array_iterator requires pointers");

	public:
		using iterator_category = typename iterator_traits<_Ptr>::iterator_category;
		using value_type        = typename iterator_traits<_Ptr>::value_type;
		using difference_type   = typename iterator_traits<_Ptr>::difference_type;
		using pointer           = typename iterator_traits<_Ptr>::pointer;
		using reference         = typename iterator_traits<_Ptr>::reference;

		constexpr unchecked_array_iterator() noexcept : _Myptr(nullptr) {}

		constexpr explicit unchecked_array_iterator(const _Ptr _Src) noexcept : _Myptr(_Src) {}

		constexpr _Ptr base() const noexcept {
			return _Myptr;
		}

		constexpr reference operator*() const noexcept {
			return *_Myptr;
		}

		constexpr pointer operator->() const noexcept {
			return _Myptr;
		}

		constexpr unchecked_array_iterator& operator++() noexcept {
			++_Myptr;
			return *this;
		}

		constexpr unchecked_array_iterator operator++(int) noexcept {
			unchecked_array_iterator _Tmp = *this;
			++_Myptr;
			return _Tmp;
		}

		constexpr unchecked_array_iterator& operator--() noexcept {
			--_Myptr;
			return *this;
		}

		constexpr unchecked_array_iterator operator--(int) noexcept {
			unchecked_array_iterator _Tmp = *this;
			--_Myptr;
			return _Tmp;
		}

		constexpr unchecked_array_iterator& operator+=(const difference_type _Off) noexcept {
			_Myptr += _Off;
			return *this;
		}

		constexpr unchecked_array_iterator operator+(const difference_type _Off) const noexcept {
			unchecked_array_iterator _Tmp = *this;
			_Tmp += _Off;
			return _Tmp;
		}

		friend constexpr unchecked_array_iterator operator+(const difference_type _Off,
			const unchecked_array_iterator& _Next) noexcept {
			return _Next + _Off;
		}

		constexpr unchecked_array_iterator& operator-=(const difference_type _Off) noexcept {
			return *this += -_Off;
		}

		constexpr unchecked_array_iterator operator-(const difference_type _Off) const noexcept {
			unchecked_array_iterator _Tmp = *this;
			_Tmp -= _Off;
			return _Tmp;
		}

		constexpr difference_type operator-(const unchecked_array_iterator& _Right) const noexcept {
			return _Myptr - _Right._Myptr;
		}

		constexpr reference operator[](const difference_type _Off) const noexcept {
			return *(*this + _Off);
		}

		constexpr bool operator==(const unchecked_array_iterator& _Right) const noexcept {
			return _Myptr == _Right._Myptr;
		}

		constexpr bool operator!=(const unchecked_array_iterator& _Right) const noexcept {
			return !(*this == _Right);
		}

		constexpr bool operator<(const unchecked_array_iterator& _Right) const noexcept {
			return _Myptr < _Right._Myptr;
		}

		constexpr bool operator>(const unchecked_array_iterator& _Right) const noexcept {
			return _Right < *this;
		}

		constexpr bool operator<=(const unchecked_array_iterator& _Right) const noexcept {
			return !(_Right < *this);
		}

		constexpr bool operator>=(const unchecked_array_iterator& _Right) const noexcept {
			return !(*this < _Right);
		}


		friend constexpr void _Verify_range(
			const unchecked_array_iterator _First, const unchecked_array_iterator _Last) noexcept {
			::std::_Verify_range(_First._Myptr, _Last._Myptr);
		}
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"

		using _Prevent_inheriting_unwrap = unchecked_array_iterator;

		static constexpr bool _Unwrap_when_unverified = true;

		constexpr _Ptr _Unwrapped() const noexcept {
			return _Myptr;
		}

		constexpr void _Seek_to(_Ptr _It) noexcept {
			_Myptr = _It;
		}

	private:
		_Ptr _Myptr;
	};

	template <class _Ptr>
	inline unchecked_array_iterator<_Ptr> make_unchecked_array_iterator(const _Ptr _It) noexcept {
		return unchecked_array_iterator<_Ptr>(_It);
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\iterator"





#line 178 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"



#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h"







































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cassert"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











	__declspec(dllimport) void __cdecl _wassert(
		wchar_t const* _Message,
		wchar_t const* _File,
		unsigned       _Line
	);






#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.18362.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.22.27905\\include\\cassert"





#line 41 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h"











namespace testing {


	template <class ParamType>
	struct TestParamInfo {
		TestParamInfo(const ParamType& a_param, size_t an_index) :
			param(a_param),
			index(an_index) {}
		ParamType param;
		size_t index;
	};



	struct PrintToStringParamName {
		template <class ParamType>
		std::string operator()(const TestParamInfo<ParamType>& info) const {
			return PrintToString(info.param);
		}
	};

	namespace internal {








		void ReportInvalidTestSuiteType(const char* test_suite_name,
			CodeLocation code_location);

		template <typename> class ParamGeneratorInterface;
		template <typename> class ParamGenerator;



		template <typename T>
		class ParamIteratorInterface {
		public:
			virtual ~ParamIteratorInterface() {}



			virtual const ParamGeneratorInterface<T>* BaseGenerator() const = 0;




			virtual void Advance() = 0;


			virtual ParamIteratorInterface* Clone() const = 0;




			virtual const T* Current() const = 0;



			virtual bool Equals(const ParamIteratorInterface& other) const = 0;
		};




		template <typename T>
		class ParamIterator {
		public:
			typedef T value_type;
			typedef const T& reference;
			typedef ptrdiff_t difference_type;


			ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}
			ParamIterator& operator=(const ParamIterator& other) {
				if (this != &other)
					impl_.reset(other.impl_->Clone());
				return *this;
			}

			const T& operator*() const { return *impl_->Current(); }
			const T* operator->() const { return impl_->Current(); }

			ParamIterator& operator++() {
				impl_->Advance();
				return *this;
			}

			ParamIterator operator++(int) {
				ParamIteratorInterface<T>* clone = impl_->Clone();
				impl_->Advance();
				return ParamIterator(clone);
			}
			bool operator==(const ParamIterator& other) const {
				return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);
			}
			bool operator!=(const ParamIterator& other) const {
				return !(*this == other);
			}

		private:
			friend class ParamGenerator<T>;
			explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}
			std::unique_ptr<ParamIteratorInterface<T> > impl_;
		};



		template <typename T>
		class ParamGeneratorInterface {
		public:
			typedef T ParamType;

			virtual ~ParamGeneratorInterface() {}


			virtual ParamIteratorInterface<T>* Begin() const = 0;
			virtual ParamIteratorInterface<T>* End() const = 0;
		};






		template<typename T>
		class ParamGenerator {
		public:
			typedef ParamIterator<T> iterator;

			explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}
			ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}

			ParamGenerator& operator=(const ParamGenerator& other) {
				impl_ = other.impl_;
				return *this;
			}

			iterator begin() const { return iterator(impl_->Begin()); }
			iterator end() const { return iterator(impl_->End()); }

		private:
			std::shared_ptr<const ParamGeneratorInterface<T> > impl_;
		};





		template <typename T, typename IncrementT>
		class RangeGenerator : public ParamGeneratorInterface<T> {
		public:
			RangeGenerator(T begin, T end, IncrementT step)
				: begin_(begin), end_(end),
				step_(step), end_index_(CalculateEndIndex(begin, end, step)) {}
			~RangeGenerator() override {}

			ParamIteratorInterface<T>* Begin() const override {
				return new Iterator(this, begin_, 0, step_);
			}
			ParamIteratorInterface<T>* End() const override {
				return new Iterator(this, end_, end_index_, step_);
			}

		private:
			class Iterator : public ParamIteratorInterface<T> {
			public:
				Iterator(const ParamGeneratorInterface<T>* base, T value, int index,
					IncrementT step)
					: base_(base), value_(value), index_(index), step_(step) {}
				~Iterator() override {}

				const ParamGeneratorInterface<T>* BaseGenerator() const override {
					return base_;
				}
				void Advance() override {
					value_ = static_cast<T>(value_ + step_);
					index_++;
				}
				ParamIteratorInterface<T>* Clone() const override {
					return new Iterator(*this);
				}
				const T* Current() const override { return &value_; }
				bool Equals(const ParamIteratorInterface<T>& other) const override {


			switch (0) case 0: default: if (::testing::internal::IsTrue(BaseGenerator() == other.BaseGenerator())); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", 241).GetStream() << "Condition " "BaseGenerator() == other.BaseGenerator()" " failed. "
				<< "The program attempted to compare iterators "
				<< "from different generators." << std::endl;
			const int other_index =
				CheckedDowncastToActualType<const Iterator>(&other)->index_;
			return index_ == other_index;
				}

			private:
				Iterator(const Iterator& other)
					: ParamIteratorInterface<T>(),
					base_(other.base_), value_(other.value_), index_(other.index_),
					step_(other.step_) {}


				void operator=(const Iterator& other);

				const ParamGeneratorInterface<T>* const base_;
				T value_;
				int index_;
				const IncrementT step_;
			};

			static int CalculateEndIndex(const T& begin,
				const T& end,
				const IncrementT& step) {
				int end_index = 0;
				for (T i = begin; i < end; i = static_cast<T>(i + step))
					end_index++;
				return end_index;
			}


			void operator=(const RangeGenerator& other);

			const T begin_;
			const T end_;
			const IncrementT step_;


			const int end_index_;
		};






		template <typename T>
		class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {
		public:
			template <typename ForwardIterator>
			ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)
				: container_(begin, end) {}
			~ValuesInIteratorRangeGenerator() override {}

			ParamIteratorInterface<T>* Begin() const override {
				return new Iterator(this, container_.begin());
			}
			ParamIteratorInterface<T>* End() const override {
				return new Iterator(this, container_.end());
			}

		private:
			typedef typename ::std::vector<T> ContainerType;

			class Iterator : public ParamIteratorInterface<T> {
			public:
				Iterator(const ParamGeneratorInterface<T>* base,
					typename ContainerType::const_iterator iterator)
					: base_(base), iterator_(iterator) {}
				~Iterator() override {}

				const ParamGeneratorInterface<T>* BaseGenerator() const override {
					return base_;
				}
				void Advance() override {
					++iterator_;
					value_.reset();
				}
				ParamIteratorInterface<T>* Clone() const override {
					return new Iterator(*this);
				}







				const T* Current() const override {
					if (value_.get() == nullptr) value_.reset(new T(*iterator_));
					return value_.get();
				}
				bool Equals(const ParamIteratorInterface<T>& other) const override {


			switch (0) case 0: default: if (::testing::internal::IsTrue(BaseGenerator() == other.BaseGenerator())); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", 338).GetStream() << "Condition " "BaseGenerator() == other.BaseGenerator()" " failed. "
				<< "The program attempted to compare iterators "
				<< "from different generators." << std::endl;
			return iterator_ ==
				CheckedDowncastToActualType<const Iterator>(&other)->iterator_;
				}

			private:
				Iterator(const Iterator& other)


					: ParamIteratorInterface<T>(),
					base_(other.base_),
					iterator_(other.iterator_) {}

				const ParamGeneratorInterface<T>* const base_;
				typename ContainerType::const_iterator iterator_;





				mutable std::unique_ptr<const T> value_;
			};


			void operator=(const ValuesInIteratorRangeGenerator& other);

			const ContainerType container_;
		};





		template <class ParamType>
		std::string DefaultParamName(const TestParamInfo<ParamType>& info) {
			Message name_stream;
			name_stream << info.index;
			return name_stream.GetString();
		}

		template <typename T = int>
		void TestNotEmpty() {
			static_assert(sizeof(T) == 0, "Empty arguments are not allowed.");
		}
		template <typename T = int>
		void TestNotEmpty(const T&) {}





		template <class TestClass>
		class ParameterizedTestFactory : public TestFactoryBase {
		public:
			typedef typename TestClass::ParamType ParamType;
			explicit ParameterizedTestFactory(ParamType parameter) :
				parameter_(parameter) {}
			Test* CreateTest() override {
				TestClass::SetParam(&parameter_);
				return new TestClass();
			}

		private:
			const ParamType parameter_;

			ParameterizedTestFactory(ParameterizedTestFactory const&) = delete; void operator=(ParameterizedTestFactory const&) = delete;
		};





		template <class ParamType>
		class TestMetaFactoryBase {
		public:
			virtual ~TestMetaFactoryBase() {}

			virtual TestFactoryBase* CreateTestFactory(ParamType parameter) = 0;
		};









		template <class TestSuite>
		class TestMetaFactory
			: public TestMetaFactoryBase<typename TestSuite::ParamType> {
		public:
			using ParamType = typename TestSuite::ParamType;

			TestMetaFactory() {}

			TestFactoryBase* CreateTestFactory(ParamType parameter) override {
				return new ParameterizedTestFactory<TestSuite>(parameter);
			}

		private:
			TestMetaFactory(TestMetaFactory const&) = delete; void operator=(TestMetaFactory const&) = delete;
		};











		class ParameterizedTestSuiteInfoBase {
		public:
			virtual ~ParameterizedTestSuiteInfoBase() {}


			virtual const std::string& GetTestSuiteName() const = 0;

			virtual TypeId GetTestSuiteTypeId() const = 0;




			virtual void RegisterTests() = 0;

		protected:
			ParameterizedTestSuiteInfoBase() {}

		private:
			ParameterizedTestSuiteInfoBase(ParameterizedTestSuiteInfoBase const&) = delete; void operator=(ParameterizedTestSuiteInfoBase const&) = delete;
		};








		template <class TestSuite>
		class ParameterizedTestSuiteInfo : public ParameterizedTestSuiteInfoBase {
		public:



			using ParamType = typename TestSuite::ParamType;

			typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();
			using ParamNameGeneratorFunc = std::string(const TestParamInfo<ParamType>&);

			explicit ParameterizedTestSuiteInfo(const char* name,
				CodeLocation code_location)
				: test_suite_name_(name), code_location_(code_location) {}


			const std::string& GetTestSuiteName() const override {
				return test_suite_name_;
			}

			TypeId GetTestSuiteTypeId() const override { return GetTypeId<TestSuite>(); }






			void AddTestPattern(const char* test_suite_name, const char* test_base_name,
				TestMetaFactoryBase<ParamType>* meta_factory) {
				tests_.push_back(std::shared_ptr<TestInfo>(
					new TestInfo(test_suite_name, test_base_name, meta_factory)));
			}


			int AddTestSuiteInstantiation(const std::string& instantiation_name,
				GeneratorCreationFunc* func,
				ParamNameGeneratorFunc* name_func,
				const char* file, int line) {
				instantiations_.push_back(
					InstantiationInfo(instantiation_name, func, name_func, file, line));
				return 0;
			}





			void RegisterTests() override {
				for (typename TestInfoContainer::iterator test_it = tests_.begin();
					test_it != tests_.end(); ++test_it) {
					std::shared_ptr<TestInfo> test_info = *test_it;
					for (typename InstantiationContainer::iterator gen_it =
						instantiations_.begin(); gen_it != instantiations_.end();
						++gen_it) {
						const std::string& instantiation_name = gen_it->name;
						ParamGenerator<ParamType> generator((*gen_it->generator)());
						ParamNameGeneratorFunc* name_func = gen_it->name_func;
						const char* file = gen_it->file;
						int line = gen_it->line;

						std::string test_suite_name;
						if (!instantiation_name.empty())
							test_suite_name = instantiation_name + "/";
						test_suite_name += test_info->test_suite_base_name;

						size_t i = 0;
						std::set<std::string> test_param_names;
						for (typename ParamGenerator<ParamType>::iterator param_it =
							generator.begin();
							param_it != generator.end(); ++param_it, ++i) {
							Message test_name_stream;

							std::string param_name = name_func(
								TestParamInfo<ParamType>(*param_it, i));

			switch (0) case 0: default: if (::testing::internal::IsTrue(IsValidParamName(param_name))); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", 557).GetStream() << "Condition " "IsValidParamName(param_name)" " failed. "
				<< "Parameterized test name '" << param_name
				<< "' is invalid, in " << file
				<< " line " << line << std::endl;

			switch (0) case 0: default: if (::testing::internal::IsTrue(test_param_names.count(param_name) == 0)); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", 562).GetStream() << "Condition " "test_param_names.count(param_name) == 0" " failed. "
				<< "Duplicate parameterized test name '" << param_name
				<< "', in " << file << " line " << line << std::endl;

			test_param_names.insert(param_name);

			if (!test_info->test_base_name.empty()) {
				test_name_stream << test_info->test_base_name << "/";
			}
			test_name_stream << param_name;
			MakeAndRegisterTestInfo(
				test_suite_name.c_str(), test_name_stream.GetString().c_str(),
				nullptr,
				PrintToString(*param_it).c_str(), code_location_,
				GetTestSuiteTypeId(),
				SuiteApiResolver<TestSuite>::GetSetUpCaseOrSuite(file, line),
				SuiteApiResolver<TestSuite>::GetTearDownCaseOrSuite(file, line),
				test_info->test_meta_factory->CreateTestFactory(*param_it));
						}
					}
				}
			}

		private:


			struct TestInfo {
				TestInfo(const char* a_test_suite_base_name, const char* a_test_base_name,
					TestMetaFactoryBase<ParamType>* a_test_meta_factory)
					: test_suite_base_name(a_test_suite_base_name),
					test_base_name(a_test_base_name),
					test_meta_factory(a_test_meta_factory) {}

				const std::string test_suite_base_name;
				const std::string test_base_name;
				const std::unique_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;
			};
			using TestInfoContainer = ::std::vector<std::shared_ptr<TestInfo> >;



			struct InstantiationInfo {
				InstantiationInfo(const std::string& name_in,
					GeneratorCreationFunc* generator_in,
					ParamNameGeneratorFunc* name_func_in,
					const char* file_in,
					int line_in)
					: name(name_in),
					generator(generator_in),
					name_func(name_func_in),
					file(file_in),
					line(line_in) {}

				std::string name;
				GeneratorCreationFunc* generator;
				ParamNameGeneratorFunc* name_func;
				const char* file;
				int line;
			};
			typedef ::std::vector<InstantiationInfo> InstantiationContainer;

			static bool IsValidParamName(const std::string& name) {

				if (name.empty())
					return false;


				for (std::string::size_type index = 0; index < name.size(); ++index) {
					if (!isalnum(name[index]) && name[index] != '_')
						return false;
				}

				return true;
			}

			const std::string test_suite_name_;
			CodeLocation code_location_;
			TestInfoContainer tests_;
			InstantiationContainer instantiations_;

			ParameterizedTestSuiteInfo(ParameterizedTestSuiteInfo const&) = delete; void operator=(ParameterizedTestSuiteInfo const&) = delete;
		};



		template <class TestCase>
		using ParameterizedTestCaseInfo = ParameterizedTestSuiteInfo<TestCase>;
#line 650 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h"







		class ParameterizedTestSuiteRegistry {
		public:
			ParameterizedTestSuiteRegistry() {}
			~ParameterizedTestSuiteRegistry() {
				for (auto& test_suite_info : test_suite_infos_) {
					delete test_suite_info;
				}
			}



			template <class TestSuite>
			ParameterizedTestSuiteInfo<TestSuite>* GetTestSuitePatternHolder(
				const char* test_suite_name, CodeLocation code_location) {
				ParameterizedTestSuiteInfo<TestSuite>* typed_test_info = nullptr;
				for (auto& test_suite_info : test_suite_infos_) {
					if (test_suite_info->GetTestSuiteName() == test_suite_name) {
						if (test_suite_info->GetTestSuiteTypeId() != GetTypeId<TestSuite>()) {



							ReportInvalidTestSuiteType(test_suite_name, code_location);
							posix::Abort();
						}
						else {



							typed_test_info = CheckedDowncastToActualType<
								ParameterizedTestSuiteInfo<TestSuite> >(test_suite_info);
						}
						break;
					}
				}
				if (typed_test_info == nullptr) {
					typed_test_info = new ParameterizedTestSuiteInfo<TestSuite>(
						test_suite_name, code_location);
					test_suite_infos_.push_back(typed_test_info);
				}
				return typed_test_info;
			}
			void RegisterTests() {
				for (auto& test_suite_info : test_suite_infos_) {
					test_suite_info->RegisterTests();
				}
			}


			template <class TestCase>
			ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder(
				const char* test_case_name, CodeLocation code_location) {
				return GetTestSuitePatternHolder<TestCase>(test_case_name, code_location);
			}

#line 711 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h"

		private:
			using TestSuiteInfoContainer = ::std::vector<ParameterizedTestSuiteInfoBase*>;

			TestSuiteInfoContainer test_suite_infos_;

			ParameterizedTestSuiteRegistry(ParameterizedTestSuiteRegistry const&) = delete; void operator=(ParameterizedTestSuiteRegistry const&) = delete;
		};

	}



	template <class Container>
	internal::ParamGenerator<typename Container::value_type> ValuesIn(
		const Container& container);

	namespace internal {


		template <typename... Ts>
		class ValueArray {
		public:
			ValueArray(Ts... v) : v_{ std::move(v)... } {}

			template <typename T>
			operator ParamGenerator<T>() const {
				return ValuesIn(MakeVector<T>(MakeIndexSequence<sizeof...(Ts)>()));
			}

		private:
			template <typename T, size_t... I>
			std::vector<T> MakeVector(IndexSequence<I...>) const {
				return std::vector<T>{static_cast<T>(v_.template Get<I>())...};
			}

			FlatTuple<Ts...> v_;
		};

		template <typename... T>
		class CartesianProductGenerator
			: public ParamGeneratorInterface<::std::tuple<T...>> {
		public:
			typedef ::std::tuple<T...> ParamType;

			CartesianProductGenerator(const std::tuple<ParamGenerator<T>...>& g)
				: generators_(g) {}
			~CartesianProductGenerator() override {}

			ParamIteratorInterface<ParamType>* Begin() const override {
				return new Iterator(this, generators_, false);
			}
			ParamIteratorInterface<ParamType>* End() const override {
				return new Iterator(this, generators_, true);
			}

		private:
			template <class I>
			class IteratorImpl;
			template <size_t... I>
			class IteratorImpl<IndexSequence<I...>>
				: public ParamIteratorInterface<ParamType> {
			public:
				IteratorImpl(const ParamGeneratorInterface<ParamType>* base,
					const std::tuple<ParamGenerator<T>...>& generators, bool is_end)
					: base_(base),
					begin_(std::get<I>(generators).begin()...),
					end_(std::get<I>(generators).end()...),
					current_(is_end ? end_ : begin_) {
					ComputeCurrentValue();
				}
				~IteratorImpl() override {}

				const ParamGeneratorInterface<ParamType>* BaseGenerator() const override {
					return base_;
				}


				void Advance() override {
					(void)((!!(!AtEnd())) || (_wassert(L"!AtEnd()", L"C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", (unsigned)(790)), 0));

					++std::get<sizeof...(T) - 1>(current_);

					AdvanceIfEnd<sizeof...(T) - 1>();
					ComputeCurrentValue();
				}
				ParamIteratorInterface<ParamType>* Clone() const override {
					return new IteratorImpl(*this);
				}

				const ParamType* Current() const override { return current_value_.get(); }

				bool Equals(const ParamIteratorInterface<ParamType>& other) const override {


			switch (0) case 0: default: if (::testing::internal::IsTrue(BaseGenerator() == other.BaseGenerator())); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h", 806).GetStream() << "Condition " "BaseGenerator() == other.BaseGenerator()" " failed. "
				<< "The program attempted to compare iterators "
				<< "from different generators." << std::endl;
			const IteratorImpl* typed_other =
				CheckedDowncastToActualType<const IteratorImpl>(&other);




			if (AtEnd() && typed_other->AtEnd()) return true;

			bool same = true;
			bool dummy[] = {
				(same = same && std::get<I>(current_) ==
									std::get<I>(typed_other->current_))... };
			(void)dummy;
			return same;
				}

			private:
				template <size_t ThisI>
				void AdvanceIfEnd() {
					if (std::get<ThisI>(current_) != std::get<ThisI>(end_)) return;

					bool last = ThisI == 0;
					if (last) {

						return;
					}

					constexpr size_t NextI = ThisI - (ThisI != 0);
					std::get<ThisI>(current_) = std::get<ThisI>(begin_);
					++std::get<NextI>(current_);
					AdvanceIfEnd<NextI>();
				}

				void ComputeCurrentValue() {
					if (!AtEnd())
						current_value_ = std::make_shared<ParamType>(*std::get<I>(current_)...);
				}
				bool AtEnd() const {
					bool at_end = false;
					bool dummy[] = {
						(at_end = at_end || std::get<I>(current_) == std::get<I>(end_))... };
					(void)dummy;
					return at_end;
				}

				const ParamGeneratorInterface<ParamType>* const base_;
				std::tuple<typename ParamGenerator<T>::iterator...> begin_;
				std::tuple<typename ParamGenerator<T>::iterator...> end_;
				std::tuple<typename ParamGenerator<T>::iterator...> current_;
				std::shared_ptr<ParamType> current_value_;
			};

			using Iterator = IteratorImpl<typename MakeIndexSequence<sizeof...(T)>::type>;

			std::tuple<ParamGenerator<T>...> generators_;
		};

		template <class... Gen>
		class CartesianProductHolder {
		public:
			CartesianProductHolder(const Gen& ... g) : generators_(g...) {}
			template <typename... T>
			operator ParamGenerator<::std::tuple<T...>>() const {
				return ParamGenerator<::std::tuple<T...>>(
					new CartesianProductGenerator<T...>(generators_));
			}

		private:
			std::tuple<Gen...> generators_;
		};

	}
}

#line 884 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\internal\\gtest-param-util.h"
#line 182 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"


namespace testing {











































	template <typename T, typename IncrementT>
	internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {
		return internal::ParamGenerator<T>(
			new internal::RangeGenerator<T, IncrementT>(start, end, step));
	}

	template <typename T>
	internal::ParamGenerator<T> Range(T start, T end) {
		return Range(start, end, 1);
	}
























































	template <typename ForwardIterator>
	internal::ParamGenerator<
		typename std::iterator_traits<ForwardIterator>::value_type>
		ValuesIn(ForwardIterator begin, ForwardIterator end) {
		typedef typename std::iterator_traits<ForwardIterator>::value_type ParamType;
		return internal::ParamGenerator<ParamType>(
			new internal::ValuesInIteratorRangeGenerator<ParamType>(begin, end));
	}

	template <typename T, size_t N>
	internal::ParamGenerator<T> ValuesIn(const T(&array)[N]) {
		return ValuesIn(array, array + N);
	}

	template <class Container>
	internal::ParamGenerator<typename Container::value_type> ValuesIn(
		const Container& container) {
		return ValuesIn(container.begin(), container.end());
	}





















	template <typename... T>
	internal::ValueArray<T...> Values(T... v) {
		return internal::ValueArray<T...>(std::move(v)...);
	}





















	inline internal::ParamGenerator<bool> Bool() {
		return Values(false, true);
	}















































	template <typename... Generator>
	internal::CartesianProductHolder<Generator...> Combine(const Generator& ... g) {
		return internal::CartesianProductHolder<Generator...>(g...);
	}






















































































#line 500 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"

}

#line 504 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-param-test.h"
#line 68 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest_prod.h"




























































#line 62 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest_prod.h"
#line 70 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-test-part.h"








































__pragma(warning(push)) __pragma(warning(disable: 4251))

namespace testing {





	class  TestPartResult {
	public:


		enum Type {
			kSuccess,
			kNonFatalFailure,
			kFatalFailure,
			kSkip
		};




		TestPartResult(Type a_type, const char* a_file_name, int a_line_number,
			const char* a_message)
			: type_(a_type),
			file_name_(a_file_name == nullptr ? "" : a_file_name),
			line_number_(a_line_number),
			summary_(ExtractSummary(a_message)),
			message_(a_message) {}


		Type type() const { return type_; }



		const char* file_name() const {
			return file_name_.empty() ? nullptr : file_name_.c_str();
		}



		int line_number() const { return line_number_; }


		const char* summary() const { return summary_.c_str(); }


		const char* message() const { return message_.c_str(); }


		bool skipped() const { return type_ == kSkip; }


		bool passed() const { return type_ == kSuccess; }


		bool nonfatally_failed() const { return type_ == kNonFatalFailure; }


		bool fatally_failed() const { return type_ == kFatalFailure; }


		bool failed() const { return fatally_failed() || nonfatally_failed(); }

	private:
		Type type_;



		static std::string ExtractSummary(const char* message);



		std::string file_name_;


		int line_number_;
		std::string summary_;
		std::string message_;
	};


	std::ostream& operator<<(std::ostream& os, const TestPartResult& result);





	class  TestPartResultArray {
	public:
		TestPartResultArray() {}


		void Append(const TestPartResult& result);


		const TestPartResult& GetTestPartResult(int index) const;


		int size() const;

	private:
		std::vector<TestPartResult> array_;

		TestPartResultArray(TestPartResultArray const&) = delete; void operator=(TestPartResultArray const&) = delete;
	};


	class  TestPartResultReporterInterface {
	public:
		virtual ~TestPartResultReporterInterface() {}

		virtual void ReportTestPartResult(const TestPartResult& result) = 0;
	};

	namespace internal {







		class  HasNewFatalFailureHelper
			: public TestPartResultReporterInterface {
		public:
			HasNewFatalFailureHelper();
			~HasNewFatalFailureHelper() override;
			void ReportTestPartResult(const TestPartResult& result) override;
			bool has_new_fatal_failure() const { return has_new_fatal_failure_; }
		private:
			bool has_new_fatal_failure_;
			TestPartResultReporterInterface* original_reporter_;

			HasNewFatalFailureHelper(HasNewFatalFailureHelper const&) = delete; void operator=(HasNewFatalFailureHelper const&) = delete;
		};

	}

}

__pragma(warning(pop))

#line 185 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-test-part.h"
#line 71 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"







































































































#line 105 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"


































































#line 172 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"

























































#line 230 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"

#line 232 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"






































#line 271 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"

































#line 305 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"





















#line 327 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"

#line 329 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"

#line 331 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest-typed-test.h"
#line 72 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


__pragma(warning(push)) __pragma(warning(disable: 4251))

namespace testing {




#pragma warning(push)
#pragma warning(disable:4805)
#pragma warning(disable:4100)
#line 85 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"





	extern bool FLAGS_gtest_also_run_disabled_tests;


	extern bool FLAGS_gtest_break_on_failure;



	extern bool FLAGS_gtest_catch_exceptions;




	extern ::std::string FLAGS_gtest_color;



	extern ::std::string FLAGS_gtest_filter;



	extern bool FLAGS_gtest_install_failure_signal_handler;



	extern bool FLAGS_gtest_list_tests;



	extern ::std::string FLAGS_gtest_output;



	extern bool FLAGS_gtest_print_time;


	extern bool FLAGS_gtest_print_utf8;


	extern ::testing::internal::Int32 FLAGS_gtest_random_seed;



	extern ::testing::internal::Int32 FLAGS_gtest_repeat;



	extern bool FLAGS_gtest_show_internal_stack_frames;


	extern bool FLAGS_gtest_shuffle;



	extern ::testing::internal::Int32 FLAGS_gtest_stack_trace_depth;




	extern bool FLAGS_gtest_throw_on_failure;




	extern ::std::string FLAGS_gtest_stream_result_to;


	extern ::std::string FLAGS_gtest_flagfile;
#line 158 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


	const int kMaxStackTraceDepth = 100;

	namespace internal {

		class AssertHelper;
		class DefaultGlobalTestPartResultReporter;
		class ExecDeathTest;
		class NoExecDeathTest;
		class FinalSuccessChecker;
		class GTestFlagSaver;
		class StreamingListenerTest;
		class TestResultAccessor;
		class TestEventListenersAccessor;
		class TestEventRepeater;
		class UnitTestRecordPropertyTestHelper;
		class WindowsDeathTest;
		class FuchsiaDeathTest;
		class UnitTestImpl* GetUnitTestImpl();
		void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
			const std::string& message);

	}




	class Test;
	class TestSuite;



	using TestCase = TestSuite;
#line 193 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
	class TestInfo;
	class UnitTest;
















































































	class  AssertionResult {
	public:


		AssertionResult(const AssertionResult& other);



#line 284 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"








		template <typename T>
		explicit AssertionResult(
			const T & success,
			typename std::enable_if<
			!std::is_convertible<T, AssertionResult>::value>::type *

			= nullptr)
			: success_(success) {}



#line 304 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		AssertionResult & operator=(AssertionResult other) {
			swap(other);
			return *this;
		}


		operator bool() const { return success_; }


		AssertionResult operator!() const;





		const char* message() const {
			return message_.get() != nullptr ? message_->c_str() : "";
		}

		const char* failure_message() const { return message(); }


		template <typename T> AssertionResult& operator<<(const T& value) {
			AppendMessage(Message() << value);
			return *this;
		}



		AssertionResult& operator<<(
			::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {
			AppendMessage(Message() << basic_manipulator);
			return *this;
		}

	private:

		void AppendMessage(const Message& a_message) {
			if (message_.get() == nullptr) message_.reset(new ::std::string);
			message_->append(a_message.GetString().c_str());
		}


		void swap(AssertionResult& other);


		bool success_;




		std::unique_ptr< ::std::string> message_;
	};


	AssertionResult AssertionSuccess();


	AssertionResult AssertionFailure();



	AssertionResult AssertionFailure(const Message& msg);

}




#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest_pred_impl.h"






































#line 1 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 40 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest_pred_impl.h"

namespace testing {











































	template <typename Pred,
		typename T1>
		AssertionResult AssertPred1Helper(const char* pred_text,
			const char* e1,
			Pred pred,
			const T1& v1) {
		if (pred(v1)) return AssertionSuccess();

		return AssertionFailure()
			<< pred_text << "(" << e1 << ") evaluates to false, where"
			<< "\n"
			<< e1 << " evaluates to " << ::testing::PrintToString(v1);
	}





























	template <typename Pred,
		typename T1,
		typename T2>
		AssertionResult AssertPred2Helper(const char* pred_text,
			const char* e1,
			const char* e2,
			Pred pred,
			const T1& v1,
			const T2& v2) {
		if (pred(v1, v2)) return AssertionSuccess();

		return AssertionFailure()
			<< pred_text << "(" << e1 << ", " << e2
			<< ") evaluates to false, where"
			<< "\n"
			<< e1 << " evaluates to " << ::testing::PrintToString(v1) << "\n"
			<< e2 << " evaluates to " << ::testing::PrintToString(v2);
	}































	template <typename Pred,
		typename T1,
		typename T2,
		typename T3>
		AssertionResult AssertPred3Helper(const char* pred_text,
			const char* e1,
			const char* e2,
			const char* e3,
			Pred pred,
			const T1& v1,
			const T2& v2,
			const T3& v3) {
		if (pred(v1, v2, v3)) return AssertionSuccess();

		return AssertionFailure()
			<< pred_text << "(" << e1 << ", " << e2 << ", " << e3
			<< ") evaluates to false, where"
			<< "\n"
			<< e1 << " evaluates to " << ::testing::PrintToString(v1) << "\n"
			<< e2 << " evaluates to " << ::testing::PrintToString(v2) << "\n"
			<< e3 << " evaluates to " << ::testing::PrintToString(v3);
	}

































	template <typename Pred,
		typename T1,
		typename T2,
		typename T3,
		typename T4>
		AssertionResult AssertPred4Helper(const char* pred_text,
			const char* e1,
			const char* e2,
			const char* e3,
			const char* e4,
			Pred pred,
			const T1& v1,
			const T2& v2,
			const T3& v3,
			const T4& v4) {
		if (pred(v1, v2, v3, v4)) return AssertionSuccess();

		return AssertionFailure()
			<< pred_text << "(" << e1 << ", " << e2 << ", " << e3 << ", " << e4
			<< ") evaluates to false, where"
			<< "\n"
			<< e1 << " evaluates to " << ::testing::PrintToString(v1) << "\n"
			<< e2 << " evaluates to " << ::testing::PrintToString(v2) << "\n"
			<< e3 << " evaluates to " << ::testing::PrintToString(v3) << "\n"
			<< e4 << " evaluates to " << ::testing::PrintToString(v4);
	}



































	template <typename Pred,
		typename T1,
		typename T2,
		typename T3,
		typename T4,
		typename T5>
		AssertionResult AssertPred5Helper(const char* pred_text,
			const char* e1,
			const char* e2,
			const char* e3,
			const char* e4,
			const char* e5,
			Pred pred,
			const T1& v1,
			const T2& v2,
			const T3& v3,
			const T4& v4,
			const T5& v5) {
		if (pred(v1, v2, v3, v4, v5)) return AssertionSuccess();

		return AssertionFailure()
			<< pred_text << "(" << e1 << ", " << e2 << ", " << e3 << ", " << e4
			<< ", " << e5 << ") evaluates to false, where"
			<< "\n"
			<< e1 << " evaluates to " << ::testing::PrintToString(v1) << "\n"
			<< e2 << " evaluates to " << ::testing::PrintToString(v2) << "\n"
			<< e3 << " evaluates to " << ::testing::PrintToString(v3) << "\n"
			<< e4 << " evaluates to " << ::testing::PrintToString(v4) << "\n"
			<< e5 << " evaluates to " << ::testing::PrintToString(v5);
	}



































}

#line 360 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest_pred_impl.h"
#line 376 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

namespace testing {
























	class  Test {
	public:
		friend class TestInfo;


		virtual ~Test();









		static void SetUpTestSuite() {}









		static void TearDownTestSuite() {}



		static void TearDownTestCase() {}
		static void SetUpTestCase() {}
#line 434 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		static bool HasFatalFailure();


		static bool HasNonfatalFailure();


		static bool IsSkipped();



		static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }














		static void RecordProperty(const std::string& key, const std::string& value);
		static void RecordProperty(const std::string& key, int value);

	protected:

		Test();


		virtual void SetUp();


		virtual void TearDown();

	private:


		static bool HasSameFixtureClass();







		virtual void TestBody() = 0;


		void Run();



		void DeleteSelf_() { delete this; }

		const std::unique_ptr<::testing::internal::GTestFlagSaver> gtest_flag_saver_;

















		struct Setup_should_be_spelled_SetUp {};
		virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }


		Test(Test const&) = delete; void operator=(Test const&) = delete;
	};

	typedef internal::TimeInMillis TimeInMillis;





	class TestProperty {
	public:



		TestProperty(const std::string& a_key, const std::string& a_value) :
			key_(a_key), value_(a_value) {
		}


		const char* key() const {
			return key_.c_str();
		}


		const char* value() const {
			return value_.c_str();
		}


		void SetValue(const std::string& new_value) {
			value_ = new_value;
		}

	private:

		std::string key_;

		std::string value_;
	};







	class  TestResult {
	public:

		TestResult();


		~TestResult();



		int total_part_count() const;


		int test_property_count() const;


		bool Passed() const { return !Skipped() && !Failed(); }


		bool Skipped() const;


		bool Failed() const;


		bool HasFatalFailure() const;


		bool HasNonfatalFailure() const;


		TimeInMillis elapsed_time() const { return elapsed_time_; }



		TimeInMillis start_timestamp() const { return start_timestamp_; }



		const TestPartResult& GetTestPartResult(int i) const;




		const TestProperty& GetTestProperty(int i) const;

	private:
		friend class TestInfo;
		friend class TestSuite;
		friend class UnitTest;
		friend class internal::DefaultGlobalTestPartResultReporter;
		friend class internal::ExecDeathTest;
		friend class internal::TestResultAccessor;
		friend class internal::UnitTestImpl;
		friend class internal::WindowsDeathTest;
		friend class internal::FuchsiaDeathTest;


		const std::vector<TestPartResult>& test_part_results() const {
			return test_part_results_;
		}


		const std::vector<TestProperty>& test_properties() const {
			return test_properties_;
		}


		void set_start_timestamp(TimeInMillis start) { start_timestamp_ = start; }


		void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }







		void RecordProperty(const std::string& xml_element,
			const TestProperty& test_property);




		static bool ValidateTestProperty(const std::string& xml_element,
			const TestProperty& test_property);


		void AddTestPartResult(const TestPartResult& test_part_result);


		int death_test_count() const { return death_test_count_; }


		int increment_death_test_count() { return ++death_test_count_; }


		void ClearTestPartResults();


		void Clear();



		internal::Mutex test_properites_mutex_;


		std::vector<TestPartResult> test_part_results_;

		std::vector<TestProperty> test_properties_;

		int death_test_count_;

		TimeInMillis start_timestamp_;

		TimeInMillis elapsed_time_;


		TestResult(TestResult const&) = delete; void operator=(TestResult const&) = delete;
	};












	class  TestInfo {
	public:


		~TestInfo();


		const char* test_suite_name() const { return test_suite_name_.c_str(); }



		const char* test_case_name() const { return test_suite_name(); }
#line 708 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		const char* name() const { return name_.c_str(); }



		const char* type_param() const {
			if (type_param_.get() != nullptr) return type_param_->c_str();
			return nullptr;
		}



		const char* value_param() const {
			if (value_param_.get() != nullptr) return value_param_->c_str();
			return nullptr;
		}


		const char* file() const { return location_.file.c_str(); }


		int line() const { return location_.line; }


		bool is_in_another_shard() const { return is_in_another_shard_; }

















		bool should_run() const { return should_run_; }


		bool is_reportable() const {


			return matches_filter_ && !is_in_another_shard_;
		}


		const TestResult* result() const { return &result_; }

	private:

		friend class internal::DefaultDeathTestFactory;
#line 767 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
		friend class Test;
		friend class TestSuite;
		friend class internal::UnitTestImpl;
		friend class internal::StreamingListenerTest;
		friend TestInfo* internal::MakeAndRegisterTestInfo(
			const char* test_suite_name, const char* name, const char* type_param,
			const char* value_param, internal::CodeLocation code_location,
			internal::TypeId fixture_class_id, internal::SetUpTestSuiteFunc set_up_tc,
			internal::TearDownTestSuiteFunc tear_down_tc,
			internal::TestFactoryBase* factory);



		TestInfo(const std::string& test_suite_name, const std::string& name,
			const char* a_type_param,
			const char* a_value_param,
			internal::CodeLocation a_code_location,
			internal::TypeId fixture_class_id,
			internal::TestFactoryBase* factory);



		int increment_death_test_count() {
			return result_.increment_death_test_count();
		}



		void Run();

		static void ClearTestResult(TestInfo* test_info) {
			test_info->result_.Clear();
		}


		const std::string test_suite_name_;
		const std::string name_;


		const std::unique_ptr<const ::std::string> type_param_;


		const std::unique_ptr<const ::std::string> value_param_;
		internal::CodeLocation location_;
		const internal::TypeId fixture_class_id_;
		bool should_run_;
		bool is_disabled_;
		bool matches_filter_;

		bool is_in_another_shard_;
		internal::TestFactoryBase* const factory_;




		TestResult result_;

		TestInfo(TestInfo const&) = delete; void operator=(TestInfo const&) = delete;
	};




	class  TestSuite {
	public:












		TestSuite(const char* name, const char* a_type_param,
			internal::SetUpTestSuiteFunc set_up_tc,
			internal::TearDownTestSuiteFunc tear_down_tc);


		virtual ~TestSuite();


		const char* name() const { return name_.c_str(); }



		const char* type_param() const {
			if (type_param_.get() != nullptr) return type_param_->c_str();
			return nullptr;
		}


		bool should_run() const { return should_run_; }


		int successful_test_count() const;


		int skipped_test_count() const;


		int failed_test_count() const;


		int reportable_disabled_test_count() const;


		int disabled_test_count() const;


		int reportable_test_count() const;


		int test_to_run_count() const;


		int total_test_count() const;


		bool Passed() const { return !Failed(); }


		bool Failed() const { return failed_test_count() > 0; }


		TimeInMillis elapsed_time() const { return elapsed_time_; }



		TimeInMillis start_timestamp() const { return start_timestamp_; }



		const TestInfo* GetTestInfo(int i) const;



		const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }

	private:
		friend class Test;
		friend class internal::UnitTestImpl;


		std::vector<TestInfo*>& test_info_list() { return test_info_list_; }


		const std::vector<TestInfo*>& test_info_list() const {
			return test_info_list_;
		}



		TestInfo* GetMutableTestInfo(int i);


		void set_should_run(bool should) { should_run_ = should; }



		void AddTestInfo(TestInfo* test_info);


		void ClearResult();


		static void ClearTestSuiteResult(TestSuite* test_suite) {
			test_suite->ClearResult();
		}


		void Run();



		void RunSetUpTestSuite() {
			if (set_up_tc_ != nullptr) {
				(*set_up_tc_)();
			}
		}



		void RunTearDownTestSuite() {
			if (tear_down_tc_ != nullptr) {
				(*tear_down_tc_)();
			}
		}


		static bool TestPassed(const TestInfo* test_info) {
			return test_info->should_run() && test_info->result()->Passed();
		}


		static bool TestSkipped(const TestInfo* test_info) {
			return test_info->should_run() && test_info->result()->Skipped();
		}


		static bool TestFailed(const TestInfo* test_info) {
			return test_info->should_run() && test_info->result()->Failed();
		}



		static bool TestReportableDisabled(const TestInfo* test_info) {
			return test_info->is_reportable() && test_info->is_disabled_;
		}


		static bool TestDisabled(const TestInfo* test_info) {
			return test_info->is_disabled_;
		}


		static bool TestReportable(const TestInfo* test_info) {
			return test_info->is_reportable();
		}


		static bool ShouldRunTest(const TestInfo* test_info) {
			return test_info->should_run();
		}


		void ShuffleTests(internal::Random* random);


		void UnshuffleTests();


		std::string name_;


		const std::unique_ptr<const ::std::string> type_param_;


		std::vector<TestInfo*> test_info_list_;



		std::vector<int> test_indices_;

		internal::SetUpTestSuiteFunc set_up_tc_;

		internal::TearDownTestSuiteFunc tear_down_tc_;

		bool should_run_;

		TimeInMillis start_timestamp_;

		TimeInMillis elapsed_time_;


		TestResult ad_hoc_test_result_;


		TestSuite(TestSuite const&) = delete; void operator=(TestSuite const&) = delete;
	};















	class Environment {
	public:

		virtual ~Environment() {}


		virtual void SetUp() {}


		virtual void TearDown() {}
	private:


		struct Setup_should_be_spelled_SetUp {};
		virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }
	};




	class  AssertionException
		: public internal::GoogleTestFailureException {
	public:
		explicit AssertionException(const TestPartResult& result)
			: GoogleTestFailureException(result) {}
	};

#line 1073 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



	class TestEventListener {
	public:
		virtual ~TestEventListener() {}


		virtual void OnTestProgramStart(const UnitTest& unit_test) = 0;




		virtual void OnTestIterationStart(const UnitTest& unit_test,
			int iteration) = 0;


		virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test) = 0;


		virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) = 0;


		virtual void OnTestSuiteStart(const TestSuite&) {}



		virtual void OnTestCaseStart(const TestCase&) {}
#line 1102 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		virtual void OnTestStart(const TestInfo & test_info) = 0;




		virtual void OnTestPartResult(const TestPartResult& test_part_result) = 0;


		virtual void OnTestEnd(const TestInfo& test_info) = 0;


		virtual void OnTestSuiteEnd(const TestSuite&) {}



		virtual void OnTestCaseEnd(const TestCase&) {}
#line 1121 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		virtual void OnEnvironmentsTearDownStart(const UnitTest & unit_test) = 0;


		virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) = 0;


		virtual void OnTestIterationEnd(const UnitTest& unit_test,
			int iteration) = 0;


		virtual void OnTestProgramEnd(const UnitTest& unit_test) = 0;
	};






	class EmptyTestEventListener : public TestEventListener {
	public:
		void OnTestProgramStart(const UnitTest&) override {}
		void OnTestIterationStart(const UnitTest&,
			int) override {}
		void OnEnvironmentsSetUpStart(const UnitTest&) override {}
		void OnEnvironmentsSetUpEnd(const UnitTest&) override {}
		void OnTestSuiteStart(const TestSuite&) override {}


		void OnTestCaseStart(const TestCase&) override {}
#line 1153 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

		void OnTestStart(const TestInfo&) override {}
		void OnTestPartResult(const TestPartResult&) override {}
		void OnTestEnd(const TestInfo&) override {}
		void OnTestSuiteEnd(const TestSuite&) override {}

		void OnTestCaseEnd(const TestCase&) override {}
#line 1161 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

		void OnEnvironmentsTearDownStart(const UnitTest&) override {}
		void OnEnvironmentsTearDownEnd(const UnitTest&) override {}
		void OnTestIterationEnd(const UnitTest&,
			int) override {}
		void OnTestProgramEnd(const UnitTest&) override {}
	};


	class  TestEventListeners {
	public:
		TestEventListeners();
		~TestEventListeners();




		void Append(TestEventListener* listener);




		TestEventListener* Release(TestEventListener* listener);






		TestEventListener* default_result_printer() const {
			return default_result_printer_;
		}








		TestEventListener* default_xml_generator() const {
			return default_xml_generator_;
		}

	private:
		friend class TestSuite;
		friend class TestInfo;
		friend class internal::DefaultGlobalTestPartResultReporter;
		friend class internal::NoExecDeathTest;
		friend class internal::TestEventListenersAccessor;
		friend class internal::UnitTestImpl;



		TestEventListener* repeater();






		void SetDefaultResultPrinter(TestEventListener* listener);






		void SetDefaultXmlGenerator(TestEventListener* listener);



		bool EventForwardingEnabled() const;
		void SuppressEventForwarding();


		internal::TestEventRepeater* repeater_;

		TestEventListener* default_result_printer_;

		TestEventListener* default_xml_generator_;


		TestEventListeners(TestEventListeners const&) = delete; void operator=(TestEventListeners const&) = delete;
	};











	class  UnitTest {
	public:



		static UnitTest* GetInstance();







		int Run();



		const char* original_working_dir() const;



		const TestSuite* current_test_suite() const;



		const TestCase* current_test_case() const;
#line 1284 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



		const TestInfo * current_test_info() const
			;


		int random_seed() const;





		internal::ParameterizedTestSuiteRegistry& parameterized_test_registry()
			;


		int successful_test_suite_count() const;


		int failed_test_suite_count() const;


		int total_test_suite_count() const;



		int test_suite_to_run_count() const;



		int successful_test_case_count() const;
		int failed_test_case_count() const;
		int total_test_case_count() const;
		int test_case_to_run_count() const;
#line 1320 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


		int successful_test_count() const;


		int skipped_test_count() const;


		int failed_test_count() const;


		int reportable_disabled_test_count() const;


		int disabled_test_count() const;


		int reportable_test_count() const;


		int total_test_count() const;


		int test_to_run_count() const;



		TimeInMillis start_timestamp() const;


		TimeInMillis elapsed_time() const;



		bool Passed() const;



		bool Failed() const;



		const TestSuite* GetTestSuite(int i) const;



		const TestCase* GetTestCase(int i) const;
#line 1368 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



		const TestResult & ad_hoc_test_result() const;



		TestEventListeners& listeners();

	private:









		Environment* AddEnvironment(Environment* env);





		void AddTestPartResult(TestPartResult::Type result_type,
			const char* file_name,
			int line_number,
			const std::string& message,
			const std::string& os_stack_trace)
			;






		void RecordProperty(const std::string& key, const std::string& value);



		TestSuite* GetMutableTestSuite(int i);


		internal::UnitTestImpl* impl() { return impl_; }
		const internal::UnitTestImpl* impl() const { return impl_; }



		friend class ScopedTrace;
		friend class Test;
		friend class internal::AssertHelper;
		friend class internal::StreamingListenerTest;
		friend class internal::UnitTestRecordPropertyTestHelper;
		friend Environment* AddGlobalTestEnvironment(Environment* env);
		friend internal::UnitTestImpl* internal::GetUnitTestImpl();
		friend void internal::ReportFailureInUnknownLocation(
			TestPartResult::Type result_type,
			const std::string& message);


		UnitTest();


		virtual ~UnitTest();



		void PushGTestTrace(const internal::TraceInfo& trace)
			;


		void PopGTestTrace()
			;



		mutable internal::Mutex mutex_;





		internal::UnitTestImpl* impl_;


		UnitTest(UnitTest const&) = delete; void operator=(UnitTest const&) = delete;
	};



















	inline Environment* AddGlobalTestEnvironment(Environment* env) {
		return UnitTest::GetInstance()->AddEnvironment(env);
	}










	void InitGoogleTest(int* argc, char** argv);



	void InitGoogleTest(int* argc, wchar_t** argv);



	void InitGoogleTest();

	namespace internal {




		template <typename T1, typename T2>
		AssertionResult CmpHelperEQFailure(const char* lhs_expression,
			const char* rhs_expression,
			const T1& lhs, const T2& rhs) {
			return EqFailure(lhs_expression,
				rhs_expression,
				FormatForComparisonFailureMessage(lhs, rhs),
				FormatForComparisonFailureMessage(rhs, lhs),
				false);
		}




		struct faketype {};
		inline bool operator==(faketype, faketype) { return true; }
		inline bool operator!=(faketype, faketype) { return false; }


		template <typename T1, typename T2>
		AssertionResult CmpHelperEQ(const char* lhs_expression,
			const char* rhs_expression,
			const T1& lhs,
			const T2& rhs) {
			if (lhs == rhs) {
				return AssertionSuccess();
			}

			return CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs);
		}




		AssertionResult CmpHelperEQ(const char* lhs_expression,
			const char* rhs_expression,
			BiggestInt lhs,
			BiggestInt rhs);

		class EqHelper {
		public:

			template <
				typename T1, typename T2,


				typename std::enable_if<!std::is_integral<T1>::value ||
				!std::is_pointer<T2>::value>::type * = nullptr>
				static AssertionResult Compare(const char* lhs_expression,
					const char* rhs_expression, const T1 & lhs,
					const T2 & rhs) {
				return CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);
			}







			static AssertionResult Compare(const char* lhs_expression,
				const char* rhs_expression,
				BiggestInt lhs,
				BiggestInt rhs) {
				return CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);
			}

			template <typename T>
			static AssertionResult Compare(
				const char* lhs_expression, const char* rhs_expression,

				std::nullptr_t, T* rhs) {

				return CmpHelperEQ(lhs_expression, rhs_expression, static_cast<T*>(nullptr),
					rhs);
			}
		};




		template <typename T1, typename T2>
		AssertionResult CmpHelperOpFailure(const char* expr1, const char* expr2,
			const T1& val1, const T2& val2,
			const char* op) {
			return AssertionFailure()
				<< "Expected: (" << expr1 << ") " << op << " (" << expr2
				<< "), actual: " << FormatForComparisonFailureMessage(val1, val2)
				<< " vs " << FormatForComparisonFailureMessage(val2, val1);
		}




























		template <typename T1, typename T2>AssertionResult CmpHelperNE(const char* expr1, const char* expr2, const T1& val1, const T2& val2) { if (val1 != val2) { return AssertionSuccess(); } else { return CmpHelperOpFailure(expr1, expr2, val1, val2, "!="); } } AssertionResult CmpHelperNE(const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2);

		template <typename T1, typename T2>AssertionResult CmpHelperLE(const char* expr1, const char* expr2, const T1& val1, const T2& val2) { if (val1 <= val2) { return AssertionSuccess(); } else { return CmpHelperOpFailure(expr1, expr2, val1, val2, "<="); } } AssertionResult CmpHelperLE(const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2);

		template <typename T1, typename T2>AssertionResult CmpHelperLT(const char* expr1, const char* expr2, const T1& val1, const T2& val2) { if (val1 < val2) { return AssertionSuccess(); } else { return CmpHelperOpFailure(expr1, expr2, val1, val2, "<"); } } AssertionResult CmpHelperLT(const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2);

		template <typename T1, typename T2>AssertionResult CmpHelperGE(const char* expr1, const char* expr2, const T1& val1, const T2& val2) { if (val1 >= val2) { return AssertionSuccess(); } else { return CmpHelperOpFailure(expr1, expr2, val1, val2, ">="); } } AssertionResult CmpHelperGE(const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2);

		template <typename T1, typename T2>AssertionResult CmpHelperGT(const char* expr1, const char* expr2, const T1& val1, const T2& val2) { if (val1 > val2) { return AssertionSuccess(); } else { return CmpHelperOpFailure(expr1, expr2, val1, val2, ">"); } } AssertionResult CmpHelperGT(const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2);






		AssertionResult CmpHelperSTREQ(const char* s1_expression,
			const char* s2_expression,
			const char* s1,
			const char* s2);




		AssertionResult CmpHelperSTRCASEEQ(const char* s1_expression,
			const char* s2_expression,
			const char* s1,
			const char* s2);




		AssertionResult CmpHelperSTRNE(const char* s1_expression,
			const char* s2_expression,
			const char* s1,
			const char* s2);




		AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
			const char* s2_expression,
			const char* s1,
			const char* s2);





		AssertionResult CmpHelperSTREQ(const char* s1_expression,
			const char* s2_expression,
			const wchar_t* s1,
			const wchar_t* s2);




		AssertionResult CmpHelperSTRNE(const char* s1_expression,
			const char* s2_expression,
			const wchar_t* s1,
			const wchar_t* s2);

	}









	AssertionResult IsSubstring(
		const char* needle_expr, const char* haystack_expr,
		const char* needle, const char* haystack);
	AssertionResult IsSubstring(
		const char* needle_expr, const char* haystack_expr,
		const wchar_t* needle, const wchar_t* haystack);
	AssertionResult IsNotSubstring(
		const char* needle_expr, const char* haystack_expr,
		const char* needle, const char* haystack);
	AssertionResult IsNotSubstring(
		const char* needle_expr, const char* haystack_expr,
		const wchar_t* needle, const wchar_t* haystack);
	AssertionResult IsSubstring(
		const char* needle_expr, const char* haystack_expr,
		const ::std::string& needle, const ::std::string& haystack);
	AssertionResult IsNotSubstring(
		const char* needle_expr, const char* haystack_expr,
		const ::std::string& needle, const ::std::string& haystack);


	AssertionResult IsSubstring(
		const char* needle_expr, const char* haystack_expr,
		const ::std::wstring& needle, const ::std::wstring& haystack);
	AssertionResult IsNotSubstring(
		const char* needle_expr, const char* haystack_expr,
		const ::std::wstring& needle, const ::std::wstring& haystack);
#line 1719 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"

	namespace internal {








		template <typename RawType>
		AssertionResult CmpHelperFloatingPointEQ(const char* lhs_expression,
			const char* rhs_expression,
			RawType lhs_value,
			RawType rhs_value) {
			const FloatingPoint<RawType> lhs(lhs_value), rhs(rhs_value);

			if (lhs.AlmostEquals(rhs)) {
				return AssertionSuccess();
			}

			::std::stringstream lhs_ss;
			lhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
				<< lhs_value;

			::std::stringstream rhs_ss;
			rhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
				<< rhs_value;

			return EqFailure(lhs_expression,
				rhs_expression,
				StringStreamToString(&lhs_ss),
				StringStreamToString(&rhs_ss),
				false);
		}




		AssertionResult DoubleNearPredFormat(const char* expr1,
			const char* expr2,
			const char* abs_error_expr,
			double val1,
			double val2,
			double abs_error);



		class  AssertHelper {
		public:

			AssertHelper(TestPartResult::Type type,
				const char* file,
				int line,
				const char* message);
			~AssertHelper();



			void operator=(const Message& message) const;

		private:




			struct AssertHelperData {
				AssertHelperData(TestPartResult::Type t,
					const char* srcfile,
					int line_num,
					const char* msg)
					: type(t), file(srcfile), line(line_num), message(msg) { }

				TestPartResult::Type const type;
				const char* const file;
				int const line;
				std::string const message;

			private:
				AssertHelperData(AssertHelperData const&) = delete; void operator=(AssertHelperData const&) = delete;
			};

			AssertHelperData* const data_;

			AssertHelper(AssertHelper const&) = delete; void operator=(AssertHelper const&) = delete;
		};

		enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };

		void ColoredPrintf(GTestColor color,
			const char* fmt,
			...);

	}



































	template <typename T>
	class WithParamInterface {
	public:
		typedef T ParamType;
		virtual ~WithParamInterface() {}



		static const ParamType& GetParam() {
  switch (0) case 0: default: if (::testing::internal::IsTrue(parameter_ != nullptr)); else ::testing::internal::GTestLog(::testing::internal::GTEST_FATAL, "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h", 1857).GetStream() << "Condition " "parameter_ != nullptr" " failed. "
	  << "GetParam() can only be called inside a value-parameterized test "
	  << "-- did you intend to write TEST_P instead of TEST_F?";
  return *parameter_;
		}

	private:


		static void SetParam(const ParamType* parameter) {
			parameter_ = parameter;
		}


		static const ParamType* parameter_;


		template <class TestClass> friend class internal::ParameterizedTestFactory;
	};

	template <typename T>
	const T* WithParamInterface<T>::parameter_ = nullptr;




	template <typename T>
	class TestWithParam : public Test, public WithParamInterface<T> {
	};














































#line 1933 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"








#line 1942 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"




















































































































#line 2059 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



#line 2063 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



#line 2067 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



#line 2071 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



#line 2075 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"



#line 2079 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
















































































	AssertionResult FloatLE(const char* expr1, const char* expr2,
		float val1, float val2);
	AssertionResult DoubleLE(const char* expr1, const char* expr2,
		double val1, double val2);

























#line 2189 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


























	class  ScopedTrace {
	public:





		template <typename T>
		ScopedTrace(const char* file, int line, const T& message) {
			PushTrace(file, line, (Message() << message).GetString());
		}


		ScopedTrace(const char* file, int line, const char* message) {
			PushTrace(file, line, message ? message : "(null)");
		}

		ScopedTrace(const char* file, int line, const std::string& message) {
			PushTrace(file, line, message);
		}





		~ScopedTrace();

	private:
		void PushTrace(const char* file, int line, std::string message);

		ScopedTrace(ScopedTrace const&) = delete; void operator=(ScopedTrace const&) = delete;
	};




















































	template <typename T1, typename T2>
	constexpr bool StaticAssertTypeEq() noexcept {
		static_assert(std::is_same<T1, T2>::value,
			"type1 and type2 are not the same type");
		return true;
	}


































#line 2340 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


































	std::string TempDir();


#pragma warning(pop)
#line 2379 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"


























































	template <int& ... ExplicitParameterBarrier, typename Factory>
	TestInfo* RegisterTest(const char* test_suite_name, const char* test_name,
		const char* type_param, const char* value_param,
		const char* file, int line, Factory factory) {
		using TestT = typename std::remove_pointer<decltype(factory())>::type;

		class FactoryImpl : public internal::TestFactoryBase {
		public:
			explicit FactoryImpl(Factory f) : factory_(std::move(f)) {}
			Test* CreateTest() override { return factory_(); }

		private:
			Factory factory_;
		};

		return internal::MakeAndRegisterTestInfo(
			test_suite_name, test_name, type_param, value_param,
			internal::CodeLocation(file, line), internal::GetTypeId<TestT>(),
			internal::SuiteApiResolver<TestT>::GetSetUpCaseOrSuite(file, line),
			internal::SuiteApiResolver<TestT>::GetTearDownCaseOrSuite(file, line),
			new FactoryImpl{ std::move(factory) });
	}

}









int RUN_ALL_TESTS();

inline int RUN_ALL_TESTS() {
	return ::testing::UnitTest::GetInstance()->Run();
}

__pragma(warning(pop))

#line 2479 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\googletest\\googletest\\include\\gtest\\gtest.h"
#line 3 "C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp"

class AAA_BBB_Test : public ::testing::Test {
public:
	AAA_BBB_Test() {
	}
private:
	virtual void TestBody();
	static ::testing::TestInfo* const test_info_;
	AAA_BBB_Test(AAA_BBB_Test const&) = delete;
	void operator=(AAA_BBB_Test const&) = delete;
};
::testing::TestInfo* const AAA_BBB_Test::test_info_ =
::testing::internal::MakeAndRegisterTestInfo("AAA",
	"BBB",
	nullptr,
	nullptr,
	::testing::internal::CodeLocation("C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp", 4),
	(::testing::internal::GetTestTypeId()),
	::testing::internal::SuiteApiResolver< ::testing::Test>::GetSetUpCaseOrSuite("C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp", 4),
	::testing::internal::SuiteApiResolver< ::testing::Test>::GetTearDownCaseOrSuite("C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp", 4),
	new ::testing::internal::TestFactoryImpl<AAA_BBB_Test>);

void AAA_BBB_Test::TestBody()
{
	switch (0) case 0: default:
		if (const ::testing::AssertionResult gtest_ar_ =
			::testing::AssertionResult(true))
			;
		else
			::testing::internal::AssertHelper(
				::testing::TestPartResult::kNonFatalFailure,
				"C:\\Cygwin\\home\\jizFewk\\gitdev\\gmtest\\testproj\\basictest.cpp",
				6,
				::testing::internal::GetBoolAssertionFailureMessage(
					gtest_ar_,
					"true",
					"false",
					"true")
				.c_str()) = ::testing::Message();
}
